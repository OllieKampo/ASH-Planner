[18-04-2022_12-43-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 21})
Fluent({'L': 3, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 21})
Fluent({'L': 3, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 21})
Fluent({'L': 3, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 21})
Fluent({'L': 3, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 21})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 21})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 21})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 21})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 21})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 21})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 21})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 21})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 21})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 21})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 21})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 21})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 21})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 21})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 21})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 21})
Fluent({'L': 4, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 21})
Fluent({'L': 4, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 4, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 4, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 4, 'F': 'in((block,4))', 'V': 'store_room', 'S': 21})
Fluent({'L': 4, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 4, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 4, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 4, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 4, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 4, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 21})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 21})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 21})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 21})
Fluent({'L': 4, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 21})
Fluent({'L': 4, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 21})
Fluent({'L': 4, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 21})
Fluent({'L': 4, 'F': 'on((block,4))', 'V': 'nothing', 'S': 21})
Fluent({'L': 4, 'F': 'on((block,5))', 'V': 'nothing', 'S': 21})
Fluent({'L': 4, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 21})
Fluent({'L': 4, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 21})
Fluent({'L': 4, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 21})
Fluent({'L': 4, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 21})
Fluent({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 21})
Fluent({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 21})

[18-04-2022_12-43-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state:

holds(3, complete_tower(blue,puzzle_room_table), false, 21).
holds(3, complete_tower(red,puzzle_room_table), false, 21).
holds(3, configuration(manipulator_arm_1), extended, 21).
holds(3, configuration(manipulator_arm_2), retracted, 21).
holds(3, configuration(puzzle_room_door), open, 21).
holds(3, configuration(starting_room_door), closed, 21).
holds(3, configuration(store_room_door), open, 21).
holds(3, grasping(manipulator_arm_1), nothing, 21).
holds(3, grasping(manipulator_arm_2), (block,5), 21).
holds(3, in((block,1)), puzzle_room, 21).
holds(3, in((block,2)), puzzle_room, 21).
holds(3, in((block,3)), puzzle_room, 21).
holds(3, in((block,4)), store_room, 21).
holds(3, in((block,5)), puzzle_room, 21).
holds(3, in((block,6)), puzzle_room, 21).
holds(3, in(manipulator_arm_1), puzzle_room, 21).
holds(3, in(manipulator_arm_2), puzzle_room, 21).
holds(3, in(puzzle_room_table), puzzle_room, 21).
holds(3, in(talos), puzzle_room, 21).
holds(3, in_tower((block,1),(block,1)), true, 21).
holds(3, in_tower((block,1),(block,2)), false, 21).
holds(3, in_tower((block,1),(block,3)), true, 21).
holds(3, in_tower((block,1),(block,4)), false, 21).
holds(3, in_tower((block,1),(block,5)), false, 21).
holds(3, in_tower((block,1),(block,6)), false, 21).
holds(3, in_tower((block,2),(block,1)), false, 21).
holds(3, in_tower((block,2),(block,2)), true, 21).
holds(3, in_tower((block,2),(block,3)), false, 21).
holds(3, in_tower((block,2),(block,4)), false, 21).
holds(3, in_tower((block,2),(block,5)), false, 21).
holds(3, in_tower((block,2),(block,6)), false, 21).
holds(3, in_tower((block,3),(block,1)), false, 21).
holds(3, in_tower((block,3),(block,2)), false, 21).
holds(3, in_tower((block,3),(block,3)), false, 21).
holds(3, in_tower((block,3),(block,4)), false, 21).
holds(3, in_tower((block,3),(block,5)), false, 21).
holds(3, in_tower((block,3),(block,6)), false, 21).
holds(3, in_tower((block,4),(block,1)), false, 21).
holds(3, in_tower((block,4),(block,2)), false, 21).
holds(3, in_tower((block,4),(block,3)), false, 21).
holds(3, in_tower((block,4),(block,4)), false, 21).
holds(3, in_tower((block,4),(block,5)), false, 21).
holds(3, in_tower((block,4),(block,6)), false, 21).
holds(3, in_tower((block,5),(block,1)), false, 21).
holds(3, in_tower((block,5),(block,2)), false, 21).
holds(3, in_tower((block,5),(block,3)), false, 21).
holds(3, in_tower((block,5),(block,4)), false, 21).
holds(3, in_tower((block,5),(block,5)), false, 21).
holds(3, in_tower((block,5),(block,6)), false, 21).
holds(3, in_tower((block,6),(block,1)), false, 21).
holds(3, in_tower((block,6),(block,2)), false, 21).
holds(3, in_tower((block,6),(block,3)), false, 21).
holds(3, in_tower((block,6),(block,4)), false, 21).
holds(3, in_tower((block,6),(block,5)), false, 21).
holds(3, in_tower((block,6),(block,6)), true, 21).
holds(3, on((block,1)), puzzle_room_table, 21).
holds(3, on((block,2)), puzzle_room_table, 21).
holds(3, on((block,3)), (block,1), 21).
holds(3, on((block,4)), nothing, 21).
holds(3, on((block,5)), nothing, 21).
holds(3, on((block,6)), puzzle_room_table, 21).
holds(3, tower_base((block,1),puzzle_room_table), true, 21).
holds(3, tower_base((block,2),puzzle_room_table), true, 21).
holds(3, tower_base((block,3),puzzle_room_table), false, 21).
holds(3, tower_base((block,4),puzzle_room_table), false, 21).
holds(3, tower_base((block,5),puzzle_room_table), false, 21).
holds(3, tower_base((block,6),puzzle_room_table), true, 21).
holds(3, unordered_tower((block,1),puzzle_room_table), true, 21).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 21).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 21).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 21).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 21).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 21).
holds(4, complete_tower(blue,puzzle_room_table), false, 21).
holds(4, complete_tower(red,puzzle_room_table), false, 21).
holds(4, grasping(manipulator_arm_1), nothing, 21).
holds(4, grasping(manipulator_arm_2), (block,5), 21).
holds(4, in((block,1)), puzzle_room, 21).
holds(4, in((block,2)), puzzle_room, 21).
holds(4, in((block,3)), puzzle_room, 21).
holds(4, in((block,4)), store_room, 21).
holds(4, in((block,5)), puzzle_room, 21).
holds(4, in((block,6)), puzzle_room, 21).
holds(4, in(manipulator_arm_1), puzzle_room, 21).
holds(4, in(manipulator_arm_2), puzzle_room, 21).
holds(4, in(puzzle_room_table), puzzle_room, 21).
holds(4, in(talos), puzzle_room, 21).
holds(4, in_tower((block,1),(block,1)), true, 21).
holds(4, in_tower((block,1),(block,2)), false, 21).
holds(4, in_tower((block,1),(block,3)), true, 21).
holds(4, in_tower((block,1),(block,4)), false, 21).
holds(4, in_tower((block,1),(block,5)), false, 21).
holds(4, in_tower((block,1),(block,6)), false, 21).
holds(4, in_tower((block,2),(block,1)), false, 21).
holds(4, in_tower((block,2),(block,2)), true, 21).
holds(4, in_tower((block,2),(block,3)), false, 21).
holds(4, in_tower((block,2),(block,4)), false, 21).
holds(4, in_tower((block,2),(block,5)), false, 21).
holds(4, in_tower((block,2),(block,6)), false, 21).
holds(4, in_tower((block,3),(block,1)), false, 21).
holds(4, in_tower((block,3),(block,2)), false, 21).
holds(4, in_tower((block,3),(block,3)), false, 21).
holds(4, in_tower((block,3),(block,4)), false, 21).
holds(4, in_tower((block,3),(block,5)), false, 21).
holds(4, in_tower((block,3),(block,6)), false, 21).
holds(4, in_tower((block,4),(block,1)), false, 21).
holds(4, in_tower((block,4),(block,2)), false, 21).
holds(4, in_tower((block,4),(block,3)), false, 21).
holds(4, in_tower((block,4),(block,4)), false, 21).
holds(4, in_tower((block,4),(block,5)), false, 21).
holds(4, in_tower((block,4),(block,6)), false, 21).
holds(4, in_tower((block,5),(block,1)), false, 21).
holds(4, in_tower((block,5),(block,2)), false, 21).
holds(4, in_tower((block,5),(block,3)), false, 21).
holds(4, in_tower((block,5),(block,4)), false, 21).
holds(4, in_tower((block,5),(block,5)), false, 21).
holds(4, in_tower((block,5),(block,6)), false, 21).
holds(4, in_tower((block,6),(block,1)), false, 21).
holds(4, in_tower((block,6),(block,2)), false, 21).
holds(4, in_tower((block,6),(block,3)), false, 21).
holds(4, in_tower((block,6),(block,4)), false, 21).
holds(4, in_tower((block,6),(block,5)), false, 21).
holds(4, in_tower((block,6),(block,6)), true, 21).
holds(4, on((block,1)), puzzle_room_table, 21).
holds(4, on((block,2)), puzzle_room_table, 21).
holds(4, on((block,3)), (block,1), 21).
holds(4, on((block,4)), nothing, 21).
holds(4, on((block,5)), nothing, 21).
holds(4, on((block,6)), puzzle_room_table, 21).
holds(4, tower_base((block,1),puzzle_room_table), true, 21).
holds(4, tower_base((block,2),puzzle_room_table), true, 21).
holds(4, tower_base((block,3),puzzle_room_table), false, 21).
holds(4, tower_base((block,4),puzzle_room_table), false, 21).
holds(4, tower_base((block,5),puzzle_room_table), false, 21).
holds(4, tower_base((block,6),puzzle_room_table), true, 21).
holds(4, unordered_tower((block,1),puzzle_room_table), true, 21).
holds(4, unordered_tower((block,2),puzzle_room_table), false, 21).
holds(4, unordered_tower((block,3),puzzle_room_table), false, 21).
holds(4, unordered_tower((block,4),puzzle_room_table), false, 21).
holds(4, unordered_tower((block,5),puzzle_room_table), false, 21).
holds(4, unordered_tower((block,6),puzzle_room_table), false, 21).

[18-04-2022_12-43-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[18-04-2022_12-43-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 284 rules into program part ash_goal_state:

final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(4, complete_tower(blue,puzzle_room_table), false, false).
final_goal(4, complete_tower(blue,puzzle_room_table), true, true).
final_goal(4, complete_tower(red,puzzle_room_table), false, false).
final_goal(4, complete_tower(red,puzzle_room_table), true, true).
final_goal(4, in_tower((block,1),(block,1)), false, true).
final_goal(4, in_tower((block,1),(block,1)), true, false).
final_goal(4, in_tower((block,1),(block,2)), false, true).
final_goal(4, in_tower((block,1),(block,2)), true, false).
final_goal(4, in_tower((block,1),(block,3)), false, true).
final_goal(4, in_tower((block,1),(block,3)), true, false).
final_goal(4, in_tower((block,1),(block,4)), false, true).
final_goal(4, in_tower((block,1),(block,4)), true, false).
final_goal(4, in_tower((block,1),(block,5)), false, true).
final_goal(4, in_tower((block,1),(block,5)), true, false).
final_goal(4, in_tower((block,1),(block,6)), false, true).
final_goal(4, in_tower((block,1),(block,6)), true, false).
final_goal(4, in_tower((block,2),(block,1)), false, true).
final_goal(4, in_tower((block,2),(block,1)), true, false).
final_goal(4, in_tower((block,2),(block,2)), false, true).
final_goal(4, in_tower((block,2),(block,2)), true, false).
final_goal(4, in_tower((block,2),(block,3)), false, true).
final_goal(4, in_tower((block,2),(block,3)), true, false).
final_goal(4, in_tower((block,2),(block,4)), false, true).
final_goal(4, in_tower((block,2),(block,4)), true, false).
final_goal(4, in_tower((block,2),(block,5)), false, true).
final_goal(4, in_tower((block,2),(block,5)), true, false).
final_goal(4, in_tower((block,2),(block,6)), false, true).
final_goal(4, in_tower((block,2),(block,6)), true, false).
final_goal(4, in_tower((block,3),(block,1)), false, false).
final_goal(4, in_tower((block,3),(block,1)), true, true).
final_goal(4, in_tower((block,3),(block,2)), false, false).
final_goal(4, in_tower((block,3),(block,2)), true, true).
final_goal(4, in_tower((block,3),(block,3)), false, false).
final_goal(4, in_tower((block,3),(block,3)), true, true).
final_goal(4, in_tower((block,3),(block,4)), false, true).
final_goal(4, in_tower((block,3),(block,4)), true, false).
final_goal(4, in_tower((block,3),(block,5)), false, true).
final_goal(4, in_tower((block,3),(block,5)), true, false).
final_goal(4, in_tower((block,3),(block,6)), false, true).
final_goal(4, in_tower((block,3),(block,6)), true, false).
final_goal(4, in_tower((block,4),(block,1)), false, true).
final_goal(4, in_tower((block,4),(block,1)), true, false).
final_goal(4, in_tower((block,4),(block,2)), false, true).
final_goal(4, in_tower((block,4),(block,2)), true, false).
final_goal(4, in_tower((block,4),(block,3)), false, true).
final_goal(4, in_tower((block,4),(block,3)), true, false).
final_goal(4, in_tower((block,4),(block,4)), false, true).
final_goal(4, in_tower((block,4),(block,4)), true, false).
final_goal(4, in_tower((block,4),(block,5)), false, true).
final_goal(4, in_tower((block,4),(block,5)), true, false).
final_goal(4, in_tower((block,4),(block,6)), false, true).
final_goal(4, in_tower((block,4),(block,6)), true, false).
final_goal(4, in_tower((block,5),(block,1)), false, true).
final_goal(4, in_tower((block,5),(block,1)), true, false).
final_goal(4, in_tower((block,5),(block,2)), false, true).
final_goal(4, in_tower((block,5),(block,2)), true, false).
final_goal(4, in_tower((block,5),(block,3)), false, true).
final_goal(4, in_tower((block,5),(block,3)), true, false).
final_goal(4, in_tower((block,5),(block,4)), false, true).
final_goal(4, in_tower((block,5),(block,4)), true, false).
final_goal(4, in_tower((block,5),(block,5)), false, true).
final_goal(4, in_tower((block,5),(block,5)), true, false).
final_goal(4, in_tower((block,5),(block,6)), false, true).
final_goal(4, in_tower((block,5),(block,6)), true, false).
final_goal(4, in_tower((block,6),(block,1)), false, true).
final_goal(4, in_tower((block,6),(block,1)), true, false).
final_goal(4, in_tower((block,6),(block,2)), false, true).
final_goal(4, in_tower((block,6),(block,2)), true, false).
final_goal(4, in_tower((block,6),(block,3)), false, true).
final_goal(4, in_tower((block,6),(block,3)), true, false).
final_goal(4, in_tower((block,6),(block,4)), false, false).
final_goal(4, in_tower((block,6),(block,4)), true, true).
final_goal(4, in_tower((block,6),(block,5)), false, false).
final_goal(4, in_tower((block,6),(block,5)), true, true).
final_goal(4, in_tower((block,6),(block,6)), false, false).
final_goal(4, in_tower((block,6),(block,6)), true, true).
final_goal(4, on((block,1)), (block,2), true).
final_goal(4, on((block,1)), (block,3), false).
final_goal(4, on((block,1)), (block,4), false).
final_goal(4, on((block,1)), (block,5), false).
final_goal(4, on((block,1)), (block,6), false).
final_goal(4, on((block,1)), nothing, false).
final_goal(4, on((block,1)), puzzle_room_table, false).
final_goal(4, on((block,2)), (block,1), false).
final_goal(4, on((block,2)), (block,3), true).
final_goal(4, on((block,2)), (block,4), false).
final_goal(4, on((block,2)), (block,5), false).
final_goal(4, on((block,2)), (block,6), false).
final_goal(4, on((block,2)), nothing, false).
final_goal(4, on((block,2)), puzzle_room_table, false).
final_goal(4, on((block,3)), (block,1), false).
final_goal(4, on((block,3)), (block,2), false).
final_goal(4, on((block,3)), (block,4), false).
final_goal(4, on((block,3)), (block,5), false).
final_goal(4, on((block,3)), (block,6), false).
final_goal(4, on((block,3)), nothing, false).
final_goal(4, on((block,3)), puzzle_room_table, true).
final_goal(4, on((block,4)), (block,1), false).
final_goal(4, on((block,4)), (block,2), false).
final_goal(4, on((block,4)), (block,3), false).
final_goal(4, on((block,4)), (block,5), true).
final_goal(4, on((block,4)), (block,6), false).
final_goal(4, on((block,4)), nothing, false).
final_goal(4, on((block,4)), puzzle_room_table, false).
final_goal(4, on((block,5)), (block,1), false).
final_goal(4, on((block,5)), (block,2), false).
final_goal(4, on((block,5)), (block,3), false).
final_goal(4, on((block,5)), (block,4), false).
final_goal(4, on((block,5)), (block,6), true).
final_goal(4, on((block,5)), nothing, false).
final_goal(4, on((block,5)), puzzle_room_table, false).
final_goal(4, on((block,6)), (block,1), false).
final_goal(4, on((block,6)), (block,2), false).
final_goal(4, on((block,6)), (block,3), false).
final_goal(4, on((block,6)), (block,4), false).
final_goal(4, on((block,6)), (block,5), false).
final_goal(4, on((block,6)), nothing, false).
final_goal(4, on((block,6)), puzzle_room_table, true).
final_goal(4, tower_base((block,1),puzzle_room_table), false, true).
final_goal(4, tower_base((block,1),puzzle_room_table), true, false).
final_goal(4, tower_base((block,2),puzzle_room_table), false, true).
final_goal(4, tower_base((block,2),puzzle_room_table), true, false).
final_goal(4, tower_base((block,3),puzzle_room_table), false, false).
final_goal(4, tower_base((block,3),puzzle_room_table), true, true).
final_goal(4, tower_base((block,4),puzzle_room_table), false, true).
final_goal(4, tower_base((block,4),puzzle_room_table), true, false).
final_goal(4, tower_base((block,5),puzzle_room_table), false, true).
final_goal(4, tower_base((block,5),puzzle_room_table), true, false).
final_goal(4, tower_base((block,6),puzzle_room_table), false, false).
final_goal(4, tower_base((block,6),puzzle_room_table), true, true).
final_goal(4, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,6),puzzle_room_table), true, false).

[18-04-2022_12-43-25] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=27']

[18-04-2022_12-43-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 4, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'I': 7})
SubGoal({'L': 4, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 8})
SubGoal({'L': 4, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 9})
SubGoal({'L': 4, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'I': 10})
SubGoal({'L': 4, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 11})
SubGoal({'L': 4, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 12})
SubGoal({'L': 4, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 13})

[18-04-2022_12-43-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 7 rules into program part base:

sub_goal(4, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 7).
sub_goal(4, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 8).
sub_goal(4, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 9).
sub_goal(4, talos, grasp(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), (block,2), 10).
sub_goal(4, talos, put(manipulator_arm_1,(block,2),(block,3)), on((block,2)), (block,3), 11).
sub_goal(4, talos, release(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), nothing, 12).
sub_goal(4, talos, move(store_room), in(talos), store_room, 13).

[18-04-2022_12-43-25] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-43-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[18-04-2022_12-43-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=27']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A8A2F7C790>]
	incrementor = SolveIncrementor(step_start=21, step_increase=1, step_increase_initial=7, step_end_min=28, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1795.5741845999964, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(3, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 21), range_=None), IncPart(name='plan_module', args=('#inc', 21, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 21, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 21, 7, 13, 'sequential', 'false'), range_=None)]

[18-04-2022_12-43-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-43-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-43-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 801 rules

[18-04-2022_12-43-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.005027199999858567s

[18-04-2022_12-43-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(3, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[18-04-2022_12-43-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(3), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.151964s.

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.021057s with result Satisfiable.

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A8A3B122C0>

[18-04-2022_12-43-26] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 3)
	('start_step', 21)
	('last_sgoals', 13)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('first_sgoals', 7)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A8A3B122C0>)

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 21). %* None *%
#program plan_module(#inc, 21, false, false). %* None *%
#program optimisation_module(#inc, 21, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 21, 7, 13, sequential, false). %* None *%

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     20 : Current =     27
Incrementor step ends | Minimum  =     28 : Maximum =    300

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(27)]), ('state_module', [Number(21), Number(21)]), ('plan_module', [Number(21), Number(21), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(21), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(21), Number(7), Number(13), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(22), Number(21)]), ('plan_module', [Number(22), Number(21), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(21), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(21), Number(7), Number(13), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(23), Number(21)]), ('plan_module', [Number(23), Number(21), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(21), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('conformance_module', [Number(23), Number(21), Number(7), Number(13), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(24), Number(21)]), ('plan_module', [Number(24), Number(21), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(21), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(21), Number(7), Number(13), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(25), Number(21)]), ('plan_module', [Number(25), Number(21), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(21), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(21), Number(7), Number(13), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(26), Number(21)]), ('plan_module', [Number(26), Number(21), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(21), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(21), Number(7), Number(13), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(27), Number(21)]), ('plan_module', [Number(27), Number(21), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(21), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('conformance_module', [Number(27), Number(21), Number(7), Number(13), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.253313s.

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.061576s with result Unsatisfiable.

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.31488939999962895, Incremental time limit = None
Running cumulative time = 0.31488939999962895, Cumulative time limit = 1795.5741845999964
Used memory = (RSS = 2466.296875Mb, VMS = 2480.093750Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     27 : Current =     28
Incrementor step ends | Minimum  =     28 : Maximum =    300

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(28)]), ('state_module', [Number(28), Number(21)]), ('plan_module', [Number(28), Number(21), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(21), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('conformance_module', [Number(28), Number(21), Number(7), Number(13), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.076875s.

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013256s with result Unsatisfiable.

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.09013019999929384, Incremental time limit = None
Running cumulative time = 0.4050195999989228, Cumulative time limit = 1795.5741845999964
Used memory = (RSS = 2466.480469Mb, VMS = 2480.281250Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     28 : Current =     29
Incrementor step ends | Minimum  =     28 : Maximum =    300

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(29)]), ('state_module', [Number(29), Number(21)]), ('plan_module', [Number(29), Number(21), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(21), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(21), Number(7), Number(13), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.078247s.

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.016131s with result Unsatisfiable.

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.09437750000051892, Incremental time limit = None
Running cumulative time = 0.4993970999994417, Cumulative time limit = 1795.5741845999964
Used memory = (RSS = 2466.664062Mb, VMS = 2480.460938Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     29 : Current =     30
Incrementor step ends | Minimum  =     28 : Maximum =    300

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(30)]), ('state_module', [Number(30), Number(21)]), ('plan_module', [Number(30), Number(21), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(21), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(21), Number(7), Number(13), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.080216s.

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.034163s with result Satisfiable.

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11437870000008843, Incremental time limit = None
Running cumulative time = 0.6137757999995301, Cumulative time limit = 1795.5741845999964
Used memory = (RSS = 2471.433594Mb, VMS = 2487.035156Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.488650s, Solving = 0.125125s, Total = 0.613776s, Memory = (RSS = 2471.433594Mb, VMS = 2487.035156Mb), Step range = [21-30]), Calls = 4
Final Model :: Total atoms = 19594, Cost = (-2,), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.253313s, Solving = 0.061576s, Total = 0.314889s, Memory = (RSS = 2466.296875Mb, VMS = 2480.093750Mb), Step range = [21-27]
2 : Statistics :: Grounding = 0.076875s, Solving = 0.013256s, Total = 0.090130s, Memory = (RSS = 2466.480469Mb, VMS = 2480.281250Mb), Step range = [28-28]
3 : Statistics :: Grounding = 0.078247s, Solving = 0.016131s, Total = 0.094378s, Memory = (RSS = 2466.664062Mb, VMS = 2480.460938Mb), Step range = [29-29]
4 : Statistics :: Grounding = 0.080216s, Solving = 0.034163s, Total = 0.114379s, Memory = (RSS = 2471.433594Mb, VMS = 2487.035156Mb), Step range = [30-30]

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.613776s due to: Stop condition reached.

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[18-04-2022_12-43-27] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-43-27] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-43-27] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 13, Last requested goal index = 13, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[18-04-2022_12-43-27] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.488650s, Solving = 0.125125s, Total = 0.613776s, Memory = (RSS = 2471.433594Mb, VMS = 2487.035156Mb), Step range = [21-30]), Calls = 4
Model :: Total atoms = 19594, Cost = (-2,), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[18-04-2022_12-43-27] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
                  Steps = 9 :: Actions = 9                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_2,store_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,store_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_2,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 11:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 12:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,5))
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
Step 15:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 17:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 18:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 19:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 20:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 21:
    Current Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 22:
    Current Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
Step 23:
    Current Sub-goals:
        [Index = 8] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 8] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
Step 24:
    Current Sub-goals:
        [Index = 9] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 9] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,3))
Step 25:
    Current Sub-goals:
        [Index = 10] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 10] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,2))
Step 26:
    Current Sub-goals:
        [Index = 11] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 11] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_arm_1,(block,2),(block,3))
Step 27:
    Current Sub-goals:
        [Index = 12] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 12] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,2))
Step 28:
    Current Sub-goals:
        [Index = 13] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 29:
    Current Sub-goals:
        [Index = 13] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 30:
    Current Sub-goals:
        [Index = 13] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 13] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)

[18-04-2022_12-43-27] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=21, end_step=None

[18-04-2022_12-43-27] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for parts of the existing plan at the current level that have already been divided: start_step=21

[18-04-2022_12-43-27] DEBUG :: ASH Planner Main #1 >> Value of end step of abstract plan to divide adjusted for right blend of current problem: end_step=30

[18-04-2022_12-43-27] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=21

[18-04-2022_12-43-27] DEBUG :: ASH Planner Main #1 >> Preparing to invoke division strategy...

[18-04-2022_12-43-27] DEBUG :: ASH Planner Main #1 >> Online method OnlineMethod.GroundFirst chose to invoke the division strategy before a downwards level change:Current increment = 7, Current planning level is complete = False

[18-04-2022_12-43-27] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 30, chosen step range to extract = range(21, 31)

[18-04-2022_12-43-27] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 38, Total actions = 38, Produced sub-goal stages = 38, Produced sub-goal literals = 43
Level [1]: Length = 80, Total actions = 80, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-27] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 3 (par-ref), LE =   9, AC =   9, CF = 1.0, GT =   2.24s, ST =   0.73s, OT = 0.00s, TT =   2.96s, EF = (LE = 1.3, AC = 1.3), ED = (LE = 0.8, AC = 0.8), EB = (LE = 0.6, AC = 0.6)

[18-04-2022_12-43-27] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=3, plan_length=9, start_step=21, blend=Blend(left=0, right=0)

[18-04-2022_12-43-27] DEBUG :: core.Strategies >> Decided: number_small_problems=3, number_large_problems=0, small_group_size=3, large_group_size=4

[18-04-2022_12-43-27] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=24, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1), DivisionPoint(index=27, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[18-04-2022_12-43-27] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 3, Problem Range = [4-6], Size = 9, Sub-goal Stage Range = [22-30]
Division points [total=2] : [(Index = 24, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 27, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[18-04-2022_12-43-27] DEBUG :: ASH Planner Main #1 >> Monolevel problem 2 at level 3 solved.

[18-04-2022_12-43-27] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning problem 4 at level 2:
Total Templated Partial Problems = 3, Problem Range = [4-6], Size = 9, Sub-goal Stage Range = [22-30]
Division points [total=2] : [(Index = 24, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 27, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[18-04-2022_12-43-27] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [22-24]

[18-04-2022_12-43-27] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 38, chosen step range to extract = range(0, 39)

[18-04-2022_12-43-27] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 38, Total actions = 38, Produced sub-goal stages = 38, Produced sub-goal literals = 43
Level [1]: Length = 80, Total actions = 80, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-27] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 30, chosen step range to extract = range(0, 31)

[18-04-2022_12-43-27] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 38, Total actions = 38, Produced sub-goal stages = 38, Produced sub-goal literals = 43
Level [1]: Length = 80, Total actions = 80, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-27] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 20, chosen step range to extract = range(0, 21)

[18-04-2022_12-43-27] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 38, Total actions = 38, Produced sub-goal stages = 38, Produced sub-goal literals = 43
Level [1]: Length = 80, Total actions = 80, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-27] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [22-24], problem number = 4, increment number = 7

[18-04-2022_12-43-27] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 22)
	('last_sgoals', 24)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1790.1562952999975)
	('length_limit', 300)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[18-04-2022_12-43-27] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 2] partial conformance refinement (sequential) with sgoals range [22-24] : Concurrency disabled : Minimum search length bound enabled with value 40

[18-04-2022_12-43-27] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 22
last_sgoals = 24
start_step = 38
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 40

[18-04-2022_12-43-27] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[18-04-2022_12-43-27] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[18-04-2022_12-43-27] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[18-04-2022_12-43-27] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[18-04-2022_12-43-27] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-43-27] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 38 as problem start state.

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 38})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 38})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 38})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 38})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 38})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 38})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 38})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 38})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 38})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 38})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 38})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 38})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 38})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 38})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 38})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 38})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 38})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 38})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 38})
Fluent({'L': 2, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 38})
Fluent({'L': 2, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 38})
Fluent({'L': 2, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 38})
Fluent({'L': 2, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 38})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 38})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 38})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 38})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 38})
Fluent({'L': 2, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 38})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 38})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 38})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 38})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 38})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 38})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 38})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 38})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 38})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 38})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 38})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 38})
Fluent({'L': 3, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 38})
Fluent({'L': 3, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 38})
Fluent({'L': 3, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 38})
Fluent({'L': 3, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 38})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 38})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 38})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 38})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 38})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 38})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 38})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 38})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 38})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 38})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 38})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 38})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 38})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 38})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 38})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 38})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 38})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 38})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 38})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 38})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 38})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 38})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 38})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 38})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 38})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 38})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 38})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 38})

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 157 rules into program part ash_initial_state:

holds(2, complete_tower(blue,puzzle_room_table), false, 38).
holds(2, complete_tower(red,puzzle_room_table), false, 38).
holds(2, configuration(manipulator_end_1), aligned_with(nothing), 38).
holds(2, configuration(manipulator_end_2), aligned_with((block,5)), 38).
holds(2, configuration(manipulator_limb_1), extended, 38).
holds(2, configuration(manipulator_limb_2), retracted, 38).
holds(2, configuration(puzzle_room_door), open, 38).
holds(2, configuration(starting_room_door), closed, 38).
holds(2, configuration(store_room_door), open, 38).
holds(2, grasping(manipulator_arm_1), nothing, 38).
holds(2, grasping(manipulator_arm_2), (block,5), 38).
holds(2, grasping(manipulator_end_1), nothing, 38).
holds(2, grasping(manipulator_end_2), (block,5), 38).
holds(2, in((block,1)), (puzzle_room,1), 38).
holds(2, in((block,2)), (puzzle_room,1), 38).
holds(2, in((block,3)), (puzzle_room,1), 38).
holds(2, in((block,4)), (store_room,0), 38).
holds(2, in((block,5)), (puzzle_room,1), 38).
holds(2, in((block,6)), (puzzle_room,1), 38).
holds(2, in(manipulator_arm_1), (puzzle_room,1), 38).
holds(2, in(manipulator_arm_2), (puzzle_room,1), 38).
holds(2, in(manipulator_end_1), (puzzle_room,1), 38).
holds(2, in(manipulator_end_2), (puzzle_room,1), 38).
holds(2, in(manipulator_limb_1), (puzzle_room,1), 38).
holds(2, in(manipulator_limb_2), (puzzle_room,1), 38).
holds(2, in(puzzle_room_table), (puzzle_room,1), 38).
holds(2, in(puzzle_room_table_left), (puzzle_room,1), 38).
holds(2, in(puzzle_room_table_middle), (puzzle_room,1), 38).
holds(2, in(puzzle_room_table_right), (puzzle_room,1), 38).
holds(2, in(talos), (puzzle_room,1), 38).
holds(2, in_tower((block,1),(block,1)), true, 38).
holds(2, in_tower((block,1),(block,2)), false, 38).
holds(2, in_tower((block,1),(block,3)), true, 38).
holds(2, in_tower((block,1),(block,4)), false, 38).
holds(2, in_tower((block,1),(block,5)), false, 38).
holds(2, in_tower((block,1),(block,6)), false, 38).
holds(2, in_tower((block,2),(block,1)), false, 38).
holds(2, in_tower((block,2),(block,2)), true, 38).
holds(2, in_tower((block,2),(block,3)), false, 38).
holds(2, in_tower((block,2),(block,4)), false, 38).
holds(2, in_tower((block,2),(block,5)), false, 38).
holds(2, in_tower((block,2),(block,6)), false, 38).
holds(2, in_tower((block,3),(block,1)), false, 38).
holds(2, in_tower((block,3),(block,2)), false, 38).
holds(2, in_tower((block,3),(block,3)), false, 38).
holds(2, in_tower((block,3),(block,4)), false, 38).
holds(2, in_tower((block,3),(block,5)), false, 38).
holds(2, in_tower((block,3),(block,6)), false, 38).
holds(2, in_tower((block,4),(block,1)), false, 38).
holds(2, in_tower((block,4),(block,2)), false, 38).
holds(2, in_tower((block,4),(block,3)), false, 38).
holds(2, in_tower((block,4),(block,4)), false, 38).
holds(2, in_tower((block,4),(block,5)), false, 38).
holds(2, in_tower((block,4),(block,6)), false, 38).
holds(2, in_tower((block,5),(block,1)), false, 38).
holds(2, in_tower((block,5),(block,2)), false, 38).
holds(2, in_tower((block,5),(block,3)), false, 38).
holds(2, in_tower((block,5),(block,4)), false, 38).
holds(2, in_tower((block,5),(block,5)), false, 38).
holds(2, in_tower((block,5),(block,6)), false, 38).
holds(2, in_tower((block,6),(block,1)), false, 38).
holds(2, in_tower((block,6),(block,2)), false, 38).
holds(2, in_tower((block,6),(block,3)), false, 38).
holds(2, in_tower((block,6),(block,4)), false, 38).
holds(2, in_tower((block,6),(block,5)), false, 38).
holds(2, in_tower((block,6),(block,6)), true, 38).
holds(2, on((block,1)), puzzle_room_table_left, 38).
holds(2, on((block,2)), puzzle_room_table_right, 38).
holds(2, on((block,3)), (block,1), 38).
holds(2, on((block,4)), nothing, 38).
holds(2, on((block,5)), nothing, 38).
holds(2, on((block,6)), puzzle_room_table_right, 38).
holds(2, tower_base((block,1),puzzle_room_table), true, 38).
holds(2, tower_base((block,2),puzzle_room_table), true, 38).
holds(2, tower_base((block,3),puzzle_room_table), false, 38).
holds(2, tower_base((block,4),puzzle_room_table), false, 38).
holds(2, tower_base((block,5),puzzle_room_table), false, 38).
holds(2, tower_base((block,6),puzzle_room_table), true, 38).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 38).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 38).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 38).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 38).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 38).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 38).
holds(3, complete_tower(blue,puzzle_room_table), false, 38).
holds(3, complete_tower(red,puzzle_room_table), false, 38).
holds(3, configuration(manipulator_arm_1), extended, 38).
holds(3, configuration(manipulator_arm_2), retracted, 38).
holds(3, configuration(puzzle_room_door), open, 38).
holds(3, configuration(starting_room_door), closed, 38).
holds(3, configuration(store_room_door), open, 38).
holds(3, grasping(manipulator_arm_1), nothing, 38).
holds(3, grasping(manipulator_arm_2), (block,5), 38).
holds(3, in((block,1)), puzzle_room, 38).
holds(3, in((block,2)), puzzle_room, 38).
holds(3, in((block,3)), puzzle_room, 38).
holds(3, in((block,4)), store_room, 38).
holds(3, in((block,5)), puzzle_room, 38).
holds(3, in((block,6)), puzzle_room, 38).
holds(3, in(manipulator_arm_1), puzzle_room, 38).
holds(3, in(manipulator_arm_2), puzzle_room, 38).
holds(3, in(puzzle_room_table), puzzle_room, 38).
holds(3, in(talos), puzzle_room, 38).
holds(3, in_tower((block,1),(block,1)), true, 38).
holds(3, in_tower((block,1),(block,2)), false, 38).
holds(3, in_tower((block,1),(block,3)), true, 38).
holds(3, in_tower((block,1),(block,4)), false, 38).
holds(3, in_tower((block,1),(block,5)), false, 38).
holds(3, in_tower((block,1),(block,6)), false, 38).
holds(3, in_tower((block,2),(block,1)), false, 38).
holds(3, in_tower((block,2),(block,2)), true, 38).
holds(3, in_tower((block,2),(block,3)), false, 38).
holds(3, in_tower((block,2),(block,4)), false, 38).
holds(3, in_tower((block,2),(block,5)), false, 38).
holds(3, in_tower((block,2),(block,6)), false, 38).
holds(3, in_tower((block,3),(block,1)), false, 38).
holds(3, in_tower((block,3),(block,2)), false, 38).
holds(3, in_tower((block,3),(block,3)), false, 38).
holds(3, in_tower((block,3),(block,4)), false, 38).
holds(3, in_tower((block,3),(block,5)), false, 38).
holds(3, in_tower((block,3),(block,6)), false, 38).
holds(3, in_tower((block,4),(block,1)), false, 38).
holds(3, in_tower((block,4),(block,2)), false, 38).
holds(3, in_tower((block,4),(block,3)), false, 38).
holds(3, in_tower((block,4),(block,4)), false, 38).
holds(3, in_tower((block,4),(block,5)), false, 38).
holds(3, in_tower((block,4),(block,6)), false, 38).
holds(3, in_tower((block,5),(block,1)), false, 38).
holds(3, in_tower((block,5),(block,2)), false, 38).
holds(3, in_tower((block,5),(block,3)), false, 38).
holds(3, in_tower((block,5),(block,4)), false, 38).
holds(3, in_tower((block,5),(block,5)), false, 38).
holds(3, in_tower((block,5),(block,6)), false, 38).
holds(3, in_tower((block,6),(block,1)), false, 38).
holds(3, in_tower((block,6),(block,2)), false, 38).
holds(3, in_tower((block,6),(block,3)), false, 38).
holds(3, in_tower((block,6),(block,4)), false, 38).
holds(3, in_tower((block,6),(block,5)), false, 38).
holds(3, in_tower((block,6),(block,6)), true, 38).
holds(3, on((block,1)), puzzle_room_table, 38).
holds(3, on((block,2)), puzzle_room_table, 38).
holds(3, on((block,3)), (block,1), 38).
holds(3, on((block,4)), nothing, 38).
holds(3, on((block,5)), nothing, 38).
holds(3, on((block,6)), puzzle_room_table, 38).
holds(3, tower_base((block,1),puzzle_room_table), true, 38).
holds(3, tower_base((block,2),puzzle_room_table), true, 38).
holds(3, tower_base((block,3),puzzle_room_table), false, 38).
holds(3, tower_base((block,4),puzzle_room_table), false, 38).
holds(3, tower_base((block,5),puzzle_room_table), false, 38).
holds(3, tower_base((block,6),puzzle_room_table), true, 38).
holds(3, unordered_tower((block,1),puzzle_room_table), true, 38).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 38).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 38).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 38).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 38).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 38).

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 296 rules into program part ash_goal_state:

final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table_left, false).
final_goal(2, on((block,1)), puzzle_room_table_middle, false).
final_goal(2, on((block,1)), puzzle_room_table_right, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table_left, false).
final_goal(2, on((block,2)), puzzle_room_table_middle, false).
final_goal(2, on((block,2)), puzzle_room_table_right, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table_left, true).
final_goal(2, on((block,3)), puzzle_room_table_middle, false).
final_goal(2, on((block,3)), puzzle_room_table_right, false).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table_left, false).
final_goal(2, on((block,4)), puzzle_room_table_middle, false).
final_goal(2, on((block,4)), puzzle_room_table_right, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table_left, false).
final_goal(2, on((block,5)), puzzle_room_table_middle, false).
final_goal(2, on((block,5)), puzzle_room_table_right, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table_left, false).
final_goal(2, on((block,6)), puzzle_room_table_middle, false).
final_goal(2, on((block,6)), puzzle_room_table_right, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).

[18-04-2022_12-43-27] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=40']

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'I': 22})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 23})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 24})

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 3 rules into program part base:

sub_goal(3, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 22).
sub_goal(3, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 23).
sub_goal(3, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 24).

[18-04-2022_12-43-27] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=40']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A8A2F7C160>]
	incrementor = SolveIncrementor(step_start=38, step_increase=1, step_increase_initial=3, step_end_min=41, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1790.1562952999975, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 38), range_=None), IncPart(name='plan_module', args=('#inc', 38, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 38, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 38, 22, 24, 'sequential', 'false'), range_=None)]

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 825 rules

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.00515220000033878s

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.156188s.

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022547s with result Satisfiable.

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A8A11F2090>

[18-04-2022_12-43-27] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 2)
	('start_step', 38)
	('last_sgoals', 24)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('first_sgoals', 22)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A8A11F2090>)

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 38). %* None *%
#program plan_module(#inc, 38, false, false). %* None *%
#program optimisation_module(#inc, 38, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 38, 22, 24, sequential, false). %* None *%

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     37 : Current =     40
Incrementor step ends | Minimum  =     41 : Maximum =    300

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(40)]), ('state_module', [Number(38), Number(38)]), ('plan_module', [Number(38), Number(38), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(38), Number(38), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('conformance_module', [Number(38), Number(38), Number(22), Number(24), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(39), Number(38)]), ('plan_module', [Number(39), Number(38), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(39), Number(38), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(39)]), ('action_preconditions', [Number(39)]), ('variable_relations', [Number(39)]), ('abstraction_mappings', [Number(39)]), ('conformance_module', [Number(39), Number(38), Number(22), Number(24), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(40), Number(38)]), ('plan_module', [Number(40), Number(38), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(40), Number(38), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(40)]), ('action_preconditions', [Number(40)]), ('variable_relations', [Number(40)]), ('abstraction_mappings', [Number(40)]), ('conformance_module', [Number(40), Number(38), Number(22), Number(24), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.196230s.

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.032024s with result Unsatisfiable.

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.22825409999950352, Incremental time limit = None
Running cumulative time = 0.22825409999950352, Cumulative time limit = 1790.1562952999975
Used memory = (RSS = 2464.257812Mb, VMS = 2478.234375Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     40 : Current =     41
Incrementor step ends | Minimum  =     41 : Maximum =    300

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(41)]), ('state_module', [Number(41), Number(38)]), ('plan_module', [Number(41), Number(38), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(41), Number(38), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(41)]), ('action_preconditions', [Number(41)]), ('variable_relations', [Number(41)]), ('abstraction_mappings', [Number(41)]), ('conformance_module', [Number(41), Number(38), Number(22), Number(24), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.091538s.

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009308s with result Unsatisfiable.

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.10084660000029544, Incremental time limit = None
Running cumulative time = 0.32910069999979896, Cumulative time limit = 1790.1562952999975
Used memory = (RSS = 2464.257812Mb, VMS = 2478.234375Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     41 : Current =     42
Incrementor step ends | Minimum  =     41 : Maximum =    300

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(42)]), ('state_module', [Number(42), Number(38)]), ('plan_module', [Number(42), Number(38), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(42), Number(38), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('conformance_module', [Number(42), Number(38), Number(22), Number(24), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.102767s.

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.042639s with result Satisfiable.

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.14540699999906792, Incremental time limit = None
Running cumulative time = 0.4745076999988669, Cumulative time limit = 1790.1562952999975
Used memory = (RSS = 2465.753906Mb, VMS = 2479.484375Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.390536s, Solving = 0.083972s, Total = 0.474508s, Memory = (RSS = 2465.753906Mb, VMS = 2479.484375Mb), Step range = [38-42]), Calls = 3
Final Model :: Total atoms = 18708, Cost = (-1,), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.196230s, Solving = 0.032024s, Total = 0.228254s, Memory = (RSS = 2464.257812Mb, VMS = 2478.234375Mb), Step range = [38-40]
2 : Statistics :: Grounding = 0.091538s, Solving = 0.009308s, Total = 0.100847s, Memory = (RSS = 2464.257812Mb, VMS = 2478.234375Mb), Step range = [41-41]
3 : Statistics :: Grounding = 0.102767s, Solving = 0.042639s, Total = 0.145407s, Memory = (RSS = 2465.753906Mb, VMS = 2479.484375Mb), Step range = [42-42]

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.474508s due to: Stop condition reached.

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 24, Last requested goal index = 24, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.390536s, Solving = 0.083972s, Total = 0.474508s, Memory = (RSS = 2465.753906Mb, VMS = 2479.484375Mb), Step range = [38-42]), Calls = 3
Model :: Total atoms = 18708, Cost = (-1,), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                  Steps = 4 :: Actions = 4                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 25:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 26:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 27:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 28:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 29:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 30:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : move((store_room,1))
Step 31:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 37:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 38:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 39:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 40:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 41:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 42:
    Current Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=38, end_step=None

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for parts of the existing plan at the current level that have already been divided: start_step=38

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> Value of end step of abstract plan to divide adjusted for right blend of current problem: end_step=42

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=38

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> Preparing to invoke division strategy...

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> Online method OnlineMethod.GroundFirst chose to invoke the division strategy before a downwards level change:Current increment = 7, Current planning level is complete = False

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 42, chosen step range to extract = range(38, 43)

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 48
Level [1]: Length = 80, Total actions = 80, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =   4, AC =   4, CF = 1.0, GT =   4.21s, ST =   1.07s, OT = 0.00s, TT =   5.28s, EF = (LE = 1.3, AC = 1.3), ED = (LE = 0.6, AC = 0.6), EB = (LE = 0.4, AC = 0.4)

[18-04-2022_12-43-28] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=4, start_step=38, blend=Blend(left=0, right=0)

[18-04-2022_12-43-28] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=0, small_group_size=2, large_group_size=3

[18-04-2022_12-43-28] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=40, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 2, Problem Range = [7-8], Size = 4, Sub-goal Stage Range = [39-42]
Division points [total=1] : [(Index = 40, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> Monolevel problem 4 at level 2 solved.

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 7 at level 1:
Total Templated Partial Problems = 2, Problem Range = [7-8], Size = 4, Sub-goal Stage Range = [39-42]
Division points [total=1] : [(Index = 40, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [39-40]

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 80, chosen step range to extract = range(0, 81)

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 48
Level [1]: Length = 80, Total actions = 80, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 42, chosen step range to extract = range(0, 43)

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 48
Level [1]: Length = 80, Total actions = 80, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 30, chosen step range to extract = range(0, 31)

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 48
Level [1]: Length = 80, Total actions = 80, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 20, chosen step range to extract = range(0, 21)

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 48
Level [1]: Length = 80, Total actions = 80, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [39-40], problem number = 7, increment number = 7

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 39)
	('last_sgoals', 40)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1759.6475863999985)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [39-40] : Concurrency disabled : Minimum search length bound enabled with value 81

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 39
last_sgoals = 40
start_step = 80
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 81

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[18-04-2022_12-43-28] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[18-04-2022_12-43-28] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[18-04-2022_12-43-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[18-04-2022_12-43-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[18-04-2022_12-43-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-43-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-43-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-43-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 80 as problem start state.

[18-04-2022_12-43-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 80})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 80})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 80})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 80})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 80})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 80})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 80})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 80})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 80})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '((puzzle_room,1),5,0)', 'S': 80})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '((puzzle_room,1),5,0)', 'S': 80})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '((puzzle_room,1),5,0)', 'S': 80})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '((store_room,0),0,0)', 'S': 80})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '((puzzle_room,1),5,0)', 'S': 80})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '((puzzle_room,1),5,0)', 'S': 80})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '((puzzle_room,1),5,0)', 'S': 80})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '((puzzle_room,1),5,0)', 'S': 80})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '((puzzle_room,1),5,0)', 'S': 80})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '((puzzle_room,1),5,0)', 'S': 80})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '((puzzle_room,1),5,0)', 'S': 80})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '((puzzle_room,1),5,0)', 'S': 80})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '((puzzle_room,1),5,0)', 'S': 80})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '((puzzle_room,1),5,0)', 'S': 80})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '((puzzle_room,1),5,0)', 'S': 80})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '((puzzle_room,1),5,0)', 'S': 80})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '((puzzle_room,1),5,0)', 'S': 80})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 80})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 80})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 80})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 80})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 80})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 80})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 80})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 80})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 80})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 80})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 80})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 80})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 80})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 80})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 80})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 80})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 80})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 80})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 80})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 80})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 80})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 80})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 80})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 80})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 80})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 80})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 80})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 80})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 80})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 80})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 80})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 80})
Fluent({'L': 2, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 80})
Fluent({'L': 2, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 80})
Fluent({'L': 2, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 80})
Fluent({'L': 2, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 80})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 80})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 80})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 80})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 80})
Fluent({'L': 2, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 80})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 80})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 80})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 80})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 80})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 80})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 80})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 80})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 80})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 80})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 80})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 80})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 80})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 80})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 80})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 80})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 80})

[18-04-2022_12-43-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 164 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 80).
holds(1, complete_tower(red,puzzle_room_table), false, 80).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 80).
holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 80).
holds(1, configuration(manipulator_limb_1), extended, 80).
holds(1, configuration(manipulator_limb_2), retracted, 80).
holds(1, configuration(puzzle_room_door), open, 80).
holds(1, configuration(starting_room_door), closed, 80).
holds(1, configuration(store_room_door), open, 80).
holds(1, grasping(manipulator_end_1), nothing, 80).
holds(1, grasping(manipulator_end_2), (block,5), 80).
holds(1, in((block,1)), ((puzzle_room,1),5,0), 80).
holds(1, in((block,2)), ((puzzle_room,1),5,0), 80).
holds(1, in((block,3)), ((puzzle_room,1),5,0), 80).
holds(1, in((block,4)), ((store_room,0),0,0), 80).
holds(1, in((block,5)), ((puzzle_room,1),5,0), 80).
holds(1, in((block,6)), ((puzzle_room,1),5,0), 80).
holds(1, in(manipulator_arm_1), ((puzzle_room,1),5,0), 80).
holds(1, in(manipulator_arm_2), ((puzzle_room,1),5,0), 80).
holds(1, in(manipulator_end_1), ((puzzle_room,1),5,0), 80).
holds(1, in(manipulator_end_2), ((puzzle_room,1),5,0), 80).
holds(1, in(manipulator_limb_1), ((puzzle_room,1),5,0), 80).
holds(1, in(manipulator_limb_2), ((puzzle_room,1),5,0), 80).
holds(1, in(puzzle_room_table), ((puzzle_room,1),5,0), 80).
holds(1, in(puzzle_room_table_left), ((puzzle_room,1),5,0), 80).
holds(1, in(puzzle_room_table_middle), ((puzzle_room,1),5,0), 80).
holds(1, in(puzzle_room_table_right), ((puzzle_room,1),5,0), 80).
holds(1, in(talos), ((puzzle_room,1),5,0), 80).
holds(1, in_tower((block,1),(block,1)), true, 80).
holds(1, in_tower((block,1),(block,2)), false, 80).
holds(1, in_tower((block,1),(block,3)), true, 80).
holds(1, in_tower((block,1),(block,4)), false, 80).
holds(1, in_tower((block,1),(block,5)), false, 80).
holds(1, in_tower((block,1),(block,6)), false, 80).
holds(1, in_tower((block,2),(block,1)), false, 80).
holds(1, in_tower((block,2),(block,2)), true, 80).
holds(1, in_tower((block,2),(block,3)), false, 80).
holds(1, in_tower((block,2),(block,4)), false, 80).
holds(1, in_tower((block,2),(block,5)), false, 80).
holds(1, in_tower((block,2),(block,6)), false, 80).
holds(1, in_tower((block,3),(block,1)), false, 80).
holds(1, in_tower((block,3),(block,2)), false, 80).
holds(1, in_tower((block,3),(block,3)), false, 80).
holds(1, in_tower((block,3),(block,4)), false, 80).
holds(1, in_tower((block,3),(block,5)), false, 80).
holds(1, in_tower((block,3),(block,6)), false, 80).
holds(1, in_tower((block,4),(block,1)), false, 80).
holds(1, in_tower((block,4),(block,2)), false, 80).
holds(1, in_tower((block,4),(block,3)), false, 80).
holds(1, in_tower((block,4),(block,4)), false, 80).
holds(1, in_tower((block,4),(block,5)), false, 80).
holds(1, in_tower((block,4),(block,6)), false, 80).
holds(1, in_tower((block,5),(block,1)), false, 80).
holds(1, in_tower((block,5),(block,2)), false, 80).
holds(1, in_tower((block,5),(block,3)), false, 80).
holds(1, in_tower((block,5),(block,4)), false, 80).
holds(1, in_tower((block,5),(block,5)), false, 80).
holds(1, in_tower((block,5),(block,6)), false, 80).
holds(1, in_tower((block,6),(block,1)), false, 80).
holds(1, in_tower((block,6),(block,2)), false, 80).
holds(1, in_tower((block,6),(block,3)), false, 80).
holds(1, in_tower((block,6),(block,4)), false, 80).
holds(1, in_tower((block,6),(block,5)), false, 80).
holds(1, in_tower((block,6),(block,6)), true, 80).
holds(1, on((block,1)), puzzle_room_table_left, 80).
holds(1, on((block,2)), puzzle_room_table_right, 80).
holds(1, on((block,3)), (block,1), 80).
holds(1, on((block,4)), nothing, 80).
holds(1, on((block,5)), nothing, 80).
holds(1, on((block,6)), puzzle_room_table_right, 80).
holds(1, tower_base((block,1),puzzle_room_table), true, 80).
holds(1, tower_base((block,2),puzzle_room_table), true, 80).
holds(1, tower_base((block,3),puzzle_room_table), false, 80).
holds(1, tower_base((block,4),puzzle_room_table), false, 80).
holds(1, tower_base((block,5),puzzle_room_table), false, 80).
holds(1, tower_base((block,6),puzzle_room_table), true, 80).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 80).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 80).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 80).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 80).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 80).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 80).
holds(2, complete_tower(blue,puzzle_room_table), false, 80).
holds(2, complete_tower(red,puzzle_room_table), false, 80).
holds(2, configuration(manipulator_end_1), aligned_with(nothing), 80).
holds(2, configuration(manipulator_end_2), aligned_with((block,5)), 80).
holds(2, configuration(manipulator_limb_1), extended, 80).
holds(2, configuration(manipulator_limb_2), retracted, 80).
holds(2, configuration(puzzle_room_door), open, 80).
holds(2, configuration(starting_room_door), closed, 80).
holds(2, configuration(store_room_door), open, 80).
holds(2, grasping(manipulator_end_1), nothing, 80).
holds(2, grasping(manipulator_end_2), (block,5), 80).
holds(2, in((block,1)), (puzzle_room,1), 80).
holds(2, in((block,2)), (puzzle_room,1), 80).
holds(2, in((block,3)), (puzzle_room,1), 80).
holds(2, in((block,4)), (store_room,0), 80).
holds(2, in((block,5)), (puzzle_room,1), 80).
holds(2, in((block,6)), (puzzle_room,1), 80).
holds(2, in(manipulator_arm_1), (puzzle_room,1), 80).
holds(2, in(manipulator_arm_2), (puzzle_room,1), 80).
holds(2, in(manipulator_end_1), (puzzle_room,1), 80).
holds(2, in(manipulator_end_2), (puzzle_room,1), 80).
holds(2, in(manipulator_limb_1), (puzzle_room,1), 80).
holds(2, in(manipulator_limb_2), (puzzle_room,1), 80).
holds(2, in(puzzle_room_table), (puzzle_room,1), 80).
holds(2, in(puzzle_room_table_left), (puzzle_room,1), 80).
holds(2, in(puzzle_room_table_middle), (puzzle_room,1), 80).
holds(2, in(puzzle_room_table_right), (puzzle_room,1), 80).
holds(2, in(talos), (puzzle_room,1), 80).
holds(2, in_tower((block,1),(block,1)), true, 80).
holds(2, in_tower((block,1),(block,2)), false, 80).
holds(2, in_tower((block,1),(block,3)), true, 80).
holds(2, in_tower((block,1),(block,4)), false, 80).
holds(2, in_tower((block,1),(block,5)), false, 80).
holds(2, in_tower((block,1),(block,6)), false, 80).
holds(2, in_tower((block,2),(block,1)), false, 80).
holds(2, in_tower((block,2),(block,2)), true, 80).
holds(2, in_tower((block,2),(block,3)), false, 80).
holds(2, in_tower((block,2),(block,4)), false, 80).
holds(2, in_tower((block,2),(block,5)), false, 80).
holds(2, in_tower((block,2),(block,6)), false, 80).
holds(2, in_tower((block,3),(block,1)), false, 80).
holds(2, in_tower((block,3),(block,2)), false, 80).
holds(2, in_tower((block,3),(block,3)), false, 80).
holds(2, in_tower((block,3),(block,4)), false, 80).
holds(2, in_tower((block,3),(block,5)), false, 80).
holds(2, in_tower((block,3),(block,6)), false, 80).
holds(2, in_tower((block,4),(block,1)), false, 80).
holds(2, in_tower((block,4),(block,2)), false, 80).
holds(2, in_tower((block,4),(block,3)), false, 80).
holds(2, in_tower((block,4),(block,4)), false, 80).
holds(2, in_tower((block,4),(block,5)), false, 80).
holds(2, in_tower((block,4),(block,6)), false, 80).
holds(2, in_tower((block,5),(block,1)), false, 80).
holds(2, in_tower((block,5),(block,2)), false, 80).
holds(2, in_tower((block,5),(block,3)), false, 80).
holds(2, in_tower((block,5),(block,4)), false, 80).
holds(2, in_tower((block,5),(block,5)), false, 80).
holds(2, in_tower((block,5),(block,6)), false, 80).
holds(2, in_tower((block,6),(block,1)), false, 80).
holds(2, in_tower((block,6),(block,2)), false, 80).
holds(2, in_tower((block,6),(block,3)), false, 80).
holds(2, in_tower((block,6),(block,4)), false, 80).
holds(2, in_tower((block,6),(block,5)), false, 80).
holds(2, in_tower((block,6),(block,6)), true, 80).
holds(2, on((block,1)), puzzle_room_table_left, 80).
holds(2, on((block,2)), puzzle_room_table_right, 80).
holds(2, on((block,3)), (block,1), 80).
holds(2, on((block,4)), nothing, 80).
holds(2, on((block,5)), nothing, 80).
holds(2, on((block,6)), puzzle_room_table_right, 80).
holds(2, tower_base((block,1),puzzle_room_table), true, 80).
holds(2, tower_base((block,2),puzzle_room_table), true, 80).
holds(2, tower_base((block,3),puzzle_room_table), false, 80).
holds(2, tower_base((block,4),puzzle_room_table), false, 80).
holds(2, tower_base((block,5),puzzle_room_table), false, 80).
holds(2, tower_base((block,6),puzzle_room_table), true, 80).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 80).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 80).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 80).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 80).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 80).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 80).

[18-04-2022_12-43-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[18-04-2022_12-43-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 308 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table_left, false).
final_goal(2, on((block,1)), puzzle_room_table_middle, false).
final_goal(2, on((block,1)), puzzle_room_table_right, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table_left, false).
final_goal(2, on((block,2)), puzzle_room_table_middle, false).
final_goal(2, on((block,2)), puzzle_room_table_right, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table_left, true).
final_goal(2, on((block,3)), puzzle_room_table_middle, false).
final_goal(2, on((block,3)), puzzle_room_table_right, false).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table_left, false).
final_goal(2, on((block,4)), puzzle_room_table_middle, false).
final_goal(2, on((block,4)), puzzle_room_table_right, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table_left, false).
final_goal(2, on((block,5)), puzzle_room_table_middle, false).
final_goal(2, on((block,5)), puzzle_room_table_right, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table_left, false).
final_goal(2, on((block,6)), puzzle_room_table_middle, false).
final_goal(2, on((block,6)), puzzle_room_table_right, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=81']

[18-04-2022_12-43-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,3)))', 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,3))', 'I': 39})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,3))', 'F': 'grasping(manipulator_end_1)', 'V': '(block,3)', 'I': 40})

[18-04-2022_12-43-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 2 rules into program part base:

sub_goal(2, talos, configure(manipulator_end_1,aligned_with((block,3))), configuration(manipulator_end_1), aligned_with((block,3)), 39).
sub_goal(2, talos, grasp(manipulator_end_1,(block,3)), grasping(manipulator_end_1), (block,3), 40).

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-43-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[18-04-2022_12-43-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=81']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A8A2F7CAF0>]
	incrementor = SolveIncrementor(step_start=80, step_increase=1, step_increase_initial=2, step_end_min=82, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1759.6475863999985, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 80), range_=None), IncPart(name='plan_module', args=('#inc', 80, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 80, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 80, 39, 40, 'sequential', 'false'), range_=None)]

[18-04-2022_12-43-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-43-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-43-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 843 rules

[18-04-2022_12-43-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.005306200000632089s

[18-04-2022_12-43-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[18-04-2022_12-43-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[18-04-2022_12-43-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.172315s.

[18-04-2022_12-43-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.025023s with result Satisfiable.

[18-04-2022_12-43-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[18-04-2022_12-43-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A8A437D180>

[18-04-2022_12-43-28] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 80)
	('last_sgoals', 40)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('first_sgoals', 39)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A8A437D180>)

[18-04-2022_12-43-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 80). %* None *%
#program plan_module(#inc, 80, false, false). %* None *%
#program optimisation_module(#inc, 80, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 80, 39, 40, sequential, false). %* None *%

[18-04-2022_12-43-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     79 : Current =     81
Incrementor step ends | Minimum  =     82 : Maximum =    300

[18-04-2022_12-43-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(81)]), ('state_module', [Number(80), Number(80)]), ('plan_module', [Number(80), Number(80), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(80), Number(80), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(80)]), ('action_preconditions', [Number(80)]), ('variable_relations', [Number(80)]), ('abstraction_mappings', [Number(80)]), ('conformance_module', [Number(80), Number(80), Number(39), Number(40), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(81), Number(80)]), ('plan_module', [Number(81), Number(80), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(81), Number(80), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(81)]), ('action_preconditions', [Number(81)]), ('variable_relations', [Number(81)]), ('abstraction_mappings', [Number(81)]), ('conformance_module', [Number(81), Number(80), Number(39), Number(40), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.427069s.

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.032138s with result Unsatisfiable.

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4592069000000265, Incremental time limit = None
Running cumulative time = 0.4592069000000265, Cumulative time limit = 1759.6475863999985
Used memory = (RSS = 2465.503906Mb, VMS = 2479.238281Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     81 : Current =     82
Incrementor step ends | Minimum  =     82 : Maximum =    300

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(82)]), ('state_module', [Number(82), Number(80)]), ('plan_module', [Number(82), Number(80), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(82), Number(80), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(82)]), ('action_preconditions', [Number(82)]), ('variable_relations', [Number(82)]), ('abstraction_mappings', [Number(82)]), ('conformance_module', [Number(82), Number(80), Number(39), Number(40), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.177035s.

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.027905s with result Satisfiable.

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2049401999993279, Incremental time limit = None
Running cumulative time = 0.6641470999993544, Cumulative time limit = 1759.6475863999985
Used memory = (RSS = 2467.507812Mb, VMS = 2481.246094Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.604104s, Solving = 0.060043s, Total = 0.664147s, Memory = (RSS = 2467.507812Mb, VMS = 2481.246094Mb), Step range = [80-82]), Calls = 2
Final Model :: Total atoms = 21719, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.427069s, Solving = 0.032138s, Total = 0.459207s, Memory = (RSS = 2465.503906Mb, VMS = 2479.238281Mb), Step range = [80-81]
2 : Statistics :: Grounding = 0.177035s, Solving = 0.027905s, Total = 0.204940s, Memory = (RSS = 2467.507812Mb, VMS = 2481.246094Mb), Step range = [82-82]

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.664147s due to: Stop condition reached.

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[18-04-2022_12-43-29] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-43-29] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38, 81: 39, 82: 40}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80, 39: 81, 40: 82}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-43-29] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 40, Last requested goal index = 40, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[18-04-2022_12-43-29] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.604104s, Solving = 0.060043s, Total = 0.664147s, Memory = (RSS = 2467.507812Mb, VMS = 2481.246094Mb), Step range = [80-82]), Calls = 2
Model :: Total atoms = 21719, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[18-04-2022_12-43-29] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 2 :: Actions = 2                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Planned actions:
        talos : move(((starting_room,1),3,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),4,0))
Step 5:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,0))
Step 6:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,1))
Step 7:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),4,0))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,0))
Step 9:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 10:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 11:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 12:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 13:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 5] talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(store_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 5] talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(store_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 17:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 21:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 23:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 24:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 25:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 26:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 27:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 28:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(puzzle_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(puzzle_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 31:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 35:
    Current Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 37:
    Current Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 38:
    Current Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 39:
    Current Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 40:
    Current Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 41:
    Current Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 42:
    Current Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 43:
    Current Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 44:
    Current Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Planned actions:
        talos : move(((store_room,0),2,1))
Step 45:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 46:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 47:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),0,0))
Step 48:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 49:
    Current Sub-goals:
        [Index = 23] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Achieved Sub-goals:
        [Index = 23] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 50:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 51:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 52:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 53:
    Current Sub-goals:
        [Index = 27] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Achieved Sub-goals:
        [Index = 27] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 54:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 55:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 56:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 29] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 57:
    Current Sub-goals:
        [Index = 30] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 58:
    Current Sub-goals:
        [Index = 30] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 30] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),3,0))
Step 59:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,0))
Step 60:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 61:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 62:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 63:
    Current Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 64:
    Current Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 65:
    Current Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 66:
    Current Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 67:
    Current Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 68:
    Current Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 69:
    Current Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 70:
    Current Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 71:
    Current Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Planned actions:
        talos : move(((puzzle_room,0),0,1))
Step 72:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),0,0))
Step 73:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,0))
Step 74:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),2,0))
Step 75:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Planned actions:
        talos : move(((puzzle_room,1),3,0))
Step 76:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),4,0))
Step 77:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),5,0))
Step 78:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 79:
    Current Sub-goals:
        [Index = 37] talos : put(manipulator_end_1,(block,6),puzzle_room_table_right) -> on((block,6)) = puzzle_room_table_right
    Achieved Sub-goals:
        [Index = 37] talos : put(manipulator_end_1,(block,6),puzzle_room_table_right) -> on((block,6)) = puzzle_room_table_right
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 80:
    Current Sub-goals:
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 81:
    Current Sub-goals:
        [Index = 39] talos : configure(manipulator_end_1,aligned_with((block,3))) -> configuration(manipulator_end_1) = aligned_with((block,3))
    Achieved Sub-goals:
        [Index = 39] talos : configure(manipulator_end_1,aligned_with((block,3))) -> configuration(manipulator_end_1) = aligned_with((block,3))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 82:
    Current Sub-goals:
        [Index = 40] talos : grasp(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = (block,3)
    Achieved Sub-goals:
        [Index = 40] talos : grasp(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))

[18-04-2022_12-43-29] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[18-04-2022_12-43-29] DEBUG :: ASH Planner Main #1 >> Value of end step of abstract plan to divide adjusted for right blend of current problem: end_step=82

[18-04-2022_12-43-29] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[18-04-2022_12-43-29] DEBUG :: ASH Planner Main #1 >> Monolevel problem 7 at level 1 solved.

[18-04-2022_12-43-29] DEBUG :: ASH Planner Main #1 >> Online planning increment 7 finished.

[18-04-2022_12-43-29] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 2 : Total constraining sub-goal stages = 20 : Goals achieved = 13 : Goals unachieved = 7 : Complete = False
Level = 2 : Solved problems = 4 : Total constraining sub-goal stages = 30 : Goals achieved = 24 : Goals unachieved = 6 : Complete = False
Level = 1 : Solved problems = 7 : Total constraining sub-goal stages = 42 : Goals achieved = 40 : Goals unachieved = 2 : Complete = False

[18-04-2022_12-43-29] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 3.

[18-04-2022_12-43-29] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 8 by method ground-first is [1-1].

[18-04-2022_12-43-29] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 8 at level 1:
Total Templated Partial Problems = 2, Problem Range = [7-8], Size = 4, Sub-goal Stage Range = [39-42]
Division points [total=1] : [(Index = 40, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[18-04-2022_12-43-29] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [41-42]

[18-04-2022_12-43-29] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 82, chosen step range to extract = range(0, 83)

[18-04-2022_12-43-29] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 48
Level [1]: Length = 82, Total actions = 82, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-29] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 42, chosen step range to extract = range(0, 43)

[18-04-2022_12-43-29] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 48
Level [1]: Length = 82, Total actions = 82, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-29] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 30, chosen step range to extract = range(0, 31)

[18-04-2022_12-43-29] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 48
Level [1]: Length = 82, Total actions = 82, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-29] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 20, chosen step range to extract = range(0, 21)

[18-04-2022_12-43-29] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 48
Level [1]: Length = 82, Total actions = 82, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-29] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [41-42], problem number = 8, increment number = 8

[18-04-2022_12-43-29] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 41)
	('last_sgoals', 42)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1758.9834392999992)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[18-04-2022_12-43-29] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [41-42] : Concurrency disabled : Minimum search length bound enabled with value 83

[18-04-2022_12-43-29] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 41
last_sgoals = 42
start_step = 82
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 83

[18-04-2022_12-43-29] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[18-04-2022_12-43-29] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[18-04-2022_12-43-29] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[18-04-2022_12-43-29] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[18-04-2022_12-43-29] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-43-29] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 82 as problem start state.

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,3))', 'S': 82})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 82})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 82})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 82})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 82})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 82})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 82})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,3)', 'S': 82})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 82})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '((puzzle_room,1),5,0)', 'S': 82})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '((puzzle_room,1),5,0)', 'S': 82})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '((puzzle_room,1),5,0)', 'S': 82})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '((store_room,0),0,0)', 'S': 82})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '((puzzle_room,1),5,0)', 'S': 82})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '((puzzle_room,1),5,0)', 'S': 82})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '((puzzle_room,1),5,0)', 'S': 82})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '((puzzle_room,1),5,0)', 'S': 82})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '((puzzle_room,1),5,0)', 'S': 82})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '((puzzle_room,1),5,0)', 'S': 82})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '((puzzle_room,1),5,0)', 'S': 82})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '((puzzle_room,1),5,0)', 'S': 82})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '((puzzle_room,1),5,0)', 'S': 82})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '((puzzle_room,1),5,0)', 'S': 82})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '((puzzle_room,1),5,0)', 'S': 82})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '((puzzle_room,1),5,0)', 'S': 82})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '((puzzle_room,1),5,0)', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 82})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 82})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 82})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 82})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 82})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 82})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 82})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 82})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 82})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 82})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 82})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,3))', 'S': 82})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 82})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 82})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 82})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 82})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 82})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 82})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_1)', 'V': '(block,3)', 'S': 82})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 82})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 82})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 82})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 82})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 82})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 82})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 82})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 82})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 82})
Fluent({'L': 2, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 82})
Fluent({'L': 2, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 82})
Fluent({'L': 2, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 82})
Fluent({'L': 2, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 82})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 82})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 82})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 82})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 82})
Fluent({'L': 2, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 82})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 82})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 82})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 82})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 82})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 82})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 82})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 82})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 82})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 82})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 82})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 82})

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 164 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 82).
holds(1, complete_tower(red,puzzle_room_table), false, 82).
holds(1, configuration(manipulator_end_1), aligned_with((block,3)), 82).
holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 82).
holds(1, configuration(manipulator_limb_1), extended, 82).
holds(1, configuration(manipulator_limb_2), retracted, 82).
holds(1, configuration(puzzle_room_door), open, 82).
holds(1, configuration(starting_room_door), closed, 82).
holds(1, configuration(store_room_door), open, 82).
holds(1, grasping(manipulator_end_1), (block,3), 82).
holds(1, grasping(manipulator_end_2), (block,5), 82).
holds(1, in((block,1)), ((puzzle_room,1),5,0), 82).
holds(1, in((block,2)), ((puzzle_room,1),5,0), 82).
holds(1, in((block,3)), ((puzzle_room,1),5,0), 82).
holds(1, in((block,4)), ((store_room,0),0,0), 82).
holds(1, in((block,5)), ((puzzle_room,1),5,0), 82).
holds(1, in((block,6)), ((puzzle_room,1),5,0), 82).
holds(1, in(manipulator_arm_1), ((puzzle_room,1),5,0), 82).
holds(1, in(manipulator_arm_2), ((puzzle_room,1),5,0), 82).
holds(1, in(manipulator_end_1), ((puzzle_room,1),5,0), 82).
holds(1, in(manipulator_end_2), ((puzzle_room,1),5,0), 82).
holds(1, in(manipulator_limb_1), ((puzzle_room,1),5,0), 82).
holds(1, in(manipulator_limb_2), ((puzzle_room,1),5,0), 82).
holds(1, in(puzzle_room_table), ((puzzle_room,1),5,0), 82).
holds(1, in(puzzle_room_table_left), ((puzzle_room,1),5,0), 82).
holds(1, in(puzzle_room_table_middle), ((puzzle_room,1),5,0), 82).
holds(1, in(puzzle_room_table_right), ((puzzle_room,1),5,0), 82).
holds(1, in(talos), ((puzzle_room,1),5,0), 82).
holds(1, in_tower((block,1),(block,1)), true, 82).
holds(1, in_tower((block,1),(block,2)), false, 82).
holds(1, in_tower((block,1),(block,3)), true, 82).
holds(1, in_tower((block,1),(block,4)), false, 82).
holds(1, in_tower((block,1),(block,5)), false, 82).
holds(1, in_tower((block,1),(block,6)), false, 82).
holds(1, in_tower((block,2),(block,1)), false, 82).
holds(1, in_tower((block,2),(block,2)), true, 82).
holds(1, in_tower((block,2),(block,3)), false, 82).
holds(1, in_tower((block,2),(block,4)), false, 82).
holds(1, in_tower((block,2),(block,5)), false, 82).
holds(1, in_tower((block,2),(block,6)), false, 82).
holds(1, in_tower((block,3),(block,1)), false, 82).
holds(1, in_tower((block,3),(block,2)), false, 82).
holds(1, in_tower((block,3),(block,3)), false, 82).
holds(1, in_tower((block,3),(block,4)), false, 82).
holds(1, in_tower((block,3),(block,5)), false, 82).
holds(1, in_tower((block,3),(block,6)), false, 82).
holds(1, in_tower((block,4),(block,1)), false, 82).
holds(1, in_tower((block,4),(block,2)), false, 82).
holds(1, in_tower((block,4),(block,3)), false, 82).
holds(1, in_tower((block,4),(block,4)), false, 82).
holds(1, in_tower((block,4),(block,5)), false, 82).
holds(1, in_tower((block,4),(block,6)), false, 82).
holds(1, in_tower((block,5),(block,1)), false, 82).
holds(1, in_tower((block,5),(block,2)), false, 82).
holds(1, in_tower((block,5),(block,3)), false, 82).
holds(1, in_tower((block,5),(block,4)), false, 82).
holds(1, in_tower((block,5),(block,5)), false, 82).
holds(1, in_tower((block,5),(block,6)), false, 82).
holds(1, in_tower((block,6),(block,1)), false, 82).
holds(1, in_tower((block,6),(block,2)), false, 82).
holds(1, in_tower((block,6),(block,3)), false, 82).
holds(1, in_tower((block,6),(block,4)), false, 82).
holds(1, in_tower((block,6),(block,5)), false, 82).
holds(1, in_tower((block,6),(block,6)), true, 82).
holds(1, on((block,1)), puzzle_room_table_left, 82).
holds(1, on((block,2)), puzzle_room_table_right, 82).
holds(1, on((block,3)), (block,1), 82).
holds(1, on((block,4)), nothing, 82).
holds(1, on((block,5)), nothing, 82).
holds(1, on((block,6)), puzzle_room_table_right, 82).
holds(1, tower_base((block,1),puzzle_room_table), true, 82).
holds(1, tower_base((block,2),puzzle_room_table), true, 82).
holds(1, tower_base((block,3),puzzle_room_table), false, 82).
holds(1, tower_base((block,4),puzzle_room_table), false, 82).
holds(1, tower_base((block,5),puzzle_room_table), false, 82).
holds(1, tower_base((block,6),puzzle_room_table), true, 82).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 82).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 82).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 82).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 82).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 82).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 82).
holds(2, complete_tower(blue,puzzle_room_table), false, 82).
holds(2, complete_tower(red,puzzle_room_table), false, 82).
holds(2, configuration(manipulator_end_1), aligned_with((block,3)), 82).
holds(2, configuration(manipulator_end_2), aligned_with((block,5)), 82).
holds(2, configuration(manipulator_limb_1), extended, 82).
holds(2, configuration(manipulator_limb_2), retracted, 82).
holds(2, configuration(puzzle_room_door), open, 82).
holds(2, configuration(starting_room_door), closed, 82).
holds(2, configuration(store_room_door), open, 82).
holds(2, grasping(manipulator_end_1), (block,3), 82).
holds(2, grasping(manipulator_end_2), (block,5), 82).
holds(2, in((block,1)), (puzzle_room,1), 82).
holds(2, in((block,2)), (puzzle_room,1), 82).
holds(2, in((block,3)), (puzzle_room,1), 82).
holds(2, in((block,4)), (store_room,0), 82).
holds(2, in((block,5)), (puzzle_room,1), 82).
holds(2, in((block,6)), (puzzle_room,1), 82).
holds(2, in(manipulator_arm_1), (puzzle_room,1), 82).
holds(2, in(manipulator_arm_2), (puzzle_room,1), 82).
holds(2, in(manipulator_end_1), (puzzle_room,1), 82).
holds(2, in(manipulator_end_2), (puzzle_room,1), 82).
holds(2, in(manipulator_limb_1), (puzzle_room,1), 82).
holds(2, in(manipulator_limb_2), (puzzle_room,1), 82).
holds(2, in(puzzle_room_table), (puzzle_room,1), 82).
holds(2, in(puzzle_room_table_left), (puzzle_room,1), 82).
holds(2, in(puzzle_room_table_middle), (puzzle_room,1), 82).
holds(2, in(puzzle_room_table_right), (puzzle_room,1), 82).
holds(2, in(talos), (puzzle_room,1), 82).
holds(2, in_tower((block,1),(block,1)), true, 82).
holds(2, in_tower((block,1),(block,2)), false, 82).
holds(2, in_tower((block,1),(block,3)), true, 82).
holds(2, in_tower((block,1),(block,4)), false, 82).
holds(2, in_tower((block,1),(block,5)), false, 82).
holds(2, in_tower((block,1),(block,6)), false, 82).
holds(2, in_tower((block,2),(block,1)), false, 82).
holds(2, in_tower((block,2),(block,2)), true, 82).
holds(2, in_tower((block,2),(block,3)), false, 82).
holds(2, in_tower((block,2),(block,4)), false, 82).
holds(2, in_tower((block,2),(block,5)), false, 82).
holds(2, in_tower((block,2),(block,6)), false, 82).
holds(2, in_tower((block,3),(block,1)), false, 82).
holds(2, in_tower((block,3),(block,2)), false, 82).
holds(2, in_tower((block,3),(block,3)), false, 82).
holds(2, in_tower((block,3),(block,4)), false, 82).
holds(2, in_tower((block,3),(block,5)), false, 82).
holds(2, in_tower((block,3),(block,6)), false, 82).
holds(2, in_tower((block,4),(block,1)), false, 82).
holds(2, in_tower((block,4),(block,2)), false, 82).
holds(2, in_tower((block,4),(block,3)), false, 82).
holds(2, in_tower((block,4),(block,4)), false, 82).
holds(2, in_tower((block,4),(block,5)), false, 82).
holds(2, in_tower((block,4),(block,6)), false, 82).
holds(2, in_tower((block,5),(block,1)), false, 82).
holds(2, in_tower((block,5),(block,2)), false, 82).
holds(2, in_tower((block,5),(block,3)), false, 82).
holds(2, in_tower((block,5),(block,4)), false, 82).
holds(2, in_tower((block,5),(block,5)), false, 82).
holds(2, in_tower((block,5),(block,6)), false, 82).
holds(2, in_tower((block,6),(block,1)), false, 82).
holds(2, in_tower((block,6),(block,2)), false, 82).
holds(2, in_tower((block,6),(block,3)), false, 82).
holds(2, in_tower((block,6),(block,4)), false, 82).
holds(2, in_tower((block,6),(block,5)), false, 82).
holds(2, in_tower((block,6),(block,6)), true, 82).
holds(2, on((block,1)), puzzle_room_table_left, 82).
holds(2, on((block,2)), puzzle_room_table_right, 82).
holds(2, on((block,3)), (block,1), 82).
holds(2, on((block,4)), nothing, 82).
holds(2, on((block,5)), nothing, 82).
holds(2, on((block,6)), puzzle_room_table_right, 82).
holds(2, tower_base((block,1),puzzle_room_table), true, 82).
holds(2, tower_base((block,2),puzzle_room_table), true, 82).
holds(2, tower_base((block,3),puzzle_room_table), false, 82).
holds(2, tower_base((block,4),puzzle_room_table), false, 82).
holds(2, tower_base((block,5),puzzle_room_table), false, 82).
holds(2, tower_base((block,6),puzzle_room_table), true, 82).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 82).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 82).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 82).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 82).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 82).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 82).

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 308 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table_left, false).
final_goal(2, on((block,1)), puzzle_room_table_middle, false).
final_goal(2, on((block,1)), puzzle_room_table_right, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table_left, false).
final_goal(2, on((block,2)), puzzle_room_table_middle, false).
final_goal(2, on((block,2)), puzzle_room_table_right, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table_left, true).
final_goal(2, on((block,3)), puzzle_room_table_middle, false).
final_goal(2, on((block,3)), puzzle_room_table_right, false).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table_left, false).
final_goal(2, on((block,4)), puzzle_room_table_middle, false).
final_goal(2, on((block,4)), puzzle_room_table_right, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table_left, false).
final_goal(2, on((block,5)), puzzle_room_table_middle, false).
final_goal(2, on((block,5)), puzzle_room_table_right, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table_left, false).
final_goal(2, on((block,6)), puzzle_room_table_middle, false).
final_goal(2, on((block,6)), puzzle_room_table_right, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[18-04-2022_12-43-29] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=83']

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,3),puzzle_room_table_left)', 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'I': 41})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,3))', 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'I': 42})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,3))', 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'I': 42})

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 3 rules into program part base:

sub_goal(2, talos, put(manipulator_end_1,(block,3),puzzle_room_table_left), on((block,3)), puzzle_room_table_left, 41).
sub_goal(2, talos, release(manipulator_end_1,(block,3)), configuration(manipulator_end_1), aligned_with(nothing), 42).
sub_goal(2, talos, release(manipulator_end_1,(block,3)), grasping(manipulator_end_1), nothing, 42).

[18-04-2022_12-43-29] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=83']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A8A2F7CEE0>]
	incrementor = SolveIncrementor(step_start=82, step_increase=1, step_increase_initial=2, step_end_min=84, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1758.9834392999992, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 82), range_=None), IncPart(name='plan_module', args=('#inc', 82, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 82, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 82, 41, 42, 'sequential', 'false'), range_=None)]

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 844 rules

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.005339600000297651s

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.172218s.

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.025221s with result Satisfiable.

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A8A446EE00>

[18-04-2022_12-43-29] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 82)
	('last_sgoals', 42)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('first_sgoals', 41)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A8A446EE00>)

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 82). %* None *%
#program plan_module(#inc, 82, false, false). %* None *%
#program optimisation_module(#inc, 82, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 82, 41, 42, sequential, false). %* None *%

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     81 : Current =     83
Incrementor step ends | Minimum  =     84 : Maximum =    300

[18-04-2022_12-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(83)]), ('state_module', [Number(82), Number(82)]), ('plan_module', [Number(82), Number(82), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(82), Number(82), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(82)]), ('action_preconditions', [Number(82)]), ('variable_relations', [Number(82)]), ('abstraction_mappings', [Number(82)]), ('conformance_module', [Number(82), Number(82), Number(41), Number(42), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(83), Number(82)]), ('plan_module', [Number(83), Number(82), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(83), Number(82), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(83)]), ('action_preconditions', [Number(83)]), ('variable_relations', [Number(83)]), ('abstraction_mappings', [Number(83)]), ('conformance_module', [Number(83), Number(82), Number(41), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.426398s.

[18-04-2022_12-43-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.029099s with result Unsatisfiable.

[18-04-2022_12-43-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.45549669999945763, Incremental time limit = None
Running cumulative time = 0.45549669999945763, Cumulative time limit = 1758.9834392999992
Used memory = (RSS = 2465.511719Mb, VMS = 2479.238281Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     83 : Current =     84
Incrementor step ends | Minimum  =     84 : Maximum =    300

[18-04-2022_12-43-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(84)]), ('state_module', [Number(84), Number(82)]), ('plan_module', [Number(84), Number(82), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(84), Number(82), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(84)]), ('action_preconditions', [Number(84)]), ('variable_relations', [Number(84)]), ('abstraction_mappings', [Number(84)]), ('conformance_module', [Number(84), Number(82), Number(41), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.176702s.

[18-04-2022_12-43-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.027391s with result Satisfiable.

[18-04-2022_12-43-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2040925999999672, Incremental time limit = None
Running cumulative time = 0.6595892999994248, Cumulative time limit = 1758.9834392999992
Used memory = (RSS = 2467.519531Mb, VMS = 2481.246094Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.603100s, Solving = 0.056489s, Total = 0.659589s, Memory = (RSS = 2467.519531Mb, VMS = 2481.246094Mb), Step range = [82-84]), Calls = 2
Final Model :: Total atoms = 21720, Cost = (-1,), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[18-04-2022_12-43-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.426398s, Solving = 0.029099s, Total = 0.455497s, Memory = (RSS = 2465.511719Mb, VMS = 2479.238281Mb), Step range = [82-83]
2 : Statistics :: Grounding = 0.176702s, Solving = 0.027391s, Total = 0.204093s, Memory = (RSS = 2467.519531Mb, VMS = 2481.246094Mb), Step range = [84-84]

[18-04-2022_12-43-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.659589s due to: Stop condition reached.

[18-04-2022_12-43-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[18-04-2022_12-43-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[18-04-2022_12-43-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-43-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[18-04-2022_12-43-30] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38, 81: 39, 82: 40}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80, 39: 81, 40: 82}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-43-31] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38, 81: 39, 82: 40, 83: 41, 84: 42}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80, 39: 81, 40: 82, 41: 83, 42: 84}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-43-31] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 42, Last requested goal index = 42, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[18-04-2022_12-43-31] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.603100s, Solving = 0.056489s, Total = 0.659589s, Memory = (RSS = 2467.519531Mb, VMS = 2481.246094Mb), Step range = [82-84]), Calls = 2
Model :: Total atoms = 21720, Cost = (-1,), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[18-04-2022_12-43-31] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 2 :: Actions = 2                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Planned actions:
        talos : move(((starting_room,1),3,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),4,0))
Step 5:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,0))
Step 6:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,1))
Step 7:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),4,0))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,0))
Step 9:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 10:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 11:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 12:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 13:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 5] talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(store_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 5] talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(store_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 17:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 21:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 23:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 24:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 25:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 26:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 27:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 28:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(puzzle_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(puzzle_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 31:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 35:
    Current Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 37:
    Current Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 38:
    Current Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 39:
    Current Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 40:
    Current Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 41:
    Current Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 42:
    Current Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 43:
    Current Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 44:
    Current Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Planned actions:
        talos : move(((store_room,0),2,1))
Step 45:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 46:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 47:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),0,0))
Step 48:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 49:
    Current Sub-goals:
        [Index = 23] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Achieved Sub-goals:
        [Index = 23] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 50:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 51:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 52:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 53:
    Current Sub-goals:
        [Index = 27] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Achieved Sub-goals:
        [Index = 27] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 54:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 55:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 56:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 29] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 57:
    Current Sub-goals:
        [Index = 30] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 58:
    Current Sub-goals:
        [Index = 30] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 30] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),3,0))
Step 59:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,0))
Step 60:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 61:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 62:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 63:
    Current Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 64:
    Current Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 65:
    Current Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 66:
    Current Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 67:
    Current Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 68:
    Current Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 69:
    Current Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 70:
    Current Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 71:
    Current Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Planned actions:
        talos : move(((puzzle_room,0),0,1))
Step 72:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),0,0))
Step 73:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,0))
Step 74:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),2,0))
Step 75:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Planned actions:
        talos : move(((puzzle_room,1),3,0))
Step 76:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),4,0))
Step 77:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),5,0))
Step 78:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 79:
    Current Sub-goals:
        [Index = 37] talos : put(manipulator_end_1,(block,6),puzzle_room_table_right) -> on((block,6)) = puzzle_room_table_right
    Achieved Sub-goals:
        [Index = 37] talos : put(manipulator_end_1,(block,6),puzzle_room_table_right) -> on((block,6)) = puzzle_room_table_right
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 80:
    Current Sub-goals:
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 81:
    Current Sub-goals:
        [Index = 39] talos : configure(manipulator_end_1,aligned_with((block,3))) -> configuration(manipulator_end_1) = aligned_with((block,3))
    Achieved Sub-goals:
        [Index = 39] talos : configure(manipulator_end_1,aligned_with((block,3))) -> configuration(manipulator_end_1) = aligned_with((block,3))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 82:
    Current Sub-goals:
        [Index = 40] talos : grasp(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = (block,3)
    Achieved Sub-goals:
        [Index = 40] talos : grasp(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 83:
    Current Sub-goals:
        [Index = 41] talos : put(manipulator_end_1,(block,3),puzzle_room_table_left) -> on((block,3)) = puzzle_room_table_left
    Achieved Sub-goals:
        [Index = 41] talos : put(manipulator_end_1,(block,3),puzzle_room_table_left) -> on((block,3)) = puzzle_room_table_left
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 84:
    Current Sub-goals:
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))

[18-04-2022_12-43-31] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[18-04-2022_12-43-31] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[18-04-2022_12-43-31] DEBUG :: ASH Planner Main #1 >> Monolevel problem 8 at level 1 solved.

[18-04-2022_12-43-31] DEBUG :: ASH Planner Main #1 >> Online planning increment 8 finished.

[18-04-2022_12-43-31] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 2 : Total constraining sub-goal stages = 20 : Goals achieved = 13 : Goals unachieved = 7 : Complete = False
Level = 2 : Solved problems = 4 : Total constraining sub-goal stages = 30 : Goals achieved = 24 : Goals unachieved = 6 : Complete = False
Level = 1 : Solved problems = 8 : Total constraining sub-goal stages = 42 : Goals achieved = 42 : Goals unachieved = 0 : Complete = False

[18-04-2022_12-43-31] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 2, Highest = 3.

[18-04-2022_12-43-31] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 9 by method ground-first is [1-2].

[18-04-2022_12-43-31] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning problem 5 at level 2:
Total Templated Partial Problems = 3, Problem Range = [4-6], Size = 9, Sub-goal Stage Range = [22-30]
Division points [total=2] : [(Index = 24, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 27, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[18-04-2022_12-43-31] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [25-27]

[18-04-2022_12-43-31] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 42, chosen step range to extract = range(0, 43)

[18-04-2022_12-43-31] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 48
Level [1]: Length = 84, Total actions = 84, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-31] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 30, chosen step range to extract = range(0, 31)

[18-04-2022_12-43-31] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 48
Level [1]: Length = 84, Total actions = 84, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-31] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 20, chosen step range to extract = range(0, 21)

[18-04-2022_12-43-31] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 48
Level [1]: Length = 84, Total actions = 84, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-31] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [25-27], problem number = 5, increment number = 9

[18-04-2022_12-43-31] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 25)
	('last_sgoals', 27)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1789.6817875999986)
	('length_limit', 300)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[18-04-2022_12-43-31] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 2] partial conformance refinement (sequential) with sgoals range [25-27] : Concurrency disabled : Minimum search length bound enabled with value 44

[18-04-2022_12-43-31] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 25
last_sgoals = 27
start_step = 42
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 44

[18-04-2022_12-43-31] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[18-04-2022_12-43-31] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[18-04-2022_12-43-31] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[18-04-2022_12-43-31] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[18-04-2022_12-43-31] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-43-31] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 42 as problem start state.

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 42})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 42})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 42})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 42})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 42})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 42})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 42})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 42})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 42})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 42})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 2, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 2, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 2, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 2, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 2, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 42})
Fluent({'L': 3, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 42})
Fluent({'L': 3, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 42})
Fluent({'L': 3, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 42})
Fluent({'L': 3, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 42})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 42})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 42})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 42})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 42})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 42})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 42})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 42})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 42})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 42})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 42})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 42})

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 157 rules into program part ash_initial_state:

holds(2, complete_tower(blue,puzzle_room_table), false, 42).
holds(2, complete_tower(red,puzzle_room_table), false, 42).
holds(2, configuration(manipulator_end_1), aligned_with(nothing), 42).
holds(2, configuration(manipulator_end_2), aligned_with((block,5)), 42).
holds(2, configuration(manipulator_limb_1), extended, 42).
holds(2, configuration(manipulator_limb_2), retracted, 42).
holds(2, configuration(puzzle_room_door), open, 42).
holds(2, configuration(starting_room_door), closed, 42).
holds(2, configuration(store_room_door), open, 42).
holds(2, grasping(manipulator_arm_1), nothing, 42).
holds(2, grasping(manipulator_arm_2), (block,5), 42).
holds(2, grasping(manipulator_end_1), nothing, 42).
holds(2, grasping(manipulator_end_2), (block,5), 42).
holds(2, in((block,1)), (puzzle_room,1), 42).
holds(2, in((block,2)), (puzzle_room,1), 42).
holds(2, in((block,3)), (puzzle_room,1), 42).
holds(2, in((block,4)), (store_room,0), 42).
holds(2, in((block,5)), (puzzle_room,1), 42).
holds(2, in((block,6)), (puzzle_room,1), 42).
holds(2, in(manipulator_arm_1), (puzzle_room,1), 42).
holds(2, in(manipulator_arm_2), (puzzle_room,1), 42).
holds(2, in(manipulator_end_1), (puzzle_room,1), 42).
holds(2, in(manipulator_end_2), (puzzle_room,1), 42).
holds(2, in(manipulator_limb_1), (puzzle_room,1), 42).
holds(2, in(manipulator_limb_2), (puzzle_room,1), 42).
holds(2, in(puzzle_room_table), (puzzle_room,1), 42).
holds(2, in(puzzle_room_table_left), (puzzle_room,1), 42).
holds(2, in(puzzle_room_table_middle), (puzzle_room,1), 42).
holds(2, in(puzzle_room_table_right), (puzzle_room,1), 42).
holds(2, in(talos), (puzzle_room,1), 42).
holds(2, in_tower((block,1),(block,1)), true, 42).
holds(2, in_tower((block,1),(block,2)), false, 42).
holds(2, in_tower((block,1),(block,3)), false, 42).
holds(2, in_tower((block,1),(block,4)), false, 42).
holds(2, in_tower((block,1),(block,5)), false, 42).
holds(2, in_tower((block,1),(block,6)), false, 42).
holds(2, in_tower((block,2),(block,1)), false, 42).
holds(2, in_tower((block,2),(block,2)), true, 42).
holds(2, in_tower((block,2),(block,3)), false, 42).
holds(2, in_tower((block,2),(block,4)), false, 42).
holds(2, in_tower((block,2),(block,5)), false, 42).
holds(2, in_tower((block,2),(block,6)), false, 42).
holds(2, in_tower((block,3),(block,1)), false, 42).
holds(2, in_tower((block,3),(block,2)), false, 42).
holds(2, in_tower((block,3),(block,3)), true, 42).
holds(2, in_tower((block,3),(block,4)), false, 42).
holds(2, in_tower((block,3),(block,5)), false, 42).
holds(2, in_tower((block,3),(block,6)), false, 42).
holds(2, in_tower((block,4),(block,1)), false, 42).
holds(2, in_tower((block,4),(block,2)), false, 42).
holds(2, in_tower((block,4),(block,3)), false, 42).
holds(2, in_tower((block,4),(block,4)), false, 42).
holds(2, in_tower((block,4),(block,5)), false, 42).
holds(2, in_tower((block,4),(block,6)), false, 42).
holds(2, in_tower((block,5),(block,1)), false, 42).
holds(2, in_tower((block,5),(block,2)), false, 42).
holds(2, in_tower((block,5),(block,3)), false, 42).
holds(2, in_tower((block,5),(block,4)), false, 42).
holds(2, in_tower((block,5),(block,5)), false, 42).
holds(2, in_tower((block,5),(block,6)), false, 42).
holds(2, in_tower((block,6),(block,1)), false, 42).
holds(2, in_tower((block,6),(block,2)), false, 42).
holds(2, in_tower((block,6),(block,3)), false, 42).
holds(2, in_tower((block,6),(block,4)), false, 42).
holds(2, in_tower((block,6),(block,5)), false, 42).
holds(2, in_tower((block,6),(block,6)), true, 42).
holds(2, on((block,1)), puzzle_room_table_left, 42).
holds(2, on((block,2)), puzzle_room_table_right, 42).
holds(2, on((block,3)), puzzle_room_table_left, 42).
holds(2, on((block,4)), nothing, 42).
holds(2, on((block,5)), nothing, 42).
holds(2, on((block,6)), puzzle_room_table_right, 42).
holds(2, tower_base((block,1),puzzle_room_table), true, 42).
holds(2, tower_base((block,2),puzzle_room_table), true, 42).
holds(2, tower_base((block,3),puzzle_room_table), true, 42).
holds(2, tower_base((block,4),puzzle_room_table), false, 42).
holds(2, tower_base((block,5),puzzle_room_table), false, 42).
holds(2, tower_base((block,6),puzzle_room_table), true, 42).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 42).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 42).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 42).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 42).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 42).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 42).
holds(3, complete_tower(blue,puzzle_room_table), false, 42).
holds(3, complete_tower(red,puzzle_room_table), false, 42).
holds(3, configuration(manipulator_arm_1), extended, 42).
holds(3, configuration(manipulator_arm_2), retracted, 42).
holds(3, configuration(puzzle_room_door), open, 42).
holds(3, configuration(starting_room_door), closed, 42).
holds(3, configuration(store_room_door), open, 42).
holds(3, grasping(manipulator_arm_1), nothing, 42).
holds(3, grasping(manipulator_arm_2), (block,5), 42).
holds(3, in((block,1)), puzzle_room, 42).
holds(3, in((block,2)), puzzle_room, 42).
holds(3, in((block,3)), puzzle_room, 42).
holds(3, in((block,4)), store_room, 42).
holds(3, in((block,5)), puzzle_room, 42).
holds(3, in((block,6)), puzzle_room, 42).
holds(3, in(manipulator_arm_1), puzzle_room, 42).
holds(3, in(manipulator_arm_2), puzzle_room, 42).
holds(3, in(puzzle_room_table), puzzle_room, 42).
holds(3, in(talos), puzzle_room, 42).
holds(3, in_tower((block,1),(block,1)), true, 42).
holds(3, in_tower((block,1),(block,2)), false, 42).
holds(3, in_tower((block,1),(block,3)), false, 42).
holds(3, in_tower((block,1),(block,4)), false, 42).
holds(3, in_tower((block,1),(block,5)), false, 42).
holds(3, in_tower((block,1),(block,6)), false, 42).
holds(3, in_tower((block,2),(block,1)), false, 42).
holds(3, in_tower((block,2),(block,2)), true, 42).
holds(3, in_tower((block,2),(block,3)), false, 42).
holds(3, in_tower((block,2),(block,4)), false, 42).
holds(3, in_tower((block,2),(block,5)), false, 42).
holds(3, in_tower((block,2),(block,6)), false, 42).
holds(3, in_tower((block,3),(block,1)), false, 42).
holds(3, in_tower((block,3),(block,2)), false, 42).
holds(3, in_tower((block,3),(block,3)), true, 42).
holds(3, in_tower((block,3),(block,4)), false, 42).
holds(3, in_tower((block,3),(block,5)), false, 42).
holds(3, in_tower((block,3),(block,6)), false, 42).
holds(3, in_tower((block,4),(block,1)), false, 42).
holds(3, in_tower((block,4),(block,2)), false, 42).
holds(3, in_tower((block,4),(block,3)), false, 42).
holds(3, in_tower((block,4),(block,4)), false, 42).
holds(3, in_tower((block,4),(block,5)), false, 42).
holds(3, in_tower((block,4),(block,6)), false, 42).
holds(3, in_tower((block,5),(block,1)), false, 42).
holds(3, in_tower((block,5),(block,2)), false, 42).
holds(3, in_tower((block,5),(block,3)), false, 42).
holds(3, in_tower((block,5),(block,4)), false, 42).
holds(3, in_tower((block,5),(block,5)), false, 42).
holds(3, in_tower((block,5),(block,6)), false, 42).
holds(3, in_tower((block,6),(block,1)), false, 42).
holds(3, in_tower((block,6),(block,2)), false, 42).
holds(3, in_tower((block,6),(block,3)), false, 42).
holds(3, in_tower((block,6),(block,4)), false, 42).
holds(3, in_tower((block,6),(block,5)), false, 42).
holds(3, in_tower((block,6),(block,6)), true, 42).
holds(3, on((block,1)), puzzle_room_table, 42).
holds(3, on((block,2)), puzzle_room_table, 42).
holds(3, on((block,3)), puzzle_room_table, 42).
holds(3, on((block,4)), nothing, 42).
holds(3, on((block,5)), nothing, 42).
holds(3, on((block,6)), puzzle_room_table, 42).
holds(3, tower_base((block,1),puzzle_room_table), true, 42).
holds(3, tower_base((block,2),puzzle_room_table), true, 42).
holds(3, tower_base((block,3),puzzle_room_table), true, 42).
holds(3, tower_base((block,4),puzzle_room_table), false, 42).
holds(3, tower_base((block,5),puzzle_room_table), false, 42).
holds(3, tower_base((block,6),puzzle_room_table), true, 42).
holds(3, unordered_tower((block,1),puzzle_room_table), false, 42).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 42).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 42).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 42).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 42).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 42).

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 296 rules into program part ash_goal_state:

final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table_left, false).
final_goal(2, on((block,1)), puzzle_room_table_middle, false).
final_goal(2, on((block,1)), puzzle_room_table_right, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table_left, false).
final_goal(2, on((block,2)), puzzle_room_table_middle, false).
final_goal(2, on((block,2)), puzzle_room_table_right, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table_left, true).
final_goal(2, on((block,3)), puzzle_room_table_middle, false).
final_goal(2, on((block,3)), puzzle_room_table_right, false).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table_left, false).
final_goal(2, on((block,4)), puzzle_room_table_middle, false).
final_goal(2, on((block,4)), puzzle_room_table_right, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table_left, false).
final_goal(2, on((block,5)), puzzle_room_table_middle, false).
final_goal(2, on((block,5)), puzzle_room_table_right, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table_left, false).
final_goal(2, on((block,6)), puzzle_room_table_middle, false).
final_goal(2, on((block,6)), puzzle_room_table_right, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).

[18-04-2022_12-43-31] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=44']

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'I': 25})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 26})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 27})

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 3 rules into program part base:

sub_goal(3, talos, grasp(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), (block,2), 25).
sub_goal(3, talos, put(manipulator_arm_1,(block,2),(block,3)), on((block,2)), (block,3), 26).
sub_goal(3, talos, release(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), nothing, 27).

[18-04-2022_12-43-31] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=44']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A8A4173430>]
	incrementor = SolveIncrementor(step_start=42, step_increase=1, step_increase_initial=3, step_end_min=45, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1789.6817875999986, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 42), range_=None), IncPart(name='plan_module', args=('#inc', 42, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 42, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 42, 25, 27, 'sequential', 'false'), range_=None)]

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 825 rules

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.00516799999968498s

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.156812s.

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022342s with result Satisfiable.

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A8A43BBBD0>

[18-04-2022_12-43-31] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 2)
	('start_step', 42)
	('last_sgoals', 27)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('first_sgoals', 25)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A8A43BBBD0>)

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 42). %* None *%
#program plan_module(#inc, 42, false, false). %* None *%
#program optimisation_module(#inc, 42, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 42, 25, 27, sequential, false). %* None *%

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     41 : Current =     44
Incrementor step ends | Minimum  =     45 : Maximum =    300

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(44)]), ('state_module', [Number(42), Number(42)]), ('plan_module', [Number(42), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(42), Number(42), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('conformance_module', [Number(42), Number(42), Number(25), Number(27), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(43), Number(42)]), ('plan_module', [Number(43), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(43), Number(42), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(43)]), ('action_preconditions', [Number(43)]), ('variable_relations', [Number(43)]), ('abstraction_mappings', [Number(43)]), ('conformance_module', [Number(43), Number(42), Number(25), Number(27), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(44), Number(42)]), ('plan_module', [Number(44), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(44), Number(42), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(44)]), ('action_preconditions', [Number(44)]), ('variable_relations', [Number(44)]), ('abstraction_mappings', [Number(44)]), ('conformance_module', [Number(44), Number(42), Number(25), Number(27), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.195994s.

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.034725s with result Unsatisfiable.

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.23071879999952216, Incremental time limit = None
Running cumulative time = 0.23071879999952216, Cumulative time limit = 1789.6817875999986
Used memory = (RSS = 2465.828125Mb, VMS = 2479.738281Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     44 : Current =     45
Incrementor step ends | Minimum  =     45 : Maximum =    300

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(45)]), ('state_module', [Number(45), Number(42)]), ('plan_module', [Number(45), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(45), Number(42), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(45)]), ('action_preconditions', [Number(45)]), ('variable_relations', [Number(45)]), ('abstraction_mappings', [Number(45)]), ('conformance_module', [Number(45), Number(42), Number(25), Number(27), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.090521s.

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010111s with result Unsatisfiable.

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.10063239999908546, Incremental time limit = None
Running cumulative time = 0.3313511999986076, Cumulative time limit = 1789.6817875999986
Used memory = (RSS = 2465.906250Mb, VMS = 2479.738281Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     45 : Current =     46
Incrementor step ends | Minimum  =     45 : Maximum =    300

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(46)]), ('state_module', [Number(46), Number(42)]), ('plan_module', [Number(46), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(46), Number(42), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(46)]), ('action_preconditions', [Number(46)]), ('variable_relations', [Number(46)]), ('abstraction_mappings', [Number(46)]), ('conformance_module', [Number(46), Number(42), Number(25), Number(27), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.103795s.

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.028126s with result Satisfiable.

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.13192069999968226, Incremental time limit = None
Running cumulative time = 0.4632718999982899, Cumulative time limit = 1789.6817875999986
Used memory = (RSS = 2465.996094Mb, VMS = 2479.738281Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.390310s, Solving = 0.072962s, Total = 0.463272s, Memory = (RSS = 2465.996094Mb, VMS = 2479.738281Mb), Step range = [42-46]), Calls = 3
Final Model :: Total atoms = 18708, Cost = (-1,), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.195994s, Solving = 0.034725s, Total = 0.230719s, Memory = (RSS = 2465.828125Mb, VMS = 2479.738281Mb), Step range = [42-44]
2 : Statistics :: Grounding = 0.090521s, Solving = 0.010111s, Total = 0.100632s, Memory = (RSS = 2465.906250Mb, VMS = 2479.738281Mb), Step range = [45-45]
3 : Statistics :: Grounding = 0.103795s, Solving = 0.028126s, Total = 0.131921s, Memory = (RSS = 2465.996094Mb, VMS = 2479.738281Mb), Step range = [46-46]

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.463272s due to: Stop condition reached.

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38, 81: 39, 82: 40, 83: 41, 84: 42}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80, 39: 81, 40: 82, 41: 83, 42: 84}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38, 81: 39, 82: 40, 83: 41, 84: 42}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80, 39: 81, 40: 82, 41: 83, 42: 84}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24, 43: 25, 44: 25, 45: 26, 46: 27}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42, 25: 44, 26: 45, 27: 46}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 27, Last requested goal index = 27, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.390310s, Solving = 0.072962s, Total = 0.463272s, Memory = (RSS = 2465.996094Mb, VMS = 2479.738281Mb), Step range = [42-46]), Calls = 3
Model :: Total atoms = 18708, Cost = (-1,), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                  Steps = 4 :: Actions = 4                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 25:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 26:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 27:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 28:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 29:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 30:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : move((store_room,1))
Step 31:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 37:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 38:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 39:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 40:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 41:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 42:
    Current Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 43:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 44:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 45:
    Current Sub-goals:
        [Index = 26] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 26] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 46:
    Current Sub-goals:
        [Index = 27] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 27] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,2))

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=42, end_step=None

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for parts of the existing plan at the current level that have already been divided: start_step=42

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> Value of end step of abstract plan to divide adjusted for right blend of current problem: end_step=46

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=42

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> Preparing to invoke division strategy...

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> Online method OnlineMethod.GroundFirst chose to invoke the division strategy before a downwards level change:Current increment = 9, Current planning level is complete = False

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 46, chosen step range to extract = range(42, 47)

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 46, Total actions = 46, Produced sub-goal stages = 46, Produced sub-goal literals = 53
Level [1]: Length = 84, Total actions = 84, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =   4, AC =   4, CF = 1.0, GT =   4.60s, ST =   1.14s, OT = 0.00s, TT =   5.74s, EF = (LE = 1.3, AC = 1.3), ED = (LE = 0.6, AC = 0.6), EB = (LE = 0.4, AC = 0.4)

[18-04-2022_12-43-32] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=4, start_step=42, blend=Blend(left=0, right=0)

[18-04-2022_12-43-32] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=0, small_group_size=2, large_group_size=3

[18-04-2022_12-43-32] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=44, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 2, Problem Range = [9-10], Size = 4, Sub-goal Stage Range = [43-46]
Division points [total=1] : [(Index = 44, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> Monolevel problem 5 at level 2 solved.

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 9 at level 1:
Total Templated Partial Problems = 2, Problem Range = [9-10], Size = 4, Sub-goal Stage Range = [43-46]
Division points [total=1] : [(Index = 44, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [43-44]

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 84, chosen step range to extract = range(0, 85)

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 46, Total actions = 46, Produced sub-goal stages = 46, Produced sub-goal literals = 53
Level [1]: Length = 84, Total actions = 84, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 46, chosen step range to extract = range(0, 47)

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 46, Total actions = 46, Produced sub-goal stages = 46, Produced sub-goal literals = 53
Level [1]: Length = 84, Total actions = 84, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 30, chosen step range to extract = range(0, 31)

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 46, Total actions = 46, Produced sub-goal stages = 46, Produced sub-goal literals = 53
Level [1]: Length = 84, Total actions = 84, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 20, chosen step range to extract = range(0, 21)

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 46, Total actions = 46, Produced sub-goal stages = 46, Produced sub-goal literals = 53
Level [1]: Length = 84, Total actions = 84, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [43-44], problem number = 9, increment number = 9

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 43)
	('last_sgoals', 44)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1757.8605781000015)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [43-44] : Concurrency disabled : Minimum search length bound enabled with value 85

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 43
last_sgoals = 44
start_step = 84
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 85

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[18-04-2022_12-43-32] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[18-04-2022_12-43-32] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 84 as problem start state.

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 84})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 84})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 84})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 84})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 84})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 84})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 84})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 84})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 84})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '((puzzle_room,1),5,0)', 'S': 84})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '((puzzle_room,1),5,0)', 'S': 84})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '((puzzle_room,1),5,0)', 'S': 84})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '((store_room,0),0,0)', 'S': 84})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '((puzzle_room,1),5,0)', 'S': 84})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '((puzzle_room,1),5,0)', 'S': 84})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '((puzzle_room,1),5,0)', 'S': 84})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '((puzzle_room,1),5,0)', 'S': 84})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '((puzzle_room,1),5,0)', 'S': 84})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '((puzzle_room,1),5,0)', 'S': 84})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '((puzzle_room,1),5,0)', 'S': 84})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '((puzzle_room,1),5,0)', 'S': 84})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '((puzzle_room,1),5,0)', 'S': 84})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '((puzzle_room,1),5,0)', 'S': 84})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '((puzzle_room,1),5,0)', 'S': 84})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '((puzzle_room,1),5,0)', 'S': 84})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '((puzzle_room,1),5,0)', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 84})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 84})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 84})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 84})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 84})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 84})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 84})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 84})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 84})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 84})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 84})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 84})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 84})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 84})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 84})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 84})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 84})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 84})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 84})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 84})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 84})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 84})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 84})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 84})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 84})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 84})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 84})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 84})
Fluent({'L': 2, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 84})
Fluent({'L': 2, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 84})
Fluent({'L': 2, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 84})
Fluent({'L': 2, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 84})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 84})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 84})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 84})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 84})
Fluent({'L': 2, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 84})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 84})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 84})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 84})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 84})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 84})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 84})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 84})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 84})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 84})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 84})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 84})

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 164 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 84).
holds(1, complete_tower(red,puzzle_room_table), false, 84).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 84).
holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 84).
holds(1, configuration(manipulator_limb_1), extended, 84).
holds(1, configuration(manipulator_limb_2), retracted, 84).
holds(1, configuration(puzzle_room_door), open, 84).
holds(1, configuration(starting_room_door), closed, 84).
holds(1, configuration(store_room_door), open, 84).
holds(1, grasping(manipulator_end_1), nothing, 84).
holds(1, grasping(manipulator_end_2), (block,5), 84).
holds(1, in((block,1)), ((puzzle_room,1),5,0), 84).
holds(1, in((block,2)), ((puzzle_room,1),5,0), 84).
holds(1, in((block,3)), ((puzzle_room,1),5,0), 84).
holds(1, in((block,4)), ((store_room,0),0,0), 84).
holds(1, in((block,5)), ((puzzle_room,1),5,0), 84).
holds(1, in((block,6)), ((puzzle_room,1),5,0), 84).
holds(1, in(manipulator_arm_1), ((puzzle_room,1),5,0), 84).
holds(1, in(manipulator_arm_2), ((puzzle_room,1),5,0), 84).
holds(1, in(manipulator_end_1), ((puzzle_room,1),5,0), 84).
holds(1, in(manipulator_end_2), ((puzzle_room,1),5,0), 84).
holds(1, in(manipulator_limb_1), ((puzzle_room,1),5,0), 84).
holds(1, in(manipulator_limb_2), ((puzzle_room,1),5,0), 84).
holds(1, in(puzzle_room_table), ((puzzle_room,1),5,0), 84).
holds(1, in(puzzle_room_table_left), ((puzzle_room,1),5,0), 84).
holds(1, in(puzzle_room_table_middle), ((puzzle_room,1),5,0), 84).
holds(1, in(puzzle_room_table_right), ((puzzle_room,1),5,0), 84).
holds(1, in(talos), ((puzzle_room,1),5,0), 84).
holds(1, in_tower((block,1),(block,1)), true, 84).
holds(1, in_tower((block,1),(block,2)), false, 84).
holds(1, in_tower((block,1),(block,3)), false, 84).
holds(1, in_tower((block,1),(block,4)), false, 84).
holds(1, in_tower((block,1),(block,5)), false, 84).
holds(1, in_tower((block,1),(block,6)), false, 84).
holds(1, in_tower((block,2),(block,1)), false, 84).
holds(1, in_tower((block,2),(block,2)), true, 84).
holds(1, in_tower((block,2),(block,3)), false, 84).
holds(1, in_tower((block,2),(block,4)), false, 84).
holds(1, in_tower((block,2),(block,5)), false, 84).
holds(1, in_tower((block,2),(block,6)), false, 84).
holds(1, in_tower((block,3),(block,1)), false, 84).
holds(1, in_tower((block,3),(block,2)), false, 84).
holds(1, in_tower((block,3),(block,3)), true, 84).
holds(1, in_tower((block,3),(block,4)), false, 84).
holds(1, in_tower((block,3),(block,5)), false, 84).
holds(1, in_tower((block,3),(block,6)), false, 84).
holds(1, in_tower((block,4),(block,1)), false, 84).
holds(1, in_tower((block,4),(block,2)), false, 84).
holds(1, in_tower((block,4),(block,3)), false, 84).
holds(1, in_tower((block,4),(block,4)), false, 84).
holds(1, in_tower((block,4),(block,5)), false, 84).
holds(1, in_tower((block,4),(block,6)), false, 84).
holds(1, in_tower((block,5),(block,1)), false, 84).
holds(1, in_tower((block,5),(block,2)), false, 84).
holds(1, in_tower((block,5),(block,3)), false, 84).
holds(1, in_tower((block,5),(block,4)), false, 84).
holds(1, in_tower((block,5),(block,5)), false, 84).
holds(1, in_tower((block,5),(block,6)), false, 84).
holds(1, in_tower((block,6),(block,1)), false, 84).
holds(1, in_tower((block,6),(block,2)), false, 84).
holds(1, in_tower((block,6),(block,3)), false, 84).
holds(1, in_tower((block,6),(block,4)), false, 84).
holds(1, in_tower((block,6),(block,5)), false, 84).
holds(1, in_tower((block,6),(block,6)), true, 84).
holds(1, on((block,1)), puzzle_room_table_left, 84).
holds(1, on((block,2)), puzzle_room_table_right, 84).
holds(1, on((block,3)), puzzle_room_table_left, 84).
holds(1, on((block,4)), nothing, 84).
holds(1, on((block,5)), nothing, 84).
holds(1, on((block,6)), puzzle_room_table_right, 84).
holds(1, tower_base((block,1),puzzle_room_table), true, 84).
holds(1, tower_base((block,2),puzzle_room_table), true, 84).
holds(1, tower_base((block,3),puzzle_room_table), true, 84).
holds(1, tower_base((block,4),puzzle_room_table), false, 84).
holds(1, tower_base((block,5),puzzle_room_table), false, 84).
holds(1, tower_base((block,6),puzzle_room_table), true, 84).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 84).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 84).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 84).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 84).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 84).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 84).
holds(2, complete_tower(blue,puzzle_room_table), false, 84).
holds(2, complete_tower(red,puzzle_room_table), false, 84).
holds(2, configuration(manipulator_end_1), aligned_with(nothing), 84).
holds(2, configuration(manipulator_end_2), aligned_with((block,5)), 84).
holds(2, configuration(manipulator_limb_1), extended, 84).
holds(2, configuration(manipulator_limb_2), retracted, 84).
holds(2, configuration(puzzle_room_door), open, 84).
holds(2, configuration(starting_room_door), closed, 84).
holds(2, configuration(store_room_door), open, 84).
holds(2, grasping(manipulator_end_1), nothing, 84).
holds(2, grasping(manipulator_end_2), (block,5), 84).
holds(2, in((block,1)), (puzzle_room,1), 84).
holds(2, in((block,2)), (puzzle_room,1), 84).
holds(2, in((block,3)), (puzzle_room,1), 84).
holds(2, in((block,4)), (store_room,0), 84).
holds(2, in((block,5)), (puzzle_room,1), 84).
holds(2, in((block,6)), (puzzle_room,1), 84).
holds(2, in(manipulator_arm_1), (puzzle_room,1), 84).
holds(2, in(manipulator_arm_2), (puzzle_room,1), 84).
holds(2, in(manipulator_end_1), (puzzle_room,1), 84).
holds(2, in(manipulator_end_2), (puzzle_room,1), 84).
holds(2, in(manipulator_limb_1), (puzzle_room,1), 84).
holds(2, in(manipulator_limb_2), (puzzle_room,1), 84).
holds(2, in(puzzle_room_table), (puzzle_room,1), 84).
holds(2, in(puzzle_room_table_left), (puzzle_room,1), 84).
holds(2, in(puzzle_room_table_middle), (puzzle_room,1), 84).
holds(2, in(puzzle_room_table_right), (puzzle_room,1), 84).
holds(2, in(talos), (puzzle_room,1), 84).
holds(2, in_tower((block,1),(block,1)), true, 84).
holds(2, in_tower((block,1),(block,2)), false, 84).
holds(2, in_tower((block,1),(block,3)), false, 84).
holds(2, in_tower((block,1),(block,4)), false, 84).
holds(2, in_tower((block,1),(block,5)), false, 84).
holds(2, in_tower((block,1),(block,6)), false, 84).
holds(2, in_tower((block,2),(block,1)), false, 84).
holds(2, in_tower((block,2),(block,2)), true, 84).
holds(2, in_tower((block,2),(block,3)), false, 84).
holds(2, in_tower((block,2),(block,4)), false, 84).
holds(2, in_tower((block,2),(block,5)), false, 84).
holds(2, in_tower((block,2),(block,6)), false, 84).
holds(2, in_tower((block,3),(block,1)), false, 84).
holds(2, in_tower((block,3),(block,2)), false, 84).
holds(2, in_tower((block,3),(block,3)), true, 84).
holds(2, in_tower((block,3),(block,4)), false, 84).
holds(2, in_tower((block,3),(block,5)), false, 84).
holds(2, in_tower((block,3),(block,6)), false, 84).
holds(2, in_tower((block,4),(block,1)), false, 84).
holds(2, in_tower((block,4),(block,2)), false, 84).
holds(2, in_tower((block,4),(block,3)), false, 84).
holds(2, in_tower((block,4),(block,4)), false, 84).
holds(2, in_tower((block,4),(block,5)), false, 84).
holds(2, in_tower((block,4),(block,6)), false, 84).
holds(2, in_tower((block,5),(block,1)), false, 84).
holds(2, in_tower((block,5),(block,2)), false, 84).
holds(2, in_tower((block,5),(block,3)), false, 84).
holds(2, in_tower((block,5),(block,4)), false, 84).
holds(2, in_tower((block,5),(block,5)), false, 84).
holds(2, in_tower((block,5),(block,6)), false, 84).
holds(2, in_tower((block,6),(block,1)), false, 84).
holds(2, in_tower((block,6),(block,2)), false, 84).
holds(2, in_tower((block,6),(block,3)), false, 84).
holds(2, in_tower((block,6),(block,4)), false, 84).
holds(2, in_tower((block,6),(block,5)), false, 84).
holds(2, in_tower((block,6),(block,6)), true, 84).
holds(2, on((block,1)), puzzle_room_table_left, 84).
holds(2, on((block,2)), puzzle_room_table_right, 84).
holds(2, on((block,3)), puzzle_room_table_left, 84).
holds(2, on((block,4)), nothing, 84).
holds(2, on((block,5)), nothing, 84).
holds(2, on((block,6)), puzzle_room_table_right, 84).
holds(2, tower_base((block,1),puzzle_room_table), true, 84).
holds(2, tower_base((block,2),puzzle_room_table), true, 84).
holds(2, tower_base((block,3),puzzle_room_table), true, 84).
holds(2, tower_base((block,4),puzzle_room_table), false, 84).
holds(2, tower_base((block,5),puzzle_room_table), false, 84).
holds(2, tower_base((block,6),puzzle_room_table), true, 84).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 84).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 84).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 84).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 84).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 84).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 84).

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 308 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table_left, false).
final_goal(2, on((block,1)), puzzle_room_table_middle, false).
final_goal(2, on((block,1)), puzzle_room_table_right, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table_left, false).
final_goal(2, on((block,2)), puzzle_room_table_middle, false).
final_goal(2, on((block,2)), puzzle_room_table_right, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table_left, true).
final_goal(2, on((block,3)), puzzle_room_table_middle, false).
final_goal(2, on((block,3)), puzzle_room_table_right, false).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table_left, false).
final_goal(2, on((block,4)), puzzle_room_table_middle, false).
final_goal(2, on((block,4)), puzzle_room_table_right, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table_left, false).
final_goal(2, on((block,5)), puzzle_room_table_middle, false).
final_goal(2, on((block,5)), puzzle_room_table_right, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table_left, false).
final_goal(2, on((block,6)), puzzle_room_table_middle, false).
final_goal(2, on((block,6)), puzzle_room_table_right, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=85']

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,2)))', 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,2))', 'I': 43})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,2))', 'F': 'grasping(manipulator_end_1)', 'V': '(block,2)', 'I': 44})

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 2 rules into program part base:

sub_goal(2, talos, configure(manipulator_end_1,aligned_with((block,2))), configuration(manipulator_end_1), aligned_with((block,2)), 43).
sub_goal(2, talos, grasp(manipulator_end_1,(block,2)), grasping(manipulator_end_1), (block,2), 44).

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=85']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A8A4173820>]
	incrementor = SolveIncrementor(step_start=84, step_increase=1, step_increase_initial=2, step_end_min=86, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1757.8605781000015, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 84), range_=None), IncPart(name='plan_module', args=('#inc', 84, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 84, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 84, 43, 44, 'sequential', 'false'), range_=None)]

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 843 rules

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.005354800000532123s

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.170740s.

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.024738s with result Satisfiable.

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A8A43ECD60>

[18-04-2022_12-43-32] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 84)
	('last_sgoals', 44)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('first_sgoals', 43)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A8A43ECD60>)

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 84). %* None *%
#program plan_module(#inc, 84, false, false). %* None *%
#program optimisation_module(#inc, 84, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 84, 43, 44, sequential, false). %* None *%

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     83 : Current =     85
Incrementor step ends | Minimum  =     86 : Maximum =    300

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(85)]), ('state_module', [Number(84), Number(84)]), ('plan_module', [Number(84), Number(84), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(84), Number(84), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(84)]), ('action_preconditions', [Number(84)]), ('variable_relations', [Number(84)]), ('abstraction_mappings', [Number(84)]), ('conformance_module', [Number(84), Number(84), Number(43), Number(44), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(85), Number(84)]), ('plan_module', [Number(85), Number(84), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(85), Number(84), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(85)]), ('action_preconditions', [Number(85)]), ('variable_relations', [Number(85)]), ('abstraction_mappings', [Number(85)]), ('conformance_module', [Number(85), Number(84), Number(43), Number(44), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.428946s.

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.034938s with result Unsatisfiable.

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4638838000009855, Incremental time limit = None
Running cumulative time = 0.4638838000009855, Cumulative time limit = 1757.8605781000015
Used memory = (RSS = 2466.285156Mb, VMS = 2479.738281Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     85 : Current =     86
Incrementor step ends | Minimum  =     86 : Maximum =    300

[18-04-2022_12-43-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(86)]), ('state_module', [Number(86), Number(84)]), ('plan_module', [Number(86), Number(84), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(86), Number(84), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(86)]), ('action_preconditions', [Number(86)]), ('variable_relations', [Number(86)]), ('abstraction_mappings', [Number(86)]), ('conformance_module', [Number(86), Number(84), Number(43), Number(44), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.177001s.

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.026844s with result Satisfiable.

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.20384550000107993, Incremental time limit = None
Running cumulative time = 0.6677293000020654, Cumulative time limit = 1757.8605781000015
Used memory = (RSS = 2468.664062Mb, VMS = 2482.246094Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.605947s, Solving = 0.061782s, Total = 0.667729s, Memory = (RSS = 2468.664062Mb, VMS = 2482.246094Mb), Step range = [84-86]), Calls = 2
Final Model :: Total atoms = 21719, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.428946s, Solving = 0.034938s, Total = 0.463884s, Memory = (RSS = 2466.285156Mb, VMS = 2479.738281Mb), Step range = [84-85]
2 : Statistics :: Grounding = 0.177001s, Solving = 0.026844s, Total = 0.203846s, Memory = (RSS = 2468.664062Mb, VMS = 2482.246094Mb), Step range = [86-86]

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.667729s due to: Stop condition reached.

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[18-04-2022_12-43-33] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38, 81: 39, 82: 40, 83: 41, 84: 42}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80, 39: 81, 40: 82, 41: 83, 42: 84}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24, 43: 25, 44: 25, 45: 26, 46: 27}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42, 25: 44, 26: 45, 27: 46}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-43-33] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38, 81: 39, 82: 40, 83: 41, 84: 42, 85: 43, 86: 44}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80, 39: 81, 40: 82, 41: 83, 42: 84, 43: 85, 44: 86}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24, 43: 25, 44: 25, 45: 26, 46: 27}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42, 25: 44, 26: 45, 27: 46}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-43-33] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 44, Last requested goal index = 44, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[18-04-2022_12-43-33] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.605947s, Solving = 0.061782s, Total = 0.667729s, Memory = (RSS = 2468.664062Mb, VMS = 2482.246094Mb), Step range = [84-86]), Calls = 2
Model :: Total atoms = 21719, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[18-04-2022_12-43-33] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 2 :: Actions = 2                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Planned actions:
        talos : move(((starting_room,1),3,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),4,0))
Step 5:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,0))
Step 6:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,1))
Step 7:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),4,0))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,0))
Step 9:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 10:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 11:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 12:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 13:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 5] talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(store_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 5] talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(store_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 17:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 21:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 23:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 24:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 25:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 26:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 27:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 28:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(puzzle_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(puzzle_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 31:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 35:
    Current Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 37:
    Current Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 38:
    Current Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 39:
    Current Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 40:
    Current Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 41:
    Current Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 42:
    Current Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 43:
    Current Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 44:
    Current Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Planned actions:
        talos : move(((store_room,0),2,1))
Step 45:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 46:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 47:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),0,0))
Step 48:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 49:
    Current Sub-goals:
        [Index = 23] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Achieved Sub-goals:
        [Index = 23] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 50:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 51:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 52:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 53:
    Current Sub-goals:
        [Index = 27] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Achieved Sub-goals:
        [Index = 27] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 54:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 55:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 56:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 29] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 57:
    Current Sub-goals:
        [Index = 30] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 58:
    Current Sub-goals:
        [Index = 30] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 30] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),3,0))
Step 59:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,0))
Step 60:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 61:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 62:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 63:
    Current Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 64:
    Current Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 65:
    Current Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 66:
    Current Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 67:
    Current Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 68:
    Current Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 69:
    Current Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 70:
    Current Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 71:
    Current Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Planned actions:
        talos : move(((puzzle_room,0),0,1))
Step 72:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),0,0))
Step 73:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,0))
Step 74:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),2,0))
Step 75:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Planned actions:
        talos : move(((puzzle_room,1),3,0))
Step 76:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),4,0))
Step 77:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),5,0))
Step 78:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 79:
    Current Sub-goals:
        [Index = 37] talos : put(manipulator_end_1,(block,6),puzzle_room_table_right) -> on((block,6)) = puzzle_room_table_right
    Achieved Sub-goals:
        [Index = 37] talos : put(manipulator_end_1,(block,6),puzzle_room_table_right) -> on((block,6)) = puzzle_room_table_right
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 80:
    Current Sub-goals:
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 81:
    Current Sub-goals:
        [Index = 39] talos : configure(manipulator_end_1,aligned_with((block,3))) -> configuration(manipulator_end_1) = aligned_with((block,3))
    Achieved Sub-goals:
        [Index = 39] talos : configure(manipulator_end_1,aligned_with((block,3))) -> configuration(manipulator_end_1) = aligned_with((block,3))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 82:
    Current Sub-goals:
        [Index = 40] talos : grasp(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = (block,3)
    Achieved Sub-goals:
        [Index = 40] talos : grasp(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 83:
    Current Sub-goals:
        [Index = 41] talos : put(manipulator_end_1,(block,3),puzzle_room_table_left) -> on((block,3)) = puzzle_room_table_left
    Achieved Sub-goals:
        [Index = 41] talos : put(manipulator_end_1,(block,3),puzzle_room_table_left) -> on((block,3)) = puzzle_room_table_left
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 84:
    Current Sub-goals:
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 85:
    Current Sub-goals:
        [Index = 43] talos : configure(manipulator_end_1,aligned_with((block,2))) -> configuration(manipulator_end_1) = aligned_with((block,2))
    Achieved Sub-goals:
        [Index = 43] talos : configure(manipulator_end_1,aligned_with((block,2))) -> configuration(manipulator_end_1) = aligned_with((block,2))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 86:
    Current Sub-goals:
        [Index = 44] talos : grasp(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = (block,2)
    Achieved Sub-goals:
        [Index = 44] talos : grasp(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))

[18-04-2022_12-43-33] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[18-04-2022_12-43-33] DEBUG :: ASH Planner Main #1 >> Value of end step of abstract plan to divide adjusted for right blend of current problem: end_step=86

[18-04-2022_12-43-33] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[18-04-2022_12-43-33] DEBUG :: ASH Planner Main #1 >> Monolevel problem 9 at level 1 solved.

[18-04-2022_12-43-33] DEBUG :: ASH Planner Main #1 >> Online planning increment 9 finished.

[18-04-2022_12-43-33] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 2 : Total constraining sub-goal stages = 20 : Goals achieved = 13 : Goals unachieved = 7 : Complete = False
Level = 2 : Solved problems = 5 : Total constraining sub-goal stages = 30 : Goals achieved = 27 : Goals unachieved = 3 : Complete = False
Level = 1 : Solved problems = 9 : Total constraining sub-goal stages = 46 : Goals achieved = 44 : Goals unachieved = 2 : Complete = False

[18-04-2022_12-43-33] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 3.

[18-04-2022_12-43-33] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 10 by method ground-first is [1-1].

[18-04-2022_12-43-33] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 10 at level 1:
Total Templated Partial Problems = 2, Problem Range = [9-10], Size = 4, Sub-goal Stage Range = [43-46]
Division points [total=1] : [(Index = 44, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[18-04-2022_12-43-33] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [45-46]

[18-04-2022_12-43-33] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 86, chosen step range to extract = range(0, 87)

[18-04-2022_12-43-33] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 46, Total actions = 46, Produced sub-goal stages = 46, Produced sub-goal literals = 53
Level [1]: Length = 86, Total actions = 86, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-33] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 46, chosen step range to extract = range(0, 47)

[18-04-2022_12-43-33] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 46, Total actions = 46, Produced sub-goal stages = 46, Produced sub-goal literals = 53
Level [1]: Length = 86, Total actions = 86, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-33] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 30, chosen step range to extract = range(0, 31)

[18-04-2022_12-43-33] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 46, Total actions = 46, Produced sub-goal stages = 46, Produced sub-goal literals = 53
Level [1]: Length = 86, Total actions = 86, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-33] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 20, chosen step range to extract = range(0, 21)

[18-04-2022_12-43-33] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 46, Total actions = 46, Produced sub-goal stages = 46, Produced sub-goal literals = 53
Level [1]: Length = 86, Total actions = 86, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-33] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [45-46], problem number = 10, increment number = 10

[18-04-2022_12-43-33] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 45)
	('last_sgoals', 46)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1757.1928487999994)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[18-04-2022_12-43-33] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [45-46] : Concurrency disabled : Minimum search length bound enabled with value 87

[18-04-2022_12-43-33] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 45
last_sgoals = 46
start_step = 86
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 87

[18-04-2022_12-43-33] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[18-04-2022_12-43-33] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[18-04-2022_12-43-33] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[18-04-2022_12-43-33] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[18-04-2022_12-43-33] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-43-33] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 86 as problem start state.

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,2))', 'S': 86})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 86})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 86})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 86})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 86})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 86})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 86})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,2)', 'S': 86})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 86})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '((puzzle_room,1),5,0)', 'S': 86})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '((puzzle_room,1),5,0)', 'S': 86})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '((puzzle_room,1),5,0)', 'S': 86})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '((store_room,0),0,0)', 'S': 86})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '((puzzle_room,1),5,0)', 'S': 86})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '((puzzle_room,1),5,0)', 'S': 86})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '((puzzle_room,1),5,0)', 'S': 86})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '((puzzle_room,1),5,0)', 'S': 86})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '((puzzle_room,1),5,0)', 'S': 86})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '((puzzle_room,1),5,0)', 'S': 86})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '((puzzle_room,1),5,0)', 'S': 86})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '((puzzle_room,1),5,0)', 'S': 86})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '((puzzle_room,1),5,0)', 'S': 86})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '((puzzle_room,1),5,0)', 'S': 86})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '((puzzle_room,1),5,0)', 'S': 86})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '((puzzle_room,1),5,0)', 'S': 86})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '((puzzle_room,1),5,0)', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 86})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 86})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 86})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 86})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 86})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 86})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 86})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 86})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 86})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 86})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 86})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,2))', 'S': 86})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 86})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 86})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 86})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 86})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 86})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 86})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_1)', 'V': '(block,2)', 'S': 86})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 86})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 86})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 86})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 86})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 86})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 86})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 86})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 86})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 86})
Fluent({'L': 2, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 86})
Fluent({'L': 2, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 86})
Fluent({'L': 2, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 86})
Fluent({'L': 2, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 86})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 86})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 86})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 86})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 86})
Fluent({'L': 2, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 86})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 86})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 86})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 86})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 86})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 86})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 86})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 86})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 86})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 86})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 86})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 86})

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 164 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 86).
holds(1, complete_tower(red,puzzle_room_table), false, 86).
holds(1, configuration(manipulator_end_1), aligned_with((block,2)), 86).
holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 86).
holds(1, configuration(manipulator_limb_1), extended, 86).
holds(1, configuration(manipulator_limb_2), retracted, 86).
holds(1, configuration(puzzle_room_door), open, 86).
holds(1, configuration(starting_room_door), closed, 86).
holds(1, configuration(store_room_door), open, 86).
holds(1, grasping(manipulator_end_1), (block,2), 86).
holds(1, grasping(manipulator_end_2), (block,5), 86).
holds(1, in((block,1)), ((puzzle_room,1),5,0), 86).
holds(1, in((block,2)), ((puzzle_room,1),5,0), 86).
holds(1, in((block,3)), ((puzzle_room,1),5,0), 86).
holds(1, in((block,4)), ((store_room,0),0,0), 86).
holds(1, in((block,5)), ((puzzle_room,1),5,0), 86).
holds(1, in((block,6)), ((puzzle_room,1),5,0), 86).
holds(1, in(manipulator_arm_1), ((puzzle_room,1),5,0), 86).
holds(1, in(manipulator_arm_2), ((puzzle_room,1),5,0), 86).
holds(1, in(manipulator_end_1), ((puzzle_room,1),5,0), 86).
holds(1, in(manipulator_end_2), ((puzzle_room,1),5,0), 86).
holds(1, in(manipulator_limb_1), ((puzzle_room,1),5,0), 86).
holds(1, in(manipulator_limb_2), ((puzzle_room,1),5,0), 86).
holds(1, in(puzzle_room_table), ((puzzle_room,1),5,0), 86).
holds(1, in(puzzle_room_table_left), ((puzzle_room,1),5,0), 86).
holds(1, in(puzzle_room_table_middle), ((puzzle_room,1),5,0), 86).
holds(1, in(puzzle_room_table_right), ((puzzle_room,1),5,0), 86).
holds(1, in(talos), ((puzzle_room,1),5,0), 86).
holds(1, in_tower((block,1),(block,1)), true, 86).
holds(1, in_tower((block,1),(block,2)), false, 86).
holds(1, in_tower((block,1),(block,3)), false, 86).
holds(1, in_tower((block,1),(block,4)), false, 86).
holds(1, in_tower((block,1),(block,5)), false, 86).
holds(1, in_tower((block,1),(block,6)), false, 86).
holds(1, in_tower((block,2),(block,1)), false, 86).
holds(1, in_tower((block,2),(block,2)), true, 86).
holds(1, in_tower((block,2),(block,3)), false, 86).
holds(1, in_tower((block,2),(block,4)), false, 86).
holds(1, in_tower((block,2),(block,5)), false, 86).
holds(1, in_tower((block,2),(block,6)), false, 86).
holds(1, in_tower((block,3),(block,1)), false, 86).
holds(1, in_tower((block,3),(block,2)), false, 86).
holds(1, in_tower((block,3),(block,3)), true, 86).
holds(1, in_tower((block,3),(block,4)), false, 86).
holds(1, in_tower((block,3),(block,5)), false, 86).
holds(1, in_tower((block,3),(block,6)), false, 86).
holds(1, in_tower((block,4),(block,1)), false, 86).
holds(1, in_tower((block,4),(block,2)), false, 86).
holds(1, in_tower((block,4),(block,3)), false, 86).
holds(1, in_tower((block,4),(block,4)), false, 86).
holds(1, in_tower((block,4),(block,5)), false, 86).
holds(1, in_tower((block,4),(block,6)), false, 86).
holds(1, in_tower((block,5),(block,1)), false, 86).
holds(1, in_tower((block,5),(block,2)), false, 86).
holds(1, in_tower((block,5),(block,3)), false, 86).
holds(1, in_tower((block,5),(block,4)), false, 86).
holds(1, in_tower((block,5),(block,5)), false, 86).
holds(1, in_tower((block,5),(block,6)), false, 86).
holds(1, in_tower((block,6),(block,1)), false, 86).
holds(1, in_tower((block,6),(block,2)), false, 86).
holds(1, in_tower((block,6),(block,3)), false, 86).
holds(1, in_tower((block,6),(block,4)), false, 86).
holds(1, in_tower((block,6),(block,5)), false, 86).
holds(1, in_tower((block,6),(block,6)), true, 86).
holds(1, on((block,1)), puzzle_room_table_left, 86).
holds(1, on((block,2)), puzzle_room_table_right, 86).
holds(1, on((block,3)), puzzle_room_table_left, 86).
holds(1, on((block,4)), nothing, 86).
holds(1, on((block,5)), nothing, 86).
holds(1, on((block,6)), puzzle_room_table_right, 86).
holds(1, tower_base((block,1),puzzle_room_table), true, 86).
holds(1, tower_base((block,2),puzzle_room_table), true, 86).
holds(1, tower_base((block,3),puzzle_room_table), true, 86).
holds(1, tower_base((block,4),puzzle_room_table), false, 86).
holds(1, tower_base((block,5),puzzle_room_table), false, 86).
holds(1, tower_base((block,6),puzzle_room_table), true, 86).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 86).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 86).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 86).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 86).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 86).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 86).
holds(2, complete_tower(blue,puzzle_room_table), false, 86).
holds(2, complete_tower(red,puzzle_room_table), false, 86).
holds(2, configuration(manipulator_end_1), aligned_with((block,2)), 86).
holds(2, configuration(manipulator_end_2), aligned_with((block,5)), 86).
holds(2, configuration(manipulator_limb_1), extended, 86).
holds(2, configuration(manipulator_limb_2), retracted, 86).
holds(2, configuration(puzzle_room_door), open, 86).
holds(2, configuration(starting_room_door), closed, 86).
holds(2, configuration(store_room_door), open, 86).
holds(2, grasping(manipulator_end_1), (block,2), 86).
holds(2, grasping(manipulator_end_2), (block,5), 86).
holds(2, in((block,1)), (puzzle_room,1), 86).
holds(2, in((block,2)), (puzzle_room,1), 86).
holds(2, in((block,3)), (puzzle_room,1), 86).
holds(2, in((block,4)), (store_room,0), 86).
holds(2, in((block,5)), (puzzle_room,1), 86).
holds(2, in((block,6)), (puzzle_room,1), 86).
holds(2, in(manipulator_arm_1), (puzzle_room,1), 86).
holds(2, in(manipulator_arm_2), (puzzle_room,1), 86).
holds(2, in(manipulator_end_1), (puzzle_room,1), 86).
holds(2, in(manipulator_end_2), (puzzle_room,1), 86).
holds(2, in(manipulator_limb_1), (puzzle_room,1), 86).
holds(2, in(manipulator_limb_2), (puzzle_room,1), 86).
holds(2, in(puzzle_room_table), (puzzle_room,1), 86).
holds(2, in(puzzle_room_table_left), (puzzle_room,1), 86).
holds(2, in(puzzle_room_table_middle), (puzzle_room,1), 86).
holds(2, in(puzzle_room_table_right), (puzzle_room,1), 86).
holds(2, in(talos), (puzzle_room,1), 86).
holds(2, in_tower((block,1),(block,1)), true, 86).
holds(2, in_tower((block,1),(block,2)), false, 86).
holds(2, in_tower((block,1),(block,3)), false, 86).
holds(2, in_tower((block,1),(block,4)), false, 86).
holds(2, in_tower((block,1),(block,5)), false, 86).
holds(2, in_tower((block,1),(block,6)), false, 86).
holds(2, in_tower((block,2),(block,1)), false, 86).
holds(2, in_tower((block,2),(block,2)), true, 86).
holds(2, in_tower((block,2),(block,3)), false, 86).
holds(2, in_tower((block,2),(block,4)), false, 86).
holds(2, in_tower((block,2),(block,5)), false, 86).
holds(2, in_tower((block,2),(block,6)), false, 86).
holds(2, in_tower((block,3),(block,1)), false, 86).
holds(2, in_tower((block,3),(block,2)), false, 86).
holds(2, in_tower((block,3),(block,3)), true, 86).
holds(2, in_tower((block,3),(block,4)), false, 86).
holds(2, in_tower((block,3),(block,5)), false, 86).
holds(2, in_tower((block,3),(block,6)), false, 86).
holds(2, in_tower((block,4),(block,1)), false, 86).
holds(2, in_tower((block,4),(block,2)), false, 86).
holds(2, in_tower((block,4),(block,3)), false, 86).
holds(2, in_tower((block,4),(block,4)), false, 86).
holds(2, in_tower((block,4),(block,5)), false, 86).
holds(2, in_tower((block,4),(block,6)), false, 86).
holds(2, in_tower((block,5),(block,1)), false, 86).
holds(2, in_tower((block,5),(block,2)), false, 86).
holds(2, in_tower((block,5),(block,3)), false, 86).
holds(2, in_tower((block,5),(block,4)), false, 86).
holds(2, in_tower((block,5),(block,5)), false, 86).
holds(2, in_tower((block,5),(block,6)), false, 86).
holds(2, in_tower((block,6),(block,1)), false, 86).
holds(2, in_tower((block,6),(block,2)), false, 86).
holds(2, in_tower((block,6),(block,3)), false, 86).
holds(2, in_tower((block,6),(block,4)), false, 86).
holds(2, in_tower((block,6),(block,5)), false, 86).
holds(2, in_tower((block,6),(block,6)), true, 86).
holds(2, on((block,1)), puzzle_room_table_left, 86).
holds(2, on((block,2)), puzzle_room_table_right, 86).
holds(2, on((block,3)), puzzle_room_table_left, 86).
holds(2, on((block,4)), nothing, 86).
holds(2, on((block,5)), nothing, 86).
holds(2, on((block,6)), puzzle_room_table_right, 86).
holds(2, tower_base((block,1),puzzle_room_table), true, 86).
holds(2, tower_base((block,2),puzzle_room_table), true, 86).
holds(2, tower_base((block,3),puzzle_room_table), true, 86).
holds(2, tower_base((block,4),puzzle_room_table), false, 86).
holds(2, tower_base((block,5),puzzle_room_table), false, 86).
holds(2, tower_base((block,6),puzzle_room_table), true, 86).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 86).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 86).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 86).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 86).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 86).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 86).

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 308 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table_left, false).
final_goal(2, on((block,1)), puzzle_room_table_middle, false).
final_goal(2, on((block,1)), puzzle_room_table_right, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table_left, false).
final_goal(2, on((block,2)), puzzle_room_table_middle, false).
final_goal(2, on((block,2)), puzzle_room_table_right, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table_left, true).
final_goal(2, on((block,3)), puzzle_room_table_middle, false).
final_goal(2, on((block,3)), puzzle_room_table_right, false).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table_left, false).
final_goal(2, on((block,4)), puzzle_room_table_middle, false).
final_goal(2, on((block,4)), puzzle_room_table_right, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table_left, false).
final_goal(2, on((block,5)), puzzle_room_table_middle, false).
final_goal(2, on((block,5)), puzzle_room_table_right, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table_left, false).
final_goal(2, on((block,6)), puzzle_room_table_middle, false).
final_goal(2, on((block,6)), puzzle_room_table_right, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[18-04-2022_12-43-33] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=87']

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 45})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,2))', 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'I': 46})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,2))', 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'I': 46})

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 3 rules into program part base:

sub_goal(2, talos, put(manipulator_end_1,(block,2),(block,3)), on((block,2)), (block,3), 45).
sub_goal(2, talos, release(manipulator_end_1,(block,2)), configuration(manipulator_end_1), aligned_with(nothing), 46).
sub_goal(2, talos, release(manipulator_end_1,(block,2)), grasping(manipulator_end_1), nothing, 46).

[18-04-2022_12-43-33] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=87']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A8A4173C10>]
	incrementor = SolveIncrementor(step_start=86, step_increase=1, step_increase_initial=2, step_end_min=88, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1757.1928487999994, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 86), range_=None), IncPart(name='plan_module', args=('#inc', 86, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 86, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 86, 45, 46, 'sequential', 'false'), range_=None)]

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 844 rules

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.005283999999846856s

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.171300s.

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.025259s with result Satisfiable.

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A8A44E9C20>

[18-04-2022_12-43-33] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 86)
	('last_sgoals', 46)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('first_sgoals', 45)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A8A44E9C20>)

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 86). %* None *%
#program plan_module(#inc, 86, false, false). %* None *%
#program optimisation_module(#inc, 86, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 86, 45, 46, sequential, false). %* None *%

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     85 : Current =     87
Incrementor step ends | Minimum  =     88 : Maximum =    300

[18-04-2022_12-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(87)]), ('state_module', [Number(86), Number(86)]), ('plan_module', [Number(86), Number(86), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(86), Number(86), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(86)]), ('action_preconditions', [Number(86)]), ('variable_relations', [Number(86)]), ('abstraction_mappings', [Number(86)]), ('conformance_module', [Number(86), Number(86), Number(45), Number(46), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(87), Number(86)]), ('plan_module', [Number(87), Number(86), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(87), Number(86), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(87)]), ('action_preconditions', [Number(87)]), ('variable_relations', [Number(87)]), ('abstraction_mappings', [Number(87)]), ('conformance_module', [Number(87), Number(86), Number(45), Number(46), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.428575s.

[18-04-2022_12-43-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.033400s with result Unsatisfiable.

[18-04-2022_12-43-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4619746000007581, Incremental time limit = None
Running cumulative time = 0.4619746000007581, Cumulative time limit = 1757.1928487999994
Used memory = (RSS = 2467.003906Mb, VMS = 2480.488281Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     87 : Current =     88
Incrementor step ends | Minimum  =     88 : Maximum =    300

[18-04-2022_12-43-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(88)]), ('state_module', [Number(88), Number(86)]), ('plan_module', [Number(88), Number(86), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(88), Number(86), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(88)]), ('action_preconditions', [Number(88)]), ('variable_relations', [Number(88)]), ('abstraction_mappings', [Number(88)]), ('conformance_module', [Number(88), Number(86), Number(45), Number(46), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.178145s.

[18-04-2022_12-43-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.027737s with result Satisfiable.

[18-04-2022_12-43-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.20588219999990542, Incremental time limit = None
Running cumulative time = 0.6678568000006635, Cumulative time limit = 1757.1928487999994
Used memory = (RSS = 2469.070312Mb, VMS = 2482.496094Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.606720s, Solving = 0.061137s, Total = 0.667857s, Memory = (RSS = 2469.070312Mb, VMS = 2482.496094Mb), Step range = [86-88]), Calls = 2
Final Model :: Total atoms = 21720, Cost = (-1,), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[18-04-2022_12-43-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.428575s, Solving = 0.033400s, Total = 0.461975s, Memory = (RSS = 2467.003906Mb, VMS = 2480.488281Mb), Step range = [86-87]
2 : Statistics :: Grounding = 0.178145s, Solving = 0.027737s, Total = 0.205882s, Memory = (RSS = 2469.070312Mb, VMS = 2482.496094Mb), Step range = [88-88]

[18-04-2022_12-43-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.667857s due to: Stop condition reached.

[18-04-2022_12-43-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[18-04-2022_12-43-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[18-04-2022_12-43-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-43-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[18-04-2022_12-43-34] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38, 81: 39, 82: 40, 83: 41, 84: 42, 85: 43, 86: 44}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80, 39: 81, 40: 82, 41: 83, 42: 84, 43: 85, 44: 86}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24, 43: 25, 44: 25, 45: 26, 46: 27}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42, 25: 44, 26: 45, 27: 46}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-43-35] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38, 81: 39, 82: 40, 83: 41, 84: 42, 85: 43, 86: 44, 87: 45, 88: 46}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80, 39: 81, 40: 82, 41: 83, 42: 84, 43: 85, 44: 86, 45: 87, 46: 88}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24, 43: 25, 44: 25, 45: 26, 46: 27}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42, 25: 44, 26: 45, 27: 46}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-43-35] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 46, Last requested goal index = 46, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[18-04-2022_12-43-35] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.606720s, Solving = 0.061137s, Total = 0.667857s, Memory = (RSS = 2469.070312Mb, VMS = 2482.496094Mb), Step range = [86-88]), Calls = 2
Model :: Total atoms = 21720, Cost = (-1,), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[18-04-2022_12-43-35] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 2 :: Actions = 2                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Planned actions:
        talos : move(((starting_room,1),3,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),4,0))
Step 5:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,0))
Step 6:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,1))
Step 7:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),4,0))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,0))
Step 9:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 10:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 11:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 12:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 13:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 5] talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(store_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 5] talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(store_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 17:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 21:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 23:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 24:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 25:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 26:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 27:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 28:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(puzzle_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(puzzle_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 31:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 35:
    Current Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 37:
    Current Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 38:
    Current Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 39:
    Current Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 40:
    Current Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 41:
    Current Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 42:
    Current Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 43:
    Current Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 44:
    Current Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Planned actions:
        talos : move(((store_room,0),2,1))
Step 45:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 46:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 47:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),0,0))
Step 48:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 49:
    Current Sub-goals:
        [Index = 23] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Achieved Sub-goals:
        [Index = 23] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 50:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 51:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 52:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 53:
    Current Sub-goals:
        [Index = 27] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Achieved Sub-goals:
        [Index = 27] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 54:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 55:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 56:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 29] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 57:
    Current Sub-goals:
        [Index = 30] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 58:
    Current Sub-goals:
        [Index = 30] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 30] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),3,0))
Step 59:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,0))
Step 60:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 61:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 62:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 63:
    Current Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 64:
    Current Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 65:
    Current Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 66:
    Current Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 67:
    Current Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 68:
    Current Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 69:
    Current Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 70:
    Current Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 71:
    Current Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Planned actions:
        talos : move(((puzzle_room,0),0,1))
Step 72:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),0,0))
Step 73:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,0))
Step 74:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),2,0))
Step 75:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Planned actions:
        talos : move(((puzzle_room,1),3,0))
Step 76:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),4,0))
Step 77:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),5,0))
Step 78:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 79:
    Current Sub-goals:
        [Index = 37] talos : put(manipulator_end_1,(block,6),puzzle_room_table_right) -> on((block,6)) = puzzle_room_table_right
    Achieved Sub-goals:
        [Index = 37] talos : put(manipulator_end_1,(block,6),puzzle_room_table_right) -> on((block,6)) = puzzle_room_table_right
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 80:
    Current Sub-goals:
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 81:
    Current Sub-goals:
        [Index = 39] talos : configure(manipulator_end_1,aligned_with((block,3))) -> configuration(manipulator_end_1) = aligned_with((block,3))
    Achieved Sub-goals:
        [Index = 39] talos : configure(manipulator_end_1,aligned_with((block,3))) -> configuration(manipulator_end_1) = aligned_with((block,3))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 82:
    Current Sub-goals:
        [Index = 40] talos : grasp(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = (block,3)
    Achieved Sub-goals:
        [Index = 40] talos : grasp(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 83:
    Current Sub-goals:
        [Index = 41] talos : put(manipulator_end_1,(block,3),puzzle_room_table_left) -> on((block,3)) = puzzle_room_table_left
    Achieved Sub-goals:
        [Index = 41] talos : put(manipulator_end_1,(block,3),puzzle_room_table_left) -> on((block,3)) = puzzle_room_table_left
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 84:
    Current Sub-goals:
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 85:
    Current Sub-goals:
        [Index = 43] talos : configure(manipulator_end_1,aligned_with((block,2))) -> configuration(manipulator_end_1) = aligned_with((block,2))
    Achieved Sub-goals:
        [Index = 43] talos : configure(manipulator_end_1,aligned_with((block,2))) -> configuration(manipulator_end_1) = aligned_with((block,2))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 86:
    Current Sub-goals:
        [Index = 44] talos : grasp(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = (block,2)
    Achieved Sub-goals:
        [Index = 44] talos : grasp(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 87:
    Current Sub-goals:
        [Index = 45] talos : put(manipulator_end_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 45] talos : put(manipulator_end_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 88:
    Current Sub-goals:
        [Index = 46] talos : release(manipulator_end_1,(block,2)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 46] talos : release(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 46] talos : release(manipulator_end_1,(block,2)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 46] talos : release(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,2))

[18-04-2022_12-43-35] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[18-04-2022_12-43-35] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[18-04-2022_12-43-35] DEBUG :: ASH Planner Main #1 >> Monolevel problem 10 at level 1 solved.

[18-04-2022_12-43-35] DEBUG :: ASH Planner Main #1 >> Online planning increment 10 finished.

[18-04-2022_12-43-35] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 2 : Total constraining sub-goal stages = 20 : Goals achieved = 13 : Goals unachieved = 7 : Complete = False
Level = 2 : Solved problems = 5 : Total constraining sub-goal stages = 30 : Goals achieved = 27 : Goals unachieved = 3 : Complete = False
Level = 1 : Solved problems = 10 : Total constraining sub-goal stages = 46 : Goals achieved = 46 : Goals unachieved = 0 : Complete = False

[18-04-2022_12-43-35] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 2, Highest = 3.

[18-04-2022_12-43-35] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 11 by method ground-first is [1-2].

[18-04-2022_12-43-35] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning problem 6 at level 2:
Total Templated Partial Problems = 3, Problem Range = [4-6], Size = 9, Sub-goal Stage Range = [22-30]
Division points [total=2] : [(Index = 24, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 27, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[18-04-2022_12-43-35] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [28-30]

[18-04-2022_12-43-35] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 46, chosen step range to extract = range(0, 47)

[18-04-2022_12-43-35] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 46, Total actions = 46, Produced sub-goal stages = 46, Produced sub-goal literals = 53
Level [1]: Length = 88, Total actions = 88, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-35] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 30, chosen step range to extract = range(0, 31)

[18-04-2022_12-43-35] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 46, Total actions = 46, Produced sub-goal stages = 46, Produced sub-goal literals = 53
Level [1]: Length = 88, Total actions = 88, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-35] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 20, chosen step range to extract = range(0, 21)

[18-04-2022_12-43-35] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 46, Total actions = 46, Produced sub-goal stages = 46, Produced sub-goal literals = 53
Level [1]: Length = 88, Total actions = 88, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-35] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [28-30], problem number = 6, increment number = 11

[18-04-2022_12-43-35] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 28)
	('last_sgoals', 30)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1789.2185157000004)
	('length_limit', 300)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[18-04-2022_12-43-35] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 2] partial conformance refinement (sequential) with sgoals range [28-30] : Concurrency disabled : Minimum search length bound enabled with value 48

[18-04-2022_12-43-35] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 28
last_sgoals = 30
start_step = 46
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 48

[18-04-2022_12-43-35] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[18-04-2022_12-43-35] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[18-04-2022_12-43-35] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[18-04-2022_12-43-35] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[18-04-2022_12-43-35] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-43-35] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 46 as problem start state.

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 46})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 46})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 46})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 46})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 46})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 46})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 46})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 46})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 46})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 46})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 46})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 46})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 46})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 46})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 46})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 46})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 46})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 46})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 46})
Fluent({'L': 2, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 46})
Fluent({'L': 2, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 46})
Fluent({'L': 2, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 46})
Fluent({'L': 2, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 46})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 46})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 46})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 46})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 46})
Fluent({'L': 2, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 46})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 46})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 46})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 46})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 46})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 46})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 46})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 46})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 46})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 46})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 46})
Fluent({'L': 3, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 46})
Fluent({'L': 3, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 46})
Fluent({'L': 3, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 46})
Fluent({'L': 3, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 46})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 46})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 46})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 46})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 46})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 46})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 46})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 46})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 46})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 46})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 46})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 46})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 46})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 46})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 46})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 46})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 46})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 46})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 46})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 46})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 46})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 46})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 46})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 46})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 46})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 46})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 46})

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 157 rules into program part ash_initial_state:

holds(2, complete_tower(blue,puzzle_room_table), false, 46).
holds(2, complete_tower(red,puzzle_room_table), false, 46).
holds(2, configuration(manipulator_end_1), aligned_with(nothing), 46).
holds(2, configuration(manipulator_end_2), aligned_with((block,5)), 46).
holds(2, configuration(manipulator_limb_1), extended, 46).
holds(2, configuration(manipulator_limb_2), retracted, 46).
holds(2, configuration(puzzle_room_door), open, 46).
holds(2, configuration(starting_room_door), closed, 46).
holds(2, configuration(store_room_door), open, 46).
holds(2, grasping(manipulator_arm_1), nothing, 46).
holds(2, grasping(manipulator_arm_2), (block,5), 46).
holds(2, grasping(manipulator_end_1), nothing, 46).
holds(2, grasping(manipulator_end_2), (block,5), 46).
holds(2, in((block,1)), (puzzle_room,1), 46).
holds(2, in((block,2)), (puzzle_room,1), 46).
holds(2, in((block,3)), (puzzle_room,1), 46).
holds(2, in((block,4)), (store_room,0), 46).
holds(2, in((block,5)), (puzzle_room,1), 46).
holds(2, in((block,6)), (puzzle_room,1), 46).
holds(2, in(manipulator_arm_1), (puzzle_room,1), 46).
holds(2, in(manipulator_arm_2), (puzzle_room,1), 46).
holds(2, in(manipulator_end_1), (puzzle_room,1), 46).
holds(2, in(manipulator_end_2), (puzzle_room,1), 46).
holds(2, in(manipulator_limb_1), (puzzle_room,1), 46).
holds(2, in(manipulator_limb_2), (puzzle_room,1), 46).
holds(2, in(puzzle_room_table), (puzzle_room,1), 46).
holds(2, in(puzzle_room_table_left), (puzzle_room,1), 46).
holds(2, in(puzzle_room_table_middle), (puzzle_room,1), 46).
holds(2, in(puzzle_room_table_right), (puzzle_room,1), 46).
holds(2, in(talos), (puzzle_room,1), 46).
holds(2, in_tower((block,1),(block,1)), true, 46).
holds(2, in_tower((block,1),(block,2)), false, 46).
holds(2, in_tower((block,1),(block,3)), false, 46).
holds(2, in_tower((block,1),(block,4)), false, 46).
holds(2, in_tower((block,1),(block,5)), false, 46).
holds(2, in_tower((block,1),(block,6)), false, 46).
holds(2, in_tower((block,2),(block,1)), false, 46).
holds(2, in_tower((block,2),(block,2)), false, 46).
holds(2, in_tower((block,2),(block,3)), false, 46).
holds(2, in_tower((block,2),(block,4)), false, 46).
holds(2, in_tower((block,2),(block,5)), false, 46).
holds(2, in_tower((block,2),(block,6)), false, 46).
holds(2, in_tower((block,3),(block,1)), false, 46).
holds(2, in_tower((block,3),(block,2)), true, 46).
holds(2, in_tower((block,3),(block,3)), true, 46).
holds(2, in_tower((block,3),(block,4)), false, 46).
holds(2, in_tower((block,3),(block,5)), false, 46).
holds(2, in_tower((block,3),(block,6)), false, 46).
holds(2, in_tower((block,4),(block,1)), false, 46).
holds(2, in_tower((block,4),(block,2)), false, 46).
holds(2, in_tower((block,4),(block,3)), false, 46).
holds(2, in_tower((block,4),(block,4)), false, 46).
holds(2, in_tower((block,4),(block,5)), false, 46).
holds(2, in_tower((block,4),(block,6)), false, 46).
holds(2, in_tower((block,5),(block,1)), false, 46).
holds(2, in_tower((block,5),(block,2)), false, 46).
holds(2, in_tower((block,5),(block,3)), false, 46).
holds(2, in_tower((block,5),(block,4)), false, 46).
holds(2, in_tower((block,5),(block,5)), false, 46).
holds(2, in_tower((block,5),(block,6)), false, 46).
holds(2, in_tower((block,6),(block,1)), false, 46).
holds(2, in_tower((block,6),(block,2)), false, 46).
holds(2, in_tower((block,6),(block,3)), false, 46).
holds(2, in_tower((block,6),(block,4)), false, 46).
holds(2, in_tower((block,6),(block,5)), false, 46).
holds(2, in_tower((block,6),(block,6)), true, 46).
holds(2, on((block,1)), puzzle_room_table_left, 46).
holds(2, on((block,2)), (block,3), 46).
holds(2, on((block,3)), puzzle_room_table_left, 46).
holds(2, on((block,4)), nothing, 46).
holds(2, on((block,5)), nothing, 46).
holds(2, on((block,6)), puzzle_room_table_right, 46).
holds(2, tower_base((block,1),puzzle_room_table), true, 46).
holds(2, tower_base((block,2),puzzle_room_table), false, 46).
holds(2, tower_base((block,3),puzzle_room_table), true, 46).
holds(2, tower_base((block,4),puzzle_room_table), false, 46).
holds(2, tower_base((block,5),puzzle_room_table), false, 46).
holds(2, tower_base((block,6),puzzle_room_table), true, 46).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 46).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 46).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 46).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 46).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 46).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 46).
holds(3, complete_tower(blue,puzzle_room_table), false, 46).
holds(3, complete_tower(red,puzzle_room_table), false, 46).
holds(3, configuration(manipulator_arm_1), extended, 46).
holds(3, configuration(manipulator_arm_2), retracted, 46).
holds(3, configuration(puzzle_room_door), open, 46).
holds(3, configuration(starting_room_door), closed, 46).
holds(3, configuration(store_room_door), open, 46).
holds(3, grasping(manipulator_arm_1), nothing, 46).
holds(3, grasping(manipulator_arm_2), (block,5), 46).
holds(3, in((block,1)), puzzle_room, 46).
holds(3, in((block,2)), puzzle_room, 46).
holds(3, in((block,3)), puzzle_room, 46).
holds(3, in((block,4)), store_room, 46).
holds(3, in((block,5)), puzzle_room, 46).
holds(3, in((block,6)), puzzle_room, 46).
holds(3, in(manipulator_arm_1), puzzle_room, 46).
holds(3, in(manipulator_arm_2), puzzle_room, 46).
holds(3, in(puzzle_room_table), puzzle_room, 46).
holds(3, in(talos), puzzle_room, 46).
holds(3, in_tower((block,1),(block,1)), true, 46).
holds(3, in_tower((block,1),(block,2)), false, 46).
holds(3, in_tower((block,1),(block,3)), false, 46).
holds(3, in_tower((block,1),(block,4)), false, 46).
holds(3, in_tower((block,1),(block,5)), false, 46).
holds(3, in_tower((block,1),(block,6)), false, 46).
holds(3, in_tower((block,2),(block,1)), false, 46).
holds(3, in_tower((block,2),(block,2)), false, 46).
holds(3, in_tower((block,2),(block,3)), false, 46).
holds(3, in_tower((block,2),(block,4)), false, 46).
holds(3, in_tower((block,2),(block,5)), false, 46).
holds(3, in_tower((block,2),(block,6)), false, 46).
holds(3, in_tower((block,3),(block,1)), false, 46).
holds(3, in_tower((block,3),(block,2)), true, 46).
holds(3, in_tower((block,3),(block,3)), true, 46).
holds(3, in_tower((block,3),(block,4)), false, 46).
holds(3, in_tower((block,3),(block,5)), false, 46).
holds(3, in_tower((block,3),(block,6)), false, 46).
holds(3, in_tower((block,4),(block,1)), false, 46).
holds(3, in_tower((block,4),(block,2)), false, 46).
holds(3, in_tower((block,4),(block,3)), false, 46).
holds(3, in_tower((block,4),(block,4)), false, 46).
holds(3, in_tower((block,4),(block,5)), false, 46).
holds(3, in_tower((block,4),(block,6)), false, 46).
holds(3, in_tower((block,5),(block,1)), false, 46).
holds(3, in_tower((block,5),(block,2)), false, 46).
holds(3, in_tower((block,5),(block,3)), false, 46).
holds(3, in_tower((block,5),(block,4)), false, 46).
holds(3, in_tower((block,5),(block,5)), false, 46).
holds(3, in_tower((block,5),(block,6)), false, 46).
holds(3, in_tower((block,6),(block,1)), false, 46).
holds(3, in_tower((block,6),(block,2)), false, 46).
holds(3, in_tower((block,6),(block,3)), false, 46).
holds(3, in_tower((block,6),(block,4)), false, 46).
holds(3, in_tower((block,6),(block,5)), false, 46).
holds(3, in_tower((block,6),(block,6)), true, 46).
holds(3, on((block,1)), puzzle_room_table, 46).
holds(3, on((block,2)), (block,3), 46).
holds(3, on((block,3)), puzzle_room_table, 46).
holds(3, on((block,4)), nothing, 46).
holds(3, on((block,5)), nothing, 46).
holds(3, on((block,6)), puzzle_room_table, 46).
holds(3, tower_base((block,1),puzzle_room_table), true, 46).
holds(3, tower_base((block,2),puzzle_room_table), false, 46).
holds(3, tower_base((block,3),puzzle_room_table), true, 46).
holds(3, tower_base((block,4),puzzle_room_table), false, 46).
holds(3, tower_base((block,5),puzzle_room_table), false, 46).
holds(3, tower_base((block,6),puzzle_room_table), true, 46).
holds(3, unordered_tower((block,1),puzzle_room_table), false, 46).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 46).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 46).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 46).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 46).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 46).

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 296 rules into program part ash_goal_state:

final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table_left, false).
final_goal(2, on((block,1)), puzzle_room_table_middle, false).
final_goal(2, on((block,1)), puzzle_room_table_right, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table_left, false).
final_goal(2, on((block,2)), puzzle_room_table_middle, false).
final_goal(2, on((block,2)), puzzle_room_table_right, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table_left, true).
final_goal(2, on((block,3)), puzzle_room_table_middle, false).
final_goal(2, on((block,3)), puzzle_room_table_right, false).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table_left, false).
final_goal(2, on((block,4)), puzzle_room_table_middle, false).
final_goal(2, on((block,4)), puzzle_room_table_right, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table_left, false).
final_goal(2, on((block,5)), puzzle_room_table_middle, false).
final_goal(2, on((block,5)), puzzle_room_table_right, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table_left, false).
final_goal(2, on((block,6)), puzzle_room_table_middle, false).
final_goal(2, on((block,6)), puzzle_room_table_right, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).

[18-04-2022_12-43-35] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=48']

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 28})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 29})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 30})

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 3 rules into program part base:

sub_goal(3, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 28).
sub_goal(3, talos, move(hallway), in(talos), hallway, 29).
sub_goal(3, talos, move(store_room), in(talos), store_room, 30).

[18-04-2022_12-43-35] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=48']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A8A4459160>]
	incrementor = SolveIncrementor(step_start=46, step_increase=1, step_increase_initial=3, step_end_min=49, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1789.2185157000004, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 46), range_=None), IncPart(name='plan_module', args=('#inc', 46, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 46, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 46, 28, 30, 'sequential', 'false'), range_=None)]

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 825 rules

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.005093500000839413s

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.159151s.

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022372s with result Satisfiable.

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A8A45439A0>

[18-04-2022_12-43-35] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 2)
	('start_step', 46)
	('last_sgoals', 30)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('first_sgoals', 28)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A8A45439A0>)

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 46). %* None *%
#program plan_module(#inc, 46, false, false). %* None *%
#program optimisation_module(#inc, 46, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 46, 28, 30, sequential, false). %* None *%

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     45 : Current =     48
Incrementor step ends | Minimum  =     49 : Maximum =    300

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(48)]), ('state_module', [Number(46), Number(46)]), ('plan_module', [Number(46), Number(46), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(46), Number(46), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(46)]), ('action_preconditions', [Number(46)]), ('variable_relations', [Number(46)]), ('abstraction_mappings', [Number(46)]), ('conformance_module', [Number(46), Number(46), Number(28), Number(30), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(47), Number(46)]), ('plan_module', [Number(47), Number(46), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(47), Number(46), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(47)]), ('action_preconditions', [Number(47)]), ('variable_relations', [Number(47)]), ('abstraction_mappings', [Number(47)]), ('conformance_module', [Number(47), Number(46), Number(28), Number(30), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(48), Number(46)]), ('plan_module', [Number(48), Number(46), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(48), Number(46), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(48)]), ('action_preconditions', [Number(48)]), ('variable_relations', [Number(48)]), ('abstraction_mappings', [Number(48)]), ('conformance_module', [Number(48), Number(46), Number(28), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.186105s.

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.031931s with result Unsatisfiable.

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.21803610000006302, Incremental time limit = None
Running cumulative time = 0.21803610000006302, Cumulative time limit = 1789.2185157000004
Used memory = (RSS = 2467.328125Mb, VMS = 2480.988281Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     48 : Current =     49
Incrementor step ends | Minimum  =     49 : Maximum =    300

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(49)]), ('state_module', [Number(49), Number(46)]), ('plan_module', [Number(49), Number(46), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(49), Number(46), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(49)]), ('action_preconditions', [Number(49)]), ('variable_relations', [Number(49)]), ('abstraction_mappings', [Number(49)]), ('conformance_module', [Number(49), Number(46), Number(28), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.091594s.

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008965s with result Unsatisfiable.

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1005592000001343, Incremental time limit = None
Running cumulative time = 0.3185953000001973, Cumulative time limit = 1789.2185157000004
Used memory = (RSS = 2467.328125Mb, VMS = 2480.988281Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     49 : Current =     50
Incrementor step ends | Minimum  =     49 : Maximum =    300

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(50)]), ('state_module', [Number(50), Number(46)]), ('plan_module', [Number(50), Number(46), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(50), Number(46), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(50)]), ('action_preconditions', [Number(50)]), ('variable_relations', [Number(50)]), ('abstraction_mappings', [Number(50)]), ('conformance_module', [Number(50), Number(46), Number(28), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.102157s.

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012819s with result Unsatisfiable.

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11497570000028645, Incremental time limit = None
Running cumulative time = 0.43357100000048376, Cumulative time limit = 1789.2185157000004
Used memory = (RSS = 2467.328125Mb, VMS = 2480.988281Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     50 : Current =     51
Incrementor step ends | Minimum  =     49 : Maximum =    300

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(51)]), ('state_module', [Number(51), Number(46)]), ('plan_module', [Number(51), Number(46), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(51), Number(46), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(51)]), ('action_preconditions', [Number(51)]), ('variable_relations', [Number(51)]), ('abstraction_mappings', [Number(51)]), ('conformance_module', [Number(51), Number(46), Number(28), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.106753s.

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017082s with result Unsatisfiable.

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.12383540000064386, Incremental time limit = None
Running cumulative time = 0.5574064000011276, Cumulative time limit = 1789.2185157000004
Used memory = (RSS = 2468.414062Mb, VMS = 2482.042969Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     51 : Current =     52
Incrementor step ends | Minimum  =     49 : Maximum =    300

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(52)]), ('state_module', [Number(52), Number(46)]), ('plan_module', [Number(52), Number(46), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(52), Number(46), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(52)]), ('action_preconditions', [Number(52)]), ('variable_relations', [Number(52)]), ('abstraction_mappings', [Number(52)]), ('conformance_module', [Number(52), Number(46), Number(28), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.108463s.

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.036276s with result Satisfiable.

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.14473920000000362, Incremental time limit = None
Running cumulative time = 0.7021456000011312, Cumulative time limit = 1789.2185157000004
Used memory = (RSS = 2468.664062Mb, VMS = 2482.296875Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.595072s, Solving = 0.107074s, Total = 0.702146s, Memory = (RSS = 2468.664062Mb, VMS = 2482.296875Mb), Step range = [46-52]), Calls = 5
Final Model :: Total atoms = 19507, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.186105s, Solving = 0.031931s, Total = 0.218036s, Memory = (RSS = 2467.328125Mb, VMS = 2480.988281Mb), Step range = [46-48]
2 : Statistics :: Grounding = 0.091594s, Solving = 0.008965s, Total = 0.100559s, Memory = (RSS = 2467.328125Mb, VMS = 2480.988281Mb), Step range = [49-49]
3 : Statistics :: Grounding = 0.102157s, Solving = 0.012819s, Total = 0.114976s, Memory = (RSS = 2467.328125Mb, VMS = 2480.988281Mb), Step range = [50-50]
4 : Statistics :: Grounding = 0.106753s, Solving = 0.017082s, Total = 0.123835s, Memory = (RSS = 2468.414062Mb, VMS = 2482.042969Mb), Step range = [51-51]
5 : Statistics :: Grounding = 0.108463s, Solving = 0.036276s, Total = 0.144739s, Memory = (RSS = 2468.664062Mb, VMS = 2482.296875Mb), Step range = [52-52]

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.702146s due to: Stop condition reached.

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[18-04-2022_12-43-36] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38, 81: 39, 82: 40, 83: 41, 84: 42, 85: 43, 86: 44, 87: 45, 88: 46}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80, 39: 81, 40: 82, 41: 83, 42: 84, 43: 85, 44: 86, 45: 87, 46: 88}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24, 43: 25, 44: 25, 45: 26, 46: 27}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42, 25: 44, 26: 45, 27: 46}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-43-36] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38, 81: 39, 82: 40, 83: 41, 84: 42, 85: 43, 86: 44, 87: 45, 88: 46}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80, 39: 81, 40: 82, 41: 83, 42: 84, 43: 85, 44: 86, 45: 87, 46: 88}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24, 43: 25, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29, 49: 29, 50: 30, 51: 30, 52: 30}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42, 25: 44, 26: 45, 27: 46, 28: 47, 29: 49, 30: 52}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-43-36] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 30, Last requested goal index = 30, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[18-04-2022_12-43-36] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.595072s, Solving = 0.107074s, Total = 0.702146s, Memory = (RSS = 2468.664062Mb, VMS = 2482.296875Mb), Step range = [46-52]), Calls = 5
Model :: Total atoms = 19507, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[18-04-2022_12-43-36] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                  Steps = 6 :: Actions = 6                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 25:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 26:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 27:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 28:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 29:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 30:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : move((store_room,1))
Step 31:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 37:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 38:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 39:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 40:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 41:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 42:
    Current Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 43:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 44:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 45:
    Current Sub-goals:
        [Index = 26] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 26] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 46:
    Current Sub-goals:
        [Index = 27] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 27] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,2))
Step 47:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 48:
    Current Sub-goals:
        [Index = 29] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 49:
    Current Sub-goals:
        [Index = 29] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 29] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 50:
    Current Sub-goals:
        [Index = 30] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 51:
    Current Sub-goals:
        [Index = 30] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 52:
    Current Sub-goals:
        [Index = 30] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 30] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))

[18-04-2022_12-43-36] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=46, end_step=None

[18-04-2022_12-43-36] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for parts of the existing plan at the current level that have already been divided: start_step=46

[18-04-2022_12-43-36] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=46

[18-04-2022_12-43-36] DEBUG :: ASH Planner Main #1 >> Preparing to invoke division strategy...

[18-04-2022_12-43-36] DEBUG :: ASH Planner Main #1 >> Online method OnlineMethod.GroundFirst chose to invoke the division strategy before a downwards level change:Current increment = 11, Current planning level is complete = False

[18-04-2022_12-43-36] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 52, chosen step range to extract = range(46, 53)

[18-04-2022_12-43-36] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 52, Total actions = 52, Produced sub-goal stages = 52, Produced sub-goal literals = 60
Level [1]: Length = 88, Total actions = 88, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-36] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =   6, AC =   6, CF = 1.0, GT =   5.20s, ST =   1.25s, OT = 0.00s, TT =   6.44s, EF = (LE = 2.0, AC = 2.0), ED = (LE = 1.0, AC = 1.0), EB = (LE = 0.5, AC = 0.5)

[18-04-2022_12-43-36] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=6, start_step=46, blend=Blend(left=0, right=0)

[18-04-2022_12-43-36] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=0, small_group_size=3, large_group_size=4

[18-04-2022_12-43-36] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=49, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[18-04-2022_12-43-36] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 2, Problem Range = [11-12], Size = 6, Sub-goal Stage Range = [47-52]
Division points [total=1] : [(Index = 49, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[18-04-2022_12-43-36] DEBUG :: ASH Planner Main #1 >> Monolevel problem 6 at level 2 solved.

[18-04-2022_12-43-36] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 11 at level 1:
Total Templated Partial Problems = 2, Problem Range = [11-12], Size = 6, Sub-goal Stage Range = [47-52]
Division points [total=1] : [(Index = 49, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[18-04-2022_12-43-36] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [47-49]

[18-04-2022_12-43-36] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 88, chosen step range to extract = range(0, 89)

[18-04-2022_12-43-36] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 52, Total actions = 52, Produced sub-goal stages = 52, Produced sub-goal literals = 60
Level [1]: Length = 88, Total actions = 88, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-36] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 52, chosen step range to extract = range(0, 53)

[18-04-2022_12-43-36] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 52, Total actions = 52, Produced sub-goal stages = 52, Produced sub-goal literals = 60
Level [1]: Length = 88, Total actions = 88, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-36] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 30, chosen step range to extract = range(0, 31)

[18-04-2022_12-43-36] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 52, Total actions = 52, Produced sub-goal stages = 52, Produced sub-goal literals = 60
Level [1]: Length = 88, Total actions = 88, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-36] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 20, chosen step range to extract = range(0, 21)

[18-04-2022_12-43-36] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 52, Total actions = 52, Produced sub-goal stages = 52, Produced sub-goal literals = 60
Level [1]: Length = 88, Total actions = 88, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-36] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [47-49], problem number = 11, increment number = 11

[18-04-2022_12-43-36] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 47)
	('last_sgoals', 49)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1755.8228463999976)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[18-04-2022_12-43-36] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [47-49] : Concurrency disabled : Minimum search length bound enabled with value 90

[18-04-2022_12-43-36] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 47
last_sgoals = 49
start_step = 88
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 90

[18-04-2022_12-43-36] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[18-04-2022_12-43-36] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[18-04-2022_12-43-36] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[18-04-2022_12-43-36] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[18-04-2022_12-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[18-04-2022_12-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[18-04-2022_12-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[18-04-2022_12-43-36] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-43-36] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 88 as problem start state.

[18-04-2022_12-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 88})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 88})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 88})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 88})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 88})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 88})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 88})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 88})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 88})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '((puzzle_room,1),5,0)', 'S': 88})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '((puzzle_room,1),5,0)', 'S': 88})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '((puzzle_room,1),5,0)', 'S': 88})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '((store_room,0),0,0)', 'S': 88})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '((puzzle_room,1),5,0)', 'S': 88})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '((puzzle_room,1),5,0)', 'S': 88})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '((puzzle_room,1),5,0)', 'S': 88})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '((puzzle_room,1),5,0)', 'S': 88})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '((puzzle_room,1),5,0)', 'S': 88})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '((puzzle_room,1),5,0)', 'S': 88})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '((puzzle_room,1),5,0)', 'S': 88})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '((puzzle_room,1),5,0)', 'S': 88})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '((puzzle_room,1),5,0)', 'S': 88})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '((puzzle_room,1),5,0)', 'S': 88})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '((puzzle_room,1),5,0)', 'S': 88})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '((puzzle_room,1),5,0)', 'S': 88})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '((puzzle_room,1),5,0)', 'S': 88})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 88})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 88})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 88})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 88})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 88})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 88})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 88})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 88})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 88})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 88})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 88})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 88})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 88})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 88})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 88})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 88})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 88})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 88})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 88})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 88})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 88})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 88})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 88})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 88})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 88})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 88})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 88})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 88})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 88})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 88})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 88})
Fluent({'L': 2, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 88})
Fluent({'L': 2, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 88})
Fluent({'L': 2, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 88})
Fluent({'L': 2, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 88})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 88})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 88})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 88})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 88})
Fluent({'L': 2, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 88})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 88})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 88})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 88})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 88})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 88})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 88})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 88})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 88})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 88})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 88})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 88})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 88})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 88})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 88})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 88})

[18-04-2022_12-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 164 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 88).
holds(1, complete_tower(red,puzzle_room_table), false, 88).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 88).
holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 88).
holds(1, configuration(manipulator_limb_1), extended, 88).
holds(1, configuration(manipulator_limb_2), retracted, 88).
holds(1, configuration(puzzle_room_door), open, 88).
holds(1, configuration(starting_room_door), closed, 88).
holds(1, configuration(store_room_door), open, 88).
holds(1, grasping(manipulator_end_1), nothing, 88).
holds(1, grasping(manipulator_end_2), (block,5), 88).
holds(1, in((block,1)), ((puzzle_room,1),5,0), 88).
holds(1, in((block,2)), ((puzzle_room,1),5,0), 88).
holds(1, in((block,3)), ((puzzle_room,1),5,0), 88).
holds(1, in((block,4)), ((store_room,0),0,0), 88).
holds(1, in((block,5)), ((puzzle_room,1),5,0), 88).
holds(1, in((block,6)), ((puzzle_room,1),5,0), 88).
holds(1, in(manipulator_arm_1), ((puzzle_room,1),5,0), 88).
holds(1, in(manipulator_arm_2), ((puzzle_room,1),5,0), 88).
holds(1, in(manipulator_end_1), ((puzzle_room,1),5,0), 88).
holds(1, in(manipulator_end_2), ((puzzle_room,1),5,0), 88).
holds(1, in(manipulator_limb_1), ((puzzle_room,1),5,0), 88).
holds(1, in(manipulator_limb_2), ((puzzle_room,1),5,0), 88).
holds(1, in(puzzle_room_table), ((puzzle_room,1),5,0), 88).
holds(1, in(puzzle_room_table_left), ((puzzle_room,1),5,0), 88).
holds(1, in(puzzle_room_table_middle), ((puzzle_room,1),5,0), 88).
holds(1, in(puzzle_room_table_right), ((puzzle_room,1),5,0), 88).
holds(1, in(talos), ((puzzle_room,1),5,0), 88).
holds(1, in_tower((block,1),(block,1)), true, 88).
holds(1, in_tower((block,1),(block,2)), false, 88).
holds(1, in_tower((block,1),(block,3)), false, 88).
holds(1, in_tower((block,1),(block,4)), false, 88).
holds(1, in_tower((block,1),(block,5)), false, 88).
holds(1, in_tower((block,1),(block,6)), false, 88).
holds(1, in_tower((block,2),(block,1)), false, 88).
holds(1, in_tower((block,2),(block,2)), false, 88).
holds(1, in_tower((block,2),(block,3)), false, 88).
holds(1, in_tower((block,2),(block,4)), false, 88).
holds(1, in_tower((block,2),(block,5)), false, 88).
holds(1, in_tower((block,2),(block,6)), false, 88).
holds(1, in_tower((block,3),(block,1)), false, 88).
holds(1, in_tower((block,3),(block,2)), true, 88).
holds(1, in_tower((block,3),(block,3)), true, 88).
holds(1, in_tower((block,3),(block,4)), false, 88).
holds(1, in_tower((block,3),(block,5)), false, 88).
holds(1, in_tower((block,3),(block,6)), false, 88).
holds(1, in_tower((block,4),(block,1)), false, 88).
holds(1, in_tower((block,4),(block,2)), false, 88).
holds(1, in_tower((block,4),(block,3)), false, 88).
holds(1, in_tower((block,4),(block,4)), false, 88).
holds(1, in_tower((block,4),(block,5)), false, 88).
holds(1, in_tower((block,4),(block,6)), false, 88).
holds(1, in_tower((block,5),(block,1)), false, 88).
holds(1, in_tower((block,5),(block,2)), false, 88).
holds(1, in_tower((block,5),(block,3)), false, 88).
holds(1, in_tower((block,5),(block,4)), false, 88).
holds(1, in_tower((block,5),(block,5)), false, 88).
holds(1, in_tower((block,5),(block,6)), false, 88).
holds(1, in_tower((block,6),(block,1)), false, 88).
holds(1, in_tower((block,6),(block,2)), false, 88).
holds(1, in_tower((block,6),(block,3)), false, 88).
holds(1, in_tower((block,6),(block,4)), false, 88).
holds(1, in_tower((block,6),(block,5)), false, 88).
holds(1, in_tower((block,6),(block,6)), true, 88).
holds(1, on((block,1)), puzzle_room_table_left, 88).
holds(1, on((block,2)), (block,3), 88).
holds(1, on((block,3)), puzzle_room_table_left, 88).
holds(1, on((block,4)), nothing, 88).
holds(1, on((block,5)), nothing, 88).
holds(1, on((block,6)), puzzle_room_table_right, 88).
holds(1, tower_base((block,1),puzzle_room_table), true, 88).
holds(1, tower_base((block,2),puzzle_room_table), false, 88).
holds(1, tower_base((block,3),puzzle_room_table), true, 88).
holds(1, tower_base((block,4),puzzle_room_table), false, 88).
holds(1, tower_base((block,5),puzzle_room_table), false, 88).
holds(1, tower_base((block,6),puzzle_room_table), true, 88).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 88).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 88).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 88).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 88).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 88).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 88).
holds(2, complete_tower(blue,puzzle_room_table), false, 88).
holds(2, complete_tower(red,puzzle_room_table), false, 88).
holds(2, configuration(manipulator_end_1), aligned_with(nothing), 88).
holds(2, configuration(manipulator_end_2), aligned_with((block,5)), 88).
holds(2, configuration(manipulator_limb_1), extended, 88).
holds(2, configuration(manipulator_limb_2), retracted, 88).
holds(2, configuration(puzzle_room_door), open, 88).
holds(2, configuration(starting_room_door), closed, 88).
holds(2, configuration(store_room_door), open, 88).
holds(2, grasping(manipulator_end_1), nothing, 88).
holds(2, grasping(manipulator_end_2), (block,5), 88).
holds(2, in((block,1)), (puzzle_room,1), 88).
holds(2, in((block,2)), (puzzle_room,1), 88).
holds(2, in((block,3)), (puzzle_room,1), 88).
holds(2, in((block,4)), (store_room,0), 88).
holds(2, in((block,5)), (puzzle_room,1), 88).
holds(2, in((block,6)), (puzzle_room,1), 88).
holds(2, in(manipulator_arm_1), (puzzle_room,1), 88).
holds(2, in(manipulator_arm_2), (puzzle_room,1), 88).
holds(2, in(manipulator_end_1), (puzzle_room,1), 88).
holds(2, in(manipulator_end_2), (puzzle_room,1), 88).
holds(2, in(manipulator_limb_1), (puzzle_room,1), 88).
holds(2, in(manipulator_limb_2), (puzzle_room,1), 88).
holds(2, in(puzzle_room_table), (puzzle_room,1), 88).
holds(2, in(puzzle_room_table_left), (puzzle_room,1), 88).
holds(2, in(puzzle_room_table_middle), (puzzle_room,1), 88).
holds(2, in(puzzle_room_table_right), (puzzle_room,1), 88).
holds(2, in(talos), (puzzle_room,1), 88).
holds(2, in_tower((block,1),(block,1)), true, 88).
holds(2, in_tower((block,1),(block,2)), false, 88).
holds(2, in_tower((block,1),(block,3)), false, 88).
holds(2, in_tower((block,1),(block,4)), false, 88).
holds(2, in_tower((block,1),(block,5)), false, 88).
holds(2, in_tower((block,1),(block,6)), false, 88).
holds(2, in_tower((block,2),(block,1)), false, 88).
holds(2, in_tower((block,2),(block,2)), false, 88).
holds(2, in_tower((block,2),(block,3)), false, 88).
holds(2, in_tower((block,2),(block,4)), false, 88).
holds(2, in_tower((block,2),(block,5)), false, 88).
holds(2, in_tower((block,2),(block,6)), false, 88).
holds(2, in_tower((block,3),(block,1)), false, 88).
holds(2, in_tower((block,3),(block,2)), true, 88).
holds(2, in_tower((block,3),(block,3)), true, 88).
holds(2, in_tower((block,3),(block,4)), false, 88).
holds(2, in_tower((block,3),(block,5)), false, 88).
holds(2, in_tower((block,3),(block,6)), false, 88).
holds(2, in_tower((block,4),(block,1)), false, 88).
holds(2, in_tower((block,4),(block,2)), false, 88).
holds(2, in_tower((block,4),(block,3)), false, 88).
holds(2, in_tower((block,4),(block,4)), false, 88).
holds(2, in_tower((block,4),(block,5)), false, 88).
holds(2, in_tower((block,4),(block,6)), false, 88).
holds(2, in_tower((block,5),(block,1)), false, 88).
holds(2, in_tower((block,5),(block,2)), false, 88).
holds(2, in_tower((block,5),(block,3)), false, 88).
holds(2, in_tower((block,5),(block,4)), false, 88).
holds(2, in_tower((block,5),(block,5)), false, 88).
holds(2, in_tower((block,5),(block,6)), false, 88).
holds(2, in_tower((block,6),(block,1)), false, 88).
holds(2, in_tower((block,6),(block,2)), false, 88).
holds(2, in_tower((block,6),(block,3)), false, 88).
holds(2, in_tower((block,6),(block,4)), false, 88).
holds(2, in_tower((block,6),(block,5)), false, 88).
holds(2, in_tower((block,6),(block,6)), true, 88).
holds(2, on((block,1)), puzzle_room_table_left, 88).
holds(2, on((block,2)), (block,3), 88).
holds(2, on((block,3)), puzzle_room_table_left, 88).
holds(2, on((block,4)), nothing, 88).
holds(2, on((block,5)), nothing, 88).
holds(2, on((block,6)), puzzle_room_table_right, 88).
holds(2, tower_base((block,1),puzzle_room_table), true, 88).
holds(2, tower_base((block,2),puzzle_room_table), false, 88).
holds(2, tower_base((block,3),puzzle_room_table), true, 88).
holds(2, tower_base((block,4),puzzle_room_table), false, 88).
holds(2, tower_base((block,5),puzzle_room_table), false, 88).
holds(2, tower_base((block,6),puzzle_room_table), true, 88).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 88).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 88).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 88).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 88).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 88).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 88).

[18-04-2022_12-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[18-04-2022_12-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 308 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table_left, false).
final_goal(2, on((block,1)), puzzle_room_table_middle, false).
final_goal(2, on((block,1)), puzzle_room_table_right, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table_left, false).
final_goal(2, on((block,2)), puzzle_room_table_middle, false).
final_goal(2, on((block,2)), puzzle_room_table_right, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table_left, true).
final_goal(2, on((block,3)), puzzle_room_table_middle, false).
final_goal(2, on((block,3)), puzzle_room_table_right, false).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table_left, false).
final_goal(2, on((block,4)), puzzle_room_table_middle, false).
final_goal(2, on((block,4)), puzzle_room_table_right, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table_left, false).
final_goal(2, on((block,5)), puzzle_room_table_middle, false).
final_goal(2, on((block,5)), puzzle_room_table_right, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table_left, false).
final_goal(2, on((block,6)), puzzle_room_table_middle, false).
final_goal(2, on((block,6)), puzzle_room_table_right, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[18-04-2022_12-43-36] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=90']

[18-04-2022_12-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'I': 47})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'I': 47})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'F': 'in(talos)', 'V': '(puzzle_room,0)', 'I': 48})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((hallway,2))', 'F': 'in(talos)', 'V': '(hallway,2)', 'I': 49})

[18-04-2022_12-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 4 rules into program part base:

sub_goal(2, talos, configure(manipulator_limb_1,retracted), configuration(manipulator_end_1), aligned_with(nothing), 47).
sub_goal(2, talos, configure(manipulator_limb_1,retracted), configuration(manipulator_limb_1), retracted, 47).
sub_goal(2, talos, move((puzzle_room,0)), in(talos), (puzzle_room,0), 48).
sub_goal(2, talos, move((hallway,2)), in(talos), (hallway,2), 49).

[18-04-2022_12-43-36] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[18-04-2022_12-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=90']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A8A4459550>]
	incrementor = SolveIncrementor(step_start=88, step_increase=1, step_increase_initial=3, step_end_min=91, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1755.8228463999976, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 88), range_=None), IncPart(name='plan_module', args=('#inc', 88, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 88, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 88, 47, 49, 'sequential', 'false'), range_=None)]

[18-04-2022_12-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 845 rules

[18-04-2022_12-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0053544000002148096s

[18-04-2022_12-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[18-04-2022_12-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[18-04-2022_12-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.171884s.

[18-04-2022_12-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.025406s with result Satisfiable.

[18-04-2022_12-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[18-04-2022_12-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A8A463E8B0>

[18-04-2022_12-43-36] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 88)
	('last_sgoals', 49)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('first_sgoals', 47)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A8A463E8B0>)

[18-04-2022_12-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 88). %* None *%
#program plan_module(#inc, 88, false, false). %* None *%
#program optimisation_module(#inc, 88, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 88, 47, 49, sequential, false). %* None *%

[18-04-2022_12-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     87 : Current =     90
Incrementor step ends | Minimum  =     91 : Maximum =    300

[18-04-2022_12-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(90)]), ('state_module', [Number(88), Number(88)]), ('plan_module', [Number(88), Number(88), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(88), Number(88), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(88)]), ('action_preconditions', [Number(88)]), ('variable_relations', [Number(88)]), ('abstraction_mappings', [Number(88)]), ('conformance_module', [Number(88), Number(88), Number(47), Number(49), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(89), Number(88)]), ('plan_module', [Number(89), Number(88), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(89), Number(88), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(89)]), ('action_preconditions', [Number(89)]), ('variable_relations', [Number(89)]), ('abstraction_mappings', [Number(89)]), ('conformance_module', [Number(89), Number(88), Number(47), Number(49), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(90), Number(88)]), ('plan_module', [Number(90), Number(88), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(90), Number(88), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(90)]), ('action_preconditions', [Number(90)]), ('variable_relations', [Number(90)]), ('abstraction_mappings', [Number(90)]), ('conformance_module', [Number(90), Number(88), Number(47), Number(49), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.566452s.

[18-04-2022_12-43-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.094466s with result Unsatisfiable.

[18-04-2022_12-43-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.660918200001106, Incremental time limit = None
Running cumulative time = 0.660918200001106, Cumulative time limit = 1755.8228463999976
Used memory = (RSS = 2470.179688Mb, VMS = 2483.550781Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     90 : Current =     91
Incrementor step ends | Minimum  =     91 : Maximum =    300

[18-04-2022_12-43-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(91)]), ('state_module', [Number(91), Number(88)]), ('plan_module', [Number(91), Number(88), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(91), Number(88), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(91)]), ('action_preconditions', [Number(91)]), ('variable_relations', [Number(91)]), ('abstraction_mappings', [Number(91)]), ('conformance_module', [Number(91), Number(88), Number(47), Number(49), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.181530s.

[18-04-2022_12-43-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.018275s with result Unsatisfiable.

[18-04-2022_12-43-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.19980549999945652, Incremental time limit = None
Running cumulative time = 0.8607237000005625, Cumulative time limit = 1755.8228463999976
Used memory = (RSS = 2470.402344Mb, VMS = 2483.777344Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     91 : Current =     92
Incrementor step ends | Minimum  =     91 : Maximum =    300

[18-04-2022_12-43-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(92)]), ('state_module', [Number(92), Number(88)]), ('plan_module', [Number(92), Number(88), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(92), Number(88), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(92)]), ('action_preconditions', [Number(92)]), ('variable_relations', [Number(92)]), ('abstraction_mappings', [Number(92)]), ('conformance_module', [Number(92), Number(88), Number(47), Number(49), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.270602s.

[18-04-2022_12-43-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.028961s with result Unsatisfiable.

[18-04-2022_12-43-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2995624000004682, Incremental time limit = None
Running cumulative time = 1.1602861000010307, Cumulative time limit = 1755.8228463999976
Used memory = (RSS = 2470.789062Mb, VMS = 2484.156250Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     92 : Current =     93
Incrementor step ends | Minimum  =     91 : Maximum =    300

[18-04-2022_12-43-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(93)]), ('state_module', [Number(93), Number(88)]), ('plan_module', [Number(93), Number(88), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(93), Number(88), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(93)]), ('action_preconditions', [Number(93)]), ('variable_relations', [Number(93)]), ('abstraction_mappings', [Number(93)]), ('conformance_module', [Number(93), Number(88), Number(47), Number(49), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.285336s.

[18-04-2022_12-43-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.040619s with result Unsatisfiable.

[18-04-2022_12-43-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.32595430000037595, Incremental time limit = None
Running cumulative time = 1.4862404000014067, Cumulative time limit = 1755.8228463999976
Used memory = (RSS = 2478.378906Mb, VMS = 2493.308594Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     93 : Current =     94
Incrementor step ends | Minimum  =     91 : Maximum =    300

[18-04-2022_12-43-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(94)]), ('state_module', [Number(94), Number(88)]), ('plan_module', [Number(94), Number(88), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(94), Number(88), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(94)]), ('action_preconditions', [Number(94)]), ('variable_relations', [Number(94)]), ('abstraction_mappings', [Number(94)]), ('conformance_module', [Number(94), Number(88), Number(47), Number(49), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.297251s.

[18-04-2022_12-43-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.045785s with result Unsatisfiable.

[18-04-2022_12-43-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.34303540000018984, Incremental time limit = None
Running cumulative time = 1.8292758000015965, Cumulative time limit = 1755.8228463999976
Used memory = (RSS = 2481.199219Mb, VMS = 2495.246094Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     94 : Current =     95
Incrementor step ends | Minimum  =     91 : Maximum =    300

[18-04-2022_12-43-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(95)]), ('state_module', [Number(95), Number(88)]), ('plan_module', [Number(95), Number(88), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(95), Number(88), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(95)]), ('action_preconditions', [Number(95)]), ('variable_relations', [Number(95)]), ('abstraction_mappings', [Number(95)]), ('conformance_module', [Number(95), Number(88), Number(47), Number(49), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.307962s.

[18-04-2022_12-43-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.062963s with result Unsatisfiable.

[18-04-2022_12-43-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3709247000006144, Incremental time limit = None
Running cumulative time = 2.200200500002211, Cumulative time limit = 1755.8228463999976
Used memory = (RSS = 2483.542969Mb, VMS = 2499.539062Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     95 : Current =     96
Incrementor step ends | Minimum  =     91 : Maximum =    300

[18-04-2022_12-43-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(96)]), ('state_module', [Number(96), Number(88)]), ('plan_module', [Number(96), Number(88), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(96), Number(88), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(96)]), ('action_preconditions', [Number(96)]), ('variable_relations', [Number(96)]), ('abstraction_mappings', [Number(96)]), ('conformance_module', [Number(96), Number(88), Number(47), Number(49), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.311612s.

[18-04-2022_12-43-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.094157s with result Satisfiable.

[18-04-2022_12-43-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.405769799999689, Incremental time limit = None
Running cumulative time = 2.6059703000019, Cumulative time limit = 1755.8228463999976
Used memory = (RSS = 2488.179688Mb, VMS = 2502.816406Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.220745s, Solving = 0.385226s, Total = 2.605970s, Memory = (RSS = 2488.179688Mb, VMS = 2502.816406Mb), Step range = [88-96]), Calls = 7
Final Model :: Total atoms = 24147, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[18-04-2022_12-43-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.566452s, Solving = 0.094466s, Total = 0.660918s, Memory = (RSS = 2470.179688Mb, VMS = 2483.550781Mb), Step range = [88-90]
2 : Statistics :: Grounding = 0.181530s, Solving = 0.018275s, Total = 0.199805s, Memory = (RSS = 2470.402344Mb, VMS = 2483.777344Mb), Step range = [91-91]
3 : Statistics :: Grounding = 0.270602s, Solving = 0.028961s, Total = 0.299562s, Memory = (RSS = 2470.789062Mb, VMS = 2484.156250Mb), Step range = [92-92]
4 : Statistics :: Grounding = 0.285336s, Solving = 0.040619s, Total = 0.325954s, Memory = (RSS = 2478.378906Mb, VMS = 2493.308594Mb), Step range = [93-93]
5 : Statistics :: Grounding = 0.297251s, Solving = 0.045785s, Total = 0.343035s, Memory = (RSS = 2481.199219Mb, VMS = 2495.246094Mb), Step range = [94-94]
6 : Statistics :: Grounding = 0.307962s, Solving = 0.062963s, Total = 0.370925s, Memory = (RSS = 2483.542969Mb, VMS = 2499.539062Mb), Step range = [95-95]
7 : Statistics :: Grounding = 0.311612s, Solving = 0.094157s, Total = 0.405770s, Memory = (RSS = 2488.179688Mb, VMS = 2502.816406Mb), Step range = [96-96]

[18-04-2022_12-43-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 2.605970s due to: Stop condition reached.

[18-04-2022_12-43-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[18-04-2022_12-43-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[18-04-2022_12-43-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-43-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[18-04-2022_12-43-39] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38, 81: 39, 82: 40, 83: 41, 84: 42, 85: 43, 86: 44, 87: 45, 88: 46}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80, 39: 81, 40: 82, 41: 83, 42: 84, 43: 85, 44: 86, 45: 87, 46: 88}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24, 43: 25, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29, 49: 29, 50: 30, 51: 30, 52: 30}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42, 25: 44, 26: 45, 27: 46, 28: 47, 29: 49, 30: 52}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-43-39] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38, 81: 39, 82: 40, 83: 41, 84: 42, 85: 43, 86: 44, 87: 45, 88: 46, 89: 47, 90: 48, 91: 48, 92: 48, 93: 49, 94: 49, 95: 49, 96: 49}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80, 39: 81, 40: 82, 41: 83, 42: 84, 43: 85, 44: 86, 45: 87, 46: 88, 47: 89, 48: 92, 49: 96}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24, 43: 25, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29, 49: 29, 50: 30, 51: 30, 52: 30}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42, 25: 44, 26: 45, 27: 46, 28: 47, 29: 49, 30: 52}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-43-39] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 49, Last requested goal index = 49, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[18-04-2022_12-43-39] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.220745s, Solving = 0.385226s, Total = 2.605970s, Memory = (RSS = 2488.179688Mb, VMS = 2502.816406Mb), Step range = [88-96]), Calls = 7
Model :: Total atoms = 24147, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[18-04-2022_12-43-39] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 8 :: Actions = 8                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Planned actions:
        talos : move(((starting_room,1),3,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),4,0))
Step 5:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,0))
Step 6:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,1))
Step 7:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),4,0))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,0))
Step 9:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 10:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 11:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 12:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 13:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 5] talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(store_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 5] talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(store_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 17:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 21:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 23:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 24:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 25:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 26:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 27:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 28:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(puzzle_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(puzzle_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 31:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 35:
    Current Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 37:
    Current Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 38:
    Current Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 39:
    Current Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 40:
    Current Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 41:
    Current Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 42:
    Current Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 43:
    Current Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 44:
    Current Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Planned actions:
        talos : move(((store_room,0),2,1))
Step 45:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 46:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 47:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),0,0))
Step 48:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 49:
    Current Sub-goals:
        [Index = 23] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Achieved Sub-goals:
        [Index = 23] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 50:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 51:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 52:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 53:
    Current Sub-goals:
        [Index = 27] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Achieved Sub-goals:
        [Index = 27] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 54:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 55:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 56:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 29] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 57:
    Current Sub-goals:
        [Index = 30] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 58:
    Current Sub-goals:
        [Index = 30] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 30] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),3,0))
Step 59:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,0))
Step 60:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 61:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 62:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 63:
    Current Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 64:
    Current Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 65:
    Current Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 66:
    Current Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 67:
    Current Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 68:
    Current Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 69:
    Current Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 70:
    Current Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 71:
    Current Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Planned actions:
        talos : move(((puzzle_room,0),0,1))
Step 72:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),0,0))
Step 73:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,0))
Step 74:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),2,0))
Step 75:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Planned actions:
        talos : move(((puzzle_room,1),3,0))
Step 76:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),4,0))
Step 77:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),5,0))
Step 78:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 79:
    Current Sub-goals:
        [Index = 37] talos : put(manipulator_end_1,(block,6),puzzle_room_table_right) -> on((block,6)) = puzzle_room_table_right
    Achieved Sub-goals:
        [Index = 37] talos : put(manipulator_end_1,(block,6),puzzle_room_table_right) -> on((block,6)) = puzzle_room_table_right
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 80:
    Current Sub-goals:
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 81:
    Current Sub-goals:
        [Index = 39] talos : configure(manipulator_end_1,aligned_with((block,3))) -> configuration(manipulator_end_1) = aligned_with((block,3))
    Achieved Sub-goals:
        [Index = 39] talos : configure(manipulator_end_1,aligned_with((block,3))) -> configuration(manipulator_end_1) = aligned_with((block,3))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 82:
    Current Sub-goals:
        [Index = 40] talos : grasp(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = (block,3)
    Achieved Sub-goals:
        [Index = 40] talos : grasp(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 83:
    Current Sub-goals:
        [Index = 41] talos : put(manipulator_end_1,(block,3),puzzle_room_table_left) -> on((block,3)) = puzzle_room_table_left
    Achieved Sub-goals:
        [Index = 41] talos : put(manipulator_end_1,(block,3),puzzle_room_table_left) -> on((block,3)) = puzzle_room_table_left
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 84:
    Current Sub-goals:
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 85:
    Current Sub-goals:
        [Index = 43] talos : configure(manipulator_end_1,aligned_with((block,2))) -> configuration(manipulator_end_1) = aligned_with((block,2))
    Achieved Sub-goals:
        [Index = 43] talos : configure(manipulator_end_1,aligned_with((block,2))) -> configuration(manipulator_end_1) = aligned_with((block,2))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 86:
    Current Sub-goals:
        [Index = 44] talos : grasp(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = (block,2)
    Achieved Sub-goals:
        [Index = 44] talos : grasp(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 87:
    Current Sub-goals:
        [Index = 45] talos : put(manipulator_end_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 45] talos : put(manipulator_end_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 88:
    Current Sub-goals:
        [Index = 46] talos : release(manipulator_end_1,(block,2)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 46] talos : release(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 46] talos : release(manipulator_end_1,(block,2)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 46] talos : release(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,2))
Step 89:
    Current Sub-goals:
        [Index = 47] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 47] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 47] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 47] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 90:
    Current Sub-goals:
        [Index = 48] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),4,0))
Step 91:
    Current Sub-goals:
        [Index = 48] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),3,0))
Step 92:
    Current Sub-goals:
        [Index = 48] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
        [Index = 48] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Planned actions:
        talos : move(((puzzle_room,0),2,0))
Step 93:
    Current Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,0))
Step 94:
    Current Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,1))
Step 95:
    Current Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),0,1))
Step 96:
    Current Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),8,1))

[18-04-2022_12-43-39] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[18-04-2022_12-43-39] DEBUG :: ASH Planner Main #1 >> Value of end step of abstract plan to divide adjusted for right blend of current problem: end_step=96

[18-04-2022_12-43-39] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[18-04-2022_12-43-39] DEBUG :: ASH Planner Main #1 >> Monolevel problem 11 at level 1 solved.

[18-04-2022_12-43-39] DEBUG :: ASH Planner Main #1 >> Online planning increment 11 finished.

[18-04-2022_12-43-39] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 2 : Total constraining sub-goal stages = 20 : Goals achieved = 13 : Goals unachieved = 7 : Complete = False
Level = 2 : Solved problems = 6 : Total constraining sub-goal stages = 30 : Goals achieved = 30 : Goals unachieved = 0 : Complete = False
Level = 1 : Solved problems = 11 : Total constraining sub-goal stages = 52 : Goals achieved = 49 : Goals unachieved = 3 : Complete = False

[18-04-2022_12-43-39] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 3.

[18-04-2022_12-43-39] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 12 by method ground-first is [1-1].

[18-04-2022_12-43-39] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 12 at level 1:
Total Templated Partial Problems = 2, Problem Range = [11-12], Size = 6, Sub-goal Stage Range = [47-52]
Division points [total=1] : [(Index = 49, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[18-04-2022_12-43-39] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [50-52]

[18-04-2022_12-43-39] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 96, chosen step range to extract = range(0, 97)

[18-04-2022_12-43-39] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 52, Total actions = 52, Produced sub-goal stages = 52, Produced sub-goal literals = 60
Level [1]: Length = 96, Total actions = 96, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-39] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 52, chosen step range to extract = range(0, 53)

[18-04-2022_12-43-39] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 52, Total actions = 52, Produced sub-goal stages = 52, Produced sub-goal literals = 60
Level [1]: Length = 96, Total actions = 96, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-39] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 30, chosen step range to extract = range(0, 31)

[18-04-2022_12-43-39] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 52, Total actions = 52, Produced sub-goal stages = 52, Produced sub-goal literals = 60
Level [1]: Length = 96, Total actions = 96, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-39] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 20, chosen step range to extract = range(0, 21)

[18-04-2022_12-43-39] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 52, Total actions = 52, Produced sub-goal stages = 52, Produced sub-goal literals = 60
Level [1]: Length = 96, Total actions = 96, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-39] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [50-52], problem number = 12, increment number = 12

[18-04-2022_12-43-39] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 50)
	('last_sgoals', 52)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1753.2168760999957)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[18-04-2022_12-43-39] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [50-52] : Concurrency disabled : Minimum search length bound enabled with value 98

[18-04-2022_12-43-39] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 50
last_sgoals = 52
start_step = 96
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 98

[18-04-2022_12-43-39] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[18-04-2022_12-43-39] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[18-04-2022_12-43-39] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[18-04-2022_12-43-39] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[18-04-2022_12-43-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[18-04-2022_12-43-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[18-04-2022_12-43-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-43-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-43-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-43-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[18-04-2022_12-43-39] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-43-39] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 96 as problem start state.

[18-04-2022_12-43-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 96})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 96})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 96})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 96})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 96})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 96})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 96})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 96})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 96})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '((puzzle_room,1),5,0)', 'S': 96})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '((puzzle_room,1),5,0)', 'S': 96})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '((puzzle_room,1),5,0)', 'S': 96})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '((store_room,0),0,0)', 'S': 96})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '((hallway,2),8,1)', 'S': 96})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '((puzzle_room,1),5,0)', 'S': 96})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '((hallway,2),8,1)', 'S': 96})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '((hallway,2),8,1)', 'S': 96})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '((hallway,2),8,1)', 'S': 96})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '((hallway,2),8,1)', 'S': 96})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '((hallway,2),8,1)', 'S': 96})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '((hallway,2),8,1)', 'S': 96})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '((puzzle_room,1),5,0)', 'S': 96})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '((puzzle_room,1),5,0)', 'S': 96})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '((puzzle_room,1),5,0)', 'S': 96})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '((puzzle_room,1),5,0)', 'S': 96})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '((hallway,2),8,1)', 'S': 96})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 96})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 96})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 96})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 96})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 96})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 96})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 96})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 96})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 96})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 96})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 96})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 96})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 96})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 96})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 96})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 96})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 96})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 96})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 96})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 96})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 96})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 96})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 96})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 96})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 96})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 96})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 96})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': '(hallway,2)', 'S': 96})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 96})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': '(hallway,2)', 'S': 96})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': '(hallway,2)', 'S': 96})
Fluent({'L': 2, 'F': 'in(manipulator_end_1)', 'V': '(hallway,2)', 'S': 96})
Fluent({'L': 2, 'F': 'in(manipulator_end_2)', 'V': '(hallway,2)', 'S': 96})
Fluent({'L': 2, 'F': 'in(manipulator_limb_1)', 'V': '(hallway,2)', 'S': 96})
Fluent({'L': 2, 'F': 'in(manipulator_limb_2)', 'V': '(hallway,2)', 'S': 96})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 96})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 96})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 96})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 96})
Fluent({'L': 2, 'F': 'in(talos)', 'V': '(hallway,2)', 'S': 96})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 96})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 96})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 96})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 96})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 96})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 96})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 96})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 96})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 96})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 96})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 96})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 96})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 96})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 96})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 96})

[18-04-2022_12-43-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 164 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 96).
holds(1, complete_tower(red,puzzle_room_table), false, 96).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 96).
holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 96).
holds(1, configuration(manipulator_limb_1), retracted, 96).
holds(1, configuration(manipulator_limb_2), retracted, 96).
holds(1, configuration(puzzle_room_door), open, 96).
holds(1, configuration(starting_room_door), closed, 96).
holds(1, configuration(store_room_door), open, 96).
holds(1, grasping(manipulator_end_1), nothing, 96).
holds(1, grasping(manipulator_end_2), (block,5), 96).
holds(1, in((block,1)), ((puzzle_room,1),5,0), 96).
holds(1, in((block,2)), ((puzzle_room,1),5,0), 96).
holds(1, in((block,3)), ((puzzle_room,1),5,0), 96).
holds(1, in((block,4)), ((store_room,0),0,0), 96).
holds(1, in((block,5)), ((hallway,2),8,1), 96).
holds(1, in((block,6)), ((puzzle_room,1),5,0), 96).
holds(1, in(manipulator_arm_1), ((hallway,2),8,1), 96).
holds(1, in(manipulator_arm_2), ((hallway,2),8,1), 96).
holds(1, in(manipulator_end_1), ((hallway,2),8,1), 96).
holds(1, in(manipulator_end_2), ((hallway,2),8,1), 96).
holds(1, in(manipulator_limb_1), ((hallway,2),8,1), 96).
holds(1, in(manipulator_limb_2), ((hallway,2),8,1), 96).
holds(1, in(puzzle_room_table), ((puzzle_room,1),5,0), 96).
holds(1, in(puzzle_room_table_left), ((puzzle_room,1),5,0), 96).
holds(1, in(puzzle_room_table_middle), ((puzzle_room,1),5,0), 96).
holds(1, in(puzzle_room_table_right), ((puzzle_room,1),5,0), 96).
holds(1, in(talos), ((hallway,2),8,1), 96).
holds(1, in_tower((block,1),(block,1)), true, 96).
holds(1, in_tower((block,1),(block,2)), false, 96).
holds(1, in_tower((block,1),(block,3)), false, 96).
holds(1, in_tower((block,1),(block,4)), false, 96).
holds(1, in_tower((block,1),(block,5)), false, 96).
holds(1, in_tower((block,1),(block,6)), false, 96).
holds(1, in_tower((block,2),(block,1)), false, 96).
holds(1, in_tower((block,2),(block,2)), false, 96).
holds(1, in_tower((block,2),(block,3)), false, 96).
holds(1, in_tower((block,2),(block,4)), false, 96).
holds(1, in_tower((block,2),(block,5)), false, 96).
holds(1, in_tower((block,2),(block,6)), false, 96).
holds(1, in_tower((block,3),(block,1)), false, 96).
holds(1, in_tower((block,3),(block,2)), true, 96).
holds(1, in_tower((block,3),(block,3)), true, 96).
holds(1, in_tower((block,3),(block,4)), false, 96).
holds(1, in_tower((block,3),(block,5)), false, 96).
holds(1, in_tower((block,3),(block,6)), false, 96).
holds(1, in_tower((block,4),(block,1)), false, 96).
holds(1, in_tower((block,4),(block,2)), false, 96).
holds(1, in_tower((block,4),(block,3)), false, 96).
holds(1, in_tower((block,4),(block,4)), false, 96).
holds(1, in_tower((block,4),(block,5)), false, 96).
holds(1, in_tower((block,4),(block,6)), false, 96).
holds(1, in_tower((block,5),(block,1)), false, 96).
holds(1, in_tower((block,5),(block,2)), false, 96).
holds(1, in_tower((block,5),(block,3)), false, 96).
holds(1, in_tower((block,5),(block,4)), false, 96).
holds(1, in_tower((block,5),(block,5)), false, 96).
holds(1, in_tower((block,5),(block,6)), false, 96).
holds(1, in_tower((block,6),(block,1)), false, 96).
holds(1, in_tower((block,6),(block,2)), false, 96).
holds(1, in_tower((block,6),(block,3)), false, 96).
holds(1, in_tower((block,6),(block,4)), false, 96).
holds(1, in_tower((block,6),(block,5)), false, 96).
holds(1, in_tower((block,6),(block,6)), true, 96).
holds(1, on((block,1)), puzzle_room_table_left, 96).
holds(1, on((block,2)), (block,3), 96).
holds(1, on((block,3)), puzzle_room_table_left, 96).
holds(1, on((block,4)), nothing, 96).
holds(1, on((block,5)), nothing, 96).
holds(1, on((block,6)), puzzle_room_table_right, 96).
holds(1, tower_base((block,1),puzzle_room_table), true, 96).
holds(1, tower_base((block,2),puzzle_room_table), false, 96).
holds(1, tower_base((block,3),puzzle_room_table), true, 96).
holds(1, tower_base((block,4),puzzle_room_table), false, 96).
holds(1, tower_base((block,5),puzzle_room_table), false, 96).
holds(1, tower_base((block,6),puzzle_room_table), true, 96).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 96).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 96).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 96).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 96).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 96).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 96).
holds(2, complete_tower(blue,puzzle_room_table), false, 96).
holds(2, complete_tower(red,puzzle_room_table), false, 96).
holds(2, configuration(manipulator_end_1), aligned_with(nothing), 96).
holds(2, configuration(manipulator_end_2), aligned_with((block,5)), 96).
holds(2, configuration(manipulator_limb_1), retracted, 96).
holds(2, configuration(manipulator_limb_2), retracted, 96).
holds(2, configuration(puzzle_room_door), open, 96).
holds(2, configuration(starting_room_door), closed, 96).
holds(2, configuration(store_room_door), open, 96).
holds(2, grasping(manipulator_end_1), nothing, 96).
holds(2, grasping(manipulator_end_2), (block,5), 96).
holds(2, in((block,1)), (puzzle_room,1), 96).
holds(2, in((block,2)), (puzzle_room,1), 96).
holds(2, in((block,3)), (puzzle_room,1), 96).
holds(2, in((block,4)), (store_room,0), 96).
holds(2, in((block,5)), (hallway,2), 96).
holds(2, in((block,6)), (puzzle_room,1), 96).
holds(2, in(manipulator_arm_1), (hallway,2), 96).
holds(2, in(manipulator_arm_2), (hallway,2), 96).
holds(2, in(manipulator_end_1), (hallway,2), 96).
holds(2, in(manipulator_end_2), (hallway,2), 96).
holds(2, in(manipulator_limb_1), (hallway,2), 96).
holds(2, in(manipulator_limb_2), (hallway,2), 96).
holds(2, in(puzzle_room_table), (puzzle_room,1), 96).
holds(2, in(puzzle_room_table_left), (puzzle_room,1), 96).
holds(2, in(puzzle_room_table_middle), (puzzle_room,1), 96).
holds(2, in(puzzle_room_table_right), (puzzle_room,1), 96).
holds(2, in(talos), (hallway,2), 96).
holds(2, in_tower((block,1),(block,1)), true, 96).
holds(2, in_tower((block,1),(block,2)), false, 96).
holds(2, in_tower((block,1),(block,3)), false, 96).
holds(2, in_tower((block,1),(block,4)), false, 96).
holds(2, in_tower((block,1),(block,5)), false, 96).
holds(2, in_tower((block,1),(block,6)), false, 96).
holds(2, in_tower((block,2),(block,1)), false, 96).
holds(2, in_tower((block,2),(block,2)), false, 96).
holds(2, in_tower((block,2),(block,3)), false, 96).
holds(2, in_tower((block,2),(block,4)), false, 96).
holds(2, in_tower((block,2),(block,5)), false, 96).
holds(2, in_tower((block,2),(block,6)), false, 96).
holds(2, in_tower((block,3),(block,1)), false, 96).
holds(2, in_tower((block,3),(block,2)), true, 96).
holds(2, in_tower((block,3),(block,3)), true, 96).
holds(2, in_tower((block,3),(block,4)), false, 96).
holds(2, in_tower((block,3),(block,5)), false, 96).
holds(2, in_tower((block,3),(block,6)), false, 96).
holds(2, in_tower((block,4),(block,1)), false, 96).
holds(2, in_tower((block,4),(block,2)), false, 96).
holds(2, in_tower((block,4),(block,3)), false, 96).
holds(2, in_tower((block,4),(block,4)), false, 96).
holds(2, in_tower((block,4),(block,5)), false, 96).
holds(2, in_tower((block,4),(block,6)), false, 96).
holds(2, in_tower((block,5),(block,1)), false, 96).
holds(2, in_tower((block,5),(block,2)), false, 96).
holds(2, in_tower((block,5),(block,3)), false, 96).
holds(2, in_tower((block,5),(block,4)), false, 96).
holds(2, in_tower((block,5),(block,5)), false, 96).
holds(2, in_tower((block,5),(block,6)), false, 96).
holds(2, in_tower((block,6),(block,1)), false, 96).
holds(2, in_tower((block,6),(block,2)), false, 96).
holds(2, in_tower((block,6),(block,3)), false, 96).
holds(2, in_tower((block,6),(block,4)), false, 96).
holds(2, in_tower((block,6),(block,5)), false, 96).
holds(2, in_tower((block,6),(block,6)), true, 96).
holds(2, on((block,1)), puzzle_room_table_left, 96).
holds(2, on((block,2)), (block,3), 96).
holds(2, on((block,3)), puzzle_room_table_left, 96).
holds(2, on((block,4)), nothing, 96).
holds(2, on((block,5)), nothing, 96).
holds(2, on((block,6)), puzzle_room_table_right, 96).
holds(2, tower_base((block,1),puzzle_room_table), true, 96).
holds(2, tower_base((block,2),puzzle_room_table), false, 96).
holds(2, tower_base((block,3),puzzle_room_table), true, 96).
holds(2, tower_base((block,4),puzzle_room_table), false, 96).
holds(2, tower_base((block,5),puzzle_room_table), false, 96).
holds(2, tower_base((block,6),puzzle_room_table), true, 96).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 96).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 96).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 96).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 96).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 96).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 96).

[18-04-2022_12-43-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[18-04-2022_12-43-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 308 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table_left, false).
final_goal(2, on((block,1)), puzzle_room_table_middle, false).
final_goal(2, on((block,1)), puzzle_room_table_right, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table_left, false).
final_goal(2, on((block,2)), puzzle_room_table_middle, false).
final_goal(2, on((block,2)), puzzle_room_table_right, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table_left, true).
final_goal(2, on((block,3)), puzzle_room_table_middle, false).
final_goal(2, on((block,3)), puzzle_room_table_right, false).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table_left, false).
final_goal(2, on((block,4)), puzzle_room_table_middle, false).
final_goal(2, on((block,4)), puzzle_room_table_right, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table_left, false).
final_goal(2, on((block,5)), puzzle_room_table_middle, false).
final_goal(2, on((block,5)), puzzle_room_table_right, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table_left, false).
final_goal(2, on((block,6)), puzzle_room_table_middle, false).
final_goal(2, on((block,6)), puzzle_room_table_right, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[18-04-2022_12-43-40] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=98']

[18-04-2022_12-43-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((hallway,1))', 'F': 'in(talos)', 'V': '(hallway,1)', 'I': 50})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((hallway,0))', 'F': 'in(talos)', 'V': '(hallway,0)', 'I': 51})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((store_room,1))', 'F': 'in(talos)', 'V': '(store_room,1)', 'I': 52})

[18-04-2022_12-43-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 3 rules into program part base:

sub_goal(2, talos, move((hallway,1)), in(talos), (hallway,1), 50).
sub_goal(2, talos, move((hallway,0)), in(talos), (hallway,0), 51).
sub_goal(2, talos, move((store_room,1)), in(talos), (store_room,1), 52).

[18-04-2022_12-43-40] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-43-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[18-04-2022_12-43-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=98']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A8A4459940>]
	incrementor = SolveIncrementor(step_start=96, step_increase=1, step_increase_initial=3, step_end_min=99, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1753.2168760999957, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 96), range_=None), IncPart(name='plan_module', args=('#inc', 96, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 96, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 96, 50, 52, 'sequential', 'false'), range_=None)]

[18-04-2022_12-43-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-43-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-43-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 844 rules

[18-04-2022_12-43-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.005294000000503729s

[18-04-2022_12-43-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[18-04-2022_12-43-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[18-04-2022_12-43-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.172029s.

[18-04-2022_12-43-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.024964s with result Satisfiable.

[18-04-2022_12-43-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[18-04-2022_12-43-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A8A46EF810>

[18-04-2022_12-43-40] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 96)
	('last_sgoals', 52)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('first_sgoals', 50)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A8A46EF810>)

[18-04-2022_12-43-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 96). %* None *%
#program plan_module(#inc, 96, false, false). %* None *%
#program optimisation_module(#inc, 96, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 96, 50, 52, sequential, false). %* None *%

[18-04-2022_12-43-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     95 : Current =     98
Incrementor step ends | Minimum  =     99 : Maximum =    300

[18-04-2022_12-43-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(98)]), ('state_module', [Number(96), Number(96)]), ('plan_module', [Number(96), Number(96), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(96), Number(96), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(96)]), ('action_preconditions', [Number(96)]), ('variable_relations', [Number(96)]), ('abstraction_mappings', [Number(96)]), ('conformance_module', [Number(96), Number(96), Number(50), Number(52), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(97), Number(96)]), ('plan_module', [Number(97), Number(96), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(97), Number(96), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(97)]), ('action_preconditions', [Number(97)]), ('variable_relations', [Number(97)]), ('abstraction_mappings', [Number(97)]), ('conformance_module', [Number(97), Number(96), Number(50), Number(52), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(98), Number(96)]), ('plan_module', [Number(98), Number(96), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(98), Number(96), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(98)]), ('action_preconditions', [Number(98)]), ('variable_relations', [Number(98)]), ('abstraction_mappings', [Number(98)]), ('conformance_module', [Number(98), Number(96), Number(50), Number(52), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.568302s.

[18-04-2022_12-43-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.096073s with result Unsatisfiable.

[18-04-2022_12-43-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.6643743000004179, Incremental time limit = None
Running cumulative time = 0.6643743000004179, Cumulative time limit = 1753.2168760999957
Used memory = (RSS = 2471.375000Mb, VMS = 2484.804688Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     98 : Current =     99
Incrementor step ends | Minimum  =     99 : Maximum =    300

[18-04-2022_12-43-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(99)]), ('state_module', [Number(99), Number(96)]), ('plan_module', [Number(99), Number(96), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(99), Number(96), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(99)]), ('action_preconditions', [Number(99)]), ('variable_relations', [Number(99)]), ('abstraction_mappings', [Number(99)]), ('conformance_module', [Number(99), Number(96), Number(50), Number(52), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.238414s.

[18-04-2022_12-43-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.021588s with result Unsatisfiable.

[18-04-2022_12-43-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2600014999998166, Incremental time limit = None
Running cumulative time = 0.9243758000002344, Cumulative time limit = 1753.2168760999957
Used memory = (RSS = 2471.570312Mb, VMS = 2485.003906Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     99 : Current =    100
Incrementor step ends | Minimum  =     99 : Maximum =    300

[18-04-2022_12-43-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(100)]), ('state_module', [Number(100), Number(96)]), ('plan_module', [Number(100), Number(96), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(100), Number(96), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(100)]), ('action_preconditions', [Number(100)]), ('variable_relations', [Number(100)]), ('abstraction_mappings', [Number(100)]), ('conformance_module', [Number(100), Number(96), Number(50), Number(52), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.261863s.

[18-04-2022_12-43-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.029298s with result Unsatisfiable.

[18-04-2022_12-43-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.29116160000012314, Incremental time limit = None
Running cumulative time = 1.2155374000003576, Cumulative time limit = 1753.2168760999957
Used memory = (RSS = 2471.945312Mb, VMS = 2485.378906Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =    100 : Current =    101
Incrementor step ends | Minimum  =     99 : Maximum =    300

[18-04-2022_12-43-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(101)]), ('state_module', [Number(101), Number(96)]), ('plan_module', [Number(101), Number(96), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(101), Number(96), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(101)]), ('action_preconditions', [Number(101)]), ('variable_relations', [Number(101)]), ('abstraction_mappings', [Number(101)]), ('conformance_module', [Number(101), Number(96), Number(50), Number(52), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.287232s.

[18-04-2022_12-43-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.041898s with result Unsatisfiable.

[18-04-2022_12-43-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.32912990000022546, Incremental time limit = None
Running cumulative time = 1.544667300000583, Cumulative time limit = 1753.2168760999957
Used memory = (RSS = 2479.402344Mb, VMS = 2494.488281Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =    101 : Current =    102
Incrementor step ends | Minimum  =     99 : Maximum =    300

[18-04-2022_12-43-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(102)]), ('state_module', [Number(102), Number(96)]), ('plan_module', [Number(102), Number(96), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(102), Number(96), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(102)]), ('action_preconditions', [Number(102)]), ('variable_relations', [Number(102)]), ('abstraction_mappings', [Number(102)]), ('conformance_module', [Number(102), Number(96), Number(50), Number(52), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.295361s.

[18-04-2022_12-43-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.054085s with result Unsatisfiable.

[18-04-2022_12-43-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.34944590000031894, Incremental time limit = None
Running cumulative time = 1.894113200000902, Cumulative time limit = 1753.2168760999957
Used memory = (RSS = 2482.296875Mb, VMS = 2496.410156Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =    102 : Current =    103
Incrementor step ends | Minimum  =     99 : Maximum =    300

[18-04-2022_12-43-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(103)]), ('state_module', [Number(103), Number(96)]), ('plan_module', [Number(103), Number(96), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(103), Number(96), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(103)]), ('action_preconditions', [Number(103)]), ('variable_relations', [Number(103)]), ('abstraction_mappings', [Number(103)]), ('conformance_module', [Number(103), Number(96), Number(50), Number(52), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.305787s.

[18-04-2022_12-43-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.060967s with result Unsatisfiable.

[18-04-2022_12-43-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3667535000004136, Incremental time limit = None
Running cumulative time = 2.2608667000013156, Cumulative time limit = 1753.2168760999957
Used memory = (RSS = 2484.480469Mb, VMS = 2500.707031Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =    103 : Current =    104
Incrementor step ends | Minimum  =     99 : Maximum =    300

[18-04-2022_12-43-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(104)]), ('state_module', [Number(104), Number(96)]), ('plan_module', [Number(104), Number(96), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(104), Number(96), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(104)]), ('action_preconditions', [Number(104)]), ('variable_relations', [Number(104)]), ('abstraction_mappings', [Number(104)]), ('conformance_module', [Number(104), Number(96), Number(50), Number(52), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.313404s.

[18-04-2022_12-43-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.068128s with result Unsatisfiable.

[18-04-2022_12-43-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.38153150000016467, Incremental time limit = None
Running cumulative time = 2.6423982000014803, Cumulative time limit = 1753.2168760999957
Used memory = (RSS = 2486.667969Mb, VMS = 2501.761719Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =    104 : Current =    105
Incrementor step ends | Minimum  =     99 : Maximum =    300

[18-04-2022_12-43-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(105)]), ('state_module', [Number(105), Number(96)]), ('plan_module', [Number(105), Number(96), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(105), Number(96), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(105)]), ('action_preconditions', [Number(105)]), ('variable_relations', [Number(105)]), ('abstraction_mappings', [Number(105)]), ('conformance_module', [Number(105), Number(96), Number(50), Number(52), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.318930s.

[18-04-2022_12-43-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.141431s with result Satisfiable.

[18-04-2022_12-43-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.460360999999466, Incremental time limit = None
Running cumulative time = 3.1027592000009463, Cumulative time limit = 1753.2168760999957
Used memory = (RSS = 2491.003906Mb, VMS = 2505.500000Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.589292s, Solving = 0.513467s, Total = 3.102759s, Memory = (RSS = 2491.003906Mb, VMS = 2505.500000Mb), Step range = [96-105]), Calls = 8
Final Model :: Total atoms = 24548, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[18-04-2022_12-43-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.568302s, Solving = 0.096073s, Total = 0.664374s, Memory = (RSS = 2471.375000Mb, VMS = 2484.804688Mb), Step range = [96-98]
2 : Statistics :: Grounding = 0.238414s, Solving = 0.021588s, Total = 0.260001s, Memory = (RSS = 2471.570312Mb, VMS = 2485.003906Mb), Step range = [99-99]
3 : Statistics :: Grounding = 0.261863s, Solving = 0.029298s, Total = 0.291162s, Memory = (RSS = 2471.945312Mb, VMS = 2485.378906Mb), Step range = [100-100]
4 : Statistics :: Grounding = 0.287232s, Solving = 0.041898s, Total = 0.329130s, Memory = (RSS = 2479.402344Mb, VMS = 2494.488281Mb), Step range = [101-101]
5 : Statistics :: Grounding = 0.295361s, Solving = 0.054085s, Total = 0.349446s, Memory = (RSS = 2482.296875Mb, VMS = 2496.410156Mb), Step range = [102-102]
6 : Statistics :: Grounding = 0.305787s, Solving = 0.060967s, Total = 0.366754s, Memory = (RSS = 2484.480469Mb, VMS = 2500.707031Mb), Step range = [103-103]
7 : Statistics :: Grounding = 0.313404s, Solving = 0.068128s, Total = 0.381532s, Memory = (RSS = 2486.667969Mb, VMS = 2501.761719Mb), Step range = [104-104]
8 : Statistics :: Grounding = 0.318930s, Solving = 0.141431s, Total = 0.460361s, Memory = (RSS = 2491.003906Mb, VMS = 2505.500000Mb), Step range = [105-105]

[18-04-2022_12-43-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 3.102759s due to: Stop condition reached.

[18-04-2022_12-43-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[18-04-2022_12-43-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[18-04-2022_12-43-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-43-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[18-04-2022_12-43-43] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38, 81: 39, 82: 40, 83: 41, 84: 42, 85: 43, 86: 44, 87: 45, 88: 46, 89: 47, 90: 48, 91: 48, 92: 48, 93: 49, 94: 49, 95: 49, 96: 49}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80, 39: 81, 40: 82, 41: 83, 42: 84, 43: 85, 44: 86, 45: 87, 46: 88, 47: 89, 48: 92, 49: 96}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24, 43: 25, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29, 49: 29, 50: 30, 51: 30, 52: 30}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42, 25: 44, 26: 45, 27: 46, 28: 47, 29: 49, 30: 52}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-43-44] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38, 81: 39, 82: 40, 83: 41, 84: 42, 85: 43, 86: 44, 87: 45, 88: 46, 89: 47, 90: 48, 91: 48, 92: 48, 93: 49, 94: 49, 95: 49, 96: 49, 97: 50, 98: 50, 99: 50, 100: 51, 101: 51, 102: 51, 103: 52, 104: 52, 105: 52}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80, 39: 81, 40: 82, 41: 83, 42: 84, 43: 85, 44: 86, 45: 87, 46: 88, 47: 89, 48: 92, 49: 96, 50: 99, 51: 102, 52: 105}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24, 43: 25, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29, 49: 29, 50: 30, 51: 30, 52: 30}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42, 25: 44, 26: 45, 27: 46, 28: 47, 29: 49, 30: 52}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-43-44] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 52, Last requested goal index = 52, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[18-04-2022_12-43-44] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.589292s, Solving = 0.513467s, Total = 3.102759s, Memory = (RSS = 2491.003906Mb, VMS = 2505.500000Mb), Step range = [96-105]), Calls = 8
Model :: Total atoms = 24548, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[18-04-2022_12-43-44] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 9 :: Actions = 9                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Planned actions:
        talos : move(((starting_room,1),3,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),4,0))
Step 5:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,0))
Step 6:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,1))
Step 7:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),4,0))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,0))
Step 9:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 10:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 11:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 12:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 13:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 5] talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(store_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 5] talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(store_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 17:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 21:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 23:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 24:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 25:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 26:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 27:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 28:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(puzzle_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(puzzle_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 31:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 35:
    Current Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 37:
    Current Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 38:
    Current Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 39:
    Current Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 40:
    Current Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 41:
    Current Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 42:
    Current Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 43:
    Current Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 44:
    Current Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Planned actions:
        talos : move(((store_room,0),2,1))
Step 45:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 46:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 47:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),0,0))
Step 48:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 49:
    Current Sub-goals:
        [Index = 23] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Achieved Sub-goals:
        [Index = 23] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 50:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 51:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 52:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 53:
    Current Sub-goals:
        [Index = 27] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Achieved Sub-goals:
        [Index = 27] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 54:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 55:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 56:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 29] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 57:
    Current Sub-goals:
        [Index = 30] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 58:
    Current Sub-goals:
        [Index = 30] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 30] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),3,0))
Step 59:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,0))
Step 60:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 61:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 62:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 63:
    Current Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 64:
    Current Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 65:
    Current Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 66:
    Current Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 67:
    Current Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 68:
    Current Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 69:
    Current Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 70:
    Current Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 71:
    Current Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Planned actions:
        talos : move(((puzzle_room,0),0,1))
Step 72:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),0,0))
Step 73:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,0))
Step 74:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),2,0))
Step 75:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Planned actions:
        talos : move(((puzzle_room,1),3,0))
Step 76:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),4,0))
Step 77:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),5,0))
Step 78:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 79:
    Current Sub-goals:
        [Index = 37] talos : put(manipulator_end_1,(block,6),puzzle_room_table_right) -> on((block,6)) = puzzle_room_table_right
    Achieved Sub-goals:
        [Index = 37] talos : put(manipulator_end_1,(block,6),puzzle_room_table_right) -> on((block,6)) = puzzle_room_table_right
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 80:
    Current Sub-goals:
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 81:
    Current Sub-goals:
        [Index = 39] talos : configure(manipulator_end_1,aligned_with((block,3))) -> configuration(manipulator_end_1) = aligned_with((block,3))
    Achieved Sub-goals:
        [Index = 39] talos : configure(manipulator_end_1,aligned_with((block,3))) -> configuration(manipulator_end_1) = aligned_with((block,3))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 82:
    Current Sub-goals:
        [Index = 40] talos : grasp(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = (block,3)
    Achieved Sub-goals:
        [Index = 40] talos : grasp(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 83:
    Current Sub-goals:
        [Index = 41] talos : put(manipulator_end_1,(block,3),puzzle_room_table_left) -> on((block,3)) = puzzle_room_table_left
    Achieved Sub-goals:
        [Index = 41] talos : put(manipulator_end_1,(block,3),puzzle_room_table_left) -> on((block,3)) = puzzle_room_table_left
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 84:
    Current Sub-goals:
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 85:
    Current Sub-goals:
        [Index = 43] talos : configure(manipulator_end_1,aligned_with((block,2))) -> configuration(manipulator_end_1) = aligned_with((block,2))
    Achieved Sub-goals:
        [Index = 43] talos : configure(manipulator_end_1,aligned_with((block,2))) -> configuration(manipulator_end_1) = aligned_with((block,2))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 86:
    Current Sub-goals:
        [Index = 44] talos : grasp(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = (block,2)
    Achieved Sub-goals:
        [Index = 44] talos : grasp(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 87:
    Current Sub-goals:
        [Index = 45] talos : put(manipulator_end_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 45] talos : put(manipulator_end_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 88:
    Current Sub-goals:
        [Index = 46] talos : release(manipulator_end_1,(block,2)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 46] talos : release(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 46] talos : release(manipulator_end_1,(block,2)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 46] talos : release(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,2))
Step 89:
    Current Sub-goals:
        [Index = 47] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 47] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 47] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 47] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 90:
    Current Sub-goals:
        [Index = 48] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),4,0))
Step 91:
    Current Sub-goals:
        [Index = 48] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),3,0))
Step 92:
    Current Sub-goals:
        [Index = 48] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
        [Index = 48] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Planned actions:
        talos : move(((puzzle_room,0),2,0))
Step 93:
    Current Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,0))
Step 94:
    Current Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,1))
Step 95:
    Current Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),0,1))
Step 96:
    Current Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 97:
    Current Sub-goals:
        [Index = 50] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 98:
    Current Sub-goals:
        [Index = 50] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 99:
    Current Sub-goals:
        [Index = 50] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 50] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 100:
    Current Sub-goals:
        [Index = 51] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 101:
    Current Sub-goals:
        [Index = 51] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 102:
    Current Sub-goals:
        [Index = 51] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 51] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 103:
    Current Sub-goals:
        [Index = 52] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 104:
    Current Sub-goals:
        [Index = 52] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 105:
    Current Sub-goals:
        [Index = 52] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 52] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),5,1))

[18-04-2022_12-43-44] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[18-04-2022_12-43-44] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[18-04-2022_12-43-44] DEBUG :: ASH Planner Main #1 >> Monolevel problem 12 at level 1 solved.

[18-04-2022_12-43-44] DEBUG :: ASH Planner Main #1 >> Online planning increment 12 finished.

[18-04-2022_12-43-44] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 2 : Total constraining sub-goal stages = 20 : Goals achieved = 13 : Goals unachieved = 7 : Complete = False
Level = 2 : Solved problems = 6 : Total constraining sub-goal stages = 30 : Goals achieved = 30 : Goals unachieved = 0 : Complete = False
Level = 1 : Solved problems = 12 : Total constraining sub-goal stages = 52 : Goals achieved = 52 : Goals unachieved = 0 : Complete = False

[18-04-2022_12-43-44] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 3, Highest = 3.

[18-04-2022_12-43-44] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 13 by method ground-first is [1-3].

[18-04-2022_12-43-44] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 4 to proactively divide planning problem 3 at level 3:
Total Templated Partial Problems = 3, Problem Range = [1-3], Size = 20, Sub-goal Stage Range = [1-20]
Division points [total=2] : [(Index = 6, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 13, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[18-04-2022_12-43-44] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [14-20]

[18-04-2022_12-43-44] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 30, chosen step range to extract = range(0, 31)

[18-04-2022_12-43-44] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 52, Total actions = 52, Produced sub-goal stages = 52, Produced sub-goal literals = 60
Level [1]: Length = 105, Total actions = 105, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-44] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 20, chosen step range to extract = range(0, 21)

[18-04-2022_12-43-44] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 52, Total actions = 52, Produced sub-goal stages = 52, Produced sub-goal literals = 60
Level [1]: Length = 105, Total actions = 105, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-44] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 3, sgoals range = [14-20], problem number = 3, increment number = 13

[18-04-2022_12-43-44] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 14)
	('last_sgoals', 20)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1794.960408799997)
	('length_limit', 300)
	('level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[18-04-2022_12-43-44] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 3] partial conformance refinement (sequential) with sgoals range [14-20] : Concurrency disabled : Minimum search length bound enabled with value 36

[18-04-2022_12-43-44] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 3
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 14
last_sgoals = 20
start_step = 30
is_initial = False
is_final = True
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 36

[18-04-2022_12-43-44] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[18-04-2022_12-43-44] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[18-04-2022_12-43-44] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[18-04-2022_12-43-44] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[18-04-2022_12-43-44] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-43-44] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 30 as problem start state.

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 30})
Fluent({'L': 3, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 30})
Fluent({'L': 3, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 30})
Fluent({'L': 3, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 30})
Fluent({'L': 3, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 30})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 30})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 30})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 30})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 30})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 30})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 30})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 30})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 30})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 30})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 30})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 30})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'store_room', 'S': 30})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 30})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 30})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 30})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 30})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 30})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 30})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 30})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 30})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 30})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 30})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 30})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 30})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 30})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 30})
Fluent({'L': 4, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 30})
Fluent({'L': 4, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 30})
Fluent({'L': 4, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 30})
Fluent({'L': 4, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 30})
Fluent({'L': 4, 'F': 'in((block,4))', 'V': 'store_room', 'S': 30})
Fluent({'L': 4, 'F': 'in((block,5))', 'V': 'store_room', 'S': 30})
Fluent({'L': 4, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 30})
Fluent({'L': 4, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 30})
Fluent({'L': 4, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 30})
Fluent({'L': 4, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 30})
Fluent({'L': 4, 'F': 'in(talos)', 'V': 'store_room', 'S': 30})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 30})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 30})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 30})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 30})
Fluent({'L': 4, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 30})
Fluent({'L': 4, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 30})
Fluent({'L': 4, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 30})
Fluent({'L': 4, 'F': 'on((block,4))', 'V': 'nothing', 'S': 30})
Fluent({'L': 4, 'F': 'on((block,5))', 'V': 'nothing', 'S': 30})
Fluent({'L': 4, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 30})
Fluent({'L': 4, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 30})
Fluent({'L': 4, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 30})
Fluent({'L': 4, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 30})
Fluent({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 30})

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state:

holds(3, complete_tower(blue,puzzle_room_table), false, 30).
holds(3, complete_tower(red,puzzle_room_table), false, 30).
holds(3, configuration(manipulator_arm_1), retracted, 30).
holds(3, configuration(manipulator_arm_2), retracted, 30).
holds(3, configuration(puzzle_room_door), open, 30).
holds(3, configuration(starting_room_door), closed, 30).
holds(3, configuration(store_room_door), open, 30).
holds(3, grasping(manipulator_arm_1), nothing, 30).
holds(3, grasping(manipulator_arm_2), (block,5), 30).
holds(3, in((block,1)), puzzle_room, 30).
holds(3, in((block,2)), puzzle_room, 30).
holds(3, in((block,3)), puzzle_room, 30).
holds(3, in((block,4)), store_room, 30).
holds(3, in((block,5)), store_room, 30).
holds(3, in((block,6)), puzzle_room, 30).
holds(3, in(manipulator_arm_1), store_room, 30).
holds(3, in(manipulator_arm_2), store_room, 30).
holds(3, in(puzzle_room_table), puzzle_room, 30).
holds(3, in(talos), store_room, 30).
holds(3, in_tower((block,1),(block,1)), true, 30).
holds(3, in_tower((block,1),(block,2)), false, 30).
holds(3, in_tower((block,1),(block,3)), false, 30).
holds(3, in_tower((block,1),(block,4)), false, 30).
holds(3, in_tower((block,1),(block,5)), false, 30).
holds(3, in_tower((block,1),(block,6)), false, 30).
holds(3, in_tower((block,2),(block,1)), false, 30).
holds(3, in_tower((block,2),(block,2)), false, 30).
holds(3, in_tower((block,2),(block,3)), false, 30).
holds(3, in_tower((block,2),(block,4)), false, 30).
holds(3, in_tower((block,2),(block,5)), false, 30).
holds(3, in_tower((block,2),(block,6)), false, 30).
holds(3, in_tower((block,3),(block,1)), false, 30).
holds(3, in_tower((block,3),(block,2)), true, 30).
holds(3, in_tower((block,3),(block,3)), true, 30).
holds(3, in_tower((block,3),(block,4)), false, 30).
holds(3, in_tower((block,3),(block,5)), false, 30).
holds(3, in_tower((block,3),(block,6)), false, 30).
holds(3, in_tower((block,4),(block,1)), false, 30).
holds(3, in_tower((block,4),(block,2)), false, 30).
holds(3, in_tower((block,4),(block,3)), false, 30).
holds(3, in_tower((block,4),(block,4)), false, 30).
holds(3, in_tower((block,4),(block,5)), false, 30).
holds(3, in_tower((block,4),(block,6)), false, 30).
holds(3, in_tower((block,5),(block,1)), false, 30).
holds(3, in_tower((block,5),(block,2)), false, 30).
holds(3, in_tower((block,5),(block,3)), false, 30).
holds(3, in_tower((block,5),(block,4)), false, 30).
holds(3, in_tower((block,5),(block,5)), false, 30).
holds(3, in_tower((block,5),(block,6)), false, 30).
holds(3, in_tower((block,6),(block,1)), false, 30).
holds(3, in_tower((block,6),(block,2)), false, 30).
holds(3, in_tower((block,6),(block,3)), false, 30).
holds(3, in_tower((block,6),(block,4)), false, 30).
holds(3, in_tower((block,6),(block,5)), false, 30).
holds(3, in_tower((block,6),(block,6)), true, 30).
holds(3, on((block,1)), puzzle_room_table, 30).
holds(3, on((block,2)), (block,3), 30).
holds(3, on((block,3)), puzzle_room_table, 30).
holds(3, on((block,4)), nothing, 30).
holds(3, on((block,5)), nothing, 30).
holds(3, on((block,6)), puzzle_room_table, 30).
holds(3, tower_base((block,1),puzzle_room_table), true, 30).
holds(3, tower_base((block,2),puzzle_room_table), false, 30).
holds(3, tower_base((block,3),puzzle_room_table), true, 30).
holds(3, tower_base((block,4),puzzle_room_table), false, 30).
holds(3, tower_base((block,5),puzzle_room_table), false, 30).
holds(3, tower_base((block,6),puzzle_room_table), true, 30).
holds(3, unordered_tower((block,1),puzzle_room_table), false, 30).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 30).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 30).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 30).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 30).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 30).
holds(4, complete_tower(blue,puzzle_room_table), false, 30).
holds(4, complete_tower(red,puzzle_room_table), false, 30).
holds(4, grasping(manipulator_arm_1), nothing, 30).
holds(4, grasping(manipulator_arm_2), (block,5), 30).
holds(4, in((block,1)), puzzle_room, 30).
holds(4, in((block,2)), puzzle_room, 30).
holds(4, in((block,3)), puzzle_room, 30).
holds(4, in((block,4)), store_room, 30).
holds(4, in((block,5)), store_room, 30).
holds(4, in((block,6)), puzzle_room, 30).
holds(4, in(manipulator_arm_1), store_room, 30).
holds(4, in(manipulator_arm_2), store_room, 30).
holds(4, in(puzzle_room_table), puzzle_room, 30).
holds(4, in(talos), store_room, 30).
holds(4, in_tower((block,1),(block,1)), true, 30).
holds(4, in_tower((block,1),(block,2)), false, 30).
holds(4, in_tower((block,1),(block,3)), false, 30).
holds(4, in_tower((block,1),(block,4)), false, 30).
holds(4, in_tower((block,1),(block,5)), false, 30).
holds(4, in_tower((block,1),(block,6)), false, 30).
holds(4, in_tower((block,2),(block,1)), false, 30).
holds(4, in_tower((block,2),(block,2)), false, 30).
holds(4, in_tower((block,2),(block,3)), false, 30).
holds(4, in_tower((block,2),(block,4)), false, 30).
holds(4, in_tower((block,2),(block,5)), false, 30).
holds(4, in_tower((block,2),(block,6)), false, 30).
holds(4, in_tower((block,3),(block,1)), false, 30).
holds(4, in_tower((block,3),(block,2)), true, 30).
holds(4, in_tower((block,3),(block,3)), true, 30).
holds(4, in_tower((block,3),(block,4)), false, 30).
holds(4, in_tower((block,3),(block,5)), false, 30).
holds(4, in_tower((block,3),(block,6)), false, 30).
holds(4, in_tower((block,4),(block,1)), false, 30).
holds(4, in_tower((block,4),(block,2)), false, 30).
holds(4, in_tower((block,4),(block,3)), false, 30).
holds(4, in_tower((block,4),(block,4)), false, 30).
holds(4, in_tower((block,4),(block,5)), false, 30).
holds(4, in_tower((block,4),(block,6)), false, 30).
holds(4, in_tower((block,5),(block,1)), false, 30).
holds(4, in_tower((block,5),(block,2)), false, 30).
holds(4, in_tower((block,5),(block,3)), false, 30).
holds(4, in_tower((block,5),(block,4)), false, 30).
holds(4, in_tower((block,5),(block,5)), false, 30).
holds(4, in_tower((block,5),(block,6)), false, 30).
holds(4, in_tower((block,6),(block,1)), false, 30).
holds(4, in_tower((block,6),(block,2)), false, 30).
holds(4, in_tower((block,6),(block,3)), false, 30).
holds(4, in_tower((block,6),(block,4)), false, 30).
holds(4, in_tower((block,6),(block,5)), false, 30).
holds(4, in_tower((block,6),(block,6)), true, 30).
holds(4, on((block,1)), puzzle_room_table, 30).
holds(4, on((block,2)), (block,3), 30).
holds(4, on((block,3)), puzzle_room_table, 30).
holds(4, on((block,4)), nothing, 30).
holds(4, on((block,5)), nothing, 30).
holds(4, on((block,6)), puzzle_room_table, 30).
holds(4, tower_base((block,1),puzzle_room_table), true, 30).
holds(4, tower_base((block,2),puzzle_room_table), false, 30).
holds(4, tower_base((block,3),puzzle_room_table), true, 30).
holds(4, tower_base((block,4),puzzle_room_table), false, 30).
holds(4, tower_base((block,5),puzzle_room_table), false, 30).
holds(4, tower_base((block,6),puzzle_room_table), true, 30).
holds(4, unordered_tower((block,1),puzzle_room_table), false, 30).
holds(4, unordered_tower((block,2),puzzle_room_table), false, 30).
holds(4, unordered_tower((block,3),puzzle_room_table), false, 30).
holds(4, unordered_tower((block,4),puzzle_room_table), false, 30).
holds(4, unordered_tower((block,5),puzzle_room_table), false, 30).
holds(4, unordered_tower((block,6),puzzle_room_table), false, 30).

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 284 rules into program part ash_goal_state:

final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(4, complete_tower(blue,puzzle_room_table), false, false).
final_goal(4, complete_tower(blue,puzzle_room_table), true, true).
final_goal(4, complete_tower(red,puzzle_room_table), false, false).
final_goal(4, complete_tower(red,puzzle_room_table), true, true).
final_goal(4, in_tower((block,1),(block,1)), false, true).
final_goal(4, in_tower((block,1),(block,1)), true, false).
final_goal(4, in_tower((block,1),(block,2)), false, true).
final_goal(4, in_tower((block,1),(block,2)), true, false).
final_goal(4, in_tower((block,1),(block,3)), false, true).
final_goal(4, in_tower((block,1),(block,3)), true, false).
final_goal(4, in_tower((block,1),(block,4)), false, true).
final_goal(4, in_tower((block,1),(block,4)), true, false).
final_goal(4, in_tower((block,1),(block,5)), false, true).
final_goal(4, in_tower((block,1),(block,5)), true, false).
final_goal(4, in_tower((block,1),(block,6)), false, true).
final_goal(4, in_tower((block,1),(block,6)), true, false).
final_goal(4, in_tower((block,2),(block,1)), false, true).
final_goal(4, in_tower((block,2),(block,1)), true, false).
final_goal(4, in_tower((block,2),(block,2)), false, true).
final_goal(4, in_tower((block,2),(block,2)), true, false).
final_goal(4, in_tower((block,2),(block,3)), false, true).
final_goal(4, in_tower((block,2),(block,3)), true, false).
final_goal(4, in_tower((block,2),(block,4)), false, true).
final_goal(4, in_tower((block,2),(block,4)), true, false).
final_goal(4, in_tower((block,2),(block,5)), false, true).
final_goal(4, in_tower((block,2),(block,5)), true, false).
final_goal(4, in_tower((block,2),(block,6)), false, true).
final_goal(4, in_tower((block,2),(block,6)), true, false).
final_goal(4, in_tower((block,3),(block,1)), false, false).
final_goal(4, in_tower((block,3),(block,1)), true, true).
final_goal(4, in_tower((block,3),(block,2)), false, false).
final_goal(4, in_tower((block,3),(block,2)), true, true).
final_goal(4, in_tower((block,3),(block,3)), false, false).
final_goal(4, in_tower((block,3),(block,3)), true, true).
final_goal(4, in_tower((block,3),(block,4)), false, true).
final_goal(4, in_tower((block,3),(block,4)), true, false).
final_goal(4, in_tower((block,3),(block,5)), false, true).
final_goal(4, in_tower((block,3),(block,5)), true, false).
final_goal(4, in_tower((block,3),(block,6)), false, true).
final_goal(4, in_tower((block,3),(block,6)), true, false).
final_goal(4, in_tower((block,4),(block,1)), false, true).
final_goal(4, in_tower((block,4),(block,1)), true, false).
final_goal(4, in_tower((block,4),(block,2)), false, true).
final_goal(4, in_tower((block,4),(block,2)), true, false).
final_goal(4, in_tower((block,4),(block,3)), false, true).
final_goal(4, in_tower((block,4),(block,3)), true, false).
final_goal(4, in_tower((block,4),(block,4)), false, true).
final_goal(4, in_tower((block,4),(block,4)), true, false).
final_goal(4, in_tower((block,4),(block,5)), false, true).
final_goal(4, in_tower((block,4),(block,5)), true, false).
final_goal(4, in_tower((block,4),(block,6)), false, true).
final_goal(4, in_tower((block,4),(block,6)), true, false).
final_goal(4, in_tower((block,5),(block,1)), false, true).
final_goal(4, in_tower((block,5),(block,1)), true, false).
final_goal(4, in_tower((block,5),(block,2)), false, true).
final_goal(4, in_tower((block,5),(block,2)), true, false).
final_goal(4, in_tower((block,5),(block,3)), false, true).
final_goal(4, in_tower((block,5),(block,3)), true, false).
final_goal(4, in_tower((block,5),(block,4)), false, true).
final_goal(4, in_tower((block,5),(block,4)), true, false).
final_goal(4, in_tower((block,5),(block,5)), false, true).
final_goal(4, in_tower((block,5),(block,5)), true, false).
final_goal(4, in_tower((block,5),(block,6)), false, true).
final_goal(4, in_tower((block,5),(block,6)), true, false).
final_goal(4, in_tower((block,6),(block,1)), false, true).
final_goal(4, in_tower((block,6),(block,1)), true, false).
final_goal(4, in_tower((block,6),(block,2)), false, true).
final_goal(4, in_tower((block,6),(block,2)), true, false).
final_goal(4, in_tower((block,6),(block,3)), false, true).
final_goal(4, in_tower((block,6),(block,3)), true, false).
final_goal(4, in_tower((block,6),(block,4)), false, false).
final_goal(4, in_tower((block,6),(block,4)), true, true).
final_goal(4, in_tower((block,6),(block,5)), false, false).
final_goal(4, in_tower((block,6),(block,5)), true, true).
final_goal(4, in_tower((block,6),(block,6)), false, false).
final_goal(4, in_tower((block,6),(block,6)), true, true).
final_goal(4, on((block,1)), (block,2), true).
final_goal(4, on((block,1)), (block,3), false).
final_goal(4, on((block,1)), (block,4), false).
final_goal(4, on((block,1)), (block,5), false).
final_goal(4, on((block,1)), (block,6), false).
final_goal(4, on((block,1)), nothing, false).
final_goal(4, on((block,1)), puzzle_room_table, false).
final_goal(4, on((block,2)), (block,1), false).
final_goal(4, on((block,2)), (block,3), true).
final_goal(4, on((block,2)), (block,4), false).
final_goal(4, on((block,2)), (block,5), false).
final_goal(4, on((block,2)), (block,6), false).
final_goal(4, on((block,2)), nothing, false).
final_goal(4, on((block,2)), puzzle_room_table, false).
final_goal(4, on((block,3)), (block,1), false).
final_goal(4, on((block,3)), (block,2), false).
final_goal(4, on((block,3)), (block,4), false).
final_goal(4, on((block,3)), (block,5), false).
final_goal(4, on((block,3)), (block,6), false).
final_goal(4, on((block,3)), nothing, false).
final_goal(4, on((block,3)), puzzle_room_table, true).
final_goal(4, on((block,4)), (block,1), false).
final_goal(4, on((block,4)), (block,2), false).
final_goal(4, on((block,4)), (block,3), false).
final_goal(4, on((block,4)), (block,5), true).
final_goal(4, on((block,4)), (block,6), false).
final_goal(4, on((block,4)), nothing, false).
final_goal(4, on((block,4)), puzzle_room_table, false).
final_goal(4, on((block,5)), (block,1), false).
final_goal(4, on((block,5)), (block,2), false).
final_goal(4, on((block,5)), (block,3), false).
final_goal(4, on((block,5)), (block,4), false).
final_goal(4, on((block,5)), (block,6), true).
final_goal(4, on((block,5)), nothing, false).
final_goal(4, on((block,5)), puzzle_room_table, false).
final_goal(4, on((block,6)), (block,1), false).
final_goal(4, on((block,6)), (block,2), false).
final_goal(4, on((block,6)), (block,3), false).
final_goal(4, on((block,6)), (block,4), false).
final_goal(4, on((block,6)), (block,5), false).
final_goal(4, on((block,6)), nothing, false).
final_goal(4, on((block,6)), puzzle_room_table, true).
final_goal(4, tower_base((block,1),puzzle_room_table), false, true).
final_goal(4, tower_base((block,1),puzzle_room_table), true, false).
final_goal(4, tower_base((block,2),puzzle_room_table), false, true).
final_goal(4, tower_base((block,2),puzzle_room_table), true, false).
final_goal(4, tower_base((block,3),puzzle_room_table), false, false).
final_goal(4, tower_base((block,3),puzzle_room_table), true, true).
final_goal(4, tower_base((block,4),puzzle_room_table), false, true).
final_goal(4, tower_base((block,4),puzzle_room_table), true, false).
final_goal(4, tower_base((block,5),puzzle_room_table), false, true).
final_goal(4, tower_base((block,5),puzzle_room_table), true, false).
final_goal(4, tower_base((block,6),puzzle_room_table), false, false).
final_goal(4, tower_base((block,6),puzzle_room_table), true, true).
final_goal(4, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,6),puzzle_room_table), true, false).

[18-04-2022_12-43-44] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=36']

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 4, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,4))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'I': 14})
SubGoal({'L': 4, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 15})
SubGoal({'L': 4, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 16})
SubGoal({'L': 4, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 17})
SubGoal({'L': 4, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,1))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'I': 18})
SubGoal({'L': 4, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 19})
SubGoal({'L': 4, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 20})

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 7 rules into program part base:

sub_goal(4, talos, grasp(manipulator_arm_1,(block,4)), grasping(manipulator_arm_1), (block,4), 14).
sub_goal(4, talos, move(puzzle_room), in(talos), puzzle_room, 15).
sub_goal(4, talos, put(manipulator_arm_2,(block,5),(block,6)), on((block,5)), (block,6), 16).
sub_goal(4, talos, release(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), nothing, 17).
sub_goal(4, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 18).
sub_goal(4, talos, put(manipulator_arm_1,(block,4),(block,5)), on((block,4)), (block,5), 19).
sub_goal(4, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 20).

[18-04-2022_12-43-44] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=36']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A8A4459E50>]
	incrementor = SolveIncrementor(step_start=30, step_increase=1, step_increase_initial=7, step_end_min=37, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1794.960408799997, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(3, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 30), range_=None), IncPart(name='plan_module', args=('#inc', 30, 'false', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 30, 'false', 'false', 'false', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 30, 14, 20, 'sequential', 'false'), range_=None)]

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 801 rules

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0045921000000817s

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(3, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(3), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.153098s.

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.021529s with result Satisfiable.

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A8A484F6D0>

[18-04-2022_12-43-44] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 3)
	('start_step', 30)
	('last_sgoals', 20)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('first_sgoals', 14)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A8A484F6D0>)

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 30). %* None *%
#program plan_module(#inc, 30, false, true). %* None *%
#program optimisation_module(#inc, 30, false, false, false, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 30, 14, 20, sequential, false). %* None *%

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     29 : Current =     36
Incrementor step ends | Minimum  =     37 : Maximum =    300

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(36)]), ('state_module', [Number(30), Number(30)]), ('plan_module', [Number(30), Number(30), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(30), Number(30), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(30), Number(14), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(31), Number(30)]), ('plan_module', [Number(31), Number(30), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(31), Number(30), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('conformance_module', [Number(31), Number(30), Number(14), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(32), Number(30)]), ('plan_module', [Number(32), Number(30), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(32), Number(30), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('conformance_module', [Number(32), Number(30), Number(14), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(33), Number(30)]), ('plan_module', [Number(33), Number(30), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(33), Number(30), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('conformance_module', [Number(33), Number(30), Number(14), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(34), Number(30)]), ('plan_module', [Number(34), Number(30), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(34), Number(30), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(34)]), ('action_preconditions', [Number(34)]), ('variable_relations', [Number(34)]), ('abstraction_mappings', [Number(34)]), ('conformance_module', [Number(34), Number(30), Number(14), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(35), Number(30)]), ('plan_module', [Number(35), Number(30), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(35), Number(30), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(35)]), ('action_preconditions', [Number(35)]), ('variable_relations', [Number(35)]), ('abstraction_mappings', [Number(35)]), ('conformance_module', [Number(35), Number(30), Number(14), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(36), Number(30)]), ('plan_module', [Number(36), Number(30), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(36), Number(30), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('conformance_module', [Number(36), Number(30), Number(14), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.250755s.

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.055701s with result Unsatisfiable.

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.30645580000054906, Incremental time limit = None
Running cumulative time = 0.30645580000054906, Cumulative time limit = 1794.960408799997
Used memory = (RSS = 2471.195312Mb, VMS = 2484.746094Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     36 : Current =     37
Incrementor step ends | Minimum  =     37 : Maximum =    300

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(37)]), ('state_module', [Number(37), Number(30)]), ('plan_module', [Number(37), Number(30), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(37), Number(30), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(37)]), ('action_preconditions', [Number(37)]), ('variable_relations', [Number(37)]), ('abstraction_mappings', [Number(37)]), ('conformance_module', [Number(37), Number(30), Number(14), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.075056s.

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011123s with result Unsatisfiable.

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.08617980000053649, Incremental time limit = None
Running cumulative time = 0.39263560000108555, Cumulative time limit = 1794.960408799997
Used memory = (RSS = 2472.308594Mb, VMS = 2485.863281Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     37 : Current =     38
Incrementor step ends | Minimum  =     37 : Maximum =    300

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(38)]), ('state_module', [Number(38), Number(30)]), ('plan_module', [Number(38), Number(30), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(38), Number(30), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('conformance_module', [Number(38), Number(30), Number(14), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.077783s.

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011745s with result Unsatisfiable.

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.08952750000025844, Incremental time limit = None
Running cumulative time = 0.482163100001344, Cumulative time limit = 1794.960408799997
Used memory = (RSS = 2472.468750Mb, VMS = 2486.023438Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     38 : Current =     39
Incrementor step ends | Minimum  =     37 : Maximum =    300

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(39)]), ('state_module', [Number(39), Number(30)]), ('plan_module', [Number(39), Number(30), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(39), Number(30), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(39)]), ('action_preconditions', [Number(39)]), ('variable_relations', [Number(39)]), ('abstraction_mappings', [Number(39)]), ('conformance_module', [Number(39), Number(30), Number(14), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.079112s.

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.014294s with result Unsatisfiable.

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.09340620000057243, Incremental time limit = None
Running cumulative time = 0.5755693000019164, Cumulative time limit = 1794.960408799997
Used memory = (RSS = 2472.640625Mb, VMS = 2486.183594Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     39 : Current =     40
Incrementor step ends | Minimum  =     37 : Maximum =    300

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(40)]), ('state_module', [Number(40), Number(30)]), ('plan_module', [Number(40), Number(30), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(40), Number(30), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(40)]), ('action_preconditions', [Number(40)]), ('variable_relations', [Number(40)]), ('abstraction_mappings', [Number(40)]), ('conformance_module', [Number(40), Number(30), Number(14), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.080805s.

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.015850s with result Unsatisfiable.

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.096655200000896, Incremental time limit = None
Running cumulative time = 0.6722245000028124, Cumulative time limit = 1794.960408799997
Used memory = (RSS = 2474.859375Mb, VMS = 2489.109375Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     40 : Current =     41
Incrementor step ends | Minimum  =     37 : Maximum =    300

[18-04-2022_12-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(41)]), ('state_module', [Number(41), Number(30)]), ('plan_module', [Number(41), Number(30), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(41), Number(30), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(41)]), ('action_preconditions', [Number(41)]), ('variable_relations', [Number(41)]), ('abstraction_mappings', [Number(41)]), ('conformance_module', [Number(41), Number(30), Number(14), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.082232s.

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.014957s with result Unsatisfiable.

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.0971880000006422, Incremental time limit = None
Running cumulative time = 0.7694125000034546, Cumulative time limit = 1794.960408799997
Used memory = (RSS = 2475.218750Mb, VMS = 2489.269531Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     41 : Current =     42
Incrementor step ends | Minimum  =     37 : Maximum =    300

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(42)]), ('state_module', [Number(42), Number(30)]), ('plan_module', [Number(42), Number(30), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(42), Number(30), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('conformance_module', [Number(42), Number(30), Number(14), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.085152s.

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.034648s with result Satisfiable.

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11979940000037459, Incremental time limit = None
Running cumulative time = 0.8892119000038292, Cumulative time limit = 1794.960408799997
Used memory = (RSS = 2477.769531Mb, VMS = 2491.437500Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.730894s, Solving = 0.158318s, Total = 0.889212s, Memory = (RSS = 2477.769531Mb, VMS = 2491.437500Mb), Step range = [30-42]), Calls = 7
Final Model :: Total atoms = 22247, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.250755s, Solving = 0.055701s, Total = 0.306456s, Memory = (RSS = 2471.195312Mb, VMS = 2484.746094Mb), Step range = [30-36]
2 : Statistics :: Grounding = 0.075056s, Solving = 0.011123s, Total = 0.086180s, Memory = (RSS = 2472.308594Mb, VMS = 2485.863281Mb), Step range = [37-37]
3 : Statistics :: Grounding = 0.077783s, Solving = 0.011745s, Total = 0.089528s, Memory = (RSS = 2472.468750Mb, VMS = 2486.023438Mb), Step range = [38-38]
4 : Statistics :: Grounding = 0.079112s, Solving = 0.014294s, Total = 0.093406s, Memory = (RSS = 2472.640625Mb, VMS = 2486.183594Mb), Step range = [39-39]
5 : Statistics :: Grounding = 0.080805s, Solving = 0.015850s, Total = 0.096655s, Memory = (RSS = 2474.859375Mb, VMS = 2489.109375Mb), Step range = [40-40]
6 : Statistics :: Grounding = 0.082232s, Solving = 0.014957s, Total = 0.097188s, Memory = (RSS = 2475.218750Mb, VMS = 2489.269531Mb), Step range = [41-41]
7 : Statistics :: Grounding = 0.085152s, Solving = 0.034648s, Total = 0.119799s, Memory = (RSS = 2477.769531Mb, VMS = 2491.437500Mb), Step range = [42-42]

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.889212s due to: Stop condition reached.

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[18-04-2022_12-43-45] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38, 81: 39, 82: 40, 83: 41, 84: 42, 85: 43, 86: 44, 87: 45, 88: 46, 89: 47, 90: 48, 91: 48, 92: 48, 93: 49, 94: 49, 95: 49, 96: 49, 97: 50, 98: 50, 99: 50, 100: 51, 101: 51, 102: 51, 103: 52, 104: 52, 105: 52}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80, 39: 81, 40: 82, 41: 83, 42: 84, 43: 85, 44: 86, 45: 87, 46: 88, 47: 89, 48: 92, 49: 96, 50: 99, 51: 102, 52: 105}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24, 43: 25, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29, 49: 29, 50: 30, 51: 30, 52: 30}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42, 25: 44, 26: 45, 27: 46, 28: 47, 29: 49, 30: 52}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-43-45] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38, 81: 39, 82: 40, 83: 41, 84: 42, 85: 43, 86: 44, 87: 45, 88: 46, 89: 47, 90: 48, 91: 48, 92: 48, 93: 49, 94: 49, 95: 49, 96: 49, 97: 50, 98: 50, 99: 50, 100: 51, 101: 51, 102: 51, 103: 52, 104: 52, 105: 52}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80, 39: 81, 40: 82, 41: 83, 42: 84, 43: 85, 44: 86, 45: 87, 46: 88, 47: 89, 48: 92, 49: 96, 50: 99, 51: 102, 52: 105}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24, 43: 25, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29, 49: 29, 50: 30, 51: 30, 52: 30}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42, 25: 44, 26: 45, 27: 46, 28: 47, 29: 49, 30: 52}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13, 31: 14, 32: 14, 33: 15, 34: 15, 35: 15, 36: 16, 37: 16, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30, 14: 32, 15: 35, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-43-45] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 20, Last requested goal index = 20, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[18-04-2022_12-43-45] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.730894s, Solving = 0.158318s, Total = 0.889212s, Memory = (RSS = 2477.769531Mb, VMS = 2491.437500Mb), Step range = [30-42]), Calls = 7
Model :: Total atoms = 22247, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[18-04-2022_12-43-45] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
                 Steps = 12 :: Actions = 12                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_2,store_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,store_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_2,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 11:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 12:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,5))
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
Step 15:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 17:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 18:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 19:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 20:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 21:
    Current Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 22:
    Current Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
Step 23:
    Current Sub-goals:
        [Index = 8] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 8] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
Step 24:
    Current Sub-goals:
        [Index = 9] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 9] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,3))
Step 25:
    Current Sub-goals:
        [Index = 10] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 10] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,2))
Step 26:
    Current Sub-goals:
        [Index = 11] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 11] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_arm_1,(block,2),(block,3))
Step 27:
    Current Sub-goals:
        [Index = 12] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 12] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,2))
Step 28:
    Current Sub-goals:
        [Index = 13] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 29:
    Current Sub-goals:
        [Index = 13] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 30:
    Current Sub-goals:
        [Index = 13] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 13] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 31:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 32:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,4))
Step 33:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 34:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 35:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 36:
    Current Sub-goals:
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 37:
    Current Sub-goals:
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 38:
    Current Sub-goals:
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_arm_2,(block,5),(block,6))
Step 39:
    Current Sub-goals:
        [Index = 17] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 17] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,5))
Step 40:
    Current Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Achieved Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,1))
Step 41:
    Current Sub-goals:
        [Index = 19] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 19] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_arm_1,(block,4),(block,5))
Step 42:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_arm_2,(block,1),(block,2))

[18-04-2022_12-43-45] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=30, end_step=None

[18-04-2022_12-43-45] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for parts of the existing plan at the current level that have already been divided: start_step=30

[18-04-2022_12-43-45] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=30

[18-04-2022_12-43-45] DEBUG :: ASH Planner Main #1 >> Preparing to invoke division strategy...

[18-04-2022_12-43-45] DEBUG :: ASH Planner Main #1 >> Online method OnlineMethod.GroundFirst chose to invoke the division strategy before a downwards level change:Current increment = 13, Current planning level is complete = True

[18-04-2022_12-43-45] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 42, chosen step range to extract = range(30, 43)

[18-04-2022_12-43-45] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 52, Total actions = 52, Produced sub-goal stages = 52, Produced sub-goal literals = 60
Level [1]: Length = 105, Total actions = 105, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-45] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 3 (par-ref), LE =  12, AC =  12, CF = 1.0, GT =   2.97s, ST =   0.88s, OT = 0.00s, TT =   3.85s, EF = (LE = 1.7, AC = 1.7), ED = (LE = 1.0, AC = 1.0), EB = (LE = 0.6, AC = 0.6)

[18-04-2022_12-43-45] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=3, plan_length=12, start_step=30, blend=Blend(left=0, right=0)

[18-04-2022_12-43-45] DEBUG :: core.Strategies >> Decided: number_small_problems=3, number_large_problems=0, small_group_size=4, large_group_size=5

[18-04-2022_12-43-45] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=34, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1), DivisionPoint(index=38, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[18-04-2022_12-43-45] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 3, Problem Range = [7-9], Size = 12, Sub-goal Stage Range = [31-42]
Division points [total=2] : [(Index = 34, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 38, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[18-04-2022_12-43-45] DEBUG :: ASH Planner Main #1 >> Monolevel problem 3 at level 3 solved.

[18-04-2022_12-43-45] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning problem 7 at level 2:
Total Templated Partial Problems = 3, Problem Range = [7-9], Size = 12, Sub-goal Stage Range = [31-42]
Division points [total=2] : [(Index = 34, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 38, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[18-04-2022_12-43-45] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [31-34]

[18-04-2022_12-43-45] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 52, chosen step range to extract = range(0, 53)

[18-04-2022_12-43-45] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 52, Total actions = 52, Produced sub-goal stages = 52, Produced sub-goal literals = 60
Level [1]: Length = 105, Total actions = 105, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-45] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 42, chosen step range to extract = range(0, 43)

[18-04-2022_12-43-45] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 52, Total actions = 52, Produced sub-goal stages = 52, Produced sub-goal literals = 60
Level [1]: Length = 105, Total actions = 105, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-45] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 20, chosen step range to extract = range(0, 21)

[18-04-2022_12-43-45] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 52, Total actions = 52, Produced sub-goal stages = 52, Produced sub-goal literals = 60
Level [1]: Length = 105, Total actions = 105, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-45] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [31-34], problem number = 7, increment number = 13

[18-04-2022_12-43-45] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 31)
	('last_sgoals', 34)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1787.6271581999954)
	('length_limit', 300)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[18-04-2022_12-43-45] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 2] partial conformance refinement (sequential) with sgoals range [31-34] : Concurrency disabled : Minimum search length bound enabled with value 55

[18-04-2022_12-43-45] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 31
last_sgoals = 34
start_step = 52
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 55

[18-04-2022_12-43-45] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[18-04-2022_12-43-45] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[18-04-2022_12-43-45] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[18-04-2022_12-43-45] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[18-04-2022_12-43-45] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-43-45] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 52 as problem start state.

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 52})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 52})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 52})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 52})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 52})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 52})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 52})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 52})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 52})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 52})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 52})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 52})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 52})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 52})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 52})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': '(store_room,1)', 'S': 52})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 52})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': '(store_room,1)', 'S': 52})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': '(store_room,1)', 'S': 52})
Fluent({'L': 2, 'F': 'in(manipulator_end_1)', 'V': '(store_room,1)', 'S': 52})
Fluent({'L': 2, 'F': 'in(manipulator_end_2)', 'V': '(store_room,1)', 'S': 52})
Fluent({'L': 2, 'F': 'in(manipulator_limb_1)', 'V': '(store_room,1)', 'S': 52})
Fluent({'L': 2, 'F': 'in(manipulator_limb_2)', 'V': '(store_room,1)', 'S': 52})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 52})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 52})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 52})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 52})
Fluent({'L': 2, 'F': 'in(talos)', 'V': '(store_room,1)', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 52})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 52})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 52})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 52})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 52})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 52})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 52})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 52})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 52})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 52})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 52})
Fluent({'L': 3, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 52})
Fluent({'L': 3, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 52})
Fluent({'L': 3, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 52})
Fluent({'L': 3, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 52})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 52})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 52})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 52})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 52})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 52})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 52})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 52})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 52})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 52})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 52})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 52})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'store_room', 'S': 52})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 52})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 52})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 52})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 52})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 52})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 52})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 52})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 52})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 52})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 52})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 52})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 52})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 52})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 52})

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 157 rules into program part ash_initial_state:

holds(2, complete_tower(blue,puzzle_room_table), false, 52).
holds(2, complete_tower(red,puzzle_room_table), false, 52).
holds(2, configuration(manipulator_end_1), aligned_with(nothing), 52).
holds(2, configuration(manipulator_end_2), aligned_with((block,5)), 52).
holds(2, configuration(manipulator_limb_1), retracted, 52).
holds(2, configuration(manipulator_limb_2), retracted, 52).
holds(2, configuration(puzzle_room_door), open, 52).
holds(2, configuration(starting_room_door), closed, 52).
holds(2, configuration(store_room_door), open, 52).
holds(2, grasping(manipulator_arm_1), nothing, 52).
holds(2, grasping(manipulator_arm_2), (block,5), 52).
holds(2, grasping(manipulator_end_1), nothing, 52).
holds(2, grasping(manipulator_end_2), (block,5), 52).
holds(2, in((block,1)), (puzzle_room,1), 52).
holds(2, in((block,2)), (puzzle_room,1), 52).
holds(2, in((block,3)), (puzzle_room,1), 52).
holds(2, in((block,4)), (store_room,0), 52).
holds(2, in((block,5)), (store_room,1), 52).
holds(2, in((block,6)), (puzzle_room,1), 52).
holds(2, in(manipulator_arm_1), (store_room,1), 52).
holds(2, in(manipulator_arm_2), (store_room,1), 52).
holds(2, in(manipulator_end_1), (store_room,1), 52).
holds(2, in(manipulator_end_2), (store_room,1), 52).
holds(2, in(manipulator_limb_1), (store_room,1), 52).
holds(2, in(manipulator_limb_2), (store_room,1), 52).
holds(2, in(puzzle_room_table), (puzzle_room,1), 52).
holds(2, in(puzzle_room_table_left), (puzzle_room,1), 52).
holds(2, in(puzzle_room_table_middle), (puzzle_room,1), 52).
holds(2, in(puzzle_room_table_right), (puzzle_room,1), 52).
holds(2, in(talos), (store_room,1), 52).
holds(2, in_tower((block,1),(block,1)), true, 52).
holds(2, in_tower((block,1),(block,2)), false, 52).
holds(2, in_tower((block,1),(block,3)), false, 52).
holds(2, in_tower((block,1),(block,4)), false, 52).
holds(2, in_tower((block,1),(block,5)), false, 52).
holds(2, in_tower((block,1),(block,6)), false, 52).
holds(2, in_tower((block,2),(block,1)), false, 52).
holds(2, in_tower((block,2),(block,2)), false, 52).
holds(2, in_tower((block,2),(block,3)), false, 52).
holds(2, in_tower((block,2),(block,4)), false, 52).
holds(2, in_tower((block,2),(block,5)), false, 52).
holds(2, in_tower((block,2),(block,6)), false, 52).
holds(2, in_tower((block,3),(block,1)), false, 52).
holds(2, in_tower((block,3),(block,2)), true, 52).
holds(2, in_tower((block,3),(block,3)), true, 52).
holds(2, in_tower((block,3),(block,4)), false, 52).
holds(2, in_tower((block,3),(block,5)), false, 52).
holds(2, in_tower((block,3),(block,6)), false, 52).
holds(2, in_tower((block,4),(block,1)), false, 52).
holds(2, in_tower((block,4),(block,2)), false, 52).
holds(2, in_tower((block,4),(block,3)), false, 52).
holds(2, in_tower((block,4),(block,4)), false, 52).
holds(2, in_tower((block,4),(block,5)), false, 52).
holds(2, in_tower((block,4),(block,6)), false, 52).
holds(2, in_tower((block,5),(block,1)), false, 52).
holds(2, in_tower((block,5),(block,2)), false, 52).
holds(2, in_tower((block,5),(block,3)), false, 52).
holds(2, in_tower((block,5),(block,4)), false, 52).
holds(2, in_tower((block,5),(block,5)), false, 52).
holds(2, in_tower((block,5),(block,6)), false, 52).
holds(2, in_tower((block,6),(block,1)), false, 52).
holds(2, in_tower((block,6),(block,2)), false, 52).
holds(2, in_tower((block,6),(block,3)), false, 52).
holds(2, in_tower((block,6),(block,4)), false, 52).
holds(2, in_tower((block,6),(block,5)), false, 52).
holds(2, in_tower((block,6),(block,6)), true, 52).
holds(2, on((block,1)), puzzle_room_table_left, 52).
holds(2, on((block,2)), (block,3), 52).
holds(2, on((block,3)), puzzle_room_table_left, 52).
holds(2, on((block,4)), nothing, 52).
holds(2, on((block,5)), nothing, 52).
holds(2, on((block,6)), puzzle_room_table_right, 52).
holds(2, tower_base((block,1),puzzle_room_table), true, 52).
holds(2, tower_base((block,2),puzzle_room_table), false, 52).
holds(2, tower_base((block,3),puzzle_room_table), true, 52).
holds(2, tower_base((block,4),puzzle_room_table), false, 52).
holds(2, tower_base((block,5),puzzle_room_table), false, 52).
holds(2, tower_base((block,6),puzzle_room_table), true, 52).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 52).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 52).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 52).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 52).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 52).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 52).
holds(3, complete_tower(blue,puzzle_room_table), false, 52).
holds(3, complete_tower(red,puzzle_room_table), false, 52).
holds(3, configuration(manipulator_arm_1), retracted, 52).
holds(3, configuration(manipulator_arm_2), retracted, 52).
holds(3, configuration(puzzle_room_door), open, 52).
holds(3, configuration(starting_room_door), closed, 52).
holds(3, configuration(store_room_door), open, 52).
holds(3, grasping(manipulator_arm_1), nothing, 52).
holds(3, grasping(manipulator_arm_2), (block,5), 52).
holds(3, in((block,1)), puzzle_room, 52).
holds(3, in((block,2)), puzzle_room, 52).
holds(3, in((block,3)), puzzle_room, 52).
holds(3, in((block,4)), store_room, 52).
holds(3, in((block,5)), store_room, 52).
holds(3, in((block,6)), puzzle_room, 52).
holds(3, in(manipulator_arm_1), store_room, 52).
holds(3, in(manipulator_arm_2), store_room, 52).
holds(3, in(puzzle_room_table), puzzle_room, 52).
holds(3, in(talos), store_room, 52).
holds(3, in_tower((block,1),(block,1)), true, 52).
holds(3, in_tower((block,1),(block,2)), false, 52).
holds(3, in_tower((block,1),(block,3)), false, 52).
holds(3, in_tower((block,1),(block,4)), false, 52).
holds(3, in_tower((block,1),(block,5)), false, 52).
holds(3, in_tower((block,1),(block,6)), false, 52).
holds(3, in_tower((block,2),(block,1)), false, 52).
holds(3, in_tower((block,2),(block,2)), false, 52).
holds(3, in_tower((block,2),(block,3)), false, 52).
holds(3, in_tower((block,2),(block,4)), false, 52).
holds(3, in_tower((block,2),(block,5)), false, 52).
holds(3, in_tower((block,2),(block,6)), false, 52).
holds(3, in_tower((block,3),(block,1)), false, 52).
holds(3, in_tower((block,3),(block,2)), true, 52).
holds(3, in_tower((block,3),(block,3)), true, 52).
holds(3, in_tower((block,3),(block,4)), false, 52).
holds(3, in_tower((block,3),(block,5)), false, 52).
holds(3, in_tower((block,3),(block,6)), false, 52).
holds(3, in_tower((block,4),(block,1)), false, 52).
holds(3, in_tower((block,4),(block,2)), false, 52).
holds(3, in_tower((block,4),(block,3)), false, 52).
holds(3, in_tower((block,4),(block,4)), false, 52).
holds(3, in_tower((block,4),(block,5)), false, 52).
holds(3, in_tower((block,4),(block,6)), false, 52).
holds(3, in_tower((block,5),(block,1)), false, 52).
holds(3, in_tower((block,5),(block,2)), false, 52).
holds(3, in_tower((block,5),(block,3)), false, 52).
holds(3, in_tower((block,5),(block,4)), false, 52).
holds(3, in_tower((block,5),(block,5)), false, 52).
holds(3, in_tower((block,5),(block,6)), false, 52).
holds(3, in_tower((block,6),(block,1)), false, 52).
holds(3, in_tower((block,6),(block,2)), false, 52).
holds(3, in_tower((block,6),(block,3)), false, 52).
holds(3, in_tower((block,6),(block,4)), false, 52).
holds(3, in_tower((block,6),(block,5)), false, 52).
holds(3, in_tower((block,6),(block,6)), true, 52).
holds(3, on((block,1)), puzzle_room_table, 52).
holds(3, on((block,2)), (block,3), 52).
holds(3, on((block,3)), puzzle_room_table, 52).
holds(3, on((block,4)), nothing, 52).
holds(3, on((block,5)), nothing, 52).
holds(3, on((block,6)), puzzle_room_table, 52).
holds(3, tower_base((block,1),puzzle_room_table), true, 52).
holds(3, tower_base((block,2),puzzle_room_table), false, 52).
holds(3, tower_base((block,3),puzzle_room_table), true, 52).
holds(3, tower_base((block,4),puzzle_room_table), false, 52).
holds(3, tower_base((block,5),puzzle_room_table), false, 52).
holds(3, tower_base((block,6),puzzle_room_table), true, 52).
holds(3, unordered_tower((block,1),puzzle_room_table), false, 52).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 52).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 52).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 52).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 52).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 52).

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 296 rules into program part ash_goal_state:

final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table_left, false).
final_goal(2, on((block,1)), puzzle_room_table_middle, false).
final_goal(2, on((block,1)), puzzle_room_table_right, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table_left, false).
final_goal(2, on((block,2)), puzzle_room_table_middle, false).
final_goal(2, on((block,2)), puzzle_room_table_right, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table_left, true).
final_goal(2, on((block,3)), puzzle_room_table_middle, false).
final_goal(2, on((block,3)), puzzle_room_table_right, false).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table_left, false).
final_goal(2, on((block,4)), puzzle_room_table_middle, false).
final_goal(2, on((block,4)), puzzle_room_table_right, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table_left, false).
final_goal(2, on((block,5)), puzzle_room_table_middle, false).
final_goal(2, on((block,5)), puzzle_room_table_right, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table_left, false).
final_goal(2, on((block,6)), puzzle_room_table_middle, false).
final_goal(2, on((block,6)), puzzle_room_table_right, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).

[18-04-2022_12-43-45] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=55']

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 31})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,4))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'I': 32})
SubGoal({'L': 3, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 33})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 34})

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 4 rules into program part base:

sub_goal(3, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 31).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,4)), grasping(manipulator_arm_1), (block,4), 32).
sub_goal(3, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 33).
sub_goal(3, talos, move(hallway), in(talos), hallway, 34).

[18-04-2022_12-43-45] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=55']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A8A4459DC0>]
	incrementor = SolveIncrementor(step_start=52, step_increase=1, step_increase_initial=4, step_end_min=56, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1787.6271581999954, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 52), range_=None), IncPart(name='plan_module', args=('#inc', 52, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 52, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 52, 31, 34, 'sequential', 'false'), range_=None)]

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 826 rules

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.005196099999920989s

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.157565s.

[18-04-2022_12-43-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022814s with result Satisfiable.

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A8A4A69EA0>

[18-04-2022_12-43-46] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 2)
	('start_step', 52)
	('last_sgoals', 34)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('first_sgoals', 31)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A8A4A69EA0>)

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 52). %* None *%
#program plan_module(#inc, 52, false, false). %* None *%
#program optimisation_module(#inc, 52, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 52, 31, 34, sequential, false). %* None *%

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     51 : Current =     55
Incrementor step ends | Minimum  =     56 : Maximum =    300

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(55)]), ('state_module', [Number(52), Number(52)]), ('plan_module', [Number(52), Number(52), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(52), Number(52), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(52)]), ('action_preconditions', [Number(52)]), ('variable_relations', [Number(52)]), ('abstraction_mappings', [Number(52)]), ('conformance_module', [Number(52), Number(52), Number(31), Number(34), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(53), Number(52)]), ('plan_module', [Number(53), Number(52), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(53), Number(52), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(53)]), ('action_preconditions', [Number(53)]), ('variable_relations', [Number(53)]), ('abstraction_mappings', [Number(53)]), ('conformance_module', [Number(53), Number(52), Number(31), Number(34), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(54), Number(52)]), ('plan_module', [Number(54), Number(52), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(54), Number(52), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(54)]), ('action_preconditions', [Number(54)]), ('variable_relations', [Number(54)]), ('abstraction_mappings', [Number(54)]), ('conformance_module', [Number(54), Number(52), Number(31), Number(34), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(55), Number(52)]), ('plan_module', [Number(55), Number(52), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(55), Number(52), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(55)]), ('action_preconditions', [Number(55)]), ('variable_relations', [Number(55)]), ('abstraction_mappings', [Number(55)]), ('conformance_module', [Number(55), Number(52), Number(31), Number(34), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.248504s.

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.052768s with result Unsatisfiable.

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.30127269999957207, Incremental time limit = None
Running cumulative time = 0.30127269999957207, Cumulative time limit = 1787.6271581999954
Used memory = (RSS = 2474.796875Mb, VMS = 2488.515625Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     55 : Current =     56
Incrementor step ends | Minimum  =     56 : Maximum =    300

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(56)]), ('state_module', [Number(56), Number(52)]), ('plan_module', [Number(56), Number(52), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(56), Number(52), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(56)]), ('action_preconditions', [Number(56)]), ('variable_relations', [Number(56)]), ('abstraction_mappings', [Number(56)]), ('conformance_module', [Number(56), Number(52), Number(31), Number(34), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.100952s.

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012621s with result Unsatisfiable.

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11357229999975971, Incremental time limit = None
Running cumulative time = 0.4148449999993318, Cumulative time limit = 1787.6271581999954
Used memory = (RSS = 2475.101562Mb, VMS = 2489.496094Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     56 : Current =     57
Incrementor step ends | Minimum  =     56 : Maximum =    300

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(57)]), ('state_module', [Number(57), Number(52)]), ('plan_module', [Number(57), Number(52), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(57), Number(52), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(57)]), ('action_preconditions', [Number(57)]), ('variable_relations', [Number(57)]), ('abstraction_mappings', [Number(57)]), ('conformance_module', [Number(57), Number(52), Number(31), Number(34), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.106145s.

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.018377s with result Unsatisfiable.

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.12452209999992192, Incremental time limit = None
Running cumulative time = 0.5393670999992537, Cumulative time limit = 1787.6271581999954
Used memory = (RSS = 2475.343750Mb, VMS = 2488.789062Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     57 : Current =     58
Incrementor step ends | Minimum  =     56 : Maximum =    300

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(58)]), ('state_module', [Number(58), Number(52)]), ('plan_module', [Number(58), Number(52), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(58), Number(52), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(58)]), ('action_preconditions', [Number(58)]), ('variable_relations', [Number(58)]), ('abstraction_mappings', [Number(58)]), ('conformance_module', [Number(58), Number(52), Number(31), Number(34), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.107813s.

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.018325s with result Unsatisfiable.

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1261383000000933, Incremental time limit = None
Running cumulative time = 0.665505399999347, Cumulative time limit = 1787.6271581999954
Used memory = (RSS = 2475.605469Mb, VMS = 2489.046875Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     58 : Current =     59
Incrementor step ends | Minimum  =     56 : Maximum =    300

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(59)]), ('state_module', [Number(59), Number(52)]), ('plan_module', [Number(59), Number(52), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(59), Number(52), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(59)]), ('action_preconditions', [Number(59)]), ('variable_relations', [Number(59)]), ('abstraction_mappings', [Number(59)]), ('conformance_module', [Number(59), Number(52), Number(31), Number(34), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.111689s.

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.035857s with result Satisfiable.

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.14754619999985152, Incremental time limit = None
Running cumulative time = 0.8130515999991985, Cumulative time limit = 1787.6271581999954
Used memory = (RSS = 2477.863281Mb, VMS = 2491.308594Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.675104s, Solving = 0.137948s, Total = 0.813052s, Memory = (RSS = 2477.863281Mb, VMS = 2491.308594Mb), Step range = [52-59]), Calls = 5
Final Model :: Total atoms = 19910, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.248504s, Solving = 0.052768s, Total = 0.301273s, Memory = (RSS = 2474.796875Mb, VMS = 2488.515625Mb), Step range = [52-55]
2 : Statistics :: Grounding = 0.100952s, Solving = 0.012621s, Total = 0.113572s, Memory = (RSS = 2475.101562Mb, VMS = 2489.496094Mb), Step range = [56-56]
3 : Statistics :: Grounding = 0.106145s, Solving = 0.018377s, Total = 0.124522s, Memory = (RSS = 2475.343750Mb, VMS = 2488.789062Mb), Step range = [57-57]
4 : Statistics :: Grounding = 0.107813s, Solving = 0.018325s, Total = 0.126138s, Memory = (RSS = 2475.605469Mb, VMS = 2489.046875Mb), Step range = [58-58]
5 : Statistics :: Grounding = 0.111689s, Solving = 0.035857s, Total = 0.147546s, Memory = (RSS = 2477.863281Mb, VMS = 2491.308594Mb), Step range = [59-59]

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.813052s due to: Stop condition reached.

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38, 81: 39, 82: 40, 83: 41, 84: 42, 85: 43, 86: 44, 87: 45, 88: 46, 89: 47, 90: 48, 91: 48, 92: 48, 93: 49, 94: 49, 95: 49, 96: 49, 97: 50, 98: 50, 99: 50, 100: 51, 101: 51, 102: 51, 103: 52, 104: 52, 105: 52}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80, 39: 81, 40: 82, 41: 83, 42: 84, 43: 85, 44: 86, 45: 87, 46: 88, 47: 89, 48: 92, 49: 96, 50: 99, 51: 102, 52: 105}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24, 43: 25, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29, 49: 29, 50: 30, 51: 30, 52: 30}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42, 25: 44, 26: 45, 27: 46, 28: 47, 29: 49, 30: 52}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13, 31: 14, 32: 14, 33: 15, 34: 15, 35: 15, 36: 16, 37: 16, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30, 14: 32, 15: 35, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38, 81: 39, 82: 40, 83: 41, 84: 42, 85: 43, 86: 44, 87: 45, 88: 46, 89: 47, 90: 48, 91: 48, 92: 48, 93: 49, 94: 49, 95: 49, 96: 49, 97: 50, 98: 50, 99: 50, 100: 51, 101: 51, 102: 51, 103: 52, 104: 52, 105: 52}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80, 39: 81, 40: 82, 41: 83, 42: 84, 43: 85, 44: 86, 45: 87, 46: 88, 47: 89, 48: 92, 49: 96, 50: 99, 51: 102, 52: 105}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24, 43: 25, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29, 49: 29, 50: 30, 51: 30, 52: 30, 53: 31, 54: 31, 55: 32, 56: 32, 57: 33, 58: 34, 59: 34}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42, 25: 44, 26: 45, 27: 46, 28: 47, 29: 49, 30: 52, 31: 54, 32: 56, 33: 57, 34: 59}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13, 31: 14, 32: 14, 33: 15, 34: 15, 35: 15, 36: 16, 37: 16, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30, 14: 32, 15: 35, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 34, Last requested goal index = 34, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.675104s, Solving = 0.137948s, Total = 0.813052s, Memory = (RSS = 2477.863281Mb, VMS = 2491.308594Mb), Step range = [52-59]), Calls = 5
Model :: Total atoms = 19910, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                  Steps = 7 :: Actions = 7                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 25:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 26:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 27:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 28:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 29:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 30:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : move((store_room,1))
Step 31:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 37:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 38:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 39:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 40:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 41:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 42:
    Current Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 43:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 44:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 45:
    Current Sub-goals:
        [Index = 26] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 26] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 46:
    Current Sub-goals:
        [Index = 27] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 27] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,2))
Step 47:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 48:
    Current Sub-goals:
        [Index = 29] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 49:
    Current Sub-goals:
        [Index = 29] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 29] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 50:
    Current Sub-goals:
        [Index = 30] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 51:
    Current Sub-goals:
        [Index = 30] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 52:
    Current Sub-goals:
        [Index = 30] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 30] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 53:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 54:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 55:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
Step 56:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
Step 57:
    Current Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 58:
    Current Sub-goals:
        [Index = 34] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 59:
    Current Sub-goals:
        [Index = 34] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 34] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=52, end_step=None

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for parts of the existing plan at the current level that have already been divided: start_step=52

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> Value of end step of abstract plan to divide adjusted for right blend of current problem: end_step=59

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=52

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> Preparing to invoke division strategy...

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> Online method OnlineMethod.GroundFirst chose to invoke the division strategy before a downwards level change:Current increment = 13, Current planning level is complete = False

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 59, chosen step range to extract = range(52, 60)

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 59, Total actions = 59, Produced sub-goal stages = 59, Produced sub-goal literals = 67
Level [1]: Length = 105, Total actions = 105, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =   7, AC =   7, CF = 1.0, GT =   5.87s, ST =   1.39s, OT = 0.00s, TT =   7.26s, EF = (LE = 1.8, AC = 1.8), ED = (LE = 0.5, AC = 0.5), EB = (LE = 0.3, AC = 0.3)

[18-04-2022_12-43-47] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=7, start_step=52, blend=Blend(left=0, right=0)

[18-04-2022_12-43-47] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=1, small_group_size=3, large_group_size=4

[18-04-2022_12-43-47] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=55, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 2, Problem Range = [13-14], Size = 7, Sub-goal Stage Range = [53-59]
Division points [total=1] : [(Index = 55, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> Monolevel problem 7 at level 2 solved.

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 13 at level 1:
Total Templated Partial Problems = 2, Problem Range = [13-14], Size = 7, Sub-goal Stage Range = [53-59]
Division points [total=1] : [(Index = 55, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [53-55]

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 105, chosen step range to extract = range(0, 106)

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 59, Total actions = 59, Produced sub-goal stages = 59, Produced sub-goal literals = 67
Level [1]: Length = 105, Total actions = 105, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 59, chosen step range to extract = range(0, 60)

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 59, Total actions = 59, Produced sub-goal stages = 59, Produced sub-goal literals = 67
Level [1]: Length = 105, Total actions = 105, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 42, chosen step range to extract = range(0, 43)

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 59, Total actions = 59, Produced sub-goal stages = 59, Produced sub-goal literals = 67
Level [1]: Length = 105, Total actions = 105, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 20, chosen step range to extract = range(0, 21)

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 59, Total actions = 59, Produced sub-goal stages = 59, Produced sub-goal literals = 67
Level [1]: Length = 105, Total actions = 105, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [53-55], problem number = 13, increment number = 13

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 53)
	('last_sgoals', 55)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1748.4118533999917)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [53-55] : Concurrency disabled : Minimum search length bound enabled with value 107

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 53
last_sgoals = 55
start_step = 105
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 107

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[18-04-2022_12-43-47] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[18-04-2022_12-43-47] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[18-04-2022_12-43-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[18-04-2022_12-43-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[18-04-2022_12-43-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-43-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-43-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-43-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 105 as problem start state.

[18-04-2022_12-43-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 105})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 105})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 105})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 105})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 105})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 105})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 105})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 105})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 105})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '((puzzle_room,1),5,0)', 'S': 105})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '((puzzle_room,1),5,0)', 'S': 105})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '((puzzle_room,1),5,0)', 'S': 105})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '((store_room,0),0,0)', 'S': 105})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '((store_room,1),5,1)', 'S': 105})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '((puzzle_room,1),5,0)', 'S': 105})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '((store_room,1),5,1)', 'S': 105})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '((store_room,1),5,1)', 'S': 105})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '((store_room,1),5,1)', 'S': 105})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '((store_room,1),5,1)', 'S': 105})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '((store_room,1),5,1)', 'S': 105})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '((store_room,1),5,1)', 'S': 105})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '((puzzle_room,1),5,0)', 'S': 105})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '((puzzle_room,1),5,0)', 'S': 105})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '((puzzle_room,1),5,0)', 'S': 105})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '((puzzle_room,1),5,0)', 'S': 105})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '((store_room,1),5,1)', 'S': 105})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 105})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 105})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 105})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 105})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 105})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 105})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 105})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 105})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 105})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 105})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 105})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 105})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 105})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 105})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 105})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 105})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 105})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 105})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 105})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 105})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 105})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 105})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 105})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 105})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 105})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 105})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 105})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': '(store_room,1)', 'S': 105})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 105})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': '(store_room,1)', 'S': 105})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': '(store_room,1)', 'S': 105})
Fluent({'L': 2, 'F': 'in(manipulator_end_1)', 'V': '(store_room,1)', 'S': 105})
Fluent({'L': 2, 'F': 'in(manipulator_end_2)', 'V': '(store_room,1)', 'S': 105})
Fluent({'L': 2, 'F': 'in(manipulator_limb_1)', 'V': '(store_room,1)', 'S': 105})
Fluent({'L': 2, 'F': 'in(manipulator_limb_2)', 'V': '(store_room,1)', 'S': 105})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 105})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 105})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 105})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 105})
Fluent({'L': 2, 'F': 'in(talos)', 'V': '(store_room,1)', 'S': 105})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 105})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 105})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 105})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 105})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 105})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 105})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 105})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 105})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 105})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 105})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 105})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 105})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 105})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 105})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 105})

[18-04-2022_12-43-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 164 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 105).
holds(1, complete_tower(red,puzzle_room_table), false, 105).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 105).
holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 105).
holds(1, configuration(manipulator_limb_1), retracted, 105).
holds(1, configuration(manipulator_limb_2), retracted, 105).
holds(1, configuration(puzzle_room_door), open, 105).
holds(1, configuration(starting_room_door), closed, 105).
holds(1, configuration(store_room_door), open, 105).
holds(1, grasping(manipulator_end_1), nothing, 105).
holds(1, grasping(manipulator_end_2), (block,5), 105).
holds(1, in((block,1)), ((puzzle_room,1),5,0), 105).
holds(1, in((block,2)), ((puzzle_room,1),5,0), 105).
holds(1, in((block,3)), ((puzzle_room,1),5,0), 105).
holds(1, in((block,4)), ((store_room,0),0,0), 105).
holds(1, in((block,5)), ((store_room,1),5,1), 105).
holds(1, in((block,6)), ((puzzle_room,1),5,0), 105).
holds(1, in(manipulator_arm_1), ((store_room,1),5,1), 105).
holds(1, in(manipulator_arm_2), ((store_room,1),5,1), 105).
holds(1, in(manipulator_end_1), ((store_room,1),5,1), 105).
holds(1, in(manipulator_end_2), ((store_room,1),5,1), 105).
holds(1, in(manipulator_limb_1), ((store_room,1),5,1), 105).
holds(1, in(manipulator_limb_2), ((store_room,1),5,1), 105).
holds(1, in(puzzle_room_table), ((puzzle_room,1),5,0), 105).
holds(1, in(puzzle_room_table_left), ((puzzle_room,1),5,0), 105).
holds(1, in(puzzle_room_table_middle), ((puzzle_room,1),5,0), 105).
holds(1, in(puzzle_room_table_right), ((puzzle_room,1),5,0), 105).
holds(1, in(talos), ((store_room,1),5,1), 105).
holds(1, in_tower((block,1),(block,1)), true, 105).
holds(1, in_tower((block,1),(block,2)), false, 105).
holds(1, in_tower((block,1),(block,3)), false, 105).
holds(1, in_tower((block,1),(block,4)), false, 105).
holds(1, in_tower((block,1),(block,5)), false, 105).
holds(1, in_tower((block,1),(block,6)), false, 105).
holds(1, in_tower((block,2),(block,1)), false, 105).
holds(1, in_tower((block,2),(block,2)), false, 105).
holds(1, in_tower((block,2),(block,3)), false, 105).
holds(1, in_tower((block,2),(block,4)), false, 105).
holds(1, in_tower((block,2),(block,5)), false, 105).
holds(1, in_tower((block,2),(block,6)), false, 105).
holds(1, in_tower((block,3),(block,1)), false, 105).
holds(1, in_tower((block,3),(block,2)), true, 105).
holds(1, in_tower((block,3),(block,3)), true, 105).
holds(1, in_tower((block,3),(block,4)), false, 105).
holds(1, in_tower((block,3),(block,5)), false, 105).
holds(1, in_tower((block,3),(block,6)), false, 105).
holds(1, in_tower((block,4),(block,1)), false, 105).
holds(1, in_tower((block,4),(block,2)), false, 105).
holds(1, in_tower((block,4),(block,3)), false, 105).
holds(1, in_tower((block,4),(block,4)), false, 105).
holds(1, in_tower((block,4),(block,5)), false, 105).
holds(1, in_tower((block,4),(block,6)), false, 105).
holds(1, in_tower((block,5),(block,1)), false, 105).
holds(1, in_tower((block,5),(block,2)), false, 105).
holds(1, in_tower((block,5),(block,3)), false, 105).
holds(1, in_tower((block,5),(block,4)), false, 105).
holds(1, in_tower((block,5),(block,5)), false, 105).
holds(1, in_tower((block,5),(block,6)), false, 105).
holds(1, in_tower((block,6),(block,1)), false, 105).
holds(1, in_tower((block,6),(block,2)), false, 105).
holds(1, in_tower((block,6),(block,3)), false, 105).
holds(1, in_tower((block,6),(block,4)), false, 105).
holds(1, in_tower((block,6),(block,5)), false, 105).
holds(1, in_tower((block,6),(block,6)), true, 105).
holds(1, on((block,1)), puzzle_room_table_left, 105).
holds(1, on((block,2)), (block,3), 105).
holds(1, on((block,3)), puzzle_room_table_left, 105).
holds(1, on((block,4)), nothing, 105).
holds(1, on((block,5)), nothing, 105).
holds(1, on((block,6)), puzzle_room_table_right, 105).
holds(1, tower_base((block,1),puzzle_room_table), true, 105).
holds(1, tower_base((block,2),puzzle_room_table), false, 105).
holds(1, tower_base((block,3),puzzle_room_table), true, 105).
holds(1, tower_base((block,4),puzzle_room_table), false, 105).
holds(1, tower_base((block,5),puzzle_room_table), false, 105).
holds(1, tower_base((block,6),puzzle_room_table), true, 105).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 105).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 105).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 105).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 105).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 105).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 105).
holds(2, complete_tower(blue,puzzle_room_table), false, 105).
holds(2, complete_tower(red,puzzle_room_table), false, 105).
holds(2, configuration(manipulator_end_1), aligned_with(nothing), 105).
holds(2, configuration(manipulator_end_2), aligned_with((block,5)), 105).
holds(2, configuration(manipulator_limb_1), retracted, 105).
holds(2, configuration(manipulator_limb_2), retracted, 105).
holds(2, configuration(puzzle_room_door), open, 105).
holds(2, configuration(starting_room_door), closed, 105).
holds(2, configuration(store_room_door), open, 105).
holds(2, grasping(manipulator_end_1), nothing, 105).
holds(2, grasping(manipulator_end_2), (block,5), 105).
holds(2, in((block,1)), (puzzle_room,1), 105).
holds(2, in((block,2)), (puzzle_room,1), 105).
holds(2, in((block,3)), (puzzle_room,1), 105).
holds(2, in((block,4)), (store_room,0), 105).
holds(2, in((block,5)), (store_room,1), 105).
holds(2, in((block,6)), (puzzle_room,1), 105).
holds(2, in(manipulator_arm_1), (store_room,1), 105).
holds(2, in(manipulator_arm_2), (store_room,1), 105).
holds(2, in(manipulator_end_1), (store_room,1), 105).
holds(2, in(manipulator_end_2), (store_room,1), 105).
holds(2, in(manipulator_limb_1), (store_room,1), 105).
holds(2, in(manipulator_limb_2), (store_room,1), 105).
holds(2, in(puzzle_room_table), (puzzle_room,1), 105).
holds(2, in(puzzle_room_table_left), (puzzle_room,1), 105).
holds(2, in(puzzle_room_table_middle), (puzzle_room,1), 105).
holds(2, in(puzzle_room_table_right), (puzzle_room,1), 105).
holds(2, in(talos), (store_room,1), 105).
holds(2, in_tower((block,1),(block,1)), true, 105).
holds(2, in_tower((block,1),(block,2)), false, 105).
holds(2, in_tower((block,1),(block,3)), false, 105).
holds(2, in_tower((block,1),(block,4)), false, 105).
holds(2, in_tower((block,1),(block,5)), false, 105).
holds(2, in_tower((block,1),(block,6)), false, 105).
holds(2, in_tower((block,2),(block,1)), false, 105).
holds(2, in_tower((block,2),(block,2)), false, 105).
holds(2, in_tower((block,2),(block,3)), false, 105).
holds(2, in_tower((block,2),(block,4)), false, 105).
holds(2, in_tower((block,2),(block,5)), false, 105).
holds(2, in_tower((block,2),(block,6)), false, 105).
holds(2, in_tower((block,3),(block,1)), false, 105).
holds(2, in_tower((block,3),(block,2)), true, 105).
holds(2, in_tower((block,3),(block,3)), true, 105).
holds(2, in_tower((block,3),(block,4)), false, 105).
holds(2, in_tower((block,3),(block,5)), false, 105).
holds(2, in_tower((block,3),(block,6)), false, 105).
holds(2, in_tower((block,4),(block,1)), false, 105).
holds(2, in_tower((block,4),(block,2)), false, 105).
holds(2, in_tower((block,4),(block,3)), false, 105).
holds(2, in_tower((block,4),(block,4)), false, 105).
holds(2, in_tower((block,4),(block,5)), false, 105).
holds(2, in_tower((block,4),(block,6)), false, 105).
holds(2, in_tower((block,5),(block,1)), false, 105).
holds(2, in_tower((block,5),(block,2)), false, 105).
holds(2, in_tower((block,5),(block,3)), false, 105).
holds(2, in_tower((block,5),(block,4)), false, 105).
holds(2, in_tower((block,5),(block,5)), false, 105).
holds(2, in_tower((block,5),(block,6)), false, 105).
holds(2, in_tower((block,6),(block,1)), false, 105).
holds(2, in_tower((block,6),(block,2)), false, 105).
holds(2, in_tower((block,6),(block,3)), false, 105).
holds(2, in_tower((block,6),(block,4)), false, 105).
holds(2, in_tower((block,6),(block,5)), false, 105).
holds(2, in_tower((block,6),(block,6)), true, 105).
holds(2, on((block,1)), puzzle_room_table_left, 105).
holds(2, on((block,2)), (block,3), 105).
holds(2, on((block,3)), puzzle_room_table_left, 105).
holds(2, on((block,4)), nothing, 105).
holds(2, on((block,5)), nothing, 105).
holds(2, on((block,6)), puzzle_room_table_right, 105).
holds(2, tower_base((block,1),puzzle_room_table), true, 105).
holds(2, tower_base((block,2),puzzle_room_table), false, 105).
holds(2, tower_base((block,3),puzzle_room_table), true, 105).
holds(2, tower_base((block,4),puzzle_room_table), false, 105).
holds(2, tower_base((block,5),puzzle_room_table), false, 105).
holds(2, tower_base((block,6),puzzle_room_table), true, 105).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 105).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 105).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 105).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 105).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 105).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 105).

[18-04-2022_12-43-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[18-04-2022_12-43-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 308 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table_left, false).
final_goal(2, on((block,1)), puzzle_room_table_middle, false).
final_goal(2, on((block,1)), puzzle_room_table_right, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table_left, false).
final_goal(2, on((block,2)), puzzle_room_table_middle, false).
final_goal(2, on((block,2)), puzzle_room_table_right, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table_left, true).
final_goal(2, on((block,3)), puzzle_room_table_middle, false).
final_goal(2, on((block,3)), puzzle_room_table_right, false).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table_left, false).
final_goal(2, on((block,4)), puzzle_room_table_middle, false).
final_goal(2, on((block,4)), puzzle_room_table_right, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table_left, false).
final_goal(2, on((block,5)), puzzle_room_table_middle, false).
final_goal(2, on((block,5)), puzzle_room_table_right, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table_left, false).
final_goal(2, on((block,6)), puzzle_room_table_middle, false).
final_goal(2, on((block,6)), puzzle_room_table_right, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=107']

[18-04-2022_12-43-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((store_room,0))', 'F': 'in(talos)', 'V': '(store_room,0)', 'I': 53})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'I': 54})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,4)))', 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,4))', 'I': 55})

[18-04-2022_12-43-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 3 rules into program part base:

sub_goal(2, talos, move((store_room,0)), in(talos), (store_room,0), 53).
sub_goal(2, talos, configure(manipulator_limb_1,extended), configuration(manipulator_limb_1), extended, 54).
sub_goal(2, talos, configure(manipulator_end_1,aligned_with((block,4))), configuration(manipulator_end_1), aligned_with((block,4)), 55).

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-43-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[18-04-2022_12-43-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=107']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A8A41B1550>]
	incrementor = SolveIncrementor(step_start=105, step_increase=1, step_increase_initial=3, step_end_min=108, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1748.4118533999917, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 105), range_=None), IncPart(name='plan_module', args=('#inc', 105, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 105, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 105, 53, 55, 'sequential', 'false'), range_=None)]

[18-04-2022_12-43-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-43-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-43-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 844 rules

[18-04-2022_12-43-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.005305699999553326s

[18-04-2022_12-43-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[18-04-2022_12-43-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[18-04-2022_12-43-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.171568s.

[18-04-2022_12-43-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.025027s with result Satisfiable.

[18-04-2022_12-43-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[18-04-2022_12-43-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A8A4B19D60>

[18-04-2022_12-43-47] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 105)
	('last_sgoals', 55)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('first_sgoals', 53)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A8A4B19D60>)

[18-04-2022_12-43-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 105). %* None *%
#program plan_module(#inc, 105, false, false). %* None *%
#program optimisation_module(#inc, 105, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 105, 53, 55, sequential, false). %* None *%

[18-04-2022_12-43-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =    104 : Current =    107
Incrementor step ends | Minimum  =    108 : Maximum =    300

[18-04-2022_12-43-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(107)]), ('state_module', [Number(105), Number(105)]), ('plan_module', [Number(105), Number(105), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(105), Number(105), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(105)]), ('action_preconditions', [Number(105)]), ('variable_relations', [Number(105)]), ('abstraction_mappings', [Number(105)]), ('conformance_module', [Number(105), Number(105), Number(53), Number(55), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(106), Number(105)]), ('plan_module', [Number(106), Number(105), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(106), Number(105), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(106)]), ('action_preconditions', [Number(106)]), ('variable_relations', [Number(106)]), ('abstraction_mappings', [Number(106)]), ('conformance_module', [Number(106), Number(105), Number(53), Number(55), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(107), Number(105)]), ('plan_module', [Number(107), Number(105), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(107), Number(105), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(107)]), ('action_preconditions', [Number(107)]), ('variable_relations', [Number(107)]), ('abstraction_mappings', [Number(107)]), ('conformance_module', [Number(107), Number(105), Number(53), Number(55), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.569440s.

[18-04-2022_12-43-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.096769s with result Unsatisfiable.

[18-04-2022_12-43-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.6662089999999807, Incremental time limit = None
Running cumulative time = 0.6662089999999807, Cumulative time limit = 1748.4118533999917
Used memory = (RSS = 2476.089844Mb, VMS = 2489.656250Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =    107 : Current =    108
Incrementor step ends | Minimum  =    108 : Maximum =    300

[18-04-2022_12-43-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(108)]), ('state_module', [Number(108), Number(105)]), ('plan_module', [Number(108), Number(105), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(108), Number(105), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(108)]), ('action_preconditions', [Number(108)]), ('variable_relations', [Number(108)]), ('abstraction_mappings', [Number(108)]), ('conformance_module', [Number(108), Number(105), Number(53), Number(55), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.236344s.

[18-04-2022_12-43-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.021134s with result Unsatisfiable.

[18-04-2022_12-43-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2574780999993891, Incremental time limit = None
Running cumulative time = 0.9236870999993698, Cumulative time limit = 1748.4118533999917
Used memory = (RSS = 2476.410156Mb, VMS = 2489.855469Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =    108 : Current =    109
Incrementor step ends | Minimum  =    108 : Maximum =    300

[18-04-2022_12-43-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(109)]), ('state_module', [Number(109), Number(105)]), ('plan_module', [Number(109), Number(105), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(109), Number(105), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(109)]), ('action_preconditions', [Number(109)]), ('variable_relations', [Number(109)]), ('abstraction_mappings', [Number(109)]), ('conformance_module', [Number(109), Number(105), Number(53), Number(55), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.261845s.

[18-04-2022_12-43-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.029676s with result Unsatisfiable.

[18-04-2022_12-43-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.29152109999995446, Incremental time limit = None
Running cumulative time = 1.2152081999993243, Cumulative time limit = 1748.4118533999917
Used memory = (RSS = 2476.808594Mb, VMS = 2490.226562Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =    109 : Current =    110
Incrementor step ends | Minimum  =    108 : Maximum =    300

[18-04-2022_12-43-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(110)]), ('state_module', [Number(110), Number(105)]), ('plan_module', [Number(110), Number(105), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(110), Number(105), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(110)]), ('action_preconditions', [Number(110)]), ('variable_relations', [Number(110)]), ('abstraction_mappings', [Number(110)]), ('conformance_module', [Number(110), Number(105), Number(53), Number(55), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.285597s.

[18-04-2022_12-43-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.043954s with result Unsatisfiable.

[18-04-2022_12-43-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3295509999989008, Incremental time limit = None
Running cumulative time = 1.544759199998225, Cumulative time limit = 1748.4118533999917
Used memory = (RSS = 2484.308594Mb, VMS = 2499.339844Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =    110 : Current =    111
Incrementor step ends | Minimum  =    108 : Maximum =    300

[18-04-2022_12-43-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(111)]), ('state_module', [Number(111), Number(105)]), ('plan_module', [Number(111), Number(105), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(111), Number(105), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(111)]), ('action_preconditions', [Number(111)]), ('variable_relations', [Number(111)]), ('abstraction_mappings', [Number(111)]), ('conformance_module', [Number(111), Number(105), Number(53), Number(55), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.292532s.

[18-04-2022_12-43-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.047891s with result Unsatisfiable.

[18-04-2022_12-43-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.34042279999994207, Incremental time limit = None
Running cumulative time = 1.8851819999981672, Cumulative time limit = 1748.4118533999917
Used memory = (RSS = 2487.187500Mb, VMS = 2501.261719Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =    111 : Current =    112
Incrementor step ends | Minimum  =    108 : Maximum =    300

[18-04-2022_12-43-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(112)]), ('state_module', [Number(112), Number(105)]), ('plan_module', [Number(112), Number(105), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(112), Number(105), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(112)]), ('action_preconditions', [Number(112)]), ('variable_relations', [Number(112)]), ('abstraction_mappings', [Number(112)]), ('conformance_module', [Number(112), Number(105), Number(53), Number(55), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.307477s.

[18-04-2022_12-43-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.051787s with result Unsatisfiable.

[18-04-2022_12-43-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.35926349999954255, Incremental time limit = None
Running cumulative time = 2.2444454999977097, Cumulative time limit = 1748.4118533999917
Used memory = (RSS = 2489.382812Mb, VMS = 2505.562500Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =    112 : Current =    113
Incrementor step ends | Minimum  =    108 : Maximum =    300

[18-04-2022_12-43-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(113)]), ('state_module', [Number(113), Number(105)]), ('plan_module', [Number(113), Number(105), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(113), Number(105), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(113)]), ('action_preconditions', [Number(113)]), ('variable_relations', [Number(113)]), ('abstraction_mappings', [Number(113)]), ('conformance_module', [Number(113), Number(105), Number(53), Number(55), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.312577s.

[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.093902s with result Satisfiable.

[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4064791000000696, Incremental time limit = None
Running cumulative time = 2.6509245999977793, Cumulative time limit = 1748.4118533999917
Used memory = (RSS = 2494.082031Mb, VMS = 2509.121094Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.265811s, Solving = 0.385113s, Total = 2.650925s, Memory = (RSS = 2494.082031Mb, VMS = 2509.121094Mb), Step range = [105-113]), Calls = 7
Final Model :: Total atoms = 24144, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.569440s, Solving = 0.096769s, Total = 0.666209s, Memory = (RSS = 2476.089844Mb, VMS = 2489.656250Mb), Step range = [105-107]
2 : Statistics :: Grounding = 0.236344s, Solving = 0.021134s, Total = 0.257478s, Memory = (RSS = 2476.410156Mb, VMS = 2489.855469Mb), Step range = [108-108]
3 : Statistics :: Grounding = 0.261845s, Solving = 0.029676s, Total = 0.291521s, Memory = (RSS = 2476.808594Mb, VMS = 2490.226562Mb), Step range = [109-109]
4 : Statistics :: Grounding = 0.285597s, Solving = 0.043954s, Total = 0.329551s, Memory = (RSS = 2484.308594Mb, VMS = 2499.339844Mb), Step range = [110-110]
5 : Statistics :: Grounding = 0.292532s, Solving = 0.047891s, Total = 0.340423s, Memory = (RSS = 2487.187500Mb, VMS = 2501.261719Mb), Step range = [111-111]
6 : Statistics :: Grounding = 0.307477s, Solving = 0.051787s, Total = 0.359263s, Memory = (RSS = 2489.382812Mb, VMS = 2505.562500Mb), Step range = [112-112]
7 : Statistics :: Grounding = 0.312577s, Solving = 0.093902s, Total = 0.406479s, Memory = (RSS = 2494.082031Mb, VMS = 2509.121094Mb), Step range = [113-113]

[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 2.650925s due to: Stop condition reached.

[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[18-04-2022_12-43-50] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38, 81: 39, 82: 40, 83: 41, 84: 42, 85: 43, 86: 44, 87: 45, 88: 46, 89: 47, 90: 48, 91: 48, 92: 48, 93: 49, 94: 49, 95: 49, 96: 49, 97: 50, 98: 50, 99: 50, 100: 51, 101: 51, 102: 51, 103: 52, 104: 52, 105: 52}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80, 39: 81, 40: 82, 41: 83, 42: 84, 43: 85, 44: 86, 45: 87, 46: 88, 47: 89, 48: 92, 49: 96, 50: 99, 51: 102, 52: 105}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24, 43: 25, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29, 49: 29, 50: 30, 51: 30, 52: 30, 53: 31, 54: 31, 55: 32, 56: 32, 57: 33, 58: 34, 59: 34}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42, 25: 44, 26: 45, 27: 46, 28: 47, 29: 49, 30: 52, 31: 54, 32: 56, 33: 57, 34: 59}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13, 31: 14, 32: 14, 33: 15, 34: 15, 35: 15, 36: 16, 37: 16, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30, 14: 32, 15: 35, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-43-50] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38, 81: 39, 82: 40, 83: 41, 84: 42, 85: 43, 86: 44, 87: 45, 88: 46, 89: 47, 90: 48, 91: 48, 92: 48, 93: 49, 94: 49, 95: 49, 96: 49, 97: 50, 98: 50, 99: 50, 100: 51, 101: 51, 102: 51, 103: 52, 104: 52, 105: 52, 106: 53, 107: 53, 108: 53, 109: 54, 110: 54, 111: 54, 112: 54, 113: 55}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80, 39: 81, 40: 82, 41: 83, 42: 84, 43: 85, 44: 86, 45: 87, 46: 88, 47: 89, 48: 92, 49: 96, 50: 99, 51: 102, 52: 105, 53: 108, 54: 112, 55: 113}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24, 43: 25, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29, 49: 29, 50: 30, 51: 30, 52: 30, 53: 31, 54: 31, 55: 32, 56: 32, 57: 33, 58: 34, 59: 34}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42, 25: 44, 26: 45, 27: 46, 28: 47, 29: 49, 30: 52, 31: 54, 32: 56, 33: 57, 34: 59}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13, 31: 14, 32: 14, 33: 15, 34: 15, 35: 15, 36: 16, 37: 16, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30, 14: 32, 15: 35, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-43-50] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 55, Last requested goal index = 55, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[18-04-2022_12-43-50] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.265811s, Solving = 0.385113s, Total = 2.650925s, Memory = (RSS = 2494.082031Mb, VMS = 2509.121094Mb), Step range = [105-113]), Calls = 7
Model :: Total atoms = 24144, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[18-04-2022_12-43-50] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 8 :: Actions = 8                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Planned actions:
        talos : move(((starting_room,1),3,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),4,0))
Step 5:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,0))
Step 6:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,1))
Step 7:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),4,0))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,0))
Step 9:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 10:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 11:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 12:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 13:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 5] talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(store_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 5] talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(store_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 17:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 21:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 23:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 24:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 25:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 26:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 27:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 28:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(puzzle_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(puzzle_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 31:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 35:
    Current Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 37:
    Current Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 38:
    Current Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 39:
    Current Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 40:
    Current Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 41:
    Current Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 42:
    Current Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 43:
    Current Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 44:
    Current Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Planned actions:
        talos : move(((store_room,0),2,1))
Step 45:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 46:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 47:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),0,0))
Step 48:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 49:
    Current Sub-goals:
        [Index = 23] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Achieved Sub-goals:
        [Index = 23] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 50:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 51:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 52:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 53:
    Current Sub-goals:
        [Index = 27] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Achieved Sub-goals:
        [Index = 27] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 54:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 55:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 56:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 29] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 57:
    Current Sub-goals:
        [Index = 30] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 58:
    Current Sub-goals:
        [Index = 30] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 30] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),3,0))
Step 59:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,0))
Step 60:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 61:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 62:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 63:
    Current Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 64:
    Current Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 65:
    Current Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 66:
    Current Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 67:
    Current Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 68:
    Current Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 69:
    Current Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 70:
    Current Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 71:
    Current Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Planned actions:
        talos : move(((puzzle_room,0),0,1))
Step 72:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),0,0))
Step 73:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,0))
Step 74:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),2,0))
Step 75:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Planned actions:
        talos : move(((puzzle_room,1),3,0))
Step 76:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),4,0))
Step 77:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),5,0))
Step 78:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 79:
    Current Sub-goals:
        [Index = 37] talos : put(manipulator_end_1,(block,6),puzzle_room_table_right) -> on((block,6)) = puzzle_room_table_right
    Achieved Sub-goals:
        [Index = 37] talos : put(manipulator_end_1,(block,6),puzzle_room_table_right) -> on((block,6)) = puzzle_room_table_right
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 80:
    Current Sub-goals:
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 81:
    Current Sub-goals:
        [Index = 39] talos : configure(manipulator_end_1,aligned_with((block,3))) -> configuration(manipulator_end_1) = aligned_with((block,3))
    Achieved Sub-goals:
        [Index = 39] talos : configure(manipulator_end_1,aligned_with((block,3))) -> configuration(manipulator_end_1) = aligned_with((block,3))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 82:
    Current Sub-goals:
        [Index = 40] talos : grasp(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = (block,3)
    Achieved Sub-goals:
        [Index = 40] talos : grasp(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 83:
    Current Sub-goals:
        [Index = 41] talos : put(manipulator_end_1,(block,3),puzzle_room_table_left) -> on((block,3)) = puzzle_room_table_left
    Achieved Sub-goals:
        [Index = 41] talos : put(manipulator_end_1,(block,3),puzzle_room_table_left) -> on((block,3)) = puzzle_room_table_left
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 84:
    Current Sub-goals:
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 85:
    Current Sub-goals:
        [Index = 43] talos : configure(manipulator_end_1,aligned_with((block,2))) -> configuration(manipulator_end_1) = aligned_with((block,2))
    Achieved Sub-goals:
        [Index = 43] talos : configure(manipulator_end_1,aligned_with((block,2))) -> configuration(manipulator_end_1) = aligned_with((block,2))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 86:
    Current Sub-goals:
        [Index = 44] talos : grasp(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = (block,2)
    Achieved Sub-goals:
        [Index = 44] talos : grasp(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 87:
    Current Sub-goals:
        [Index = 45] talos : put(manipulator_end_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 45] talos : put(manipulator_end_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 88:
    Current Sub-goals:
        [Index = 46] talos : release(manipulator_end_1,(block,2)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 46] talos : release(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 46] talos : release(manipulator_end_1,(block,2)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 46] talos : release(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,2))
Step 89:
    Current Sub-goals:
        [Index = 47] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 47] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 47] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 47] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 90:
    Current Sub-goals:
        [Index = 48] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),4,0))
Step 91:
    Current Sub-goals:
        [Index = 48] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),3,0))
Step 92:
    Current Sub-goals:
        [Index = 48] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
        [Index = 48] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Planned actions:
        talos : move(((puzzle_room,0),2,0))
Step 93:
    Current Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,0))
Step 94:
    Current Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,1))
Step 95:
    Current Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),0,1))
Step 96:
    Current Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 97:
    Current Sub-goals:
        [Index = 50] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 98:
    Current Sub-goals:
        [Index = 50] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 99:
    Current Sub-goals:
        [Index = 50] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 50] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 100:
    Current Sub-goals:
        [Index = 51] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 101:
    Current Sub-goals:
        [Index = 51] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 102:
    Current Sub-goals:
        [Index = 51] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 51] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 103:
    Current Sub-goals:
        [Index = 52] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 104:
    Current Sub-goals:
        [Index = 52] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 105:
    Current Sub-goals:
        [Index = 52] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 52] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 106:
    Current Sub-goals:
        [Index = 53] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 107:
    Current Sub-goals:
        [Index = 53] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 108:
    Current Sub-goals:
        [Index = 53] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
        [Index = 53] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Planned actions:
        talos : move(((store_room,0),2,1))
Step 109:
    Current Sub-goals:
        [Index = 54] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 110:
    Current Sub-goals:
        [Index = 54] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 111:
    Current Sub-goals:
        [Index = 54] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),0,0))
Step 112:
    Current Sub-goals:
        [Index = 54] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 54] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 113:
    Current Sub-goals:
        [Index = 55] talos : configure(manipulator_end_1,aligned_with((block,4))) -> configuration(manipulator_end_1) = aligned_with((block,4))
    Achieved Sub-goals:
        [Index = 55] talos : configure(manipulator_end_1,aligned_with((block,4))) -> configuration(manipulator_end_1) = aligned_with((block,4))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))

[18-04-2022_12-43-50] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[18-04-2022_12-43-50] DEBUG :: ASH Planner Main #1 >> Value of end step of abstract plan to divide adjusted for right blend of current problem: end_step=113

[18-04-2022_12-43-50] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[18-04-2022_12-43-50] DEBUG :: ASH Planner Main #1 >> Monolevel problem 13 at level 1 solved.

[18-04-2022_12-43-50] DEBUG :: ASH Planner Main #1 >> Online planning increment 13 finished.

[18-04-2022_12-43-50] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 3 : Total constraining sub-goal stages = 20 : Goals achieved = 20 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 7 : Total constraining sub-goal stages = 42 : Goals achieved = 34 : Goals unachieved = 8 : Complete = False
Level = 1 : Solved problems = 13 : Total constraining sub-goal stages = 59 : Goals achieved = 55 : Goals unachieved = 4 : Complete = False

[18-04-2022_12-43-50] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 2.

[18-04-2022_12-43-50] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 14 by method ground-first is [1-1].

[18-04-2022_12-43-50] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 14 at level 1:
Total Templated Partial Problems = 2, Problem Range = [13-14], Size = 7, Sub-goal Stage Range = [53-59]
Division points [total=1] : [(Index = 55, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[18-04-2022_12-43-50] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [56-59]

[18-04-2022_12-43-50] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 113, chosen step range to extract = range(0, 114)

[18-04-2022_12-43-50] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 59, Total actions = 59, Produced sub-goal stages = 59, Produced sub-goal literals = 67
Level [1]: Length = 113, Total actions = 113, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-50] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 59, chosen step range to extract = range(0, 60)

[18-04-2022_12-43-50] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 59, Total actions = 59, Produced sub-goal stages = 59, Produced sub-goal literals = 67
Level [1]: Length = 113, Total actions = 113, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-50] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 42, chosen step range to extract = range(0, 43)

[18-04-2022_12-43-50] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 59, Total actions = 59, Produced sub-goal stages = 59, Produced sub-goal literals = 67
Level [1]: Length = 113, Total actions = 113, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-50] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 20, chosen step range to extract = range(0, 21)

[18-04-2022_12-43-50] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 59, Total actions = 59, Produced sub-goal stages = 59, Produced sub-goal literals = 67
Level [1]: Length = 113, Total actions = 113, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-50] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [56-59], problem number = 14, increment number = 14

[18-04-2022_12-43-50] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 56)
	('last_sgoals', 59)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1745.760928799994)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[18-04-2022_12-43-50] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [56-59] : Concurrency disabled : Minimum search length bound enabled with value 116

[18-04-2022_12-43-50] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 56
last_sgoals = 59
start_step = 113
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 116

[18-04-2022_12-43-50] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[18-04-2022_12-43-50] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[18-04-2022_12-43-50] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[18-04-2022_12-43-50] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[18-04-2022_12-43-50] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-43-50] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 113 as problem start state.

[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,4))', 'S': 113})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 113})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 113})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 113})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 113})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 113})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 113})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 113})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 113})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '((puzzle_room,1),5,0)', 'S': 113})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '((puzzle_room,1),5,0)', 'S': 113})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '((puzzle_room,1),5,0)', 'S': 113})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '((store_room,0),0,0)', 'S': 113})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '((store_room,0),0,0)', 'S': 113})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '((puzzle_room,1),5,0)', 'S': 113})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '((store_room,0),0,0)', 'S': 113})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '((store_room,0),0,0)', 'S': 113})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '((store_room,0),0,0)', 'S': 113})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '((store_room,0),0,0)', 'S': 113})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '((store_room,0),0,0)', 'S': 113})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '((store_room,0),0,0)', 'S': 113})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '((puzzle_room,1),5,0)', 'S': 113})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '((puzzle_room,1),5,0)', 'S': 113})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '((puzzle_room,1),5,0)', 'S': 113})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '((puzzle_room,1),5,0)', 'S': 113})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '((store_room,0),0,0)', 'S': 113})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 113})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 113})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 113})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 113})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 113})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 113})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 113})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 113})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 113})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 113})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 113})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 113})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 113})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 113})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,4))', 'S': 113})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 113})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 113})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 113})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 113})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 113})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 113})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 113})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 113})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 113})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 113})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 113})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 113})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 113})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 113})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': '(store_room,0)', 'S': 113})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': '(store_room,0)', 'S': 113})
Fluent({'L': 2, 'F': 'in(manipulator_end_1)', 'V': '(store_room,0)', 'S': 113})
Fluent({'L': 2, 'F': 'in(manipulator_end_2)', 'V': '(store_room,0)', 'S': 113})
Fluent({'L': 2, 'F': 'in(manipulator_limb_1)', 'V': '(store_room,0)', 'S': 113})
Fluent({'L': 2, 'F': 'in(manipulator_limb_2)', 'V': '(store_room,0)', 'S': 113})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 113})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 113})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 113})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 113})
Fluent({'L': 2, 'F': 'in(talos)', 'V': '(store_room,0)', 'S': 113})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 113})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 113})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 113})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 113})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 113})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 113})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 113})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 113})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 113})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 113})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 113})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 113})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 113})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 113})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 113})

[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 164 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 113).
holds(1, complete_tower(red,puzzle_room_table), false, 113).
holds(1, configuration(manipulator_end_1), aligned_with((block,4)), 113).
holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 113).
holds(1, configuration(manipulator_limb_1), extended, 113).
holds(1, configuration(manipulator_limb_2), retracted, 113).
holds(1, configuration(puzzle_room_door), open, 113).
holds(1, configuration(starting_room_door), closed, 113).
holds(1, configuration(store_room_door), open, 113).
holds(1, grasping(manipulator_end_1), nothing, 113).
holds(1, grasping(manipulator_end_2), (block,5), 113).
holds(1, in((block,1)), ((puzzle_room,1),5,0), 113).
holds(1, in((block,2)), ((puzzle_room,1),5,0), 113).
holds(1, in((block,3)), ((puzzle_room,1),5,0), 113).
holds(1, in((block,4)), ((store_room,0),0,0), 113).
holds(1, in((block,5)), ((store_room,0),0,0), 113).
holds(1, in((block,6)), ((puzzle_room,1),5,0), 113).
holds(1, in(manipulator_arm_1), ((store_room,0),0,0), 113).
holds(1, in(manipulator_arm_2), ((store_room,0),0,0), 113).
holds(1, in(manipulator_end_1), ((store_room,0),0,0), 113).
holds(1, in(manipulator_end_2), ((store_room,0),0,0), 113).
holds(1, in(manipulator_limb_1), ((store_room,0),0,0), 113).
holds(1, in(manipulator_limb_2), ((store_room,0),0,0), 113).
holds(1, in(puzzle_room_table), ((puzzle_room,1),5,0), 113).
holds(1, in(puzzle_room_table_left), ((puzzle_room,1),5,0), 113).
holds(1, in(puzzle_room_table_middle), ((puzzle_room,1),5,0), 113).
holds(1, in(puzzle_room_table_right), ((puzzle_room,1),5,0), 113).
holds(1, in(talos), ((store_room,0),0,0), 113).
holds(1, in_tower((block,1),(block,1)), true, 113).
holds(1, in_tower((block,1),(block,2)), false, 113).
holds(1, in_tower((block,1),(block,3)), false, 113).
holds(1, in_tower((block,1),(block,4)), false, 113).
holds(1, in_tower((block,1),(block,5)), false, 113).
holds(1, in_tower((block,1),(block,6)), false, 113).
holds(1, in_tower((block,2),(block,1)), false, 113).
holds(1, in_tower((block,2),(block,2)), false, 113).
holds(1, in_tower((block,2),(block,3)), false, 113).
holds(1, in_tower((block,2),(block,4)), false, 113).
holds(1, in_tower((block,2),(block,5)), false, 113).
holds(1, in_tower((block,2),(block,6)), false, 113).
holds(1, in_tower((block,3),(block,1)), false, 113).
holds(1, in_tower((block,3),(block,2)), true, 113).
holds(1, in_tower((block,3),(block,3)), true, 113).
holds(1, in_tower((block,3),(block,4)), false, 113).
holds(1, in_tower((block,3),(block,5)), false, 113).
holds(1, in_tower((block,3),(block,6)), false, 113).
holds(1, in_tower((block,4),(block,1)), false, 113).
holds(1, in_tower((block,4),(block,2)), false, 113).
holds(1, in_tower((block,4),(block,3)), false, 113).
holds(1, in_tower((block,4),(block,4)), false, 113).
holds(1, in_tower((block,4),(block,5)), false, 113).
holds(1, in_tower((block,4),(block,6)), false, 113).
holds(1, in_tower((block,5),(block,1)), false, 113).
holds(1, in_tower((block,5),(block,2)), false, 113).
holds(1, in_tower((block,5),(block,3)), false, 113).
holds(1, in_tower((block,5),(block,4)), false, 113).
holds(1, in_tower((block,5),(block,5)), false, 113).
holds(1, in_tower((block,5),(block,6)), false, 113).
holds(1, in_tower((block,6),(block,1)), false, 113).
holds(1, in_tower((block,6),(block,2)), false, 113).
holds(1, in_tower((block,6),(block,3)), false, 113).
holds(1, in_tower((block,6),(block,4)), false, 113).
holds(1, in_tower((block,6),(block,5)), false, 113).
holds(1, in_tower((block,6),(block,6)), true, 113).
holds(1, on((block,1)), puzzle_room_table_left, 113).
holds(1, on((block,2)), (block,3), 113).
holds(1, on((block,3)), puzzle_room_table_left, 113).
holds(1, on((block,4)), nothing, 113).
holds(1, on((block,5)), nothing, 113).
holds(1, on((block,6)), puzzle_room_table_right, 113).
holds(1, tower_base((block,1),puzzle_room_table), true, 113).
holds(1, tower_base((block,2),puzzle_room_table), false, 113).
holds(1, tower_base((block,3),puzzle_room_table), true, 113).
holds(1, tower_base((block,4),puzzle_room_table), false, 113).
holds(1, tower_base((block,5),puzzle_room_table), false, 113).
holds(1, tower_base((block,6),puzzle_room_table), true, 113).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 113).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 113).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 113).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 113).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 113).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 113).
holds(2, complete_tower(blue,puzzle_room_table), false, 113).
holds(2, complete_tower(red,puzzle_room_table), false, 113).
holds(2, configuration(manipulator_end_1), aligned_with((block,4)), 113).
holds(2, configuration(manipulator_end_2), aligned_with((block,5)), 113).
holds(2, configuration(manipulator_limb_1), extended, 113).
holds(2, configuration(manipulator_limb_2), retracted, 113).
holds(2, configuration(puzzle_room_door), open, 113).
holds(2, configuration(starting_room_door), closed, 113).
holds(2, configuration(store_room_door), open, 113).
holds(2, grasping(manipulator_end_1), nothing, 113).
holds(2, grasping(manipulator_end_2), (block,5), 113).
holds(2, in((block,1)), (puzzle_room,1), 113).
holds(2, in((block,2)), (puzzle_room,1), 113).
holds(2, in((block,3)), (puzzle_room,1), 113).
holds(2, in((block,4)), (store_room,0), 113).
holds(2, in((block,5)), (store_room,0), 113).
holds(2, in((block,6)), (puzzle_room,1), 113).
holds(2, in(manipulator_arm_1), (store_room,0), 113).
holds(2, in(manipulator_arm_2), (store_room,0), 113).
holds(2, in(manipulator_end_1), (store_room,0), 113).
holds(2, in(manipulator_end_2), (store_room,0), 113).
holds(2, in(manipulator_limb_1), (store_room,0), 113).
holds(2, in(manipulator_limb_2), (store_room,0), 113).
holds(2, in(puzzle_room_table), (puzzle_room,1), 113).
holds(2, in(puzzle_room_table_left), (puzzle_room,1), 113).
holds(2, in(puzzle_room_table_middle), (puzzle_room,1), 113).
holds(2, in(puzzle_room_table_right), (puzzle_room,1), 113).
holds(2, in(talos), (store_room,0), 113).
holds(2, in_tower((block,1),(block,1)), true, 113).
holds(2, in_tower((block,1),(block,2)), false, 113).
holds(2, in_tower((block,1),(block,3)), false, 113).
holds(2, in_tower((block,1),(block,4)), false, 113).
holds(2, in_tower((block,1),(block,5)), false, 113).
holds(2, in_tower((block,1),(block,6)), false, 113).
holds(2, in_tower((block,2),(block,1)), false, 113).
holds(2, in_tower((block,2),(block,2)), false, 113).
holds(2, in_tower((block,2),(block,3)), false, 113).
holds(2, in_tower((block,2),(block,4)), false, 113).
holds(2, in_tower((block,2),(block,5)), false, 113).
holds(2, in_tower((block,2),(block,6)), false, 113).
holds(2, in_tower((block,3),(block,1)), false, 113).
holds(2, in_tower((block,3),(block,2)), true, 113).
holds(2, in_tower((block,3),(block,3)), true, 113).
holds(2, in_tower((block,3),(block,4)), false, 113).
holds(2, in_tower((block,3),(block,5)), false, 113).
holds(2, in_tower((block,3),(block,6)), false, 113).
holds(2, in_tower((block,4),(block,1)), false, 113).
holds(2, in_tower((block,4),(block,2)), false, 113).
holds(2, in_tower((block,4),(block,3)), false, 113).
holds(2, in_tower((block,4),(block,4)), false, 113).
holds(2, in_tower((block,4),(block,5)), false, 113).
holds(2, in_tower((block,4),(block,6)), false, 113).
holds(2, in_tower((block,5),(block,1)), false, 113).
holds(2, in_tower((block,5),(block,2)), false, 113).
holds(2, in_tower((block,5),(block,3)), false, 113).
holds(2, in_tower((block,5),(block,4)), false, 113).
holds(2, in_tower((block,5),(block,5)), false, 113).
holds(2, in_tower((block,5),(block,6)), false, 113).
holds(2, in_tower((block,6),(block,1)), false, 113).
holds(2, in_tower((block,6),(block,2)), false, 113).
holds(2, in_tower((block,6),(block,3)), false, 113).
holds(2, in_tower((block,6),(block,4)), false, 113).
holds(2, in_tower((block,6),(block,5)), false, 113).
holds(2, in_tower((block,6),(block,6)), true, 113).
holds(2, on((block,1)), puzzle_room_table_left, 113).
holds(2, on((block,2)), (block,3), 113).
holds(2, on((block,3)), puzzle_room_table_left, 113).
holds(2, on((block,4)), nothing, 113).
holds(2, on((block,5)), nothing, 113).
holds(2, on((block,6)), puzzle_room_table_right, 113).
holds(2, tower_base((block,1),puzzle_room_table), true, 113).
holds(2, tower_base((block,2),puzzle_room_table), false, 113).
holds(2, tower_base((block,3),puzzle_room_table), true, 113).
holds(2, tower_base((block,4),puzzle_room_table), false, 113).
holds(2, tower_base((block,5),puzzle_room_table), false, 113).
holds(2, tower_base((block,6),puzzle_room_table), true, 113).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 113).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 113).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 113).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 113).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 113).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 113).

[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 308 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table_left, false).
final_goal(2, on((block,1)), puzzle_room_table_middle, false).
final_goal(2, on((block,1)), puzzle_room_table_right, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table_left, false).
final_goal(2, on((block,2)), puzzle_room_table_middle, false).
final_goal(2, on((block,2)), puzzle_room_table_right, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table_left, true).
final_goal(2, on((block,3)), puzzle_room_table_middle, false).
final_goal(2, on((block,3)), puzzle_room_table_right, false).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table_left, false).
final_goal(2, on((block,4)), puzzle_room_table_middle, false).
final_goal(2, on((block,4)), puzzle_room_table_right, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table_left, false).
final_goal(2, on((block,5)), puzzle_room_table_middle, false).
final_goal(2, on((block,5)), puzzle_room_table_right, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table_left, false).
final_goal(2, on((block,6)), puzzle_room_table_middle, false).
final_goal(2, on((block,6)), puzzle_room_table_right, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[18-04-2022_12-43-50] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=116']

[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,4))', 'F': 'grasping(manipulator_end_1)', 'V': '(block,4)', 'I': 56})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'I': 57})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((store_room,1))', 'F': 'in(talos)', 'V': '(store_room,1)', 'I': 58})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((hallway,0))', 'F': 'in(talos)', 'V': '(hallway,0)', 'I': 59})

[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 4 rules into program part base:

sub_goal(2, talos, grasp(manipulator_end_1,(block,4)), grasping(manipulator_end_1), (block,4), 56).
sub_goal(2, talos, configure(manipulator_limb_1,retracted), configuration(manipulator_limb_1), retracted, 57).
sub_goal(2, talos, move((store_room,1)), in(talos), (store_room,1), 58).
sub_goal(2, talos, move((hallway,0)), in(talos), (hallway,0), 59).

[18-04-2022_12-43-50] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=116']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A8A41B1940>]
	incrementor = SolveIncrementor(step_start=113, step_increase=1, step_increase_initial=4, step_end_min=117, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1745.760928799994, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 113), range_=None), IncPart(name='plan_module', args=('#inc', 113, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 113, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 113, 56, 59, 'sequential', 'false'), range_=None)]

[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 845 rules

[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004643899999791756s

[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[18-04-2022_12-43-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[18-04-2022_12-43-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.170196s.

[18-04-2022_12-43-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.025220s with result Satisfiable.

[18-04-2022_12-43-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[18-04-2022_12-43-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A8A4C86C20>

[18-04-2022_12-43-51] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 113)
	('last_sgoals', 59)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('first_sgoals', 56)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A8A4C86C20>)

[18-04-2022_12-43-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 113). %* None *%
#program plan_module(#inc, 113, false, false). %* None *%
#program optimisation_module(#inc, 113, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 113, 56, 59, sequential, false). %* None *%

[18-04-2022_12-43-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =    112 : Current =    116
Incrementor step ends | Minimum  =    117 : Maximum =    300

[18-04-2022_12-43-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(116)]), ('state_module', [Number(113), Number(113)]), ('plan_module', [Number(113), Number(113), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(113), Number(113), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(113)]), ('action_preconditions', [Number(113)]), ('variable_relations', [Number(113)]), ('abstraction_mappings', [Number(113)]), ('conformance_module', [Number(113), Number(113), Number(56), Number(59), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(114), Number(113)]), ('plan_module', [Number(114), Number(113), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(114), Number(113), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(114)]), ('action_preconditions', [Number(114)]), ('variable_relations', [Number(114)]), ('abstraction_mappings', [Number(114)]), ('conformance_module', [Number(114), Number(113), Number(56), Number(59), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(115), Number(113)]), ('plan_module', [Number(115), Number(113), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(115), Number(113), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(115)]), ('action_preconditions', [Number(115)]), ('variable_relations', [Number(115)]), ('abstraction_mappings', [Number(115)]), ('conformance_module', [Number(115), Number(113), Number(56), Number(59), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(116), Number(113)]), ('plan_module', [Number(116), Number(113), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(116), Number(113), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(116)]), ('action_preconditions', [Number(116)]), ('variable_relations', [Number(116)]), ('abstraction_mappings', [Number(116)]), ('conformance_module', [Number(116), Number(113), Number(56), Number(59), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.784372s.

[18-04-2022_12-43-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.169666s with result Unsatisfiable.

[18-04-2022_12-43-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.9540374999996857, Incremental time limit = None
Running cumulative time = 0.9540374999996857, Cumulative time limit = 1745.760928799994
Used memory = (RSS = 2480.843750Mb, VMS = 2494.699219Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =    116 : Current =    117
Incrementor step ends | Minimum  =    117 : Maximum =    300

[18-04-2022_12-43-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(117)]), ('state_module', [Number(117), Number(113)]), ('plan_module', [Number(117), Number(113), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(117), Number(113), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(117)]), ('action_preconditions', [Number(117)]), ('variable_relations', [Number(117)]), ('abstraction_mappings', [Number(117)]), ('conformance_module', [Number(117), Number(113), Number(56), Number(59), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.258666s.

[18-04-2022_12-43-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.028107s with result Unsatisfiable.

[18-04-2022_12-43-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2867735999998331, Incremental time limit = None
Running cumulative time = 1.2408110999995188, Cumulative time limit = 1745.760928799994
Used memory = (RSS = 2486.777344Mb, VMS = 2502.117188Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =    117 : Current =    118
Incrementor step ends | Minimum  =    117 : Maximum =    300

[18-04-2022_12-43-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(118)]), ('state_module', [Number(118), Number(113)]), ('plan_module', [Number(118), Number(113), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(118), Number(113), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(118)]), ('action_preconditions', [Number(118)]), ('variable_relations', [Number(118)]), ('abstraction_mappings', [Number(118)]), ('conformance_module', [Number(118), Number(113), Number(56), Number(59), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.266139s.

[18-04-2022_12-43-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.034591s with result Unsatisfiable.

[18-04-2022_12-43-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.300729900000988, Incremental time limit = None
Running cumulative time = 1.5415410000005068, Cumulative time limit = 1745.760928799994
Used memory = (RSS = 2488.316406Mb, VMS = 2502.535156Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =    118 : Current =    119
Incrementor step ends | Minimum  =    117 : Maximum =    300

[18-04-2022_12-43-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(119)]), ('state_module', [Number(119), Number(113)]), ('plan_module', [Number(119), Number(113), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(119), Number(113), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(119)]), ('action_preconditions', [Number(119)]), ('variable_relations', [Number(119)]), ('abstraction_mappings', [Number(119)]), ('conformance_module', [Number(119), Number(113), Number(56), Number(59), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.289422s.

[18-04-2022_12-43-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.046346s with result Unsatisfiable.

[18-04-2022_12-43-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3357675000006566, Incremental time limit = None
Running cumulative time = 1.8773085000011633, Cumulative time limit = 1745.760928799994
Used memory = (RSS = 2491.281250Mb, VMS = 2508.058594Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =    119 : Current =    120
Incrementor step ends | Minimum  =    117 : Maximum =    300

[18-04-2022_12-43-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(120)]), ('state_module', [Number(120), Number(113)]), ('plan_module', [Number(120), Number(113), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(120), Number(113), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(120)]), ('action_preconditions', [Number(120)]), ('variable_relations', [Number(120)]), ('abstraction_mappings', [Number(120)]), ('conformance_module', [Number(120), Number(113), Number(56), Number(59), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.296676s.

[18-04-2022_12-43-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.050019s with result Unsatisfiable.

[18-04-2022_12-43-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.34669529999973747, Incremental time limit = None
Running cumulative time = 2.224003800000901, Cumulative time limit = 1745.760928799994
Used memory = (RSS = 2493.199219Mb, VMS = 2508.570312Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =    120 : Current =    121
Incrementor step ends | Minimum  =    117 : Maximum =    300

[18-04-2022_12-43-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(121)]), ('state_module', [Number(121), Number(113)]), ('plan_module', [Number(121), Number(113), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(121), Number(113), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(121)]), ('action_preconditions', [Number(121)]), ('variable_relations', [Number(121)]), ('abstraction_mappings', [Number(121)]), ('conformance_module', [Number(121), Number(113), Number(56), Number(59), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.311749s.

[18-04-2022_12-43-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.065223s with result Unsatisfiable.

[18-04-2022_12-43-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3769720000000234, Incremental time limit = None
Running cumulative time = 2.600975800000924, Cumulative time limit = 1745.760928799994
Used memory = (RSS = 2495.386719Mb, VMS = 2509.613281Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =    121 : Current =    122
Incrementor step ends | Minimum  =    117 : Maximum =    300

[18-04-2022_12-43-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(122)]), ('state_module', [Number(122), Number(113)]), ('plan_module', [Number(122), Number(113), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(122), Number(113), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(122)]), ('action_preconditions', [Number(122)]), ('variable_relations', [Number(122)]), ('abstraction_mappings', [Number(122)]), ('conformance_module', [Number(122), Number(113), Number(56), Number(59), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.317415s.

[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.101693s with result Satisfiable.

[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.41910790000019915, Incremental time limit = None
Running cumulative time = 3.0200837000011234, Cumulative time limit = 1745.760928799994
Used memory = (RSS = 2501.828125Mb, VMS = 2521.285156Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.524439s, Solving = 0.495645s, Total = 3.020084s, Memory = (RSS = 2501.828125Mb, VMS = 2521.285156Mb), Step range = [113-122]), Calls = 7
Final Model :: Total atoms = 24552, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.784372s, Solving = 0.169666s, Total = 0.954037s, Memory = (RSS = 2480.843750Mb, VMS = 2494.699219Mb), Step range = [113-116]
2 : Statistics :: Grounding = 0.258666s, Solving = 0.028107s, Total = 0.286774s, Memory = (RSS = 2486.777344Mb, VMS = 2502.117188Mb), Step range = [117-117]
3 : Statistics :: Grounding = 0.266139s, Solving = 0.034591s, Total = 0.300730s, Memory = (RSS = 2488.316406Mb, VMS = 2502.535156Mb), Step range = [118-118]
4 : Statistics :: Grounding = 0.289422s, Solving = 0.046346s, Total = 0.335768s, Memory = (RSS = 2491.281250Mb, VMS = 2508.058594Mb), Step range = [119-119]
5 : Statistics :: Grounding = 0.296676s, Solving = 0.050019s, Total = 0.346695s, Memory = (RSS = 2493.199219Mb, VMS = 2508.570312Mb), Step range = [120-120]
6 : Statistics :: Grounding = 0.311749s, Solving = 0.065223s, Total = 0.376972s, Memory = (RSS = 2495.386719Mb, VMS = 2509.613281Mb), Step range = [121-121]
7 : Statistics :: Grounding = 0.317415s, Solving = 0.101693s, Total = 0.419108s, Memory = (RSS = 2501.828125Mb, VMS = 2521.285156Mb), Step range = [122-122]

[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 3.020084s due to: Stop condition reached.

[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[18-04-2022_12-43-54] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38, 81: 39, 82: 40, 83: 41, 84: 42, 85: 43, 86: 44, 87: 45, 88: 46, 89: 47, 90: 48, 91: 48, 92: 48, 93: 49, 94: 49, 95: 49, 96: 49, 97: 50, 98: 50, 99: 50, 100: 51, 101: 51, 102: 51, 103: 52, 104: 52, 105: 52, 106: 53, 107: 53, 108: 53, 109: 54, 110: 54, 111: 54, 112: 54, 113: 55}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80, 39: 81, 40: 82, 41: 83, 42: 84, 43: 85, 44: 86, 45: 87, 46: 88, 47: 89, 48: 92, 49: 96, 50: 99, 51: 102, 52: 105, 53: 108, 54: 112, 55: 113}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24, 43: 25, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29, 49: 29, 50: 30, 51: 30, 52: 30, 53: 31, 54: 31, 55: 32, 56: 32, 57: 33, 58: 34, 59: 34}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42, 25: 44, 26: 45, 27: 46, 28: 47, 29: 49, 30: 52, 31: 54, 32: 56, 33: 57, 34: 59}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13, 31: 14, 32: 14, 33: 15, 34: 15, 35: 15, 36: 16, 37: 16, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30, 14: 32, 15: 35, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-43-54] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38, 81: 39, 82: 40, 83: 41, 84: 42, 85: 43, 86: 44, 87: 45, 88: 46, 89: 47, 90: 48, 91: 48, 92: 48, 93: 49, 94: 49, 95: 49, 96: 49, 97: 50, 98: 50, 99: 50, 100: 51, 101: 51, 102: 51, 103: 52, 104: 52, 105: 52, 106: 53, 107: 53, 108: 53, 109: 54, 110: 54, 111: 54, 112: 54, 113: 55, 114: 56, 115: 57, 116: 58, 117: 58, 118: 58, 119: 59, 120: 59, 121: 59, 122: 59}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80, 39: 81, 40: 82, 41: 83, 42: 84, 43: 85, 44: 86, 45: 87, 46: 88, 47: 89, 48: 92, 49: 96, 50: 99, 51: 102, 52: 105, 53: 108, 54: 112, 55: 113, 56: 114, 57: 115, 58: 118, 59: 122}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24, 43: 25, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29, 49: 29, 50: 30, 51: 30, 52: 30, 53: 31, 54: 31, 55: 32, 56: 32, 57: 33, 58: 34, 59: 34}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42, 25: 44, 26: 45, 27: 46, 28: 47, 29: 49, 30: 52, 31: 54, 32: 56, 33: 57, 34: 59}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13, 31: 14, 32: 14, 33: 15, 34: 15, 35: 15, 36: 16, 37: 16, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30, 14: 32, 15: 35, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-43-54] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 59, Last requested goal index = 59, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[18-04-2022_12-43-54] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.524439s, Solving = 0.495645s, Total = 3.020084s, Memory = (RSS = 2501.828125Mb, VMS = 2521.285156Mb), Step range = [113-122]), Calls = 7
Model :: Total atoms = 24552, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[18-04-2022_12-43-54] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 9 :: Actions = 9                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Planned actions:
        talos : move(((starting_room,1),3,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),4,0))
Step 5:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,0))
Step 6:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,1))
Step 7:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),4,0))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,0))
Step 9:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 10:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 11:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 12:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 13:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 5] talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(store_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 5] talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(store_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 17:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 21:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 23:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 24:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 25:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 26:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 27:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 28:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(puzzle_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(puzzle_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 31:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 35:
    Current Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 37:
    Current Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 38:
    Current Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 39:
    Current Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 40:
    Current Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 41:
    Current Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 42:
    Current Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 43:
    Current Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 44:
    Current Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Planned actions:
        talos : move(((store_room,0),2,1))
Step 45:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 46:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 47:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),0,0))
Step 48:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 49:
    Current Sub-goals:
        [Index = 23] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Achieved Sub-goals:
        [Index = 23] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 50:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 51:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 52:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 53:
    Current Sub-goals:
        [Index = 27] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Achieved Sub-goals:
        [Index = 27] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 54:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 55:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 56:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 29] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 57:
    Current Sub-goals:
        [Index = 30] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 58:
    Current Sub-goals:
        [Index = 30] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 30] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),3,0))
Step 59:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,0))
Step 60:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 61:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 62:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 63:
    Current Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 64:
    Current Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 65:
    Current Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 66:
    Current Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 67:
    Current Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 68:
    Current Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 69:
    Current Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 70:
    Current Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 71:
    Current Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Planned actions:
        talos : move(((puzzle_room,0),0,1))
Step 72:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),0,0))
Step 73:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,0))
Step 74:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),2,0))
Step 75:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Planned actions:
        talos : move(((puzzle_room,1),3,0))
Step 76:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),4,0))
Step 77:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),5,0))
Step 78:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 79:
    Current Sub-goals:
        [Index = 37] talos : put(manipulator_end_1,(block,6),puzzle_room_table_right) -> on((block,6)) = puzzle_room_table_right
    Achieved Sub-goals:
        [Index = 37] talos : put(manipulator_end_1,(block,6),puzzle_room_table_right) -> on((block,6)) = puzzle_room_table_right
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 80:
    Current Sub-goals:
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 81:
    Current Sub-goals:
        [Index = 39] talos : configure(manipulator_end_1,aligned_with((block,3))) -> configuration(manipulator_end_1) = aligned_with((block,3))
    Achieved Sub-goals:
        [Index = 39] talos : configure(manipulator_end_1,aligned_with((block,3))) -> configuration(manipulator_end_1) = aligned_with((block,3))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 82:
    Current Sub-goals:
        [Index = 40] talos : grasp(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = (block,3)
    Achieved Sub-goals:
        [Index = 40] talos : grasp(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 83:
    Current Sub-goals:
        [Index = 41] talos : put(manipulator_end_1,(block,3),puzzle_room_table_left) -> on((block,3)) = puzzle_room_table_left
    Achieved Sub-goals:
        [Index = 41] talos : put(manipulator_end_1,(block,3),puzzle_room_table_left) -> on((block,3)) = puzzle_room_table_left
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 84:
    Current Sub-goals:
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 85:
    Current Sub-goals:
        [Index = 43] talos : configure(manipulator_end_1,aligned_with((block,2))) -> configuration(manipulator_end_1) = aligned_with((block,2))
    Achieved Sub-goals:
        [Index = 43] talos : configure(manipulator_end_1,aligned_with((block,2))) -> configuration(manipulator_end_1) = aligned_with((block,2))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 86:
    Current Sub-goals:
        [Index = 44] talos : grasp(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = (block,2)
    Achieved Sub-goals:
        [Index = 44] talos : grasp(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 87:
    Current Sub-goals:
        [Index = 45] talos : put(manipulator_end_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 45] talos : put(manipulator_end_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 88:
    Current Sub-goals:
        [Index = 46] talos : release(manipulator_end_1,(block,2)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 46] talos : release(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 46] talos : release(manipulator_end_1,(block,2)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 46] talos : release(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,2))
Step 89:
    Current Sub-goals:
        [Index = 47] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 47] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 47] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 47] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 90:
    Current Sub-goals:
        [Index = 48] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),4,0))
Step 91:
    Current Sub-goals:
        [Index = 48] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),3,0))
Step 92:
    Current Sub-goals:
        [Index = 48] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
        [Index = 48] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Planned actions:
        talos : move(((puzzle_room,0),2,0))
Step 93:
    Current Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,0))
Step 94:
    Current Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,1))
Step 95:
    Current Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),0,1))
Step 96:
    Current Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 97:
    Current Sub-goals:
        [Index = 50] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 98:
    Current Sub-goals:
        [Index = 50] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 99:
    Current Sub-goals:
        [Index = 50] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 50] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 100:
    Current Sub-goals:
        [Index = 51] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 101:
    Current Sub-goals:
        [Index = 51] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 102:
    Current Sub-goals:
        [Index = 51] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 51] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 103:
    Current Sub-goals:
        [Index = 52] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 104:
    Current Sub-goals:
        [Index = 52] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 105:
    Current Sub-goals:
        [Index = 52] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 52] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 106:
    Current Sub-goals:
        [Index = 53] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 107:
    Current Sub-goals:
        [Index = 53] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 108:
    Current Sub-goals:
        [Index = 53] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
        [Index = 53] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Planned actions:
        talos : move(((store_room,0),2,1))
Step 109:
    Current Sub-goals:
        [Index = 54] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 110:
    Current Sub-goals:
        [Index = 54] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 111:
    Current Sub-goals:
        [Index = 54] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),0,0))
Step 112:
    Current Sub-goals:
        [Index = 54] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 54] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 113:
    Current Sub-goals:
        [Index = 55] talos : configure(manipulator_end_1,aligned_with((block,4))) -> configuration(manipulator_end_1) = aligned_with((block,4))
    Achieved Sub-goals:
        [Index = 55] talos : configure(manipulator_end_1,aligned_with((block,4))) -> configuration(manipulator_end_1) = aligned_with((block,4))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
Step 114:
    Current Sub-goals:
        [Index = 56] talos : grasp(manipulator_end_1,(block,4)) -> grasping(manipulator_end_1) = (block,4)
    Achieved Sub-goals:
        [Index = 56] talos : grasp(manipulator_end_1,(block,4)) -> grasping(manipulator_end_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
Step 115:
    Current Sub-goals:
        [Index = 57] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 57] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 116:
    Current Sub-goals:
        [Index = 58] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 117:
    Current Sub-goals:
        [Index = 58] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 118:
    Current Sub-goals:
        [Index = 58] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 58] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),3,0))
Step 119:
    Current Sub-goals:
        [Index = 59] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,0))
Step 120:
    Current Sub-goals:
        [Index = 59] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 121:
    Current Sub-goals:
        [Index = 59] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 122:
    Current Sub-goals:
        [Index = 59] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 59] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),0,1))

[18-04-2022_12-43-54] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[18-04-2022_12-43-54] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[18-04-2022_12-43-54] DEBUG :: ASH Planner Main #1 >> Monolevel problem 14 at level 1 solved.

[18-04-2022_12-43-54] DEBUG :: ASH Planner Main #1 >> Online planning increment 14 finished.

[18-04-2022_12-43-54] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 3 : Total constraining sub-goal stages = 20 : Goals achieved = 20 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 7 : Total constraining sub-goal stages = 42 : Goals achieved = 34 : Goals unachieved = 8 : Complete = False
Level = 1 : Solved problems = 14 : Total constraining sub-goal stages = 59 : Goals achieved = 59 : Goals unachieved = 0 : Complete = False

[18-04-2022_12-43-54] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 2, Highest = 2.

[18-04-2022_12-43-54] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 15 by method ground-first is [1-2].

[18-04-2022_12-43-54] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning problem 8 at level 2:
Total Templated Partial Problems = 3, Problem Range = [7-9], Size = 12, Sub-goal Stage Range = [31-42]
Division points [total=2] : [(Index = 34, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 38, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[18-04-2022_12-43-54] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [35-38]

[18-04-2022_12-43-54] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 59, chosen step range to extract = range(0, 60)

[18-04-2022_12-43-54] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 59, Total actions = 59, Produced sub-goal stages = 59, Produced sub-goal literals = 67
Level [1]: Length = 122, Total actions = 122, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-54] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 42, chosen step range to extract = range(0, 43)

[18-04-2022_12-43-54] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 59, Total actions = 59, Produced sub-goal stages = 59, Produced sub-goal literals = 67
Level [1]: Length = 122, Total actions = 122, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-54] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 20, chosen step range to extract = range(0, 21)

[18-04-2022_12-43-54] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 59, Total actions = 59, Produced sub-goal stages = 59, Produced sub-goal literals = 67
Level [1]: Length = 122, Total actions = 122, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-54] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [35-38], problem number = 8, increment number = 15

[18-04-2022_12-43-54] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 35)
	('last_sgoals', 38)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1786.8141065999962)
	('length_limit', 300)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[18-04-2022_12-43-54] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 2] partial conformance refinement (sequential) with sgoals range [35-38] : Concurrency disabled : Minimum search length bound enabled with value 62

[18-04-2022_12-43-54] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 35
last_sgoals = 38
start_step = 59
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 62

[18-04-2022_12-43-54] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[18-04-2022_12-43-54] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[18-04-2022_12-43-54] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[18-04-2022_12-43-54] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[18-04-2022_12-43-54] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-43-54] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 59 as problem start state.

[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,4))', 'S': 59})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 59})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 59})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 59})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 59})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 59})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 59})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'S': 59})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 59})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_1)', 'V': '(block,4)', 'S': 59})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 59})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': '(hallway,0)', 'S': 59})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': '(hallway,0)', 'S': 59})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': '(hallway,0)', 'S': 59})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': '(hallway,0)', 'S': 59})
Fluent({'L': 2, 'F': 'in(manipulator_end_1)', 'V': '(hallway,0)', 'S': 59})
Fluent({'L': 2, 'F': 'in(manipulator_end_2)', 'V': '(hallway,0)', 'S': 59})
Fluent({'L': 2, 'F': 'in(manipulator_limb_1)', 'V': '(hallway,0)', 'S': 59})
Fluent({'L': 2, 'F': 'in(manipulator_limb_2)', 'V': '(hallway,0)', 'S': 59})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 2, 'F': 'in(talos)', 'V': '(hallway,0)', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 59})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 59})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 59})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 59})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 59})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 59})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 59})
Fluent({'L': 3, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 59})
Fluent({'L': 3, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 59})
Fluent({'L': 3, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 59})
Fluent({'L': 3, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 59})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'S': 59})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 59})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 59})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 59})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 59})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'hallway', 'S': 59})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'hallway', 'S': 59})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 59})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'hallway', 'S': 59})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'hallway', 'S': 59})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 59})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'hallway', 'S': 59})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 59})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 59})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 59})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 59})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 59})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 59})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 59})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 59})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 59})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 59})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 59})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 59})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 59})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 59})

[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 157 rules into program part ash_initial_state:

holds(2, complete_tower(blue,puzzle_room_table), false, 59).
holds(2, complete_tower(red,puzzle_room_table), false, 59).
holds(2, configuration(manipulator_end_1), aligned_with((block,4)), 59).
holds(2, configuration(manipulator_end_2), aligned_with((block,5)), 59).
holds(2, configuration(manipulator_limb_1), retracted, 59).
holds(2, configuration(manipulator_limb_2), retracted, 59).
holds(2, configuration(puzzle_room_door), open, 59).
holds(2, configuration(starting_room_door), closed, 59).
holds(2, configuration(store_room_door), open, 59).
holds(2, grasping(manipulator_arm_1), (block,4), 59).
holds(2, grasping(manipulator_arm_2), (block,5), 59).
holds(2, grasping(manipulator_end_1), (block,4), 59).
holds(2, grasping(manipulator_end_2), (block,5), 59).
holds(2, in((block,1)), (puzzle_room,1), 59).
holds(2, in((block,2)), (puzzle_room,1), 59).
holds(2, in((block,3)), (puzzle_room,1), 59).
holds(2, in((block,4)), (hallway,0), 59).
holds(2, in((block,5)), (hallway,0), 59).
holds(2, in((block,6)), (puzzle_room,1), 59).
holds(2, in(manipulator_arm_1), (hallway,0), 59).
holds(2, in(manipulator_arm_2), (hallway,0), 59).
holds(2, in(manipulator_end_1), (hallway,0), 59).
holds(2, in(manipulator_end_2), (hallway,0), 59).
holds(2, in(manipulator_limb_1), (hallway,0), 59).
holds(2, in(manipulator_limb_2), (hallway,0), 59).
holds(2, in(puzzle_room_table), (puzzle_room,1), 59).
holds(2, in(puzzle_room_table_left), (puzzle_room,1), 59).
holds(2, in(puzzle_room_table_middle), (puzzle_room,1), 59).
holds(2, in(puzzle_room_table_right), (puzzle_room,1), 59).
holds(2, in(talos), (hallway,0), 59).
holds(2, in_tower((block,1),(block,1)), true, 59).
holds(2, in_tower((block,1),(block,2)), false, 59).
holds(2, in_tower((block,1),(block,3)), false, 59).
holds(2, in_tower((block,1),(block,4)), false, 59).
holds(2, in_tower((block,1),(block,5)), false, 59).
holds(2, in_tower((block,1),(block,6)), false, 59).
holds(2, in_tower((block,2),(block,1)), false, 59).
holds(2, in_tower((block,2),(block,2)), false, 59).
holds(2, in_tower((block,2),(block,3)), false, 59).
holds(2, in_tower((block,2),(block,4)), false, 59).
holds(2, in_tower((block,2),(block,5)), false, 59).
holds(2, in_tower((block,2),(block,6)), false, 59).
holds(2, in_tower((block,3),(block,1)), false, 59).
holds(2, in_tower((block,3),(block,2)), true, 59).
holds(2, in_tower((block,3),(block,3)), true, 59).
holds(2, in_tower((block,3),(block,4)), false, 59).
holds(2, in_tower((block,3),(block,5)), false, 59).
holds(2, in_tower((block,3),(block,6)), false, 59).
holds(2, in_tower((block,4),(block,1)), false, 59).
holds(2, in_tower((block,4),(block,2)), false, 59).
holds(2, in_tower((block,4),(block,3)), false, 59).
holds(2, in_tower((block,4),(block,4)), false, 59).
holds(2, in_tower((block,4),(block,5)), false, 59).
holds(2, in_tower((block,4),(block,6)), false, 59).
holds(2, in_tower((block,5),(block,1)), false, 59).
holds(2, in_tower((block,5),(block,2)), false, 59).
holds(2, in_tower((block,5),(block,3)), false, 59).
holds(2, in_tower((block,5),(block,4)), false, 59).
holds(2, in_tower((block,5),(block,5)), false, 59).
holds(2, in_tower((block,5),(block,6)), false, 59).
holds(2, in_tower((block,6),(block,1)), false, 59).
holds(2, in_tower((block,6),(block,2)), false, 59).
holds(2, in_tower((block,6),(block,3)), false, 59).
holds(2, in_tower((block,6),(block,4)), false, 59).
holds(2, in_tower((block,6),(block,5)), false, 59).
holds(2, in_tower((block,6),(block,6)), true, 59).
holds(2, on((block,1)), puzzle_room_table_left, 59).
holds(2, on((block,2)), (block,3), 59).
holds(2, on((block,3)), puzzle_room_table_left, 59).
holds(2, on((block,4)), nothing, 59).
holds(2, on((block,5)), nothing, 59).
holds(2, on((block,6)), puzzle_room_table_right, 59).
holds(2, tower_base((block,1),puzzle_room_table), true, 59).
holds(2, tower_base((block,2),puzzle_room_table), false, 59).
holds(2, tower_base((block,3),puzzle_room_table), true, 59).
holds(2, tower_base((block,4),puzzle_room_table), false, 59).
holds(2, tower_base((block,5),puzzle_room_table), false, 59).
holds(2, tower_base((block,6),puzzle_room_table), true, 59).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 59).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 59).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 59).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 59).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 59).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 59).
holds(3, complete_tower(blue,puzzle_room_table), false, 59).
holds(3, complete_tower(red,puzzle_room_table), false, 59).
holds(3, configuration(manipulator_arm_1), retracted, 59).
holds(3, configuration(manipulator_arm_2), retracted, 59).
holds(3, configuration(puzzle_room_door), open, 59).
holds(3, configuration(starting_room_door), closed, 59).
holds(3, configuration(store_room_door), open, 59).
holds(3, grasping(manipulator_arm_1), (block,4), 59).
holds(3, grasping(manipulator_arm_2), (block,5), 59).
holds(3, in((block,1)), puzzle_room, 59).
holds(3, in((block,2)), puzzle_room, 59).
holds(3, in((block,3)), puzzle_room, 59).
holds(3, in((block,4)), hallway, 59).
holds(3, in((block,5)), hallway, 59).
holds(3, in((block,6)), puzzle_room, 59).
holds(3, in(manipulator_arm_1), hallway, 59).
holds(3, in(manipulator_arm_2), hallway, 59).
holds(3, in(puzzle_room_table), puzzle_room, 59).
holds(3, in(talos), hallway, 59).
holds(3, in_tower((block,1),(block,1)), true, 59).
holds(3, in_tower((block,1),(block,2)), false, 59).
holds(3, in_tower((block,1),(block,3)), false, 59).
holds(3, in_tower((block,1),(block,4)), false, 59).
holds(3, in_tower((block,1),(block,5)), false, 59).
holds(3, in_tower((block,1),(block,6)), false, 59).
holds(3, in_tower((block,2),(block,1)), false, 59).
holds(3, in_tower((block,2),(block,2)), false, 59).
holds(3, in_tower((block,2),(block,3)), false, 59).
holds(3, in_tower((block,2),(block,4)), false, 59).
holds(3, in_tower((block,2),(block,5)), false, 59).
holds(3, in_tower((block,2),(block,6)), false, 59).
holds(3, in_tower((block,3),(block,1)), false, 59).
holds(3, in_tower((block,3),(block,2)), true, 59).
holds(3, in_tower((block,3),(block,3)), true, 59).
holds(3, in_tower((block,3),(block,4)), false, 59).
holds(3, in_tower((block,3),(block,5)), false, 59).
holds(3, in_tower((block,3),(block,6)), false, 59).
holds(3, in_tower((block,4),(block,1)), false, 59).
holds(3, in_tower((block,4),(block,2)), false, 59).
holds(3, in_tower((block,4),(block,3)), false, 59).
holds(3, in_tower((block,4),(block,4)), false, 59).
holds(3, in_tower((block,4),(block,5)), false, 59).
holds(3, in_tower((block,4),(block,6)), false, 59).
holds(3, in_tower((block,5),(block,1)), false, 59).
holds(3, in_tower((block,5),(block,2)), false, 59).
holds(3, in_tower((block,5),(block,3)), false, 59).
holds(3, in_tower((block,5),(block,4)), false, 59).
holds(3, in_tower((block,5),(block,5)), false, 59).
holds(3, in_tower((block,5),(block,6)), false, 59).
holds(3, in_tower((block,6),(block,1)), false, 59).
holds(3, in_tower((block,6),(block,2)), false, 59).
holds(3, in_tower((block,6),(block,3)), false, 59).
holds(3, in_tower((block,6),(block,4)), false, 59).
holds(3, in_tower((block,6),(block,5)), false, 59).
holds(3, in_tower((block,6),(block,6)), true, 59).
holds(3, on((block,1)), puzzle_room_table, 59).
holds(3, on((block,2)), (block,3), 59).
holds(3, on((block,3)), puzzle_room_table, 59).
holds(3, on((block,4)), nothing, 59).
holds(3, on((block,5)), nothing, 59).
holds(3, on((block,6)), puzzle_room_table, 59).
holds(3, tower_base((block,1),puzzle_room_table), true, 59).
holds(3, tower_base((block,2),puzzle_room_table), false, 59).
holds(3, tower_base((block,3),puzzle_room_table), true, 59).
holds(3, tower_base((block,4),puzzle_room_table), false, 59).
holds(3, tower_base((block,5),puzzle_room_table), false, 59).
holds(3, tower_base((block,6),puzzle_room_table), true, 59).
holds(3, unordered_tower((block,1),puzzle_room_table), false, 59).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 59).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 59).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 59).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 59).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 59).

[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 296 rules into program part ash_goal_state:

final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table_left, false).
final_goal(2, on((block,1)), puzzle_room_table_middle, false).
final_goal(2, on((block,1)), puzzle_room_table_right, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table_left, false).
final_goal(2, on((block,2)), puzzle_room_table_middle, false).
final_goal(2, on((block,2)), puzzle_room_table_right, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table_left, true).
final_goal(2, on((block,3)), puzzle_room_table_middle, false).
final_goal(2, on((block,3)), puzzle_room_table_right, false).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table_left, false).
final_goal(2, on((block,4)), puzzle_room_table_middle, false).
final_goal(2, on((block,4)), puzzle_room_table_right, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table_left, false).
final_goal(2, on((block,5)), puzzle_room_table_middle, false).
final_goal(2, on((block,5)), puzzle_room_table_right, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table_left, false).
final_goal(2, on((block,6)), puzzle_room_table_middle, false).
final_goal(2, on((block,6)), puzzle_room_table_right, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).

[18-04-2022_12-43-54] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=62']

[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 35})
SubGoal({'L': 3, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 36})
SubGoal({'L': 3, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 37})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 38})

[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 4 rules into program part base:

sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 35).
sub_goal(3, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 36).
sub_goal(3, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 37).
sub_goal(3, talos, put(manipulator_arm_2,(block,5),(block,6)), on((block,5)), (block,6), 38).

[18-04-2022_12-43-54] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=62']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A8A41B1E50>]
	incrementor = SolveIncrementor(step_start=59, step_increase=1, step_increase_initial=4, step_end_min=63, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1786.8141065999962, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 59), range_=None), IncPart(name='plan_module', args=('#inc', 59, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 59, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 59, 35, 38, 'sequential', 'false'), range_=None)]

[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 826 rules

[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.005165300000044226s

[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[18-04-2022_12-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.158732s.

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022669s with result Satisfiable.

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A8A4C8C3B0>

[18-04-2022_12-43-55] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 2)
	('start_step', 59)
	('last_sgoals', 38)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('first_sgoals', 35)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A8A4C8C3B0>)

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 59). %* None *%
#program plan_module(#inc, 59, false, false). %* None *%
#program optimisation_module(#inc, 59, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 59, 35, 38, sequential, false). %* None *%

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     58 : Current =     62
Incrementor step ends | Minimum  =     63 : Maximum =    300

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(62)]), ('state_module', [Number(59), Number(59)]), ('plan_module', [Number(59), Number(59), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(59), Number(59), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(59)]), ('action_preconditions', [Number(59)]), ('variable_relations', [Number(59)]), ('abstraction_mappings', [Number(59)]), ('conformance_module', [Number(59), Number(59), Number(35), Number(38), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(60), Number(59)]), ('plan_module', [Number(60), Number(59), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(60), Number(59), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(60)]), ('action_preconditions', [Number(60)]), ('variable_relations', [Number(60)]), ('abstraction_mappings', [Number(60)]), ('conformance_module', [Number(60), Number(59), Number(35), Number(38), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(61), Number(59)]), ('plan_module', [Number(61), Number(59), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(61), Number(59), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(61)]), ('action_preconditions', [Number(61)]), ('variable_relations', [Number(61)]), ('abstraction_mappings', [Number(61)]), ('conformance_module', [Number(61), Number(59), Number(35), Number(38), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(62), Number(59)]), ('plan_module', [Number(62), Number(59), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(62), Number(59), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(62)]), ('action_preconditions', [Number(62)]), ('variable_relations', [Number(62)]), ('abstraction_mappings', [Number(62)]), ('conformance_module', [Number(62), Number(59), Number(35), Number(38), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.249501s.

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.052294s with result Unsatisfiable.

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3017944000002899, Incremental time limit = None
Running cumulative time = 0.3017944000002899, Cumulative time limit = 1786.8141065999962
Used memory = (RSS = 2478.152344Mb, VMS = 2491.757812Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     62 : Current =     63
Incrementor step ends | Minimum  =     63 : Maximum =    300

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(63)]), ('state_module', [Number(63), Number(59)]), ('plan_module', [Number(63), Number(59), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(63), Number(59), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(63)]), ('action_preconditions', [Number(63)]), ('variable_relations', [Number(63)]), ('abstraction_mappings', [Number(63)]), ('conformance_module', [Number(63), Number(59), Number(35), Number(38), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.102233s.

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011724s with result Unsatisfiable.

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11395749999883265, Incremental time limit = None
Running cumulative time = 0.41575189999912254, Cumulative time limit = 1786.8141065999962
Used memory = (RSS = 2478.152344Mb, VMS = 2491.757812Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     63 : Current =     64
Incrementor step ends | Minimum  =     63 : Maximum =    300

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(64)]), ('state_module', [Number(64), Number(59)]), ('plan_module', [Number(64), Number(59), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(64), Number(59), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(64)]), ('action_preconditions', [Number(64)]), ('variable_relations', [Number(64)]), ('abstraction_mappings', [Number(64)]), ('conformance_module', [Number(64), Number(59), Number(35), Number(38), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.103505s.

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.014857s with result Unsatisfiable.

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11836199999925157, Incremental time limit = None
Running cumulative time = 0.5341138999983741, Cumulative time limit = 1786.8141065999962
Used memory = (RSS = 2479.246094Mb, VMS = 2492.855469Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     64 : Current =     65
Incrementor step ends | Minimum  =     63 : Maximum =    300

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(65)]), ('state_module', [Number(65), Number(59)]), ('plan_module', [Number(65), Number(59), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(65), Number(59), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(65)]), ('action_preconditions', [Number(65)]), ('variable_relations', [Number(65)]), ('abstraction_mappings', [Number(65)]), ('conformance_module', [Number(65), Number(59), Number(35), Number(38), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.108643s.

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.021325s with result Unsatisfiable.

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.12996789999942848, Incremental time limit = None
Running cumulative time = 0.6640817999978026, Cumulative time limit = 1786.8141065999962
Used memory = (RSS = 2479.460938Mb, VMS = 2493.070312Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     65 : Current =     66
Incrementor step ends | Minimum  =     63 : Maximum =    300

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(66)]), ('state_module', [Number(66), Number(59)]), ('plan_module', [Number(66), Number(59), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(66), Number(59), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(66)]), ('action_preconditions', [Number(66)]), ('variable_relations', [Number(66)]), ('abstraction_mappings', [Number(66)]), ('conformance_module', [Number(66), Number(59), Number(35), Number(38), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.109011s.

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.036615s with result Satisfiable.

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.14562620000015158, Incremental time limit = None
Running cumulative time = 0.8097079999979542, Cumulative time limit = 1786.8141065999962
Used memory = (RSS = 2481.746094Mb, VMS = 2495.296875Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.672893s, Solving = 0.136815s, Total = 0.809708s, Memory = (RSS = 2481.746094Mb, VMS = 2495.296875Mb), Step range = [59-66]), Calls = 5
Final Model :: Total atoms = 19907, Cost = (-1,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.249501s, Solving = 0.052294s, Total = 0.301794s, Memory = (RSS = 2478.152344Mb, VMS = 2491.757812Mb), Step range = [59-62]
2 : Statistics :: Grounding = 0.102233s, Solving = 0.011724s, Total = 0.113957s, Memory = (RSS = 2478.152344Mb, VMS = 2491.757812Mb), Step range = [63-63]
3 : Statistics :: Grounding = 0.103505s, Solving = 0.014857s, Total = 0.118362s, Memory = (RSS = 2479.246094Mb, VMS = 2492.855469Mb), Step range = [64-64]
4 : Statistics :: Grounding = 0.108643s, Solving = 0.021325s, Total = 0.129968s, Memory = (RSS = 2479.460938Mb, VMS = 2493.070312Mb), Step range = [65-65]
5 : Statistics :: Grounding = 0.109011s, Solving = 0.036615s, Total = 0.145626s, Memory = (RSS = 2481.746094Mb, VMS = 2495.296875Mb), Step range = [66-66]

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.809708s due to: Stop condition reached.

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38, 81: 39, 82: 40, 83: 41, 84: 42, 85: 43, 86: 44, 87: 45, 88: 46, 89: 47, 90: 48, 91: 48, 92: 48, 93: 49, 94: 49, 95: 49, 96: 49, 97: 50, 98: 50, 99: 50, 100: 51, 101: 51, 102: 51, 103: 52, 104: 52, 105: 52, 106: 53, 107: 53, 108: 53, 109: 54, 110: 54, 111: 54, 112: 54, 113: 55, 114: 56, 115: 57, 116: 58, 117: 58, 118: 58, 119: 59, 120: 59, 121: 59, 122: 59}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80, 39: 81, 40: 82, 41: 83, 42: 84, 43: 85, 44: 86, 45: 87, 46: 88, 47: 89, 48: 92, 49: 96, 50: 99, 51: 102, 52: 105, 53: 108, 54: 112, 55: 113, 56: 114, 57: 115, 58: 118, 59: 122}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24, 43: 25, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29, 49: 29, 50: 30, 51: 30, 52: 30, 53: 31, 54: 31, 55: 32, 56: 32, 57: 33, 58: 34, 59: 34}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42, 25: 44, 26: 45, 27: 46, 28: 47, 29: 49, 30: 52, 31: 54, 32: 56, 33: 57, 34: 59}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13, 31: 14, 32: 14, 33: 15, 34: 15, 35: 15, 36: 16, 37: 16, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30, 14: 32, 15: 35, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38, 81: 39, 82: 40, 83: 41, 84: 42, 85: 43, 86: 44, 87: 45, 88: 46, 89: 47, 90: 48, 91: 48, 92: 48, 93: 49, 94: 49, 95: 49, 96: 49, 97: 50, 98: 50, 99: 50, 100: 51, 101: 51, 102: 51, 103: 52, 104: 52, 105: 52, 106: 53, 107: 53, 108: 53, 109: 54, 110: 54, 111: 54, 112: 54, 113: 55, 114: 56, 115: 57, 116: 58, 117: 58, 118: 58, 119: 59, 120: 59, 121: 59, 122: 59}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80, 39: 81, 40: 82, 41: 83, 42: 84, 43: 85, 44: 86, 45: 87, 46: 88, 47: 89, 48: 92, 49: 96, 50: 99, 51: 102, 52: 105, 53: 108, 54: 112, 55: 113, 56: 114, 57: 115, 58: 118, 59: 122}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24, 43: 25, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29, 49: 29, 50: 30, 51: 30, 52: 30, 53: 31, 54: 31, 55: 32, 56: 32, 57: 33, 58: 34, 59: 34, 60: 35, 61: 35, 62: 35, 63: 36, 64: 36, 65: 37, 66: 38}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42, 25: 44, 26: 45, 27: 46, 28: 47, 29: 49, 30: 52, 31: 54, 32: 56, 33: 57, 34: 59, 35: 62, 36: 64, 37: 65, 38: 66}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13, 31: 14, 32: 14, 33: 15, 34: 15, 35: 15, 36: 16, 37: 16, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30, 14: 32, 15: 35, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 38, Last requested goal index = 38, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.672893s, Solving = 0.136815s, Total = 0.809708s, Memory = (RSS = 2481.746094Mb, VMS = 2495.296875Mb), Step range = [59-66]), Calls = 5
Model :: Total atoms = 19907, Cost = (-1,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                  Steps = 7 :: Actions = 7                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 25:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 26:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 27:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 28:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 29:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 30:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : move((store_room,1))
Step 31:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 37:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 38:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 39:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 40:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 41:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 42:
    Current Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 43:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 44:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 45:
    Current Sub-goals:
        [Index = 26] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 26] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 46:
    Current Sub-goals:
        [Index = 27] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 27] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,2))
Step 47:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 48:
    Current Sub-goals:
        [Index = 29] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 49:
    Current Sub-goals:
        [Index = 29] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 29] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 50:
    Current Sub-goals:
        [Index = 30] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 51:
    Current Sub-goals:
        [Index = 30] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 52:
    Current Sub-goals:
        [Index = 30] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 30] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 53:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 54:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 55:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
Step 56:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
Step 57:
    Current Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 58:
    Current Sub-goals:
        [Index = 34] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 59:
    Current Sub-goals:
        [Index = 34] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 34] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 60:
    Current Sub-goals:
        [Index = 35] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 61:
    Current Sub-goals:
        [Index = 35] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 62:
    Current Sub-goals:
        [Index = 35] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 35] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 63:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 64:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 36] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 65:
    Current Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 66:
    Current Sub-goals:
        [Index = 38] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 38] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=59, end_step=None

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for parts of the existing plan at the current level that have already been divided: start_step=59

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> Value of end step of abstract plan to divide adjusted for right blend of current problem: end_step=66

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=59

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> Preparing to invoke division strategy...

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> Online method OnlineMethod.GroundFirst chose to invoke the division strategy before a downwards level change:Current increment = 15, Current planning level is complete = False

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 66, chosen step range to extract = range(59, 67)

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 66, Total actions = 66, Produced sub-goal stages = 66, Produced sub-goal literals = 74
Level [1]: Length = 122, Total actions = 122, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =   7, AC =   7, CF = 1.0, GT =   6.54s, ST =   1.52s, OT = 0.00s, TT =   8.07s, EF = (LE = 1.8, AC = 1.8), ED = (LE = 1.0, AC = 1.0), EB = (LE = 0.5, AC = 0.5)

[18-04-2022_12-43-56] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=7, start_step=59, blend=Blend(left=0, right=0)

[18-04-2022_12-43-56] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=1, small_group_size=3, large_group_size=4

[18-04-2022_12-43-56] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=62, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 2, Problem Range = [15-16], Size = 7, Sub-goal Stage Range = [60-66]
Division points [total=1] : [(Index = 62, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> Monolevel problem 8 at level 2 solved.

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 15 at level 1:
Total Templated Partial Problems = 2, Problem Range = [15-16], Size = 7, Sub-goal Stage Range = [60-66]
Division points [total=1] : [(Index = 62, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [60-62]

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 122, chosen step range to extract = range(0, 123)

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 66, Total actions = 66, Produced sub-goal stages = 66, Produced sub-goal literals = 74
Level [1]: Length = 122, Total actions = 122, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 66, chosen step range to extract = range(0, 67)

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 66, Total actions = 66, Produced sub-goal stages = 66, Produced sub-goal literals = 74
Level [1]: Length = 122, Total actions = 122, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 42, chosen step range to extract = range(0, 43)

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 66, Total actions = 66, Produced sub-goal stages = 66, Produced sub-goal literals = 74
Level [1]: Length = 122, Total actions = 122, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 20, chosen step range to extract = range(0, 21)

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 66, Total actions = 66, Produced sub-goal stages = 66, Produced sub-goal literals = 74
Level [1]: Length = 122, Total actions = 122, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [60-62], problem number = 15, increment number = 15

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 60)
	('last_sgoals', 62)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1741.9311370999949)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [60-62] : Concurrency disabled : Minimum search length bound enabled with value 124

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 60
last_sgoals = 62
start_step = 122
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 124

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[18-04-2022_12-43-56] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[18-04-2022_12-43-56] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[18-04-2022_12-43-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[18-04-2022_12-43-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[18-04-2022_12-43-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-43-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-43-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-43-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 122 as problem start state.

[18-04-2022_12-43-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,4))', 'S': 122})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 122})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 122})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 122})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 122})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 122})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 122})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,4)', 'S': 122})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 122})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '((puzzle_room,1),5,0)', 'S': 122})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '((puzzle_room,1),5,0)', 'S': 122})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '((puzzle_room,1),5,0)', 'S': 122})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '((hallway,0),0,1)', 'S': 122})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '((hallway,0),0,1)', 'S': 122})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '((puzzle_room,1),5,0)', 'S': 122})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '((hallway,0),0,1)', 'S': 122})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '((hallway,0),0,1)', 'S': 122})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '((hallway,0),0,1)', 'S': 122})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '((hallway,0),0,1)', 'S': 122})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '((hallway,0),0,1)', 'S': 122})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '((hallway,0),0,1)', 'S': 122})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '((puzzle_room,1),5,0)', 'S': 122})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '((puzzle_room,1),5,0)', 'S': 122})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '((puzzle_room,1),5,0)', 'S': 122})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '((puzzle_room,1),5,0)', 'S': 122})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '((hallway,0),0,1)', 'S': 122})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 122})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 122})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 122})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 122})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 122})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 122})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 122})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 122})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 122})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 122})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 122})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 122})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 122})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 122})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,4))', 'S': 122})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 122})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 122})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 122})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 122})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 122})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 122})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_1)', 'V': '(block,4)', 'S': 122})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 122})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 122})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 122})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 122})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': '(hallway,0)', 'S': 122})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': '(hallway,0)', 'S': 122})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 122})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': '(hallway,0)', 'S': 122})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': '(hallway,0)', 'S': 122})
Fluent({'L': 2, 'F': 'in(manipulator_end_1)', 'V': '(hallway,0)', 'S': 122})
Fluent({'L': 2, 'F': 'in(manipulator_end_2)', 'V': '(hallway,0)', 'S': 122})
Fluent({'L': 2, 'F': 'in(manipulator_limb_1)', 'V': '(hallway,0)', 'S': 122})
Fluent({'L': 2, 'F': 'in(manipulator_limb_2)', 'V': '(hallway,0)', 'S': 122})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 122})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 122})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 122})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 122})
Fluent({'L': 2, 'F': 'in(talos)', 'V': '(hallway,0)', 'S': 122})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 122})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 122})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 122})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 122})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 122})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 122})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 122})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 122})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 122})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 122})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 122})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 122})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 122})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 122})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 122})

[18-04-2022_12-43-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 164 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 122).
holds(1, complete_tower(red,puzzle_room_table), false, 122).
holds(1, configuration(manipulator_end_1), aligned_with((block,4)), 122).
holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 122).
holds(1, configuration(manipulator_limb_1), retracted, 122).
holds(1, configuration(manipulator_limb_2), retracted, 122).
holds(1, configuration(puzzle_room_door), open, 122).
holds(1, configuration(starting_room_door), closed, 122).
holds(1, configuration(store_room_door), open, 122).
holds(1, grasping(manipulator_end_1), (block,4), 122).
holds(1, grasping(manipulator_end_2), (block,5), 122).
holds(1, in((block,1)), ((puzzle_room,1),5,0), 122).
holds(1, in((block,2)), ((puzzle_room,1),5,0), 122).
holds(1, in((block,3)), ((puzzle_room,1),5,0), 122).
holds(1, in((block,4)), ((hallway,0),0,1), 122).
holds(1, in((block,5)), ((hallway,0),0,1), 122).
holds(1, in((block,6)), ((puzzle_room,1),5,0), 122).
holds(1, in(manipulator_arm_1), ((hallway,0),0,1), 122).
holds(1, in(manipulator_arm_2), ((hallway,0),0,1), 122).
holds(1, in(manipulator_end_1), ((hallway,0),0,1), 122).
holds(1, in(manipulator_end_2), ((hallway,0),0,1), 122).
holds(1, in(manipulator_limb_1), ((hallway,0),0,1), 122).
holds(1, in(manipulator_limb_2), ((hallway,0),0,1), 122).
holds(1, in(puzzle_room_table), ((puzzle_room,1),5,0), 122).
holds(1, in(puzzle_room_table_left), ((puzzle_room,1),5,0), 122).
holds(1, in(puzzle_room_table_middle), ((puzzle_room,1),5,0), 122).
holds(1, in(puzzle_room_table_right), ((puzzle_room,1),5,0), 122).
holds(1, in(talos), ((hallway,0),0,1), 122).
holds(1, in_tower((block,1),(block,1)), true, 122).
holds(1, in_tower((block,1),(block,2)), false, 122).
holds(1, in_tower((block,1),(block,3)), false, 122).
holds(1, in_tower((block,1),(block,4)), false, 122).
holds(1, in_tower((block,1),(block,5)), false, 122).
holds(1, in_tower((block,1),(block,6)), false, 122).
holds(1, in_tower((block,2),(block,1)), false, 122).
holds(1, in_tower((block,2),(block,2)), false, 122).
holds(1, in_tower((block,2),(block,3)), false, 122).
holds(1, in_tower((block,2),(block,4)), false, 122).
holds(1, in_tower((block,2),(block,5)), false, 122).
holds(1, in_tower((block,2),(block,6)), false, 122).
holds(1, in_tower((block,3),(block,1)), false, 122).
holds(1, in_tower((block,3),(block,2)), true, 122).
holds(1, in_tower((block,3),(block,3)), true, 122).
holds(1, in_tower((block,3),(block,4)), false, 122).
holds(1, in_tower((block,3),(block,5)), false, 122).
holds(1, in_tower((block,3),(block,6)), false, 122).
holds(1, in_tower((block,4),(block,1)), false, 122).
holds(1, in_tower((block,4),(block,2)), false, 122).
holds(1, in_tower((block,4),(block,3)), false, 122).
holds(1, in_tower((block,4),(block,4)), false, 122).
holds(1, in_tower((block,4),(block,5)), false, 122).
holds(1, in_tower((block,4),(block,6)), false, 122).
holds(1, in_tower((block,5),(block,1)), false, 122).
holds(1, in_tower((block,5),(block,2)), false, 122).
holds(1, in_tower((block,5),(block,3)), false, 122).
holds(1, in_tower((block,5),(block,4)), false, 122).
holds(1, in_tower((block,5),(block,5)), false, 122).
holds(1, in_tower((block,5),(block,6)), false, 122).
holds(1, in_tower((block,6),(block,1)), false, 122).
holds(1, in_tower((block,6),(block,2)), false, 122).
holds(1, in_tower((block,6),(block,3)), false, 122).
holds(1, in_tower((block,6),(block,4)), false, 122).
holds(1, in_tower((block,6),(block,5)), false, 122).
holds(1, in_tower((block,6),(block,6)), true, 122).
holds(1, on((block,1)), puzzle_room_table_left, 122).
holds(1, on((block,2)), (block,3), 122).
holds(1, on((block,3)), puzzle_room_table_left, 122).
holds(1, on((block,4)), nothing, 122).
holds(1, on((block,5)), nothing, 122).
holds(1, on((block,6)), puzzle_room_table_right, 122).
holds(1, tower_base((block,1),puzzle_room_table), true, 122).
holds(1, tower_base((block,2),puzzle_room_table), false, 122).
holds(1, tower_base((block,3),puzzle_room_table), true, 122).
holds(1, tower_base((block,4),puzzle_room_table), false, 122).
holds(1, tower_base((block,5),puzzle_room_table), false, 122).
holds(1, tower_base((block,6),puzzle_room_table), true, 122).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 122).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 122).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 122).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 122).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 122).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 122).
holds(2, complete_tower(blue,puzzle_room_table), false, 122).
holds(2, complete_tower(red,puzzle_room_table), false, 122).
holds(2, configuration(manipulator_end_1), aligned_with((block,4)), 122).
holds(2, configuration(manipulator_end_2), aligned_with((block,5)), 122).
holds(2, configuration(manipulator_limb_1), retracted, 122).
holds(2, configuration(manipulator_limb_2), retracted, 122).
holds(2, configuration(puzzle_room_door), open, 122).
holds(2, configuration(starting_room_door), closed, 122).
holds(2, configuration(store_room_door), open, 122).
holds(2, grasping(manipulator_end_1), (block,4), 122).
holds(2, grasping(manipulator_end_2), (block,5), 122).
holds(2, in((block,1)), (puzzle_room,1), 122).
holds(2, in((block,2)), (puzzle_room,1), 122).
holds(2, in((block,3)), (puzzle_room,1), 122).
holds(2, in((block,4)), (hallway,0), 122).
holds(2, in((block,5)), (hallway,0), 122).
holds(2, in((block,6)), (puzzle_room,1), 122).
holds(2, in(manipulator_arm_1), (hallway,0), 122).
holds(2, in(manipulator_arm_2), (hallway,0), 122).
holds(2, in(manipulator_end_1), (hallway,0), 122).
holds(2, in(manipulator_end_2), (hallway,0), 122).
holds(2, in(manipulator_limb_1), (hallway,0), 122).
holds(2, in(manipulator_limb_2), (hallway,0), 122).
holds(2, in(puzzle_room_table), (puzzle_room,1), 122).
holds(2, in(puzzle_room_table_left), (puzzle_room,1), 122).
holds(2, in(puzzle_room_table_middle), (puzzle_room,1), 122).
holds(2, in(puzzle_room_table_right), (puzzle_room,1), 122).
holds(2, in(talos), (hallway,0), 122).
holds(2, in_tower((block,1),(block,1)), true, 122).
holds(2, in_tower((block,1),(block,2)), false, 122).
holds(2, in_tower((block,1),(block,3)), false, 122).
holds(2, in_tower((block,1),(block,4)), false, 122).
holds(2, in_tower((block,1),(block,5)), false, 122).
holds(2, in_tower((block,1),(block,6)), false, 122).
holds(2, in_tower((block,2),(block,1)), false, 122).
holds(2, in_tower((block,2),(block,2)), false, 122).
holds(2, in_tower((block,2),(block,3)), false, 122).
holds(2, in_tower((block,2),(block,4)), false, 122).
holds(2, in_tower((block,2),(block,5)), false, 122).
holds(2, in_tower((block,2),(block,6)), false, 122).
holds(2, in_tower((block,3),(block,1)), false, 122).
holds(2, in_tower((block,3),(block,2)), true, 122).
holds(2, in_tower((block,3),(block,3)), true, 122).
holds(2, in_tower((block,3),(block,4)), false, 122).
holds(2, in_tower((block,3),(block,5)), false, 122).
holds(2, in_tower((block,3),(block,6)), false, 122).
holds(2, in_tower((block,4),(block,1)), false, 122).
holds(2, in_tower((block,4),(block,2)), false, 122).
holds(2, in_tower((block,4),(block,3)), false, 122).
holds(2, in_tower((block,4),(block,4)), false, 122).
holds(2, in_tower((block,4),(block,5)), false, 122).
holds(2, in_tower((block,4),(block,6)), false, 122).
holds(2, in_tower((block,5),(block,1)), false, 122).
holds(2, in_tower((block,5),(block,2)), false, 122).
holds(2, in_tower((block,5),(block,3)), false, 122).
holds(2, in_tower((block,5),(block,4)), false, 122).
holds(2, in_tower((block,5),(block,5)), false, 122).
holds(2, in_tower((block,5),(block,6)), false, 122).
holds(2, in_tower((block,6),(block,1)), false, 122).
holds(2, in_tower((block,6),(block,2)), false, 122).
holds(2, in_tower((block,6),(block,3)), false, 122).
holds(2, in_tower((block,6),(block,4)), false, 122).
holds(2, in_tower((block,6),(block,5)), false, 122).
holds(2, in_tower((block,6),(block,6)), true, 122).
holds(2, on((block,1)), puzzle_room_table_left, 122).
holds(2, on((block,2)), (block,3), 122).
holds(2, on((block,3)), puzzle_room_table_left, 122).
holds(2, on((block,4)), nothing, 122).
holds(2, on((block,5)), nothing, 122).
holds(2, on((block,6)), puzzle_room_table_right, 122).
holds(2, tower_base((block,1),puzzle_room_table), true, 122).
holds(2, tower_base((block,2),puzzle_room_table), false, 122).
holds(2, tower_base((block,3),puzzle_room_table), true, 122).
holds(2, tower_base((block,4),puzzle_room_table), false, 122).
holds(2, tower_base((block,5),puzzle_room_table), false, 122).
holds(2, tower_base((block,6),puzzle_room_table), true, 122).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 122).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 122).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 122).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 122).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 122).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 122).

[18-04-2022_12-43-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[18-04-2022_12-43-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 308 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table_left, false).
final_goal(2, on((block,1)), puzzle_room_table_middle, false).
final_goal(2, on((block,1)), puzzle_room_table_right, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table_left, false).
final_goal(2, on((block,2)), puzzle_room_table_middle, false).
final_goal(2, on((block,2)), puzzle_room_table_right, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table_left, true).
final_goal(2, on((block,3)), puzzle_room_table_middle, false).
final_goal(2, on((block,3)), puzzle_room_table_right, false).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table_left, false).
final_goal(2, on((block,4)), puzzle_room_table_middle, false).
final_goal(2, on((block,4)), puzzle_room_table_right, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table_left, false).
final_goal(2, on((block,5)), puzzle_room_table_middle, false).
final_goal(2, on((block,5)), puzzle_room_table_right, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table_left, false).
final_goal(2, on((block,6)), puzzle_room_table_middle, false).
final_goal(2, on((block,6)), puzzle_room_table_right, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=124']

[18-04-2022_12-43-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((hallway,1))', 'F': 'in(talos)', 'V': '(hallway,1)', 'I': 60})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((hallway,2))', 'F': 'in(talos)', 'V': '(hallway,2)', 'I': 61})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'F': 'in(talos)', 'V': '(puzzle_room,0)', 'I': 62})

[18-04-2022_12-43-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-43-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 3 rules into program part base:

sub_goal(2, talos, move((hallway,1)), in(talos), (hallway,1), 60).
sub_goal(2, talos, move((hallway,2)), in(talos), (hallway,2), 61).
sub_goal(2, talos, move((puzzle_room,0)), in(talos), (puzzle_room,0), 62).

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-43-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[18-04-2022_12-43-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=124']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A8A41B1DC0>]
	incrementor = SolveIncrementor(step_start=122, step_increase=1, step_increase_initial=3, step_end_min=125, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1741.9311370999949, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 122), range_=None), IncPart(name='plan_module', args=('#inc', 122, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 122, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 122, 60, 62, 'sequential', 'false'), range_=None)]

[18-04-2022_12-43-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-43-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-43-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 844 rules

[18-04-2022_12-43-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004595099999278318s

[18-04-2022_12-43-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[18-04-2022_12-43-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[18-04-2022_12-43-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.170651s.

[18-04-2022_12-43-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.024929s with result Satisfiable.

[18-04-2022_12-43-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[18-04-2022_12-43-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A8A45542C0>

[18-04-2022_12-43-56] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 122)
	('last_sgoals', 62)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('first_sgoals', 60)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A8A45542C0>)

[18-04-2022_12-43-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 122). %* None *%
#program plan_module(#inc, 122, false, false). %* None *%
#program optimisation_module(#inc, 122, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 122, 60, 62, sequential, false). %* None *%

[18-04-2022_12-43-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =    121 : Current =    124
Incrementor step ends | Minimum  =    125 : Maximum =    300

[18-04-2022_12-43-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(124)]), ('state_module', [Number(122), Number(122)]), ('plan_module', [Number(122), Number(122), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(122), Number(122), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(122)]), ('action_preconditions', [Number(122)]), ('variable_relations', [Number(122)]), ('abstraction_mappings', [Number(122)]), ('conformance_module', [Number(122), Number(122), Number(60), Number(62), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(123), Number(122)]), ('plan_module', [Number(123), Number(122), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(123), Number(122), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(123)]), ('action_preconditions', [Number(123)]), ('variable_relations', [Number(123)]), ('abstraction_mappings', [Number(123)]), ('conformance_module', [Number(123), Number(122), Number(60), Number(62), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(124), Number(122)]), ('plan_module', [Number(124), Number(122), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(124), Number(122), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(124)]), ('action_preconditions', [Number(124)]), ('variable_relations', [Number(124)]), ('abstraction_mappings', [Number(124)]), ('conformance_module', [Number(124), Number(122), Number(60), Number(62), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.568624s.

[18-04-2022_12-43-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.093450s with result Unsatisfiable.

[18-04-2022_12-43-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.6620742999994036, Incremental time limit = None
Running cumulative time = 0.6620742999994036, Cumulative time limit = 1741.9311370999949
Used memory = (RSS = 2479.738281Mb, VMS = 2493.285156Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =    124 : Current =    125
Incrementor step ends | Minimum  =    125 : Maximum =    300

[18-04-2022_12-43-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(125)]), ('state_module', [Number(125), Number(122)]), ('plan_module', [Number(125), Number(122), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(125), Number(122), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(125)]), ('action_preconditions', [Number(125)]), ('variable_relations', [Number(125)]), ('abstraction_mappings', [Number(125)]), ('conformance_module', [Number(125), Number(122), Number(60), Number(62), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.243804s.

[18-04-2022_12-43-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.021294s with result Unsatisfiable.

[18-04-2022_12-43-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2650985000000219, Incremental time limit = None
Running cumulative time = 0.9271727999994255, Cumulative time limit = 1741.9311370999949
Used memory = (RSS = 2479.964844Mb, VMS = 2493.484375Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =    125 : Current =    126
Incrementor step ends | Minimum  =    125 : Maximum =    300

[18-04-2022_12-43-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(126)]), ('state_module', [Number(126), Number(122)]), ('plan_module', [Number(126), Number(122), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(126), Number(122), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(126)]), ('action_preconditions', [Number(126)]), ('variable_relations', [Number(126)]), ('abstraction_mappings', [Number(126)]), ('conformance_module', [Number(126), Number(122), Number(60), Number(62), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.263668s.

[18-04-2022_12-43-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.024810s with result Unsatisfiable.

[18-04-2022_12-43-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.28847809999933816, Incremental time limit = None
Running cumulative time = 1.2156508999987636, Cumulative time limit = 1741.9311370999949
Used memory = (RSS = 2480.429688Mb, VMS = 2493.765625Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =    126 : Current =    127
Incrementor step ends | Minimum  =    125 : Maximum =    300

[18-04-2022_12-43-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(127)]), ('state_module', [Number(127), Number(122)]), ('plan_module', [Number(127), Number(122), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(127), Number(122), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(127)]), ('action_preconditions', [Number(127)]), ('variable_relations', [Number(127)]), ('abstraction_mappings', [Number(127)]), ('conformance_module', [Number(127), Number(122), Number(60), Number(62), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.270197s.

[18-04-2022_12-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.038521s with result Unsatisfiable.

[18-04-2022_12-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3087185000003956, Incremental time limit = None
Running cumulative time = 1.5243693999991592, Cumulative time limit = 1741.9311370999949
Used memory = (RSS = 2487.429688Mb, VMS = 2502.617188Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =    127 : Current =    128
Incrementor step ends | Minimum  =    125 : Maximum =    300

[18-04-2022_12-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(128)]), ('state_module', [Number(128), Number(122)]), ('plan_module', [Number(128), Number(122), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(128), Number(122), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(128)]), ('action_preconditions', [Number(128)]), ('variable_relations', [Number(128)]), ('abstraction_mappings', [Number(128)]), ('conformance_module', [Number(128), Number(122), Number(60), Number(62), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.294567s.

[18-04-2022_12-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.052126s with result Unsatisfiable.

[18-04-2022_12-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.34669299999950454, Incremental time limit = None
Running cumulative time = 1.8710623999986638, Cumulative time limit = 1741.9311370999949
Used memory = (RSS = 2490.148438Mb, VMS = 2504.503906Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =    128 : Current =    129
Incrementor step ends | Minimum  =    125 : Maximum =    300

[18-04-2022_12-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(129)]), ('state_module', [Number(129), Number(122)]), ('plan_module', [Number(129), Number(122), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(129), Number(122), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(129)]), ('action_preconditions', [Number(129)]), ('variable_relations', [Number(129)]), ('abstraction_mappings', [Number(129)]), ('conformance_module', [Number(129), Number(122), Number(60), Number(62), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.301043s.

[18-04-2022_12-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.060430s with result Unsatisfiable.

[18-04-2022_12-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3614734999991924, Incremental time limit = None
Running cumulative time = 2.232535899997856, Cumulative time limit = 1741.9311370999949
Used memory = (RSS = 2492.214844Mb, VMS = 2508.699219Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =    129 : Current =    130
Incrementor step ends | Minimum  =    125 : Maximum =    300

[18-04-2022_12-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(130)]), ('state_module', [Number(130), Number(122)]), ('plan_module', [Number(130), Number(122), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(130), Number(122), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(130)]), ('action_preconditions', [Number(130)]), ('variable_relations', [Number(130)]), ('abstraction_mappings', [Number(130)]), ('conformance_module', [Number(130), Number(122), Number(60), Number(62), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.310918s.

[18-04-2022_12-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.073460s with result Unsatisfiable.

[18-04-2022_12-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.38437789999989036, Incremental time limit = None
Running cumulative time = 2.6169137999977465, Cumulative time limit = 1741.9311370999949
Used memory = (RSS = 2494.316406Mb, VMS = 2509.218750Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =    130 : Current =    131
Incrementor step ends | Minimum  =    125 : Maximum =    300

[18-04-2022_12-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(131)]), ('state_module', [Number(131), Number(122)]), ('plan_module', [Number(131), Number(122), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(131), Number(122), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(131)]), ('action_preconditions', [Number(131)]), ('variable_relations', [Number(131)]), ('abstraction_mappings', [Number(131)]), ('conformance_module', [Number(131), Number(122), Number(60), Number(62), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.316726s.

[18-04-2022_12-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.118541s with result Satisfiable.

[18-04-2022_12-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4352662000010241, Incremental time limit = None
Running cumulative time = 3.0521799999987707, Cumulative time limit = 1741.9311370999949
Used memory = (RSS = 2499.000000Mb, VMS = 2513.730469Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.569547s, Solving = 0.482633s, Total = 3.052180s, Memory = (RSS = 2499.000000Mb, VMS = 2513.730469Mb), Step range = [122-131]), Calls = 8
Final Model :: Total atoms = 24539, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[18-04-2022_12-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.568624s, Solving = 0.093450s, Total = 0.662074s, Memory = (RSS = 2479.738281Mb, VMS = 2493.285156Mb), Step range = [122-124]
2 : Statistics :: Grounding = 0.243804s, Solving = 0.021294s, Total = 0.265099s, Memory = (RSS = 2479.964844Mb, VMS = 2493.484375Mb), Step range = [125-125]
3 : Statistics :: Grounding = 0.263668s, Solving = 0.024810s, Total = 0.288478s, Memory = (RSS = 2480.429688Mb, VMS = 2493.765625Mb), Step range = [126-126]
4 : Statistics :: Grounding = 0.270197s, Solving = 0.038521s, Total = 0.308719s, Memory = (RSS = 2487.429688Mb, VMS = 2502.617188Mb), Step range = [127-127]
5 : Statistics :: Grounding = 0.294567s, Solving = 0.052126s, Total = 0.346693s, Memory = (RSS = 2490.148438Mb, VMS = 2504.503906Mb), Step range = [128-128]
6 : Statistics :: Grounding = 0.301043s, Solving = 0.060430s, Total = 0.361473s, Memory = (RSS = 2492.214844Mb, VMS = 2508.699219Mb), Step range = [129-129]
7 : Statistics :: Grounding = 0.310918s, Solving = 0.073460s, Total = 0.384378s, Memory = (RSS = 2494.316406Mb, VMS = 2509.218750Mb), Step range = [130-130]
8 : Statistics :: Grounding = 0.316726s, Solving = 0.118541s, Total = 0.435266s, Memory = (RSS = 2499.000000Mb, VMS = 2513.730469Mb), Step range = [131-131]

[18-04-2022_12-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 3.052180s due to: Stop condition reached.

[18-04-2022_12-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[18-04-2022_12-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[18-04-2022_12-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[18-04-2022_12-44-00] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38, 81: 39, 82: 40, 83: 41, 84: 42, 85: 43, 86: 44, 87: 45, 88: 46, 89: 47, 90: 48, 91: 48, 92: 48, 93: 49, 94: 49, 95: 49, 96: 49, 97: 50, 98: 50, 99: 50, 100: 51, 101: 51, 102: 51, 103: 52, 104: 52, 105: 52, 106: 53, 107: 53, 108: 53, 109: 54, 110: 54, 111: 54, 112: 54, 113: 55, 114: 56, 115: 57, 116: 58, 117: 58, 118: 58, 119: 59, 120: 59, 121: 59, 122: 59}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80, 39: 81, 40: 82, 41: 83, 42: 84, 43: 85, 44: 86, 45: 87, 46: 88, 47: 89, 48: 92, 49: 96, 50: 99, 51: 102, 52: 105, 53: 108, 54: 112, 55: 113, 56: 114, 57: 115, 58: 118, 59: 122}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24, 43: 25, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29, 49: 29, 50: 30, 51: 30, 52: 30, 53: 31, 54: 31, 55: 32, 56: 32, 57: 33, 58: 34, 59: 34, 60: 35, 61: 35, 62: 35, 63: 36, 64: 36, 65: 37, 66: 38}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42, 25: 44, 26: 45, 27: 46, 28: 47, 29: 49, 30: 52, 31: 54, 32: 56, 33: 57, 34: 59, 35: 62, 36: 64, 37: 65, 38: 66}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13, 31: 14, 32: 14, 33: 15, 34: 15, 35: 15, 36: 16, 37: 16, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30, 14: 32, 15: 35, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-44-00] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38, 81: 39, 82: 40, 83: 41, 84: 42, 85: 43, 86: 44, 87: 45, 88: 46, 89: 47, 90: 48, 91: 48, 92: 48, 93: 49, 94: 49, 95: 49, 96: 49, 97: 50, 98: 50, 99: 50, 100: 51, 101: 51, 102: 51, 103: 52, 104: 52, 105: 52, 106: 53, 107: 53, 108: 53, 109: 54, 110: 54, 111: 54, 112: 54, 113: 55, 114: 56, 115: 57, 116: 58, 117: 58, 118: 58, 119: 59, 120: 59, 121: 59, 122: 59, 123: 60, 124: 60, 125: 60, 126: 61, 127: 61, 128: 61, 129: 62, 130: 62, 131: 62}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80, 39: 81, 40: 82, 41: 83, 42: 84, 43: 85, 44: 86, 45: 87, 46: 88, 47: 89, 48: 92, 49: 96, 50: 99, 51: 102, 52: 105, 53: 108, 54: 112, 55: 113, 56: 114, 57: 115, 58: 118, 59: 122, 60: 125, 61: 128, 62: 131}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24, 43: 25, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29, 49: 29, 50: 30, 51: 30, 52: 30, 53: 31, 54: 31, 55: 32, 56: 32, 57: 33, 58: 34, 59: 34, 60: 35, 61: 35, 62: 35, 63: 36, 64: 36, 65: 37, 66: 38}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42, 25: 44, 26: 45, 27: 46, 28: 47, 29: 49, 30: 52, 31: 54, 32: 56, 33: 57, 34: 59, 35: 62, 36: 64, 37: 65, 38: 66}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13, 31: 14, 32: 14, 33: 15, 34: 15, 35: 15, 36: 16, 37: 16, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30, 14: 32, 15: 35, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-44-00] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 62, Last requested goal index = 62, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[18-04-2022_12-44-00] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.569547s, Solving = 0.482633s, Total = 3.052180s, Memory = (RSS = 2499.000000Mb, VMS = 2513.730469Mb), Step range = [122-131]), Calls = 8
Model :: Total atoms = 24539, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[18-04-2022_12-44-00] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 9 :: Actions = 9                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Planned actions:
        talos : move(((starting_room,1),3,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),4,0))
Step 5:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,0))
Step 6:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,1))
Step 7:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),4,0))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,0))
Step 9:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 10:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 11:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 12:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 13:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 5] talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(store_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 5] talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(store_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 17:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 21:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 23:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 24:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 25:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 26:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 27:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 28:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(puzzle_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(puzzle_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 31:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 35:
    Current Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 37:
    Current Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 38:
    Current Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 39:
    Current Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 40:
    Current Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 41:
    Current Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 42:
    Current Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 43:
    Current Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 44:
    Current Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Planned actions:
        talos : move(((store_room,0),2,1))
Step 45:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 46:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 47:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),0,0))
Step 48:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 49:
    Current Sub-goals:
        [Index = 23] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Achieved Sub-goals:
        [Index = 23] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 50:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 51:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 52:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 53:
    Current Sub-goals:
        [Index = 27] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Achieved Sub-goals:
        [Index = 27] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 54:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 55:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 56:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 29] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 57:
    Current Sub-goals:
        [Index = 30] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 58:
    Current Sub-goals:
        [Index = 30] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 30] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),3,0))
Step 59:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,0))
Step 60:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 61:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 62:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 63:
    Current Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 64:
    Current Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 65:
    Current Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 66:
    Current Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 67:
    Current Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 68:
    Current Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 69:
    Current Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 70:
    Current Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 71:
    Current Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Planned actions:
        talos : move(((puzzle_room,0),0,1))
Step 72:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),0,0))
Step 73:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,0))
Step 74:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),2,0))
Step 75:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Planned actions:
        talos : move(((puzzle_room,1),3,0))
Step 76:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),4,0))
Step 77:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),5,0))
Step 78:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 79:
    Current Sub-goals:
        [Index = 37] talos : put(manipulator_end_1,(block,6),puzzle_room_table_right) -> on((block,6)) = puzzle_room_table_right
    Achieved Sub-goals:
        [Index = 37] talos : put(manipulator_end_1,(block,6),puzzle_room_table_right) -> on((block,6)) = puzzle_room_table_right
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 80:
    Current Sub-goals:
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 81:
    Current Sub-goals:
        [Index = 39] talos : configure(manipulator_end_1,aligned_with((block,3))) -> configuration(manipulator_end_1) = aligned_with((block,3))
    Achieved Sub-goals:
        [Index = 39] talos : configure(manipulator_end_1,aligned_with((block,3))) -> configuration(manipulator_end_1) = aligned_with((block,3))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 82:
    Current Sub-goals:
        [Index = 40] talos : grasp(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = (block,3)
    Achieved Sub-goals:
        [Index = 40] talos : grasp(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 83:
    Current Sub-goals:
        [Index = 41] talos : put(manipulator_end_1,(block,3),puzzle_room_table_left) -> on((block,3)) = puzzle_room_table_left
    Achieved Sub-goals:
        [Index = 41] talos : put(manipulator_end_1,(block,3),puzzle_room_table_left) -> on((block,3)) = puzzle_room_table_left
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 84:
    Current Sub-goals:
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 85:
    Current Sub-goals:
        [Index = 43] talos : configure(manipulator_end_1,aligned_with((block,2))) -> configuration(manipulator_end_1) = aligned_with((block,2))
    Achieved Sub-goals:
        [Index = 43] talos : configure(manipulator_end_1,aligned_with((block,2))) -> configuration(manipulator_end_1) = aligned_with((block,2))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 86:
    Current Sub-goals:
        [Index = 44] talos : grasp(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = (block,2)
    Achieved Sub-goals:
        [Index = 44] talos : grasp(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 87:
    Current Sub-goals:
        [Index = 45] talos : put(manipulator_end_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 45] talos : put(manipulator_end_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 88:
    Current Sub-goals:
        [Index = 46] talos : release(manipulator_end_1,(block,2)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 46] talos : release(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 46] talos : release(manipulator_end_1,(block,2)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 46] talos : release(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,2))
Step 89:
    Current Sub-goals:
        [Index = 47] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 47] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 47] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 47] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 90:
    Current Sub-goals:
        [Index = 48] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),4,0))
Step 91:
    Current Sub-goals:
        [Index = 48] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),3,0))
Step 92:
    Current Sub-goals:
        [Index = 48] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
        [Index = 48] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Planned actions:
        talos : move(((puzzle_room,0),2,0))
Step 93:
    Current Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,0))
Step 94:
    Current Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,1))
Step 95:
    Current Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),0,1))
Step 96:
    Current Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 97:
    Current Sub-goals:
        [Index = 50] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 98:
    Current Sub-goals:
        [Index = 50] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 99:
    Current Sub-goals:
        [Index = 50] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 50] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 100:
    Current Sub-goals:
        [Index = 51] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 101:
    Current Sub-goals:
        [Index = 51] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 102:
    Current Sub-goals:
        [Index = 51] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 51] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 103:
    Current Sub-goals:
        [Index = 52] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 104:
    Current Sub-goals:
        [Index = 52] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 105:
    Current Sub-goals:
        [Index = 52] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 52] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 106:
    Current Sub-goals:
        [Index = 53] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 107:
    Current Sub-goals:
        [Index = 53] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 108:
    Current Sub-goals:
        [Index = 53] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
        [Index = 53] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Planned actions:
        talos : move(((store_room,0),2,1))
Step 109:
    Current Sub-goals:
        [Index = 54] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 110:
    Current Sub-goals:
        [Index = 54] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 111:
    Current Sub-goals:
        [Index = 54] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),0,0))
Step 112:
    Current Sub-goals:
        [Index = 54] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 54] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 113:
    Current Sub-goals:
        [Index = 55] talos : configure(manipulator_end_1,aligned_with((block,4))) -> configuration(manipulator_end_1) = aligned_with((block,4))
    Achieved Sub-goals:
        [Index = 55] talos : configure(manipulator_end_1,aligned_with((block,4))) -> configuration(manipulator_end_1) = aligned_with((block,4))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
Step 114:
    Current Sub-goals:
        [Index = 56] talos : grasp(manipulator_end_1,(block,4)) -> grasping(manipulator_end_1) = (block,4)
    Achieved Sub-goals:
        [Index = 56] talos : grasp(manipulator_end_1,(block,4)) -> grasping(manipulator_end_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
Step 115:
    Current Sub-goals:
        [Index = 57] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 57] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 116:
    Current Sub-goals:
        [Index = 58] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 117:
    Current Sub-goals:
        [Index = 58] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 118:
    Current Sub-goals:
        [Index = 58] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 58] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),3,0))
Step 119:
    Current Sub-goals:
        [Index = 59] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,0))
Step 120:
    Current Sub-goals:
        [Index = 59] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 121:
    Current Sub-goals:
        [Index = 59] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 122:
    Current Sub-goals:
        [Index = 59] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 59] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 123:
    Current Sub-goals:
        [Index = 60] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 124:
    Current Sub-goals:
        [Index = 60] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 125:
    Current Sub-goals:
        [Index = 60] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 60] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 126:
    Current Sub-goals:
        [Index = 61] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 127:
    Current Sub-goals:
        [Index = 61] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 128:
    Current Sub-goals:
        [Index = 61] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 61] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 129:
    Current Sub-goals:
        [Index = 62] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 130:
    Current Sub-goals:
        [Index = 62] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 131:
    Current Sub-goals:
        [Index = 62] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
        [Index = 62] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Planned actions:
        talos : move(((puzzle_room,0),0,1))

[18-04-2022_12-44-00] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[18-04-2022_12-44-00] DEBUG :: ASH Planner Main #1 >> Value of end step of abstract plan to divide adjusted for right blend of current problem: end_step=131

[18-04-2022_12-44-00] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[18-04-2022_12-44-00] DEBUG :: ASH Planner Main #1 >> Monolevel problem 15 at level 1 solved.

[18-04-2022_12-44-00] DEBUG :: ASH Planner Main #1 >> Online planning increment 15 finished.

[18-04-2022_12-44-00] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 3 : Total constraining sub-goal stages = 20 : Goals achieved = 20 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 8 : Total constraining sub-goal stages = 42 : Goals achieved = 38 : Goals unachieved = 4 : Complete = False
Level = 1 : Solved problems = 15 : Total constraining sub-goal stages = 66 : Goals achieved = 62 : Goals unachieved = 4 : Complete = False

[18-04-2022_12-44-00] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 2.

[18-04-2022_12-44-00] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 16 by method ground-first is [1-1].

[18-04-2022_12-44-00] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 16 at level 1:
Total Templated Partial Problems = 2, Problem Range = [15-16], Size = 7, Sub-goal Stage Range = [60-66]
Division points [total=1] : [(Index = 62, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[18-04-2022_12-44-00] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [63-66]

[18-04-2022_12-44-00] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 131, chosen step range to extract = range(0, 132)

[18-04-2022_12-44-00] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 66, Total actions = 66, Produced sub-goal stages = 66, Produced sub-goal literals = 74
Level [1]: Length = 131, Total actions = 131, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-44-00] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 66, chosen step range to extract = range(0, 67)

[18-04-2022_12-44-00] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 66, Total actions = 66, Produced sub-goal stages = 66, Produced sub-goal literals = 74
Level [1]: Length = 131, Total actions = 131, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-44-00] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 42, chosen step range to extract = range(0, 43)

[18-04-2022_12-44-00] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 66, Total actions = 66, Produced sub-goal stages = 66, Produced sub-goal literals = 74
Level [1]: Length = 131, Total actions = 131, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-44-00] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 20, chosen step range to extract = range(0, 21)

[18-04-2022_12-44-00] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 66, Total actions = 66, Produced sub-goal stages = 66, Produced sub-goal literals = 74
Level [1]: Length = 131, Total actions = 131, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-44-00] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [63-66], problem number = 16, increment number = 16

[18-04-2022_12-44-00] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 63)
	('last_sgoals', 66)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1738.8789570999961)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[18-04-2022_12-44-00] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [63-66] : Concurrency disabled : Minimum search length bound enabled with value 134

[18-04-2022_12-44-00] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 63
last_sgoals = 66
start_step = 131
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 134

[18-04-2022_12-44-00] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[18-04-2022_12-44-00] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[18-04-2022_12-44-00] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[18-04-2022_12-44-00] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[18-04-2022_12-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[18-04-2022_12-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[18-04-2022_12-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[18-04-2022_12-44-00] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-44-00] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 131 as problem start state.

[18-04-2022_12-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,4))', 'S': 131})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 131})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 131})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 131})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 131})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 131})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 131})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,4)', 'S': 131})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 131})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '((puzzle_room,1),5,0)', 'S': 131})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '((puzzle_room,1),5,0)', 'S': 131})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '((puzzle_room,1),5,0)', 'S': 131})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '((puzzle_room,0),0,1)', 'S': 131})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '((puzzle_room,0),0,1)', 'S': 131})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '((puzzle_room,1),5,0)', 'S': 131})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '((puzzle_room,0),0,1)', 'S': 131})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '((puzzle_room,0),0,1)', 'S': 131})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '((puzzle_room,0),0,1)', 'S': 131})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '((puzzle_room,0),0,1)', 'S': 131})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '((puzzle_room,0),0,1)', 'S': 131})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '((puzzle_room,0),0,1)', 'S': 131})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '((puzzle_room,1),5,0)', 'S': 131})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '((puzzle_room,1),5,0)', 'S': 131})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '((puzzle_room,1),5,0)', 'S': 131})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '((puzzle_room,1),5,0)', 'S': 131})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '((puzzle_room,0),0,1)', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 131})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 131})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 131})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 131})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 131})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 131})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 131})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 131})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 131})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 131})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,4))', 'S': 131})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 131})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 131})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 131})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 131})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 131})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 131})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_1)', 'V': '(block,4)', 'S': 131})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 131})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 131})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 131})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 131})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': '(puzzle_room,0)', 'S': 131})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': '(puzzle_room,0)', 'S': 131})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 131})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,0)', 'S': 131})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,0)', 'S': 131})
Fluent({'L': 2, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,0)', 'S': 131})
Fluent({'L': 2, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,0)', 'S': 131})
Fluent({'L': 2, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,0)', 'S': 131})
Fluent({'L': 2, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,0)', 'S': 131})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 131})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 131})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 131})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 131})
Fluent({'L': 2, 'F': 'in(talos)', 'V': '(puzzle_room,0)', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 131})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 131})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 131})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 131})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 131})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 131})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 131})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 131})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 131})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 131})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 131})

[18-04-2022_12-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 164 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 131).
holds(1, complete_tower(red,puzzle_room_table), false, 131).
holds(1, configuration(manipulator_end_1), aligned_with((block,4)), 131).
holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 131).
holds(1, configuration(manipulator_limb_1), retracted, 131).
holds(1, configuration(manipulator_limb_2), retracted, 131).
holds(1, configuration(puzzle_room_door), open, 131).
holds(1, configuration(starting_room_door), closed, 131).
holds(1, configuration(store_room_door), open, 131).
holds(1, grasping(manipulator_end_1), (block,4), 131).
holds(1, grasping(manipulator_end_2), (block,5), 131).
holds(1, in((block,1)), ((puzzle_room,1),5,0), 131).
holds(1, in((block,2)), ((puzzle_room,1),5,0), 131).
holds(1, in((block,3)), ((puzzle_room,1),5,0), 131).
holds(1, in((block,4)), ((puzzle_room,0),0,1), 131).
holds(1, in((block,5)), ((puzzle_room,0),0,1), 131).
holds(1, in((block,6)), ((puzzle_room,1),5,0), 131).
holds(1, in(manipulator_arm_1), ((puzzle_room,0),0,1), 131).
holds(1, in(manipulator_arm_2), ((puzzle_room,0),0,1), 131).
holds(1, in(manipulator_end_1), ((puzzle_room,0),0,1), 131).
holds(1, in(manipulator_end_2), ((puzzle_room,0),0,1), 131).
holds(1, in(manipulator_limb_1), ((puzzle_room,0),0,1), 131).
holds(1, in(manipulator_limb_2), ((puzzle_room,0),0,1), 131).
holds(1, in(puzzle_room_table), ((puzzle_room,1),5,0), 131).
holds(1, in(puzzle_room_table_left), ((puzzle_room,1),5,0), 131).
holds(1, in(puzzle_room_table_middle), ((puzzle_room,1),5,0), 131).
holds(1, in(puzzle_room_table_right), ((puzzle_room,1),5,0), 131).
holds(1, in(talos), ((puzzle_room,0),0,1), 131).
holds(1, in_tower((block,1),(block,1)), true, 131).
holds(1, in_tower((block,1),(block,2)), false, 131).
holds(1, in_tower((block,1),(block,3)), false, 131).
holds(1, in_tower((block,1),(block,4)), false, 131).
holds(1, in_tower((block,1),(block,5)), false, 131).
holds(1, in_tower((block,1),(block,6)), false, 131).
holds(1, in_tower((block,2),(block,1)), false, 131).
holds(1, in_tower((block,2),(block,2)), false, 131).
holds(1, in_tower((block,2),(block,3)), false, 131).
holds(1, in_tower((block,2),(block,4)), false, 131).
holds(1, in_tower((block,2),(block,5)), false, 131).
holds(1, in_tower((block,2),(block,6)), false, 131).
holds(1, in_tower((block,3),(block,1)), false, 131).
holds(1, in_tower((block,3),(block,2)), true, 131).
holds(1, in_tower((block,3),(block,3)), true, 131).
holds(1, in_tower((block,3),(block,4)), false, 131).
holds(1, in_tower((block,3),(block,5)), false, 131).
holds(1, in_tower((block,3),(block,6)), false, 131).
holds(1, in_tower((block,4),(block,1)), false, 131).
holds(1, in_tower((block,4),(block,2)), false, 131).
holds(1, in_tower((block,4),(block,3)), false, 131).
holds(1, in_tower((block,4),(block,4)), false, 131).
holds(1, in_tower((block,4),(block,5)), false, 131).
holds(1, in_tower((block,4),(block,6)), false, 131).
holds(1, in_tower((block,5),(block,1)), false, 131).
holds(1, in_tower((block,5),(block,2)), false, 131).
holds(1, in_tower((block,5),(block,3)), false, 131).
holds(1, in_tower((block,5),(block,4)), false, 131).
holds(1, in_tower((block,5),(block,5)), false, 131).
holds(1, in_tower((block,5),(block,6)), false, 131).
holds(1, in_tower((block,6),(block,1)), false, 131).
holds(1, in_tower((block,6),(block,2)), false, 131).
holds(1, in_tower((block,6),(block,3)), false, 131).
holds(1, in_tower((block,6),(block,4)), false, 131).
holds(1, in_tower((block,6),(block,5)), false, 131).
holds(1, in_tower((block,6),(block,6)), true, 131).
holds(1, on((block,1)), puzzle_room_table_left, 131).
holds(1, on((block,2)), (block,3), 131).
holds(1, on((block,3)), puzzle_room_table_left, 131).
holds(1, on((block,4)), nothing, 131).
holds(1, on((block,5)), nothing, 131).
holds(1, on((block,6)), puzzle_room_table_right, 131).
holds(1, tower_base((block,1),puzzle_room_table), true, 131).
holds(1, tower_base((block,2),puzzle_room_table), false, 131).
holds(1, tower_base((block,3),puzzle_room_table), true, 131).
holds(1, tower_base((block,4),puzzle_room_table), false, 131).
holds(1, tower_base((block,5),puzzle_room_table), false, 131).
holds(1, tower_base((block,6),puzzle_room_table), true, 131).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 131).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 131).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 131).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 131).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 131).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 131).
holds(2, complete_tower(blue,puzzle_room_table), false, 131).
holds(2, complete_tower(red,puzzle_room_table), false, 131).
holds(2, configuration(manipulator_end_1), aligned_with((block,4)), 131).
holds(2, configuration(manipulator_end_2), aligned_with((block,5)), 131).
holds(2, configuration(manipulator_limb_1), retracted, 131).
holds(2, configuration(manipulator_limb_2), retracted, 131).
holds(2, configuration(puzzle_room_door), open, 131).
holds(2, configuration(starting_room_door), closed, 131).
holds(2, configuration(store_room_door), open, 131).
holds(2, grasping(manipulator_end_1), (block,4), 131).
holds(2, grasping(manipulator_end_2), (block,5), 131).
holds(2, in((block,1)), (puzzle_room,1), 131).
holds(2, in((block,2)), (puzzle_room,1), 131).
holds(2, in((block,3)), (puzzle_room,1), 131).
holds(2, in((block,4)), (puzzle_room,0), 131).
holds(2, in((block,5)), (puzzle_room,0), 131).
holds(2, in((block,6)), (puzzle_room,1), 131).
holds(2, in(manipulator_arm_1), (puzzle_room,0), 131).
holds(2, in(manipulator_arm_2), (puzzle_room,0), 131).
holds(2, in(manipulator_end_1), (puzzle_room,0), 131).
holds(2, in(manipulator_end_2), (puzzle_room,0), 131).
holds(2, in(manipulator_limb_1), (puzzle_room,0), 131).
holds(2, in(manipulator_limb_2), (puzzle_room,0), 131).
holds(2, in(puzzle_room_table), (puzzle_room,1), 131).
holds(2, in(puzzle_room_table_left), (puzzle_room,1), 131).
holds(2, in(puzzle_room_table_middle), (puzzle_room,1), 131).
holds(2, in(puzzle_room_table_right), (puzzle_room,1), 131).
holds(2, in(talos), (puzzle_room,0), 131).
holds(2, in_tower((block,1),(block,1)), true, 131).
holds(2, in_tower((block,1),(block,2)), false, 131).
holds(2, in_tower((block,1),(block,3)), false, 131).
holds(2, in_tower((block,1),(block,4)), false, 131).
holds(2, in_tower((block,1),(block,5)), false, 131).
holds(2, in_tower((block,1),(block,6)), false, 131).
holds(2, in_tower((block,2),(block,1)), false, 131).
holds(2, in_tower((block,2),(block,2)), false, 131).
holds(2, in_tower((block,2),(block,3)), false, 131).
holds(2, in_tower((block,2),(block,4)), false, 131).
holds(2, in_tower((block,2),(block,5)), false, 131).
holds(2, in_tower((block,2),(block,6)), false, 131).
holds(2, in_tower((block,3),(block,1)), false, 131).
holds(2, in_tower((block,3),(block,2)), true, 131).
holds(2, in_tower((block,3),(block,3)), true, 131).
holds(2, in_tower((block,3),(block,4)), false, 131).
holds(2, in_tower((block,3),(block,5)), false, 131).
holds(2, in_tower((block,3),(block,6)), false, 131).
holds(2, in_tower((block,4),(block,1)), false, 131).
holds(2, in_tower((block,4),(block,2)), false, 131).
holds(2, in_tower((block,4),(block,3)), false, 131).
holds(2, in_tower((block,4),(block,4)), false, 131).
holds(2, in_tower((block,4),(block,5)), false, 131).
holds(2, in_tower((block,4),(block,6)), false, 131).
holds(2, in_tower((block,5),(block,1)), false, 131).
holds(2, in_tower((block,5),(block,2)), false, 131).
holds(2, in_tower((block,5),(block,3)), false, 131).
holds(2, in_tower((block,5),(block,4)), false, 131).
holds(2, in_tower((block,5),(block,5)), false, 131).
holds(2, in_tower((block,5),(block,6)), false, 131).
holds(2, in_tower((block,6),(block,1)), false, 131).
holds(2, in_tower((block,6),(block,2)), false, 131).
holds(2, in_tower((block,6),(block,3)), false, 131).
holds(2, in_tower((block,6),(block,4)), false, 131).
holds(2, in_tower((block,6),(block,5)), false, 131).
holds(2, in_tower((block,6),(block,6)), true, 131).
holds(2, on((block,1)), puzzle_room_table_left, 131).
holds(2, on((block,2)), (block,3), 131).
holds(2, on((block,3)), puzzle_room_table_left, 131).
holds(2, on((block,4)), nothing, 131).
holds(2, on((block,5)), nothing, 131).
holds(2, on((block,6)), puzzle_room_table_right, 131).
holds(2, tower_base((block,1),puzzle_room_table), true, 131).
holds(2, tower_base((block,2),puzzle_room_table), false, 131).
holds(2, tower_base((block,3),puzzle_room_table), true, 131).
holds(2, tower_base((block,4),puzzle_room_table), false, 131).
holds(2, tower_base((block,5),puzzle_room_table), false, 131).
holds(2, tower_base((block,6),puzzle_room_table), true, 131).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 131).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 131).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 131).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 131).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 131).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 131).

[18-04-2022_12-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[18-04-2022_12-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 308 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table_left, false).
final_goal(2, on((block,1)), puzzle_room_table_middle, false).
final_goal(2, on((block,1)), puzzle_room_table_right, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table_left, false).
final_goal(2, on((block,2)), puzzle_room_table_middle, false).
final_goal(2, on((block,2)), puzzle_room_table_right, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table_left, true).
final_goal(2, on((block,3)), puzzle_room_table_middle, false).
final_goal(2, on((block,3)), puzzle_room_table_right, false).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table_left, false).
final_goal(2, on((block,4)), puzzle_room_table_middle, false).
final_goal(2, on((block,4)), puzzle_room_table_right, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table_left, false).
final_goal(2, on((block,5)), puzzle_room_table_middle, false).
final_goal(2, on((block,5)), puzzle_room_table_right, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table_left, false).
final_goal(2, on((block,6)), puzzle_room_table_middle, false).
final_goal(2, on((block,6)), puzzle_room_table_right, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[18-04-2022_12-44-00] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=134']

[18-04-2022_12-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'I': 63})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'I': 64})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'I': 65})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 66})

[18-04-2022_12-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 4 rules into program part base:

sub_goal(2, talos, move((puzzle_room,1)), in(talos), (puzzle_room,1), 63).
sub_goal(2, talos, configure(manipulator_limb_1,extended), configuration(manipulator_limb_1), extended, 64).
sub_goal(2, talos, configure(manipulator_limb_2,extended), configuration(manipulator_limb_2), extended, 65).
sub_goal(2, talos, put(manipulator_end_2,(block,5),(block,6)), on((block,5)), (block,6), 66).

[18-04-2022_12-44-00] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[18-04-2022_12-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=134']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A8A4C8B670>]
	incrementor = SolveIncrementor(step_start=131, step_increase=1, step_increase_initial=4, step_end_min=135, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1738.8789570999961, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 131), range_=None), IncPart(name='plan_module', args=('#inc', 131, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 131, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 131, 63, 66, 'sequential', 'false'), range_=None)]

[18-04-2022_12-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 845 rules

[18-04-2022_12-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.00468540000019857s

[18-04-2022_12-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[18-04-2022_12-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[18-04-2022_12-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.170184s.

[18-04-2022_12-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.024883s with result Satisfiable.

[18-04-2022_12-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[18-04-2022_12-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A8A4E9E090>

[18-04-2022_12-44-00] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 131)
	('last_sgoals', 66)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('first_sgoals', 63)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A8A4E9E090>)

[18-04-2022_12-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 131). %* None *%
#program plan_module(#inc, 131, false, false). %* None *%
#program optimisation_module(#inc, 131, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 131, 63, 66, sequential, false). %* None *%

[18-04-2022_12-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =    130 : Current =    134
Incrementor step ends | Minimum  =    135 : Maximum =    300

[18-04-2022_12-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(134)]), ('state_module', [Number(131), Number(131)]), ('plan_module', [Number(131), Number(131), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(131), Number(131), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(131)]), ('action_preconditions', [Number(131)]), ('variable_relations', [Number(131)]), ('abstraction_mappings', [Number(131)]), ('conformance_module', [Number(131), Number(131), Number(63), Number(66), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(132), Number(131)]), ('plan_module', [Number(132), Number(131), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(132), Number(131), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(132)]), ('action_preconditions', [Number(132)]), ('variable_relations', [Number(132)]), ('abstraction_mappings', [Number(132)]), ('conformance_module', [Number(132), Number(131), Number(63), Number(66), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(133), Number(131)]), ('plan_module', [Number(133), Number(131), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(133), Number(131), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(133)]), ('action_preconditions', [Number(133)]), ('variable_relations', [Number(133)]), ('abstraction_mappings', [Number(133)]), ('conformance_module', [Number(133), Number(131), Number(63), Number(66), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(134), Number(131)]), ('plan_module', [Number(134), Number(131), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(134), Number(131), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(134)]), ('action_preconditions', [Number(134)]), ('variable_relations', [Number(134)]), ('abstraction_mappings', [Number(134)]), ('conformance_module', [Number(134), Number(131), Number(63), Number(66), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.784276s.

[18-04-2022_12-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.165203s with result Unsatisfiable.

[18-04-2022_12-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.9494785999995656, Incremental time limit = None
Running cumulative time = 0.9494785999995656, Cumulative time limit = 1738.8789570999961
Used memory = (RSS = 2484.691406Mb, VMS = 2498.558594Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =    134 : Current =    135
Incrementor step ends | Minimum  =    135 : Maximum =    300

[18-04-2022_12-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(135)]), ('state_module', [Number(135), Number(131)]), ('plan_module', [Number(135), Number(131), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(135), Number(131), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(135)]), ('action_preconditions', [Number(135)]), ('variable_relations', [Number(135)]), ('abstraction_mappings', [Number(135)]), ('conformance_module', [Number(135), Number(131), Number(63), Number(66), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.264890s.

[18-04-2022_12-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.026346s with result Unsatisfiable.

[18-04-2022_12-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.291235499999857, Incremental time limit = None
Running cumulative time = 1.2407140999994226, Cumulative time limit = 1738.8789570999961
Used memory = (RSS = 2490.597656Mb, VMS = 2505.855469Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =    135 : Current =    136
Incrementor step ends | Minimum  =    135 : Maximum =    300

[18-04-2022_12-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(136)]), ('state_module', [Number(136), Number(131)]), ('plan_module', [Number(136), Number(131), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(136), Number(131), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(136)]), ('action_preconditions', [Number(136)]), ('variable_relations', [Number(136)]), ('abstraction_mappings', [Number(136)]), ('conformance_module', [Number(136), Number(131), Number(63), Number(66), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.271361s.

[18-04-2022_12-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.036611s with result Unsatisfiable.

[18-04-2022_12-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3079725999996299, Incremental time limit = None
Running cumulative time = 1.5486866999990525, Cumulative time limit = 1738.8789570999961
Used memory = (RSS = 2492.136719Mb, VMS = 2506.273438Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =    136 : Current =    137
Incrementor step ends | Minimum  =    135 : Maximum =    300

[18-04-2022_12-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(137)]), ('state_module', [Number(137), Number(131)]), ('plan_module', [Number(137), Number(131), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(137), Number(131), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(137)]), ('action_preconditions', [Number(137)]), ('variable_relations', [Number(137)]), ('abstraction_mappings', [Number(137)]), ('conformance_module', [Number(137), Number(131), Number(63), Number(66), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.295578s.

[18-04-2022_12-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.047820s with result Unsatisfiable.

[18-04-2022_12-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.34339730000010604, Incremental time limit = None
Running cumulative time = 1.8920839999991586, Cumulative time limit = 1738.8789570999961
Used memory = (RSS = 2495.066406Mb, VMS = 2511.726562Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =    137 : Current =    138
Incrementor step ends | Minimum  =    135 : Maximum =    300

[18-04-2022_12-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(138)]), ('state_module', [Number(138), Number(131)]), ('plan_module', [Number(138), Number(131), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(138), Number(131), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(138)]), ('action_preconditions', [Number(138)]), ('variable_relations', [Number(138)]), ('abstraction_mappings', [Number(138)]), ('conformance_module', [Number(138), Number(131), Number(63), Number(66), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.301617s.

[18-04-2022_12-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.044462s with result Unsatisfiable.

[18-04-2022_12-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3460795999990296, Incremental time limit = None
Running cumulative time = 2.238163599998188, Cumulative time limit = 1738.8789570999961
Used memory = (RSS = 2497.074219Mb, VMS = 2512.234375Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =    138 : Current =    139
Incrementor step ends | Minimum  =    135 : Maximum =    300

[18-04-2022_12-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(139)]), ('state_module', [Number(139), Number(131)]), ('plan_module', [Number(139), Number(131), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(139), Number(131), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(139)]), ('action_preconditions', [Number(139)]), ('variable_relations', [Number(139)]), ('abstraction_mappings', [Number(139)]), ('conformance_module', [Number(139), Number(131), Number(63), Number(66), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.306429s.

[18-04-2022_12-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.050133s with result Unsatisfiable.

[18-04-2022_12-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.356561700000384, Incremental time limit = None
Running cumulative time = 2.594725299998572, Cumulative time limit = 1738.8789570999961
Used memory = (RSS = 2499.109375Mb, VMS = 2513.277344Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =    139 : Current =    140
Incrementor step ends | Minimum  =    135 : Maximum =    300

[18-04-2022_12-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(140)]), ('state_module', [Number(140), Number(131)]), ('plan_module', [Number(140), Number(131), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(140), Number(131), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(140)]), ('action_preconditions', [Number(140)]), ('variable_relations', [Number(140)]), ('abstraction_mappings', [Number(140)]), ('conformance_module', [Number(140), Number(131), Number(63), Number(66), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.311073s.

[18-04-2022_12-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.080169s with result Satisfiable.

[18-04-2022_12-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.39124179999998887, Incremental time limit = None
Running cumulative time = 2.985967099998561, Cumulative time limit = 1738.8789570999961
Used memory = (RSS = 2503.652344Mb, VMS = 2522.101562Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.535223s, Solving = 0.450744s, Total = 2.985967s, Memory = (RSS = 2503.652344Mb, VMS = 2522.101562Mb), Step range = [131-140]), Calls = 7
Final Model :: Total atoms = 24551, Cost = (-1,), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[18-04-2022_12-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.784276s, Solving = 0.165203s, Total = 0.949479s, Memory = (RSS = 2484.691406Mb, VMS = 2498.558594Mb), Step range = [131-134]
2 : Statistics :: Grounding = 0.264890s, Solving = 0.026346s, Total = 0.291235s, Memory = (RSS = 2490.597656Mb, VMS = 2505.855469Mb), Step range = [135-135]
3 : Statistics :: Grounding = 0.271361s, Solving = 0.036611s, Total = 0.307973s, Memory = (RSS = 2492.136719Mb, VMS = 2506.273438Mb), Step range = [136-136]
4 : Statistics :: Grounding = 0.295578s, Solving = 0.047820s, Total = 0.343397s, Memory = (RSS = 2495.066406Mb, VMS = 2511.726562Mb), Step range = [137-137]
5 : Statistics :: Grounding = 0.301617s, Solving = 0.044462s, Total = 0.346080s, Memory = (RSS = 2497.074219Mb, VMS = 2512.234375Mb), Step range = [138-138]
6 : Statistics :: Grounding = 0.306429s, Solving = 0.050133s, Total = 0.356562s, Memory = (RSS = 2499.109375Mb, VMS = 2513.277344Mb), Step range = [139-139]
7 : Statistics :: Grounding = 0.311073s, Solving = 0.080169s, Total = 0.391242s, Memory = (RSS = 2503.652344Mb, VMS = 2522.101562Mb), Step range = [140-140]

[18-04-2022_12-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 2.985967s due to: Stop condition reached.

[18-04-2022_12-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[18-04-2022_12-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[18-04-2022_12-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[18-04-2022_12-44-06] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38, 81: 39, 82: 40, 83: 41, 84: 42, 85: 43, 86: 44, 87: 45, 88: 46, 89: 47, 90: 48, 91: 48, 92: 48, 93: 49, 94: 49, 95: 49, 96: 49, 97: 50, 98: 50, 99: 50, 100: 51, 101: 51, 102: 51, 103: 52, 104: 52, 105: 52, 106: 53, 107: 53, 108: 53, 109: 54, 110: 54, 111: 54, 112: 54, 113: 55, 114: 56, 115: 57, 116: 58, 117: 58, 118: 58, 119: 59, 120: 59, 121: 59, 122: 59, 123: 60, 124: 60, 125: 60, 126: 61, 127: 61, 128: 61, 129: 62, 130: 62, 131: 62}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80, 39: 81, 40: 82, 41: 83, 42: 84, 43: 85, 44: 86, 45: 87, 46: 88, 47: 89, 48: 92, 49: 96, 50: 99, 51: 102, 52: 105, 53: 108, 54: 112, 55: 113, 56: 114, 57: 115, 58: 118, 59: 122, 60: 125, 61: 128, 62: 131}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24, 43: 25, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29, 49: 29, 50: 30, 51: 30, 52: 30, 53: 31, 54: 31, 55: 32, 56: 32, 57: 33, 58: 34, 59: 34, 60: 35, 61: 35, 62: 35, 63: 36, 64: 36, 65: 37, 66: 38}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42, 25: 44, 26: 45, 27: 46, 28: 47, 29: 49, 30: 52, 31: 54, 32: 56, 33: 57, 34: 59, 35: 62, 36: 64, 37: 65, 38: 66}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13, 31: 14, 32: 14, 33: 15, 34: 15, 35: 15, 36: 16, 37: 16, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30, 14: 32, 15: 35, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-44-06] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38, 81: 39, 82: 40, 83: 41, 84: 42, 85: 43, 86: 44, 87: 45, 88: 46, 89: 47, 90: 48, 91: 48, 92: 48, 93: 49, 94: 49, 95: 49, 96: 49, 97: 50, 98: 50, 99: 50, 100: 51, 101: 51, 102: 51, 103: 52, 104: 52, 105: 52, 106: 53, 107: 53, 108: 53, 109: 54, 110: 54, 111: 54, 112: 54, 113: 55, 114: 56, 115: 57, 116: 58, 117: 58, 118: 58, 119: 59, 120: 59, 121: 59, 122: 59, 123: 60, 124: 60, 125: 60, 126: 61, 127: 61, 128: 61, 129: 62, 130: 62, 131: 62, 132: 63, 133: 63, 134: 63, 135: 64, 136: 64, 137: 64, 138: 64, 139: 65, 140: 66}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80, 39: 81, 40: 82, 41: 83, 42: 84, 43: 85, 44: 86, 45: 87, 46: 88, 47: 89, 48: 92, 49: 96, 50: 99, 51: 102, 52: 105, 53: 108, 54: 112, 55: 113, 56: 114, 57: 115, 58: 118, 59: 122, 60: 125, 61: 128, 62: 131, 63: 134, 64: 138, 65: 139, 66: 140}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24, 43: 25, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29, 49: 29, 50: 30, 51: 30, 52: 30, 53: 31, 54: 31, 55: 32, 56: 32, 57: 33, 58: 34, 59: 34, 60: 35, 61: 35, 62: 35, 63: 36, 64: 36, 65: 37, 66: 38}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42, 25: 44, 26: 45, 27: 46, 28: 47, 29: 49, 30: 52, 31: 54, 32: 56, 33: 57, 34: 59, 35: 62, 36: 64, 37: 65, 38: 66}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13, 31: 14, 32: 14, 33: 15, 34: 15, 35: 15, 36: 16, 37: 16, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30, 14: 32, 15: 35, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-44-06] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 66, Last requested goal index = 66, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[18-04-2022_12-44-06] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.535223s, Solving = 0.450744s, Total = 2.985967s, Memory = (RSS = 2503.652344Mb, VMS = 2522.101562Mb), Step range = [131-140]), Calls = 7
Model :: Total atoms = 24551, Cost = (-1,), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[18-04-2022_12-44-06] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 9 :: Actions = 9                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Planned actions:
        talos : move(((starting_room,1),3,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),4,0))
Step 5:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,0))
Step 6:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,1))
Step 7:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),4,0))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,0))
Step 9:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 10:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 11:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 12:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 13:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 5] talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(store_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 5] talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(store_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 17:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 21:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 23:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 24:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 25:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 26:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 27:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 28:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(puzzle_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(puzzle_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 31:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 35:
    Current Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 37:
    Current Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 38:
    Current Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 39:
    Current Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 40:
    Current Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 41:
    Current Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 42:
    Current Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 43:
    Current Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 44:
    Current Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Planned actions:
        talos : move(((store_room,0),2,1))
Step 45:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 46:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 47:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),0,0))
Step 48:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 49:
    Current Sub-goals:
        [Index = 23] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Achieved Sub-goals:
        [Index = 23] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 50:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 51:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 52:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 53:
    Current Sub-goals:
        [Index = 27] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Achieved Sub-goals:
        [Index = 27] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 54:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 55:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 56:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 29] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 57:
    Current Sub-goals:
        [Index = 30] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 58:
    Current Sub-goals:
        [Index = 30] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 30] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),3,0))
Step 59:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,0))
Step 60:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 61:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 62:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 63:
    Current Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 64:
    Current Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 65:
    Current Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 66:
    Current Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 67:
    Current Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 68:
    Current Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 69:
    Current Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 70:
    Current Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 71:
    Current Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Planned actions:
        talos : move(((puzzle_room,0),0,1))
Step 72:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),0,0))
Step 73:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,0))
Step 74:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),2,0))
Step 75:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Planned actions:
        talos : move(((puzzle_room,1),3,0))
Step 76:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),4,0))
Step 77:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),5,0))
Step 78:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 79:
    Current Sub-goals:
        [Index = 37] talos : put(manipulator_end_1,(block,6),puzzle_room_table_right) -> on((block,6)) = puzzle_room_table_right
    Achieved Sub-goals:
        [Index = 37] talos : put(manipulator_end_1,(block,6),puzzle_room_table_right) -> on((block,6)) = puzzle_room_table_right
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 80:
    Current Sub-goals:
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 81:
    Current Sub-goals:
        [Index = 39] talos : configure(manipulator_end_1,aligned_with((block,3))) -> configuration(manipulator_end_1) = aligned_with((block,3))
    Achieved Sub-goals:
        [Index = 39] talos : configure(manipulator_end_1,aligned_with((block,3))) -> configuration(manipulator_end_1) = aligned_with((block,3))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 82:
    Current Sub-goals:
        [Index = 40] talos : grasp(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = (block,3)
    Achieved Sub-goals:
        [Index = 40] talos : grasp(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 83:
    Current Sub-goals:
        [Index = 41] talos : put(manipulator_end_1,(block,3),puzzle_room_table_left) -> on((block,3)) = puzzle_room_table_left
    Achieved Sub-goals:
        [Index = 41] talos : put(manipulator_end_1,(block,3),puzzle_room_table_left) -> on((block,3)) = puzzle_room_table_left
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 84:
    Current Sub-goals:
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 85:
    Current Sub-goals:
        [Index = 43] talos : configure(manipulator_end_1,aligned_with((block,2))) -> configuration(manipulator_end_1) = aligned_with((block,2))
    Achieved Sub-goals:
        [Index = 43] talos : configure(manipulator_end_1,aligned_with((block,2))) -> configuration(manipulator_end_1) = aligned_with((block,2))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 86:
    Current Sub-goals:
        [Index = 44] talos : grasp(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = (block,2)
    Achieved Sub-goals:
        [Index = 44] talos : grasp(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 87:
    Current Sub-goals:
        [Index = 45] talos : put(manipulator_end_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 45] talos : put(manipulator_end_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 88:
    Current Sub-goals:
        [Index = 46] talos : release(manipulator_end_1,(block,2)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 46] talos : release(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 46] talos : release(manipulator_end_1,(block,2)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 46] talos : release(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,2))
Step 89:
    Current Sub-goals:
        [Index = 47] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 47] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 47] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 47] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 90:
    Current Sub-goals:
        [Index = 48] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),4,0))
Step 91:
    Current Sub-goals:
        [Index = 48] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),3,0))
Step 92:
    Current Sub-goals:
        [Index = 48] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
        [Index = 48] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Planned actions:
        talos : move(((puzzle_room,0),2,0))
Step 93:
    Current Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,0))
Step 94:
    Current Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,1))
Step 95:
    Current Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),0,1))
Step 96:
    Current Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 97:
    Current Sub-goals:
        [Index = 50] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 98:
    Current Sub-goals:
        [Index = 50] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 99:
    Current Sub-goals:
        [Index = 50] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 50] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 100:
    Current Sub-goals:
        [Index = 51] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 101:
    Current Sub-goals:
        [Index = 51] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 102:
    Current Sub-goals:
        [Index = 51] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 51] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 103:
    Current Sub-goals:
        [Index = 52] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 104:
    Current Sub-goals:
        [Index = 52] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 105:
    Current Sub-goals:
        [Index = 52] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 52] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 106:
    Current Sub-goals:
        [Index = 53] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 107:
    Current Sub-goals:
        [Index = 53] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 108:
    Current Sub-goals:
        [Index = 53] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
        [Index = 53] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Planned actions:
        talos : move(((store_room,0),2,1))
Step 109:
    Current Sub-goals:
        [Index = 54] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 110:
    Current Sub-goals:
        [Index = 54] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 111:
    Current Sub-goals:
        [Index = 54] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),0,0))
Step 112:
    Current Sub-goals:
        [Index = 54] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 54] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 113:
    Current Sub-goals:
        [Index = 55] talos : configure(manipulator_end_1,aligned_with((block,4))) -> configuration(manipulator_end_1) = aligned_with((block,4))
    Achieved Sub-goals:
        [Index = 55] talos : configure(manipulator_end_1,aligned_with((block,4))) -> configuration(manipulator_end_1) = aligned_with((block,4))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
Step 114:
    Current Sub-goals:
        [Index = 56] talos : grasp(manipulator_end_1,(block,4)) -> grasping(manipulator_end_1) = (block,4)
    Achieved Sub-goals:
        [Index = 56] talos : grasp(manipulator_end_1,(block,4)) -> grasping(manipulator_end_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
Step 115:
    Current Sub-goals:
        [Index = 57] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 57] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 116:
    Current Sub-goals:
        [Index = 58] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 117:
    Current Sub-goals:
        [Index = 58] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 118:
    Current Sub-goals:
        [Index = 58] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 58] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),3,0))
Step 119:
    Current Sub-goals:
        [Index = 59] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,0))
Step 120:
    Current Sub-goals:
        [Index = 59] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 121:
    Current Sub-goals:
        [Index = 59] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 122:
    Current Sub-goals:
        [Index = 59] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 59] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 123:
    Current Sub-goals:
        [Index = 60] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 124:
    Current Sub-goals:
        [Index = 60] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 125:
    Current Sub-goals:
        [Index = 60] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 60] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 126:
    Current Sub-goals:
        [Index = 61] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 127:
    Current Sub-goals:
        [Index = 61] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 128:
    Current Sub-goals:
        [Index = 61] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 61] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 129:
    Current Sub-goals:
        [Index = 62] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 130:
    Current Sub-goals:
        [Index = 62] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 131:
    Current Sub-goals:
        [Index = 62] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
        [Index = 62] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Planned actions:
        talos : move(((puzzle_room,0),0,1))
Step 132:
    Current Sub-goals:
        [Index = 63] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,1))
Step 133:
    Current Sub-goals:
        [Index = 63] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),2,1))
Step 134:
    Current Sub-goals:
        [Index = 63] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
        [Index = 63] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Planned actions:
        talos : move(((puzzle_room,1),3,1))
Step 135:
    Current Sub-goals:
        [Index = 64] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),4,1))
Step 136:
    Current Sub-goals:
        [Index = 64] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),5,1))
Step 137:
    Current Sub-goals:
        [Index = 64] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),5,0))
Step 138:
    Current Sub-goals:
        [Index = 64] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 64] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 139:
    Current Sub-goals:
        [Index = 65] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 65] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 140:
    Current Sub-goals:
        [Index = 66] talos : put(manipulator_end_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 66] talos : put(manipulator_end_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))

[18-04-2022_12-44-06] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[18-04-2022_12-44-06] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[18-04-2022_12-44-06] DEBUG :: ASH Planner Main #1 >> Monolevel problem 16 at level 1 solved.

[18-04-2022_12-44-06] DEBUG :: ASH Planner Main #1 >> Online planning increment 16 finished.

[18-04-2022_12-44-06] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 3 : Total constraining sub-goal stages = 20 : Goals achieved = 20 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 8 : Total constraining sub-goal stages = 42 : Goals achieved = 38 : Goals unachieved = 4 : Complete = False
Level = 1 : Solved problems = 16 : Total constraining sub-goal stages = 66 : Goals achieved = 66 : Goals unachieved = 0 : Complete = False

[18-04-2022_12-44-06] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 2, Highest = 2.

[18-04-2022_12-44-06] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 17 by method ground-first is [1-2].

[18-04-2022_12-44-06] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning problem 9 at level 2:
Total Templated Partial Problems = 3, Problem Range = [7-9], Size = 12, Sub-goal Stage Range = [31-42]
Division points [total=2] : [(Index = 34, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 38, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[18-04-2022_12-44-06] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [39-42]

[18-04-2022_12-44-06] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 66, chosen step range to extract = range(0, 67)

[18-04-2022_12-44-06] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 66, Total actions = 66, Produced sub-goal stages = 66, Produced sub-goal literals = 74
Level [1]: Length = 140, Total actions = 140, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-44-06] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 42, chosen step range to extract = range(0, 43)

[18-04-2022_12-44-06] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 66, Total actions = 66, Produced sub-goal stages = 66, Produced sub-goal literals = 74
Level [1]: Length = 140, Total actions = 140, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-44-06] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 20, chosen step range to extract = range(0, 21)

[18-04-2022_12-44-06] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 66, Total actions = 66, Produced sub-goal stages = 66, Produced sub-goal literals = 74
Level [1]: Length = 140, Total actions = 140, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-44-06] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [39-42], problem number = 9, increment number = 17

[18-04-2022_12-44-06] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 39)
	('last_sgoals', 42)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1786.0043985999982)
	('length_limit', 300)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[18-04-2022_12-44-06] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 2] partial conformance refinement (sequential) with sgoals range [39-42] : Concurrency disabled : Minimum search length bound enabled with value 69

[18-04-2022_12-44-06] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 39
last_sgoals = 42
start_step = 66
is_initial = False
is_final = True
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 69

[18-04-2022_12-44-06] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[18-04-2022_12-44-06] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[18-04-2022_12-44-06] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[18-04-2022_12-44-06] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[18-04-2022_12-44-06] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-44-06] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 66 as problem start state.

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,4))', 'S': 66})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 66})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 66})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 66})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 66})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 66})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 66})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'S': 66})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 66})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_1)', 'V': '(block,4)', 'S': 66})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 66})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 66})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 66})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 66})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': '(puzzle_room,1)', 'S': 66})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 66})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 66})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 66})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 66})
Fluent({'L': 2, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 66})
Fluent({'L': 2, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 66})
Fluent({'L': 2, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 66})
Fluent({'L': 2, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 66})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 66})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 66})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 66})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 66})
Fluent({'L': 2, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 66})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 66})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 66})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 66})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 66})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 66})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 66})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 66})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 66})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 66})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 66})
Fluent({'L': 3, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 66})
Fluent({'L': 3, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 66})
Fluent({'L': 3, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 66})
Fluent({'L': 3, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 66})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'S': 66})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 66})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 66})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 66})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 66})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 66})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 66})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 66})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 66})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 66})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 66})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 66})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 66})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 66})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 66})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 66})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 66})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 66})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 66})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 66})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 66})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 66})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 66})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 66})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 66})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 66})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 66})

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 157 rules into program part ash_initial_state:

holds(2, complete_tower(blue,puzzle_room_table), false, 66).
holds(2, complete_tower(red,puzzle_room_table), false, 66).
holds(2, configuration(manipulator_end_1), aligned_with((block,4)), 66).
holds(2, configuration(manipulator_end_2), aligned_with((block,5)), 66).
holds(2, configuration(manipulator_limb_1), extended, 66).
holds(2, configuration(manipulator_limb_2), extended, 66).
holds(2, configuration(puzzle_room_door), open, 66).
holds(2, configuration(starting_room_door), closed, 66).
holds(2, configuration(store_room_door), open, 66).
holds(2, grasping(manipulator_arm_1), (block,4), 66).
holds(2, grasping(manipulator_arm_2), (block,5), 66).
holds(2, grasping(manipulator_end_1), (block,4), 66).
holds(2, grasping(manipulator_end_2), (block,5), 66).
holds(2, in((block,1)), (puzzle_room,1), 66).
holds(2, in((block,2)), (puzzle_room,1), 66).
holds(2, in((block,3)), (puzzle_room,1), 66).
holds(2, in((block,4)), (puzzle_room,1), 66).
holds(2, in((block,5)), (puzzle_room,1), 66).
holds(2, in((block,6)), (puzzle_room,1), 66).
holds(2, in(manipulator_arm_1), (puzzle_room,1), 66).
holds(2, in(manipulator_arm_2), (puzzle_room,1), 66).
holds(2, in(manipulator_end_1), (puzzle_room,1), 66).
holds(2, in(manipulator_end_2), (puzzle_room,1), 66).
holds(2, in(manipulator_limb_1), (puzzle_room,1), 66).
holds(2, in(manipulator_limb_2), (puzzle_room,1), 66).
holds(2, in(puzzle_room_table), (puzzle_room,1), 66).
holds(2, in(puzzle_room_table_left), (puzzle_room,1), 66).
holds(2, in(puzzle_room_table_middle), (puzzle_room,1), 66).
holds(2, in(puzzle_room_table_right), (puzzle_room,1), 66).
holds(2, in(talos), (puzzle_room,1), 66).
holds(2, in_tower((block,1),(block,1)), true, 66).
holds(2, in_tower((block,1),(block,2)), false, 66).
holds(2, in_tower((block,1),(block,3)), false, 66).
holds(2, in_tower((block,1),(block,4)), false, 66).
holds(2, in_tower((block,1),(block,5)), false, 66).
holds(2, in_tower((block,1),(block,6)), false, 66).
holds(2, in_tower((block,2),(block,1)), false, 66).
holds(2, in_tower((block,2),(block,2)), false, 66).
holds(2, in_tower((block,2),(block,3)), false, 66).
holds(2, in_tower((block,2),(block,4)), false, 66).
holds(2, in_tower((block,2),(block,5)), false, 66).
holds(2, in_tower((block,2),(block,6)), false, 66).
holds(2, in_tower((block,3),(block,1)), false, 66).
holds(2, in_tower((block,3),(block,2)), true, 66).
holds(2, in_tower((block,3),(block,3)), true, 66).
holds(2, in_tower((block,3),(block,4)), false, 66).
holds(2, in_tower((block,3),(block,5)), false, 66).
holds(2, in_tower((block,3),(block,6)), false, 66).
holds(2, in_tower((block,4),(block,1)), false, 66).
holds(2, in_tower((block,4),(block,2)), false, 66).
holds(2, in_tower((block,4),(block,3)), false, 66).
holds(2, in_tower((block,4),(block,4)), false, 66).
holds(2, in_tower((block,4),(block,5)), false, 66).
holds(2, in_tower((block,4),(block,6)), false, 66).
holds(2, in_tower((block,5),(block,1)), false, 66).
holds(2, in_tower((block,5),(block,2)), false, 66).
holds(2, in_tower((block,5),(block,3)), false, 66).
holds(2, in_tower((block,5),(block,4)), false, 66).
holds(2, in_tower((block,5),(block,5)), false, 66).
holds(2, in_tower((block,5),(block,6)), false, 66).
holds(2, in_tower((block,6),(block,1)), false, 66).
holds(2, in_tower((block,6),(block,2)), false, 66).
holds(2, in_tower((block,6),(block,3)), false, 66).
holds(2, in_tower((block,6),(block,4)), false, 66).
holds(2, in_tower((block,6),(block,5)), true, 66).
holds(2, in_tower((block,6),(block,6)), true, 66).
holds(2, on((block,1)), puzzle_room_table_left, 66).
holds(2, on((block,2)), (block,3), 66).
holds(2, on((block,3)), puzzle_room_table_left, 66).
holds(2, on((block,4)), nothing, 66).
holds(2, on((block,5)), (block,6), 66).
holds(2, on((block,6)), puzzle_room_table_right, 66).
holds(2, tower_base((block,1),puzzle_room_table), true, 66).
holds(2, tower_base((block,2),puzzle_room_table), false, 66).
holds(2, tower_base((block,3),puzzle_room_table), true, 66).
holds(2, tower_base((block,4),puzzle_room_table), false, 66).
holds(2, tower_base((block,5),puzzle_room_table), false, 66).
holds(2, tower_base((block,6),puzzle_room_table), true, 66).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 66).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 66).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 66).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 66).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 66).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 66).
holds(3, complete_tower(blue,puzzle_room_table), false, 66).
holds(3, complete_tower(red,puzzle_room_table), false, 66).
holds(3, configuration(manipulator_arm_1), extended, 66).
holds(3, configuration(manipulator_arm_2), extended, 66).
holds(3, configuration(puzzle_room_door), open, 66).
holds(3, configuration(starting_room_door), closed, 66).
holds(3, configuration(store_room_door), open, 66).
holds(3, grasping(manipulator_arm_1), (block,4), 66).
holds(3, grasping(manipulator_arm_2), (block,5), 66).
holds(3, in((block,1)), puzzle_room, 66).
holds(3, in((block,2)), puzzle_room, 66).
holds(3, in((block,3)), puzzle_room, 66).
holds(3, in((block,4)), puzzle_room, 66).
holds(3, in((block,5)), puzzle_room, 66).
holds(3, in((block,6)), puzzle_room, 66).
holds(3, in(manipulator_arm_1), puzzle_room, 66).
holds(3, in(manipulator_arm_2), puzzle_room, 66).
holds(3, in(puzzle_room_table), puzzle_room, 66).
holds(3, in(talos), puzzle_room, 66).
holds(3, in_tower((block,1),(block,1)), true, 66).
holds(3, in_tower((block,1),(block,2)), false, 66).
holds(3, in_tower((block,1),(block,3)), false, 66).
holds(3, in_tower((block,1),(block,4)), false, 66).
holds(3, in_tower((block,1),(block,5)), false, 66).
holds(3, in_tower((block,1),(block,6)), false, 66).
holds(3, in_tower((block,2),(block,1)), false, 66).
holds(3, in_tower((block,2),(block,2)), false, 66).
holds(3, in_tower((block,2),(block,3)), false, 66).
holds(3, in_tower((block,2),(block,4)), false, 66).
holds(3, in_tower((block,2),(block,5)), false, 66).
holds(3, in_tower((block,2),(block,6)), false, 66).
holds(3, in_tower((block,3),(block,1)), false, 66).
holds(3, in_tower((block,3),(block,2)), true, 66).
holds(3, in_tower((block,3),(block,3)), true, 66).
holds(3, in_tower((block,3),(block,4)), false, 66).
holds(3, in_tower((block,3),(block,5)), false, 66).
holds(3, in_tower((block,3),(block,6)), false, 66).
holds(3, in_tower((block,4),(block,1)), false, 66).
holds(3, in_tower((block,4),(block,2)), false, 66).
holds(3, in_tower((block,4),(block,3)), false, 66).
holds(3, in_tower((block,4),(block,4)), false, 66).
holds(3, in_tower((block,4),(block,5)), false, 66).
holds(3, in_tower((block,4),(block,6)), false, 66).
holds(3, in_tower((block,5),(block,1)), false, 66).
holds(3, in_tower((block,5),(block,2)), false, 66).
holds(3, in_tower((block,5),(block,3)), false, 66).
holds(3, in_tower((block,5),(block,4)), false, 66).
holds(3, in_tower((block,5),(block,5)), false, 66).
holds(3, in_tower((block,5),(block,6)), false, 66).
holds(3, in_tower((block,6),(block,1)), false, 66).
holds(3, in_tower((block,6),(block,2)), false, 66).
holds(3, in_tower((block,6),(block,3)), false, 66).
holds(3, in_tower((block,6),(block,4)), false, 66).
holds(3, in_tower((block,6),(block,5)), true, 66).
holds(3, in_tower((block,6),(block,6)), true, 66).
holds(3, on((block,1)), puzzle_room_table, 66).
holds(3, on((block,2)), (block,3), 66).
holds(3, on((block,3)), puzzle_room_table, 66).
holds(3, on((block,4)), nothing, 66).
holds(3, on((block,5)), (block,6), 66).
holds(3, on((block,6)), puzzle_room_table, 66).
holds(3, tower_base((block,1),puzzle_room_table), true, 66).
holds(3, tower_base((block,2),puzzle_room_table), false, 66).
holds(3, tower_base((block,3),puzzle_room_table), true, 66).
holds(3, tower_base((block,4),puzzle_room_table), false, 66).
holds(3, tower_base((block,5),puzzle_room_table), false, 66).
holds(3, tower_base((block,6),puzzle_room_table), true, 66).
holds(3, unordered_tower((block,1),puzzle_room_table), false, 66).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 66).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 66).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 66).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 66).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 66).

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 296 rules into program part ash_goal_state:

final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table_left, false).
final_goal(2, on((block,1)), puzzle_room_table_middle, false).
final_goal(2, on((block,1)), puzzle_room_table_right, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table_left, false).
final_goal(2, on((block,2)), puzzle_room_table_middle, false).
final_goal(2, on((block,2)), puzzle_room_table_right, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table_left, true).
final_goal(2, on((block,3)), puzzle_room_table_middle, false).
final_goal(2, on((block,3)), puzzle_room_table_right, false).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table_left, false).
final_goal(2, on((block,4)), puzzle_room_table_middle, false).
final_goal(2, on((block,4)), puzzle_room_table_right, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table_left, false).
final_goal(2, on((block,5)), puzzle_room_table_middle, false).
final_goal(2, on((block,5)), puzzle_room_table_right, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table_left, false).
final_goal(2, on((block,6)), puzzle_room_table_middle, false).
final_goal(2, on((block,6)), puzzle_room_table_right, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).

[18-04-2022_12-44-06] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=69']

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 39})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,1))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'I': 40})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 41})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 42})

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 4 rules into program part base:

sub_goal(3, talos, release(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), nothing, 39).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 40).
sub_goal(3, talos, put(manipulator_arm_1,(block,4),(block,5)), on((block,4)), (block,5), 41).
sub_goal(3, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 42).

[18-04-2022_12-44-06] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=69']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A80DA114C0>]
	incrementor = SolveIncrementor(step_start=66, step_increase=1, step_increase_initial=4, step_end_min=70, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1786.0043985999982, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 66), range_=None), IncPart(name='plan_module', args=('#inc', 66, 'false', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 66, 'false', 'false', 'false', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 66, 39, 42, 'sequential', 'false'), range_=None)]

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 826 rules

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.00519590000021708s

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.156150s.

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022986s with result Satisfiable.

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A8A3517770>

[18-04-2022_12-44-06] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 2)
	('start_step', 66)
	('last_sgoals', 42)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('first_sgoals', 39)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A8A3517770>)

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 66). %* None *%
#program plan_module(#inc, 66, false, true). %* None *%
#program optimisation_module(#inc, 66, false, false, false, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 66, 39, 42, sequential, false). %* None *%

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     65 : Current =     69
Incrementor step ends | Minimum  =     70 : Maximum =    300

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(69)]), ('state_module', [Number(66), Number(66)]), ('plan_module', [Number(66), Number(66), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(66), Number(66), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(66)]), ('action_preconditions', [Number(66)]), ('variable_relations', [Number(66)]), ('abstraction_mappings', [Number(66)]), ('conformance_module', [Number(66), Number(66), Number(39), Number(42), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(67), Number(66)]), ('plan_module', [Number(67), Number(66), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(67), Number(66), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(67)]), ('action_preconditions', [Number(67)]), ('variable_relations', [Number(67)]), ('abstraction_mappings', [Number(67)]), ('conformance_module', [Number(67), Number(66), Number(39), Number(42), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(68), Number(66)]), ('plan_module', [Number(68), Number(66), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(68), Number(66), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(68)]), ('action_preconditions', [Number(68)]), ('variable_relations', [Number(68)]), ('abstraction_mappings', [Number(68)]), ('conformance_module', [Number(68), Number(66), Number(39), Number(42), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(69), Number(66)]), ('plan_module', [Number(69), Number(66), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(69), Number(66), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(69)]), ('action_preconditions', [Number(69)]), ('variable_relations', [Number(69)]), ('abstraction_mappings', [Number(69)]), ('conformance_module', [Number(69), Number(66), Number(39), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.250976s.

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.049165s with result Unsatisfiable.

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3001412000003256, Incremental time limit = None
Running cumulative time = 0.3001412000003256, Cumulative time limit = 1786.0043985999982
Used memory = (RSS = 2481.117188Mb, VMS = 2494.511719Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     69 : Current =     70
Incrementor step ends | Minimum  =     70 : Maximum =    300

[18-04-2022_12-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(70)]), ('state_module', [Number(70), Number(66)]), ('plan_module', [Number(70), Number(66), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(70), Number(66), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(70)]), ('action_preconditions', [Number(70)]), ('variable_relations', [Number(70)]), ('abstraction_mappings', [Number(70)]), ('conformance_module', [Number(70), Number(66), Number(39), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.100863s.

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013756s with result Unsatisfiable.

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1146191000007093, Incremental time limit = None
Running cumulative time = 0.4147603000010349, Cumulative time limit = 1786.0043985999982
Used memory = (RSS = 2481.117188Mb, VMS = 2494.511719Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     70 : Current =     71
Incrementor step ends | Minimum  =     70 : Maximum =    300

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(71)]), ('state_module', [Number(71), Number(66)]), ('plan_module', [Number(71), Number(66), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(71), Number(66), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(71)]), ('action_preconditions', [Number(71)]), ('variable_relations', [Number(71)]), ('abstraction_mappings', [Number(71)]), ('conformance_module', [Number(71), Number(66), Number(39), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.106749s.

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.036031s with result Satisfiable.

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.14278040000044712, Incremental time limit = None
Running cumulative time = 0.557540700001482, Cumulative time limit = 1786.0043985999982
Used memory = (RSS = 2484.191406Mb, VMS = 2497.527344Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.458589s, Solving = 0.098952s, Total = 0.557541s, Memory = (RSS = 2484.191406Mb, VMS = 2497.527344Mb), Step range = [66-71]), Calls = 3
Final Model :: Total atoms = 19970, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.250976s, Solving = 0.049165s, Total = 0.300141s, Memory = (RSS = 2481.117188Mb, VMS = 2494.511719Mb), Step range = [66-69]
2 : Statistics :: Grounding = 0.100863s, Solving = 0.013756s, Total = 0.114619s, Memory = (RSS = 2481.117188Mb, VMS = 2494.511719Mb), Step range = [70-70]
3 : Statistics :: Grounding = 0.106749s, Solving = 0.036031s, Total = 0.142780s, Memory = (RSS = 2484.191406Mb, VMS = 2497.527344Mb), Step range = [71-71]

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.557541s due to: Stop condition reached.

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[18-04-2022_12-44-07] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38, 81: 39, 82: 40, 83: 41, 84: 42, 85: 43, 86: 44, 87: 45, 88: 46, 89: 47, 90: 48, 91: 48, 92: 48, 93: 49, 94: 49, 95: 49, 96: 49, 97: 50, 98: 50, 99: 50, 100: 51, 101: 51, 102: 51, 103: 52, 104: 52, 105: 52, 106: 53, 107: 53, 108: 53, 109: 54, 110: 54, 111: 54, 112: 54, 113: 55, 114: 56, 115: 57, 116: 58, 117: 58, 118: 58, 119: 59, 120: 59, 121: 59, 122: 59, 123: 60, 124: 60, 125: 60, 126: 61, 127: 61, 128: 61, 129: 62, 130: 62, 131: 62, 132: 63, 133: 63, 134: 63, 135: 64, 136: 64, 137: 64, 138: 64, 139: 65, 140: 66}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80, 39: 81, 40: 82, 41: 83, 42: 84, 43: 85, 44: 86, 45: 87, 46: 88, 47: 89, 48: 92, 49: 96, 50: 99, 51: 102, 52: 105, 53: 108, 54: 112, 55: 113, 56: 114, 57: 115, 58: 118, 59: 122, 60: 125, 61: 128, 62: 131, 63: 134, 64: 138, 65: 139, 66: 140}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24, 43: 25, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29, 49: 29, 50: 30, 51: 30, 52: 30, 53: 31, 54: 31, 55: 32, 56: 32, 57: 33, 58: 34, 59: 34, 60: 35, 61: 35, 62: 35, 63: 36, 64: 36, 65: 37, 66: 38}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42, 25: 44, 26: 45, 27: 46, 28: 47, 29: 49, 30: 52, 31: 54, 32: 56, 33: 57, 34: 59, 35: 62, 36: 64, 37: 65, 38: 66}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13, 31: 14, 32: 14, 33: 15, 34: 15, 35: 15, 36: 16, 37: 16, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30, 14: 32, 15: 35, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-44-07] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38, 81: 39, 82: 40, 83: 41, 84: 42, 85: 43, 86: 44, 87: 45, 88: 46, 89: 47, 90: 48, 91: 48, 92: 48, 93: 49, 94: 49, 95: 49, 96: 49, 97: 50, 98: 50, 99: 50, 100: 51, 101: 51, 102: 51, 103: 52, 104: 52, 105: 52, 106: 53, 107: 53, 108: 53, 109: 54, 110: 54, 111: 54, 112: 54, 113: 55, 114: 56, 115: 57, 116: 58, 117: 58, 118: 58, 119: 59, 120: 59, 121: 59, 122: 59, 123: 60, 124: 60, 125: 60, 126: 61, 127: 61, 128: 61, 129: 62, 130: 62, 131: 62, 132: 63, 133: 63, 134: 63, 135: 64, 136: 64, 137: 64, 138: 64, 139: 65, 140: 66}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80, 39: 81, 40: 82, 41: 83, 42: 84, 43: 85, 44: 86, 45: 87, 46: 88, 47: 89, 48: 92, 49: 96, 50: 99, 51: 102, 52: 105, 53: 108, 54: 112, 55: 113, 56: 114, 57: 115, 58: 118, 59: 122, 60: 125, 61: 128, 62: 131, 63: 134, 64: 138, 65: 139, 66: 140}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24, 43: 25, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29, 49: 29, 50: 30, 51: 30, 52: 30, 53: 31, 54: 31, 55: 32, 56: 32, 57: 33, 58: 34, 59: 34, 60: 35, 61: 35, 62: 35, 63: 36, 64: 36, 65: 37, 66: 38, 67: 39, 68: 40, 69: 40, 70: 41, 71: 42}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42, 25: 44, 26: 45, 27: 46, 28: 47, 29: 49, 30: 52, 31: 54, 32: 56, 33: 57, 34: 59, 35: 62, 36: 64, 37: 65, 38: 66, 39: 67, 40: 69, 41: 70, 42: 71}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13, 31: 14, 32: 14, 33: 15, 34: 15, 35: 15, 36: 16, 37: 16, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30, 14: 32, 15: 35, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-44-07] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 42, Last requested goal index = 42, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[18-04-2022_12-44-07] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.458589s, Solving = 0.098952s, Total = 0.557541s, Memory = (RSS = 2484.191406Mb, VMS = 2497.527344Mb), Step range = [66-71]), Calls = 3
Model :: Total atoms = 19970, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[18-04-2022_12-44-07] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                  Steps = 5 :: Actions = 5                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 25:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 26:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 27:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 28:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 29:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 30:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : move((store_room,1))
Step 31:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 37:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 38:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 39:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 40:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 41:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 42:
    Current Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 43:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 44:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 45:
    Current Sub-goals:
        [Index = 26] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 26] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 46:
    Current Sub-goals:
        [Index = 27] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 27] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,2))
Step 47:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 48:
    Current Sub-goals:
        [Index = 29] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 49:
    Current Sub-goals:
        [Index = 29] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 29] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 50:
    Current Sub-goals:
        [Index = 30] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 51:
    Current Sub-goals:
        [Index = 30] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 52:
    Current Sub-goals:
        [Index = 30] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 30] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 53:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 54:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 55:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
Step 56:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
Step 57:
    Current Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 58:
    Current Sub-goals:
        [Index = 34] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 59:
    Current Sub-goals:
        [Index = 34] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 34] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 60:
    Current Sub-goals:
        [Index = 35] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 61:
    Current Sub-goals:
        [Index = 35] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 62:
    Current Sub-goals:
        [Index = 35] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 35] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 63:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 64:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 36] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 65:
    Current Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 66:
    Current Sub-goals:
        [Index = 38] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 38] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 67:
    Current Sub-goals:
        [Index = 39] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 39] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,5))
Step 68:
    Current Sub-goals:
        [Index = 40] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,1)))
Step 69:
    Current Sub-goals:
        [Index = 40] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Achieved Sub-goals:
        [Index = 40] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,1))
Step 70:
    Current Sub-goals:
        [Index = 41] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 41] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_1,(block,4),(block,5))
Step 71:
    Current Sub-goals:
        [Index = 42] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 42] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_end_2,(block,1),(block,2))

[18-04-2022_12-44-07] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=66, end_step=None

[18-04-2022_12-44-07] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for parts of the existing plan at the current level that have already been divided: start_step=66

[18-04-2022_12-44-07] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=66

[18-04-2022_12-44-07] DEBUG :: ASH Planner Main #1 >> Preparing to invoke division strategy...

[18-04-2022_12-44-07] DEBUG :: ASH Planner Main #1 >> Online method OnlineMethod.GroundFirst chose to invoke the division strategy before a downwards level change:Current increment = 17, Current planning level is complete = True

[18-04-2022_12-44-07] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 71, chosen step range to extract = range(66, 72)

[18-04-2022_12-44-07] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 71, Total actions = 71, Produced sub-goal stages = 71, Produced sub-goal literals = 80
Level [1]: Length = 140, Total actions = 140, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-44-07] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =   5, AC =   5, CF = 1.0, GT =   7.00s, ST =   1.62s, OT = 0.00s, TT =   8.62s, EF = (LE = 1.2, AC = 1.2), ED = (LE = 0.5, AC = 0.5), EB = (LE = 0.4, AC = 0.4)

[18-04-2022_12-44-07] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=5, start_step=66, blend=Blend(left=0, right=0)

[18-04-2022_12-44-07] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=1, small_group_size=2, large_group_size=3

[18-04-2022_12-44-07] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=68, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[18-04-2022_12-44-07] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 2, Problem Range = [17-18], Size = 5, Sub-goal Stage Range = [67-71]
Division points [total=1] : [(Index = 68, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[18-04-2022_12-44-07] DEBUG :: ASH Planner Main #1 >> Monolevel problem 9 at level 2 solved.

[18-04-2022_12-44-07] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 17 at level 1:
Total Templated Partial Problems = 2, Problem Range = [17-18], Size = 5, Sub-goal Stage Range = [67-71]
Division points [total=1] : [(Index = 68, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[18-04-2022_12-44-07] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [67-68]

[18-04-2022_12-44-07] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 140, chosen step range to extract = range(0, 141)

[18-04-2022_12-44-07] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 71, Total actions = 71, Produced sub-goal stages = 71, Produced sub-goal literals = 80
Level [1]: Length = 140, Total actions = 140, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-44-07] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 71, chosen step range to extract = range(0, 72)

[18-04-2022_12-44-07] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 71, Total actions = 71, Produced sub-goal stages = 71, Produced sub-goal literals = 80
Level [1]: Length = 140, Total actions = 140, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-44-07] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 42, chosen step range to extract = range(0, 43)

[18-04-2022_12-44-07] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 71, Total actions = 71, Produced sub-goal stages = 71, Produced sub-goal literals = 80
Level [1]: Length = 140, Total actions = 140, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-44-07] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 20, chosen step range to extract = range(0, 21)

[18-04-2022_12-44-07] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 71, Total actions = 71, Produced sub-goal stages = 71, Produced sub-goal literals = 80
Level [1]: Length = 140, Total actions = 140, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-44-07] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [67-68], problem number = 17, increment number = 17

[18-04-2022_12-44-07] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 67)
	('last_sgoals', 68)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1735.335449299996)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[18-04-2022_12-44-07] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [67-68] : Concurrency disabled : Minimum search length bound enabled with value 141

[18-04-2022_12-44-07] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 67
last_sgoals = 68
start_step = 140
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 141

[18-04-2022_12-44-07] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[18-04-2022_12-44-07] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[18-04-2022_12-44-07] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[18-04-2022_12-44-07] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[18-04-2022_12-44-07] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-44-07] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 140 as problem start state.

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,4))', 'S': 140})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 140})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 140})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 140})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 140})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 140})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 140})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,4)', 'S': 140})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 140})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '((puzzle_room,1),5,0)', 'S': 140})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '((puzzle_room,1),5,0)', 'S': 140})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '((puzzle_room,1),5,0)', 'S': 140})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '((puzzle_room,1),5,0)', 'S': 140})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '((puzzle_room,1),5,0)', 'S': 140})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '((puzzle_room,1),5,0)', 'S': 140})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '((puzzle_room,1),5,0)', 'S': 140})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '((puzzle_room,1),5,0)', 'S': 140})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '((puzzle_room,1),5,0)', 'S': 140})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '((puzzle_room,1),5,0)', 'S': 140})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '((puzzle_room,1),5,0)', 'S': 140})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '((puzzle_room,1),5,0)', 'S': 140})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '((puzzle_room,1),5,0)', 'S': 140})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '((puzzle_room,1),5,0)', 'S': 140})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '((puzzle_room,1),5,0)', 'S': 140})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '((puzzle_room,1),5,0)', 'S': 140})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '((puzzle_room,1),5,0)', 'S': 140})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 140})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 140})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 140})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 140})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 140})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 140})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 140})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 140})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 140})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 140})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 140})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 140})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 140})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 140})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 140})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,4))', 'S': 140})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 140})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 140})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 140})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 140})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 140})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 140})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_1)', 'V': '(block,4)', 'S': 140})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 140})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 140})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 140})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 140})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': '(puzzle_room,1)', 'S': 140})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 140})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 140})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 140})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 140})
Fluent({'L': 2, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 140})
Fluent({'L': 2, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 140})
Fluent({'L': 2, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 140})
Fluent({'L': 2, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 140})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 140})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 140})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 140})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 140})
Fluent({'L': 2, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 140})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 140})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 140})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 140})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 140})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 140})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 140})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 140})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 140})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 140})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 140})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 140})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 140})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 140})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 140})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 140})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 140})

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 164 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 140).
holds(1, complete_tower(red,puzzle_room_table), false, 140).
holds(1, configuration(manipulator_end_1), aligned_with((block,4)), 140).
holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 140).
holds(1, configuration(manipulator_limb_1), extended, 140).
holds(1, configuration(manipulator_limb_2), extended, 140).
holds(1, configuration(puzzle_room_door), open, 140).
holds(1, configuration(starting_room_door), closed, 140).
holds(1, configuration(store_room_door), open, 140).
holds(1, grasping(manipulator_end_1), (block,4), 140).
holds(1, grasping(manipulator_end_2), (block,5), 140).
holds(1, in((block,1)), ((puzzle_room,1),5,0), 140).
holds(1, in((block,2)), ((puzzle_room,1),5,0), 140).
holds(1, in((block,3)), ((puzzle_room,1),5,0), 140).
holds(1, in((block,4)), ((puzzle_room,1),5,0), 140).
holds(1, in((block,5)), ((puzzle_room,1),5,0), 140).
holds(1, in((block,6)), ((puzzle_room,1),5,0), 140).
holds(1, in(manipulator_arm_1), ((puzzle_room,1),5,0), 140).
holds(1, in(manipulator_arm_2), ((puzzle_room,1),5,0), 140).
holds(1, in(manipulator_end_1), ((puzzle_room,1),5,0), 140).
holds(1, in(manipulator_end_2), ((puzzle_room,1),5,0), 140).
holds(1, in(manipulator_limb_1), ((puzzle_room,1),5,0), 140).
holds(1, in(manipulator_limb_2), ((puzzle_room,1),5,0), 140).
holds(1, in(puzzle_room_table), ((puzzle_room,1),5,0), 140).
holds(1, in(puzzle_room_table_left), ((puzzle_room,1),5,0), 140).
holds(1, in(puzzle_room_table_middle), ((puzzle_room,1),5,0), 140).
holds(1, in(puzzle_room_table_right), ((puzzle_room,1),5,0), 140).
holds(1, in(talos), ((puzzle_room,1),5,0), 140).
holds(1, in_tower((block,1),(block,1)), true, 140).
holds(1, in_tower((block,1),(block,2)), false, 140).
holds(1, in_tower((block,1),(block,3)), false, 140).
holds(1, in_tower((block,1),(block,4)), false, 140).
holds(1, in_tower((block,1),(block,5)), false, 140).
holds(1, in_tower((block,1),(block,6)), false, 140).
holds(1, in_tower((block,2),(block,1)), false, 140).
holds(1, in_tower((block,2),(block,2)), false, 140).
holds(1, in_tower((block,2),(block,3)), false, 140).
holds(1, in_tower((block,2),(block,4)), false, 140).
holds(1, in_tower((block,2),(block,5)), false, 140).
holds(1, in_tower((block,2),(block,6)), false, 140).
holds(1, in_tower((block,3),(block,1)), false, 140).
holds(1, in_tower((block,3),(block,2)), true, 140).
holds(1, in_tower((block,3),(block,3)), true, 140).
holds(1, in_tower((block,3),(block,4)), false, 140).
holds(1, in_tower((block,3),(block,5)), false, 140).
holds(1, in_tower((block,3),(block,6)), false, 140).
holds(1, in_tower((block,4),(block,1)), false, 140).
holds(1, in_tower((block,4),(block,2)), false, 140).
holds(1, in_tower((block,4),(block,3)), false, 140).
holds(1, in_tower((block,4),(block,4)), false, 140).
holds(1, in_tower((block,4),(block,5)), false, 140).
holds(1, in_tower((block,4),(block,6)), false, 140).
holds(1, in_tower((block,5),(block,1)), false, 140).
holds(1, in_tower((block,5),(block,2)), false, 140).
holds(1, in_tower((block,5),(block,3)), false, 140).
holds(1, in_tower((block,5),(block,4)), false, 140).
holds(1, in_tower((block,5),(block,5)), false, 140).
holds(1, in_tower((block,5),(block,6)), false, 140).
holds(1, in_tower((block,6),(block,1)), false, 140).
holds(1, in_tower((block,6),(block,2)), false, 140).
holds(1, in_tower((block,6),(block,3)), false, 140).
holds(1, in_tower((block,6),(block,4)), false, 140).
holds(1, in_tower((block,6),(block,5)), true, 140).
holds(1, in_tower((block,6),(block,6)), true, 140).
holds(1, on((block,1)), puzzle_room_table_left, 140).
holds(1, on((block,2)), (block,3), 140).
holds(1, on((block,3)), puzzle_room_table_left, 140).
holds(1, on((block,4)), nothing, 140).
holds(1, on((block,5)), (block,6), 140).
holds(1, on((block,6)), puzzle_room_table_right, 140).
holds(1, tower_base((block,1),puzzle_room_table), true, 140).
holds(1, tower_base((block,2),puzzle_room_table), false, 140).
holds(1, tower_base((block,3),puzzle_room_table), true, 140).
holds(1, tower_base((block,4),puzzle_room_table), false, 140).
holds(1, tower_base((block,5),puzzle_room_table), false, 140).
holds(1, tower_base((block,6),puzzle_room_table), true, 140).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 140).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 140).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 140).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 140).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 140).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 140).
holds(2, complete_tower(blue,puzzle_room_table), false, 140).
holds(2, complete_tower(red,puzzle_room_table), false, 140).
holds(2, configuration(manipulator_end_1), aligned_with((block,4)), 140).
holds(2, configuration(manipulator_end_2), aligned_with((block,5)), 140).
holds(2, configuration(manipulator_limb_1), extended, 140).
holds(2, configuration(manipulator_limb_2), extended, 140).
holds(2, configuration(puzzle_room_door), open, 140).
holds(2, configuration(starting_room_door), closed, 140).
holds(2, configuration(store_room_door), open, 140).
holds(2, grasping(manipulator_end_1), (block,4), 140).
holds(2, grasping(manipulator_end_2), (block,5), 140).
holds(2, in((block,1)), (puzzle_room,1), 140).
holds(2, in((block,2)), (puzzle_room,1), 140).
holds(2, in((block,3)), (puzzle_room,1), 140).
holds(2, in((block,4)), (puzzle_room,1), 140).
holds(2, in((block,5)), (puzzle_room,1), 140).
holds(2, in((block,6)), (puzzle_room,1), 140).
holds(2, in(manipulator_arm_1), (puzzle_room,1), 140).
holds(2, in(manipulator_arm_2), (puzzle_room,1), 140).
holds(2, in(manipulator_end_1), (puzzle_room,1), 140).
holds(2, in(manipulator_end_2), (puzzle_room,1), 140).
holds(2, in(manipulator_limb_1), (puzzle_room,1), 140).
holds(2, in(manipulator_limb_2), (puzzle_room,1), 140).
holds(2, in(puzzle_room_table), (puzzle_room,1), 140).
holds(2, in(puzzle_room_table_left), (puzzle_room,1), 140).
holds(2, in(puzzle_room_table_middle), (puzzle_room,1), 140).
holds(2, in(puzzle_room_table_right), (puzzle_room,1), 140).
holds(2, in(talos), (puzzle_room,1), 140).
holds(2, in_tower((block,1),(block,1)), true, 140).
holds(2, in_tower((block,1),(block,2)), false, 140).
holds(2, in_tower((block,1),(block,3)), false, 140).
holds(2, in_tower((block,1),(block,4)), false, 140).
holds(2, in_tower((block,1),(block,5)), false, 140).
holds(2, in_tower((block,1),(block,6)), false, 140).
holds(2, in_tower((block,2),(block,1)), false, 140).
holds(2, in_tower((block,2),(block,2)), false, 140).
holds(2, in_tower((block,2),(block,3)), false, 140).
holds(2, in_tower((block,2),(block,4)), false, 140).
holds(2, in_tower((block,2),(block,5)), false, 140).
holds(2, in_tower((block,2),(block,6)), false, 140).
holds(2, in_tower((block,3),(block,1)), false, 140).
holds(2, in_tower((block,3),(block,2)), true, 140).
holds(2, in_tower((block,3),(block,3)), true, 140).
holds(2, in_tower((block,3),(block,4)), false, 140).
holds(2, in_tower((block,3),(block,5)), false, 140).
holds(2, in_tower((block,3),(block,6)), false, 140).
holds(2, in_tower((block,4),(block,1)), false, 140).
holds(2, in_tower((block,4),(block,2)), false, 140).
holds(2, in_tower((block,4),(block,3)), false, 140).
holds(2, in_tower((block,4),(block,4)), false, 140).
holds(2, in_tower((block,4),(block,5)), false, 140).
holds(2, in_tower((block,4),(block,6)), false, 140).
holds(2, in_tower((block,5),(block,1)), false, 140).
holds(2, in_tower((block,5),(block,2)), false, 140).
holds(2, in_tower((block,5),(block,3)), false, 140).
holds(2, in_tower((block,5),(block,4)), false, 140).
holds(2, in_tower((block,5),(block,5)), false, 140).
holds(2, in_tower((block,5),(block,6)), false, 140).
holds(2, in_tower((block,6),(block,1)), false, 140).
holds(2, in_tower((block,6),(block,2)), false, 140).
holds(2, in_tower((block,6),(block,3)), false, 140).
holds(2, in_tower((block,6),(block,4)), false, 140).
holds(2, in_tower((block,6),(block,5)), true, 140).
holds(2, in_tower((block,6),(block,6)), true, 140).
holds(2, on((block,1)), puzzle_room_table_left, 140).
holds(2, on((block,2)), (block,3), 140).
holds(2, on((block,3)), puzzle_room_table_left, 140).
holds(2, on((block,4)), nothing, 140).
holds(2, on((block,5)), (block,6), 140).
holds(2, on((block,6)), puzzle_room_table_right, 140).
holds(2, tower_base((block,1),puzzle_room_table), true, 140).
holds(2, tower_base((block,2),puzzle_room_table), false, 140).
holds(2, tower_base((block,3),puzzle_room_table), true, 140).
holds(2, tower_base((block,4),puzzle_room_table), false, 140).
holds(2, tower_base((block,5),puzzle_room_table), false, 140).
holds(2, tower_base((block,6),puzzle_room_table), true, 140).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 140).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 140).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 140).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 140).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 140).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 140).

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 308 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table_left, false).
final_goal(2, on((block,1)), puzzle_room_table_middle, false).
final_goal(2, on((block,1)), puzzle_room_table_right, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table_left, false).
final_goal(2, on((block,2)), puzzle_room_table_middle, false).
final_goal(2, on((block,2)), puzzle_room_table_right, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table_left, true).
final_goal(2, on((block,3)), puzzle_room_table_middle, false).
final_goal(2, on((block,3)), puzzle_room_table_right, false).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table_left, false).
final_goal(2, on((block,4)), puzzle_room_table_middle, false).
final_goal(2, on((block,4)), puzzle_room_table_right, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table_left, false).
final_goal(2, on((block,5)), puzzle_room_table_middle, false).
final_goal(2, on((block,5)), puzzle_room_table_right, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table_left, false).
final_goal(2, on((block,6)), puzzle_room_table_middle, false).
final_goal(2, on((block,6)), puzzle_room_table_right, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[18-04-2022_12-44-07] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=141']

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,5))', 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'I': 67})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,5))', 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'I': 67})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,1)))', 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,1))', 'I': 68})

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 3 rules into program part base:

sub_goal(2, talos, release(manipulator_end_2,(block,5)), configuration(manipulator_end_2), aligned_with(nothing), 67).
sub_goal(2, talos, release(manipulator_end_2,(block,5)), grasping(manipulator_end_2), nothing, 67).
sub_goal(2, talos, configure(manipulator_end_2,aligned_with((block,1))), configuration(manipulator_end_2), aligned_with((block,1)), 68).

[18-04-2022_12-44-07] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=141']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A80DA11670>]
	incrementor = SolveIncrementor(step_start=140, step_increase=1, step_increase_initial=2, step_end_min=142, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1735.335449299996, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 140), range_=None), IncPart(name='plan_module', args=('#inc', 140, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 140, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 140, 67, 68, 'sequential', 'false'), range_=None)]

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 844 rules

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.00525999999990745s

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.171884s.

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.024908s with result Satisfiable.

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A8A4E4BE50>

[18-04-2022_12-44-07] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 140)
	('last_sgoals', 68)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('first_sgoals', 67)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A8A4E4BE50>)

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 140). %* None *%
#program plan_module(#inc, 140, false, false). %* None *%
#program optimisation_module(#inc, 140, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 140, 67, 68, sequential, false). %* None *%

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =    139 : Current =    141
Incrementor step ends | Minimum  =    142 : Maximum =    300

[18-04-2022_12-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(141)]), ('state_module', [Number(140), Number(140)]), ('plan_module', [Number(140), Number(140), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(140), Number(140), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(140)]), ('action_preconditions', [Number(140)]), ('variable_relations', [Number(140)]), ('abstraction_mappings', [Number(140)]), ('conformance_module', [Number(140), Number(140), Number(67), Number(68), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(141), Number(140)]), ('plan_module', [Number(141), Number(140), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(141), Number(140), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(141)]), ('action_preconditions', [Number(141)]), ('variable_relations', [Number(141)]), ('abstraction_mappings', [Number(141)]), ('conformance_module', [Number(141), Number(140), Number(67), Number(68), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.426576s.

[18-04-2022_12-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.031976s with result Unsatisfiable.

[18-04-2022_12-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4585525000002235, Incremental time limit = None
Running cumulative time = 0.4585525000002235, Cumulative time limit = 1735.335449299996
Used memory = (RSS = 2480.179688Mb, VMS = 2493.507812Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =    141 : Current =    142
Incrementor step ends | Minimum  =    142 : Maximum =    300

[18-04-2022_12-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(142)]), ('state_module', [Number(142), Number(140)]), ('plan_module', [Number(142), Number(140), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(142), Number(140), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(142)]), ('action_preconditions', [Number(142)]), ('variable_relations', [Number(142)]), ('abstraction_mappings', [Number(142)]), ('conformance_module', [Number(142), Number(140), Number(67), Number(68), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.178185s.

[18-04-2022_12-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.027278s with result Satisfiable.

[18-04-2022_12-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2054625999999189, Incremental time limit = None
Running cumulative time = 0.6640151000001424, Cumulative time limit = 1735.335449299996
Used memory = (RSS = 2482.433594Mb, VMS = 2495.765625Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.604761s, Solving = 0.059254s, Total = 0.664015s, Memory = (RSS = 2482.433594Mb, VMS = 2495.765625Mb), Step range = [140-142]), Calls = 2
Final Model :: Total atoms = 21721, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[18-04-2022_12-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.426576s, Solving = 0.031976s, Total = 0.458553s, Memory = (RSS = 2480.179688Mb, VMS = 2493.507812Mb), Step range = [140-141]
2 : Statistics :: Grounding = 0.178185s, Solving = 0.027278s, Total = 0.205463s, Memory = (RSS = 2482.433594Mb, VMS = 2495.765625Mb), Step range = [142-142]

[18-04-2022_12-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.664015s due to: Stop condition reached.

[18-04-2022_12-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[18-04-2022_12-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[18-04-2022_12-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[18-04-2022_12-44-08] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38, 81: 39, 82: 40, 83: 41, 84: 42, 85: 43, 86: 44, 87: 45, 88: 46, 89: 47, 90: 48, 91: 48, 92: 48, 93: 49, 94: 49, 95: 49, 96: 49, 97: 50, 98: 50, 99: 50, 100: 51, 101: 51, 102: 51, 103: 52, 104: 52, 105: 52, 106: 53, 107: 53, 108: 53, 109: 54, 110: 54, 111: 54, 112: 54, 113: 55, 114: 56, 115: 57, 116: 58, 117: 58, 118: 58, 119: 59, 120: 59, 121: 59, 122: 59, 123: 60, 124: 60, 125: 60, 126: 61, 127: 61, 128: 61, 129: 62, 130: 62, 131: 62, 132: 63, 133: 63, 134: 63, 135: 64, 136: 64, 137: 64, 138: 64, 139: 65, 140: 66}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80, 39: 81, 40: 82, 41: 83, 42: 84, 43: 85, 44: 86, 45: 87, 46: 88, 47: 89, 48: 92, 49: 96, 50: 99, 51: 102, 52: 105, 53: 108, 54: 112, 55: 113, 56: 114, 57: 115, 58: 118, 59: 122, 60: 125, 61: 128, 62: 131, 63: 134, 64: 138, 65: 139, 66: 140}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24, 43: 25, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29, 49: 29, 50: 30, 51: 30, 52: 30, 53: 31, 54: 31, 55: 32, 56: 32, 57: 33, 58: 34, 59: 34, 60: 35, 61: 35, 62: 35, 63: 36, 64: 36, 65: 37, 66: 38, 67: 39, 68: 40, 69: 40, 70: 41, 71: 42}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42, 25: 44, 26: 45, 27: 46, 28: 47, 29: 49, 30: 52, 31: 54, 32: 56, 33: 57, 34: 59, 35: 62, 36: 64, 37: 65, 38: 66, 39: 67, 40: 69, 41: 70, 42: 71}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13, 31: 14, 32: 14, 33: 15, 34: 15, 35: 15, 36: 16, 37: 16, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30, 14: 32, 15: 35, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-44-09] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38, 81: 39, 82: 40, 83: 41, 84: 42, 85: 43, 86: 44, 87: 45, 88: 46, 89: 47, 90: 48, 91: 48, 92: 48, 93: 49, 94: 49, 95: 49, 96: 49, 97: 50, 98: 50, 99: 50, 100: 51, 101: 51, 102: 51, 103: 52, 104: 52, 105: 52, 106: 53, 107: 53, 108: 53, 109: 54, 110: 54, 111: 54, 112: 54, 113: 55, 114: 56, 115: 57, 116: 58, 117: 58, 118: 58, 119: 59, 120: 59, 121: 59, 122: 59, 123: 60, 124: 60, 125: 60, 126: 61, 127: 61, 128: 61, 129: 62, 130: 62, 131: 62, 132: 63, 133: 63, 134: 63, 135: 64, 136: 64, 137: 64, 138: 64, 139: 65, 140: 66, 141: 67, 142: 68}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80, 39: 81, 40: 82, 41: 83, 42: 84, 43: 85, 44: 86, 45: 87, 46: 88, 47: 89, 48: 92, 49: 96, 50: 99, 51: 102, 52: 105, 53: 108, 54: 112, 55: 113, 56: 114, 57: 115, 58: 118, 59: 122, 60: 125, 61: 128, 62: 131, 63: 134, 64: 138, 65: 139, 66: 140, 67: 141, 68: 142}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24, 43: 25, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29, 49: 29, 50: 30, 51: 30, 52: 30, 53: 31, 54: 31, 55: 32, 56: 32, 57: 33, 58: 34, 59: 34, 60: 35, 61: 35, 62: 35, 63: 36, 64: 36, 65: 37, 66: 38, 67: 39, 68: 40, 69: 40, 70: 41, 71: 42}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42, 25: 44, 26: 45, 27: 46, 28: 47, 29: 49, 30: 52, 31: 54, 32: 56, 33: 57, 34: 59, 35: 62, 36: 64, 37: 65, 38: 66, 39: 67, 40: 69, 41: 70, 42: 71}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13, 31: 14, 32: 14, 33: 15, 34: 15, 35: 15, 36: 16, 37: 16, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30, 14: 32, 15: 35, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-44-09] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 68, Last requested goal index = 68, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[18-04-2022_12-44-09] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.604761s, Solving = 0.059254s, Total = 0.664015s, Memory = (RSS = 2482.433594Mb, VMS = 2495.765625Mb), Step range = [140-142]), Calls = 2
Model :: Total atoms = 21721, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[18-04-2022_12-44-09] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 2 :: Actions = 2                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Planned actions:
        talos : move(((starting_room,1),3,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),4,0))
Step 5:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,0))
Step 6:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,1))
Step 7:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),4,0))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,0))
Step 9:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 10:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 11:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 12:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 13:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 5] talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(store_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 5] talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(store_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 17:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 21:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 23:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 24:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 25:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 26:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 27:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 28:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(puzzle_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(puzzle_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 31:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 35:
    Current Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 37:
    Current Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 38:
    Current Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 39:
    Current Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 40:
    Current Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 41:
    Current Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 42:
    Current Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 43:
    Current Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 44:
    Current Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Planned actions:
        talos : move(((store_room,0),2,1))
Step 45:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 46:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 47:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),0,0))
Step 48:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 49:
    Current Sub-goals:
        [Index = 23] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Achieved Sub-goals:
        [Index = 23] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 50:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 51:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 52:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 53:
    Current Sub-goals:
        [Index = 27] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Achieved Sub-goals:
        [Index = 27] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 54:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 55:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 56:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 29] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 57:
    Current Sub-goals:
        [Index = 30] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 58:
    Current Sub-goals:
        [Index = 30] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 30] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),3,0))
Step 59:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,0))
Step 60:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 61:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 62:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 63:
    Current Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 64:
    Current Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 65:
    Current Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 66:
    Current Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 67:
    Current Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 68:
    Current Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 69:
    Current Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 70:
    Current Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 71:
    Current Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Planned actions:
        talos : move(((puzzle_room,0),0,1))
Step 72:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),0,0))
Step 73:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,0))
Step 74:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),2,0))
Step 75:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Planned actions:
        talos : move(((puzzle_room,1),3,0))
Step 76:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),4,0))
Step 77:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),5,0))
Step 78:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 79:
    Current Sub-goals:
        [Index = 37] talos : put(manipulator_end_1,(block,6),puzzle_room_table_right) -> on((block,6)) = puzzle_room_table_right
    Achieved Sub-goals:
        [Index = 37] talos : put(manipulator_end_1,(block,6),puzzle_room_table_right) -> on((block,6)) = puzzle_room_table_right
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 80:
    Current Sub-goals:
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 81:
    Current Sub-goals:
        [Index = 39] talos : configure(manipulator_end_1,aligned_with((block,3))) -> configuration(manipulator_end_1) = aligned_with((block,3))
    Achieved Sub-goals:
        [Index = 39] talos : configure(manipulator_end_1,aligned_with((block,3))) -> configuration(manipulator_end_1) = aligned_with((block,3))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 82:
    Current Sub-goals:
        [Index = 40] talos : grasp(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = (block,3)
    Achieved Sub-goals:
        [Index = 40] talos : grasp(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 83:
    Current Sub-goals:
        [Index = 41] talos : put(manipulator_end_1,(block,3),puzzle_room_table_left) -> on((block,3)) = puzzle_room_table_left
    Achieved Sub-goals:
        [Index = 41] talos : put(manipulator_end_1,(block,3),puzzle_room_table_left) -> on((block,3)) = puzzle_room_table_left
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 84:
    Current Sub-goals:
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 85:
    Current Sub-goals:
        [Index = 43] talos : configure(manipulator_end_1,aligned_with((block,2))) -> configuration(manipulator_end_1) = aligned_with((block,2))
    Achieved Sub-goals:
        [Index = 43] talos : configure(manipulator_end_1,aligned_with((block,2))) -> configuration(manipulator_end_1) = aligned_with((block,2))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 86:
    Current Sub-goals:
        [Index = 44] talos : grasp(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = (block,2)
    Achieved Sub-goals:
        [Index = 44] talos : grasp(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 87:
    Current Sub-goals:
        [Index = 45] talos : put(manipulator_end_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 45] talos : put(manipulator_end_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 88:
    Current Sub-goals:
        [Index = 46] talos : release(manipulator_end_1,(block,2)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 46] talos : release(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 46] talos : release(manipulator_end_1,(block,2)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 46] talos : release(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,2))
Step 89:
    Current Sub-goals:
        [Index = 47] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 47] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 47] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 47] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 90:
    Current Sub-goals:
        [Index = 48] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),4,0))
Step 91:
    Current Sub-goals:
        [Index = 48] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),3,0))
Step 92:
    Current Sub-goals:
        [Index = 48] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
        [Index = 48] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Planned actions:
        talos : move(((puzzle_room,0),2,0))
Step 93:
    Current Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,0))
Step 94:
    Current Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,1))
Step 95:
    Current Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),0,1))
Step 96:
    Current Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 97:
    Current Sub-goals:
        [Index = 50] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 98:
    Current Sub-goals:
        [Index = 50] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 99:
    Current Sub-goals:
        [Index = 50] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 50] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 100:
    Current Sub-goals:
        [Index = 51] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 101:
    Current Sub-goals:
        [Index = 51] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 102:
    Current Sub-goals:
        [Index = 51] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 51] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 103:
    Current Sub-goals:
        [Index = 52] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 104:
    Current Sub-goals:
        [Index = 52] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 105:
    Current Sub-goals:
        [Index = 52] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 52] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 106:
    Current Sub-goals:
        [Index = 53] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 107:
    Current Sub-goals:
        [Index = 53] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 108:
    Current Sub-goals:
        [Index = 53] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
        [Index = 53] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Planned actions:
        talos : move(((store_room,0),2,1))
Step 109:
    Current Sub-goals:
        [Index = 54] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 110:
    Current Sub-goals:
        [Index = 54] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 111:
    Current Sub-goals:
        [Index = 54] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),0,0))
Step 112:
    Current Sub-goals:
        [Index = 54] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 54] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 113:
    Current Sub-goals:
        [Index = 55] talos : configure(manipulator_end_1,aligned_with((block,4))) -> configuration(manipulator_end_1) = aligned_with((block,4))
    Achieved Sub-goals:
        [Index = 55] talos : configure(manipulator_end_1,aligned_with((block,4))) -> configuration(manipulator_end_1) = aligned_with((block,4))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
Step 114:
    Current Sub-goals:
        [Index = 56] talos : grasp(manipulator_end_1,(block,4)) -> grasping(manipulator_end_1) = (block,4)
    Achieved Sub-goals:
        [Index = 56] talos : grasp(manipulator_end_1,(block,4)) -> grasping(manipulator_end_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
Step 115:
    Current Sub-goals:
        [Index = 57] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 57] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 116:
    Current Sub-goals:
        [Index = 58] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 117:
    Current Sub-goals:
        [Index = 58] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 118:
    Current Sub-goals:
        [Index = 58] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 58] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),3,0))
Step 119:
    Current Sub-goals:
        [Index = 59] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,0))
Step 120:
    Current Sub-goals:
        [Index = 59] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 121:
    Current Sub-goals:
        [Index = 59] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 122:
    Current Sub-goals:
        [Index = 59] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 59] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 123:
    Current Sub-goals:
        [Index = 60] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 124:
    Current Sub-goals:
        [Index = 60] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 125:
    Current Sub-goals:
        [Index = 60] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 60] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 126:
    Current Sub-goals:
        [Index = 61] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 127:
    Current Sub-goals:
        [Index = 61] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 128:
    Current Sub-goals:
        [Index = 61] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 61] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 129:
    Current Sub-goals:
        [Index = 62] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 130:
    Current Sub-goals:
        [Index = 62] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 131:
    Current Sub-goals:
        [Index = 62] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
        [Index = 62] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Planned actions:
        talos : move(((puzzle_room,0),0,1))
Step 132:
    Current Sub-goals:
        [Index = 63] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,1))
Step 133:
    Current Sub-goals:
        [Index = 63] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),2,1))
Step 134:
    Current Sub-goals:
        [Index = 63] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
        [Index = 63] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Planned actions:
        talos : move(((puzzle_room,1),3,1))
Step 135:
    Current Sub-goals:
        [Index = 64] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),4,1))
Step 136:
    Current Sub-goals:
        [Index = 64] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),5,1))
Step 137:
    Current Sub-goals:
        [Index = 64] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),5,0))
Step 138:
    Current Sub-goals:
        [Index = 64] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 64] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 139:
    Current Sub-goals:
        [Index = 65] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 65] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 140:
    Current Sub-goals:
        [Index = 66] talos : put(manipulator_end_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 66] talos : put(manipulator_end_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 141:
    Current Sub-goals:
        [Index = 67] talos : release(manipulator_end_2,(block,5)) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 67] talos : release(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = nothing
    Achieved Sub-goals:
        [Index = 67] talos : release(manipulator_end_2,(block,5)) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 67] talos : release(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,5))
Step 142:
    Current Sub-goals:
        [Index = 68] talos : configure(manipulator_end_2,aligned_with((block,1))) -> configuration(manipulator_end_2) = aligned_with((block,1))
    Achieved Sub-goals:
        [Index = 68] talos : configure(manipulator_end_2,aligned_with((block,1))) -> configuration(manipulator_end_2) = aligned_with((block,1))
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,1)))

[18-04-2022_12-44-09] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[18-04-2022_12-44-09] DEBUG :: ASH Planner Main #1 >> Value of end step of abstract plan to divide adjusted for right blend of current problem: end_step=142

[18-04-2022_12-44-09] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[18-04-2022_12-44-09] DEBUG :: ASH Planner Main #1 >> Monolevel problem 17 at level 1 solved.

[18-04-2022_12-44-09] DEBUG :: ASH Planner Main #1 >> Online planning increment 17 finished.

[18-04-2022_12-44-09] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 3 : Total constraining sub-goal stages = 20 : Goals achieved = 20 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 9 : Total constraining sub-goal stages = 42 : Goals achieved = 42 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 17 : Total constraining sub-goal stages = 71 : Goals achieved = 68 : Goals unachieved = 3 : Complete = False

[18-04-2022_12-44-09] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[18-04-2022_12-44-09] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 18 by method ground-first is [1-1].

[18-04-2022_12-44-09] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 18 at level 1:
Total Templated Partial Problems = 2, Problem Range = [17-18], Size = 5, Sub-goal Stage Range = [67-71]
Division points [total=1] : [(Index = 68, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[18-04-2022_12-44-09] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [69-71]

[18-04-2022_12-44-09] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 142, chosen step range to extract = range(0, 143)

[18-04-2022_12-44-09] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 71, Total actions = 71, Produced sub-goal stages = 71, Produced sub-goal literals = 80
Level [1]: Length = 142, Total actions = 142, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-44-09] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 71, chosen step range to extract = range(0, 72)

[18-04-2022_12-44-09] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 71, Total actions = 71, Produced sub-goal stages = 71, Produced sub-goal literals = 80
Level [1]: Length = 142, Total actions = 142, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-44-09] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 42, chosen step range to extract = range(0, 43)

[18-04-2022_12-44-09] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 71, Total actions = 71, Produced sub-goal stages = 71, Produced sub-goal literals = 80
Level [1]: Length = 142, Total actions = 142, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-44-09] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 20, chosen step range to extract = range(0, 21)

[18-04-2022_12-44-09] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 71, Total actions = 71, Produced sub-goal stages = 71, Produced sub-goal literals = 80
Level [1]: Length = 142, Total actions = 142, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-44-09] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [69-71], problem number = 18, increment number = 18

[18-04-2022_12-44-09] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 69)
	('last_sgoals', 71)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1734.671434199996)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[18-04-2022_12-44-09] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [69-71] : Concurrency disabled : Minimum search length bound enabled with value 144

[18-04-2022_12-44-09] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 69
last_sgoals = 71
start_step = 142
is_initial = False
is_final = True
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 144

[18-04-2022_12-44-09] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[18-04-2022_12-44-09] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[18-04-2022_12-44-09] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[18-04-2022_12-44-09] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[18-04-2022_12-44-09] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-44-09] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 142 as problem start state.

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,4))', 'S': 142})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,1))', 'S': 142})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 142})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 142})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 142})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 142})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 142})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,4)', 'S': 142})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 142})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '((puzzle_room,1),5,0)', 'S': 142})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '((puzzle_room,1),5,0)', 'S': 142})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '((puzzle_room,1),5,0)', 'S': 142})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '((puzzle_room,1),5,0)', 'S': 142})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '((puzzle_room,1),5,0)', 'S': 142})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '((puzzle_room,1),5,0)', 'S': 142})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '((puzzle_room,1),5,0)', 'S': 142})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '((puzzle_room,1),5,0)', 'S': 142})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '((puzzle_room,1),5,0)', 'S': 142})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '((puzzle_room,1),5,0)', 'S': 142})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '((puzzle_room,1),5,0)', 'S': 142})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '((puzzle_room,1),5,0)', 'S': 142})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '((puzzle_room,1),5,0)', 'S': 142})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '((puzzle_room,1),5,0)', 'S': 142})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '((puzzle_room,1),5,0)', 'S': 142})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '((puzzle_room,1),5,0)', 'S': 142})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '((puzzle_room,1),5,0)', 'S': 142})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 142})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 142})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 142})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 142})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 142})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 142})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 142})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 142})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 142})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 142})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 142})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 142})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 142})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 142})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 142})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,4))', 'S': 142})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,1))', 'S': 142})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 142})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 142})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 142})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 142})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 142})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_1)', 'V': '(block,4)', 'S': 142})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 142})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 142})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 142})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 142})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': '(puzzle_room,1)', 'S': 142})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 142})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 142})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 142})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 142})
Fluent({'L': 2, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 142})
Fluent({'L': 2, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 142})
Fluent({'L': 2, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 142})
Fluent({'L': 2, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 142})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 142})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 142})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 142})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 142})
Fluent({'L': 2, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 142})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 142})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 142})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 142})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 142})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 142})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 142})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 142})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 142})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 142})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 142})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 142})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 142})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 142})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 142})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 142})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 142})

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 164 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 142).
holds(1, complete_tower(red,puzzle_room_table), false, 142).
holds(1, configuration(manipulator_end_1), aligned_with((block,4)), 142).
holds(1, configuration(manipulator_end_2), aligned_with((block,1)), 142).
holds(1, configuration(manipulator_limb_1), extended, 142).
holds(1, configuration(manipulator_limb_2), extended, 142).
holds(1, configuration(puzzle_room_door), open, 142).
holds(1, configuration(starting_room_door), closed, 142).
holds(1, configuration(store_room_door), open, 142).
holds(1, grasping(manipulator_end_1), (block,4), 142).
holds(1, grasping(manipulator_end_2), nothing, 142).
holds(1, in((block,1)), ((puzzle_room,1),5,0), 142).
holds(1, in((block,2)), ((puzzle_room,1),5,0), 142).
holds(1, in((block,3)), ((puzzle_room,1),5,0), 142).
holds(1, in((block,4)), ((puzzle_room,1),5,0), 142).
holds(1, in((block,5)), ((puzzle_room,1),5,0), 142).
holds(1, in((block,6)), ((puzzle_room,1),5,0), 142).
holds(1, in(manipulator_arm_1), ((puzzle_room,1),5,0), 142).
holds(1, in(manipulator_arm_2), ((puzzle_room,1),5,0), 142).
holds(1, in(manipulator_end_1), ((puzzle_room,1),5,0), 142).
holds(1, in(manipulator_end_2), ((puzzle_room,1),5,0), 142).
holds(1, in(manipulator_limb_1), ((puzzle_room,1),5,0), 142).
holds(1, in(manipulator_limb_2), ((puzzle_room,1),5,0), 142).
holds(1, in(puzzle_room_table), ((puzzle_room,1),5,0), 142).
holds(1, in(puzzle_room_table_left), ((puzzle_room,1),5,0), 142).
holds(1, in(puzzle_room_table_middle), ((puzzle_room,1),5,0), 142).
holds(1, in(puzzle_room_table_right), ((puzzle_room,1),5,0), 142).
holds(1, in(talos), ((puzzle_room,1),5,0), 142).
holds(1, in_tower((block,1),(block,1)), true, 142).
holds(1, in_tower((block,1),(block,2)), false, 142).
holds(1, in_tower((block,1),(block,3)), false, 142).
holds(1, in_tower((block,1),(block,4)), false, 142).
holds(1, in_tower((block,1),(block,5)), false, 142).
holds(1, in_tower((block,1),(block,6)), false, 142).
holds(1, in_tower((block,2),(block,1)), false, 142).
holds(1, in_tower((block,2),(block,2)), false, 142).
holds(1, in_tower((block,2),(block,3)), false, 142).
holds(1, in_tower((block,2),(block,4)), false, 142).
holds(1, in_tower((block,2),(block,5)), false, 142).
holds(1, in_tower((block,2),(block,6)), false, 142).
holds(1, in_tower((block,3),(block,1)), false, 142).
holds(1, in_tower((block,3),(block,2)), true, 142).
holds(1, in_tower((block,3),(block,3)), true, 142).
holds(1, in_tower((block,3),(block,4)), false, 142).
holds(1, in_tower((block,3),(block,5)), false, 142).
holds(1, in_tower((block,3),(block,6)), false, 142).
holds(1, in_tower((block,4),(block,1)), false, 142).
holds(1, in_tower((block,4),(block,2)), false, 142).
holds(1, in_tower((block,4),(block,3)), false, 142).
holds(1, in_tower((block,4),(block,4)), false, 142).
holds(1, in_tower((block,4),(block,5)), false, 142).
holds(1, in_tower((block,4),(block,6)), false, 142).
holds(1, in_tower((block,5),(block,1)), false, 142).
holds(1, in_tower((block,5),(block,2)), false, 142).
holds(1, in_tower((block,5),(block,3)), false, 142).
holds(1, in_tower((block,5),(block,4)), false, 142).
holds(1, in_tower((block,5),(block,5)), false, 142).
holds(1, in_tower((block,5),(block,6)), false, 142).
holds(1, in_tower((block,6),(block,1)), false, 142).
holds(1, in_tower((block,6),(block,2)), false, 142).
holds(1, in_tower((block,6),(block,3)), false, 142).
holds(1, in_tower((block,6),(block,4)), false, 142).
holds(1, in_tower((block,6),(block,5)), true, 142).
holds(1, in_tower((block,6),(block,6)), true, 142).
holds(1, on((block,1)), puzzle_room_table_left, 142).
holds(1, on((block,2)), (block,3), 142).
holds(1, on((block,3)), puzzle_room_table_left, 142).
holds(1, on((block,4)), nothing, 142).
holds(1, on((block,5)), (block,6), 142).
holds(1, on((block,6)), puzzle_room_table_right, 142).
holds(1, tower_base((block,1),puzzle_room_table), true, 142).
holds(1, tower_base((block,2),puzzle_room_table), false, 142).
holds(1, tower_base((block,3),puzzle_room_table), true, 142).
holds(1, tower_base((block,4),puzzle_room_table), false, 142).
holds(1, tower_base((block,5),puzzle_room_table), false, 142).
holds(1, tower_base((block,6),puzzle_room_table), true, 142).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 142).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 142).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 142).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 142).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 142).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 142).
holds(2, complete_tower(blue,puzzle_room_table), false, 142).
holds(2, complete_tower(red,puzzle_room_table), false, 142).
holds(2, configuration(manipulator_end_1), aligned_with((block,4)), 142).
holds(2, configuration(manipulator_end_2), aligned_with((block,1)), 142).
holds(2, configuration(manipulator_limb_1), extended, 142).
holds(2, configuration(manipulator_limb_2), extended, 142).
holds(2, configuration(puzzle_room_door), open, 142).
holds(2, configuration(starting_room_door), closed, 142).
holds(2, configuration(store_room_door), open, 142).
holds(2, grasping(manipulator_end_1), (block,4), 142).
holds(2, grasping(manipulator_end_2), nothing, 142).
holds(2, in((block,1)), (puzzle_room,1), 142).
holds(2, in((block,2)), (puzzle_room,1), 142).
holds(2, in((block,3)), (puzzle_room,1), 142).
holds(2, in((block,4)), (puzzle_room,1), 142).
holds(2, in((block,5)), (puzzle_room,1), 142).
holds(2, in((block,6)), (puzzle_room,1), 142).
holds(2, in(manipulator_arm_1), (puzzle_room,1), 142).
holds(2, in(manipulator_arm_2), (puzzle_room,1), 142).
holds(2, in(manipulator_end_1), (puzzle_room,1), 142).
holds(2, in(manipulator_end_2), (puzzle_room,1), 142).
holds(2, in(manipulator_limb_1), (puzzle_room,1), 142).
holds(2, in(manipulator_limb_2), (puzzle_room,1), 142).
holds(2, in(puzzle_room_table), (puzzle_room,1), 142).
holds(2, in(puzzle_room_table_left), (puzzle_room,1), 142).
holds(2, in(puzzle_room_table_middle), (puzzle_room,1), 142).
holds(2, in(puzzle_room_table_right), (puzzle_room,1), 142).
holds(2, in(talos), (puzzle_room,1), 142).
holds(2, in_tower((block,1),(block,1)), true, 142).
holds(2, in_tower((block,1),(block,2)), false, 142).
holds(2, in_tower((block,1),(block,3)), false, 142).
holds(2, in_tower((block,1),(block,4)), false, 142).
holds(2, in_tower((block,1),(block,5)), false, 142).
holds(2, in_tower((block,1),(block,6)), false, 142).
holds(2, in_tower((block,2),(block,1)), false, 142).
holds(2, in_tower((block,2),(block,2)), false, 142).
holds(2, in_tower((block,2),(block,3)), false, 142).
holds(2, in_tower((block,2),(block,4)), false, 142).
holds(2, in_tower((block,2),(block,5)), false, 142).
holds(2, in_tower((block,2),(block,6)), false, 142).
holds(2, in_tower((block,3),(block,1)), false, 142).
holds(2, in_tower((block,3),(block,2)), true, 142).
holds(2, in_tower((block,3),(block,3)), true, 142).
holds(2, in_tower((block,3),(block,4)), false, 142).
holds(2, in_tower((block,3),(block,5)), false, 142).
holds(2, in_tower((block,3),(block,6)), false, 142).
holds(2, in_tower((block,4),(block,1)), false, 142).
holds(2, in_tower((block,4),(block,2)), false, 142).
holds(2, in_tower((block,4),(block,3)), false, 142).
holds(2, in_tower((block,4),(block,4)), false, 142).
holds(2, in_tower((block,4),(block,5)), false, 142).
holds(2, in_tower((block,4),(block,6)), false, 142).
holds(2, in_tower((block,5),(block,1)), false, 142).
holds(2, in_tower((block,5),(block,2)), false, 142).
holds(2, in_tower((block,5),(block,3)), false, 142).
holds(2, in_tower((block,5),(block,4)), false, 142).
holds(2, in_tower((block,5),(block,5)), false, 142).
holds(2, in_tower((block,5),(block,6)), false, 142).
holds(2, in_tower((block,6),(block,1)), false, 142).
holds(2, in_tower((block,6),(block,2)), false, 142).
holds(2, in_tower((block,6),(block,3)), false, 142).
holds(2, in_tower((block,6),(block,4)), false, 142).
holds(2, in_tower((block,6),(block,5)), true, 142).
holds(2, in_tower((block,6),(block,6)), true, 142).
holds(2, on((block,1)), puzzle_room_table_left, 142).
holds(2, on((block,2)), (block,3), 142).
holds(2, on((block,3)), puzzle_room_table_left, 142).
holds(2, on((block,4)), nothing, 142).
holds(2, on((block,5)), (block,6), 142).
holds(2, on((block,6)), puzzle_room_table_right, 142).
holds(2, tower_base((block,1),puzzle_room_table), true, 142).
holds(2, tower_base((block,2),puzzle_room_table), false, 142).
holds(2, tower_base((block,3),puzzle_room_table), true, 142).
holds(2, tower_base((block,4),puzzle_room_table), false, 142).
holds(2, tower_base((block,5),puzzle_room_table), false, 142).
holds(2, tower_base((block,6),puzzle_room_table), true, 142).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 142).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 142).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 142).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 142).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 142).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 142).

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 308 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table_left, false).
final_goal(2, on((block,1)), puzzle_room_table_middle, false).
final_goal(2, on((block,1)), puzzle_room_table_right, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table_left, false).
final_goal(2, on((block,2)), puzzle_room_table_middle, false).
final_goal(2, on((block,2)), puzzle_room_table_right, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table_left, true).
final_goal(2, on((block,3)), puzzle_room_table_middle, false).
final_goal(2, on((block,3)), puzzle_room_table_right, false).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table_left, false).
final_goal(2, on((block,4)), puzzle_room_table_middle, false).
final_goal(2, on((block,4)), puzzle_room_table_right, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table_left, false).
final_goal(2, on((block,5)), puzzle_room_table_middle, false).
final_goal(2, on((block,5)), puzzle_room_table_right, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table_left, false).
final_goal(2, on((block,6)), puzzle_room_table_middle, false).
final_goal(2, on((block,6)), puzzle_room_table_right, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[18-04-2022_12-44-09] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=144']

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,1))', 'F': 'grasping(manipulator_end_2)', 'V': '(block,1)', 'I': 69})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 70})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 71})

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 3 rules into program part base:

sub_goal(2, talos, grasp(manipulator_end_2,(block,1)), grasping(manipulator_end_2), (block,1), 69).
sub_goal(2, talos, put(manipulator_end_1,(block,4),(block,5)), on((block,4)), (block,5), 70).
sub_goal(2, talos, put(manipulator_end_2,(block,1),(block,2)), on((block,1)), (block,2), 71).

[18-04-2022_12-44-09] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=144']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A80DA115E0>]
	incrementor = SolveIncrementor(step_start=142, step_increase=1, step_increase_initial=3, step_end_min=145, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1734.671434199996, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 142), range_=None), IncPart(name='plan_module', args=('#inc', 142, 'false', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 142, 'false', 'false', 'false', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 142, 69, 71, 'sequential', 'false'), range_=None)]

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 844 rules

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.005312799999956042s

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.171723s.

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.024820s with result Satisfiable.

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A8A5095BD0>

[18-04-2022_12-44-09] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 142)
	('last_sgoals', 71)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A80DA53EE0>)
	('first_sgoals', 69)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A8A5095BD0>)

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 142). %* None *%
#program plan_module(#inc, 142, false, true). %* None *%
#program optimisation_module(#inc, 142, false, false, false, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 142, 69, 71, sequential, false). %* None *%

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =    141 : Current =    144
Incrementor step ends | Minimum  =    145 : Maximum =    300

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(144)]), ('state_module', [Number(142), Number(142)]), ('plan_module', [Number(142), Number(142), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(142), Number(142), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(142)]), ('action_preconditions', [Number(142)]), ('variable_relations', [Number(142)]), ('abstraction_mappings', [Number(142)]), ('conformance_module', [Number(142), Number(142), Number(69), Number(71), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(143), Number(142)]), ('plan_module', [Number(143), Number(142), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(143), Number(142), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(143)]), ('action_preconditions', [Number(143)]), ('variable_relations', [Number(143)]), ('abstraction_mappings', [Number(143)]), ('conformance_module', [Number(143), Number(142), Number(69), Number(71), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(144), Number(142)]), ('plan_module', [Number(144), Number(142), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(144), Number(142), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(144)]), ('action_preconditions', [Number(144)]), ('variable_relations', [Number(144)]), ('abstraction_mappings', [Number(144)]), ('conformance_module', [Number(144), Number(142), Number(69), Number(71), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.570661s.

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.079033s with result Unsatisfiable.

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.6496942999992825, Incremental time limit = None
Running cumulative time = 0.6496942999992825, Cumulative time limit = 1734.671434199996
Used memory = (RSS = 2482.992188Mb, VMS = 2496.453125Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =    144 : Current =    145
Incrementor step ends | Minimum  =    145 : Maximum =    300

[18-04-2022_12-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(145)]), ('state_module', [Number(145), Number(142)]), ('plan_module', [Number(145), Number(142), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(145), Number(142), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(145)]), ('action_preconditions', [Number(145)]), ('variable_relations', [Number(145)]), ('abstraction_mappings', [Number(145)]), ('conformance_module', [Number(145), Number(142), Number(69), Number(71), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_12-44-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.183062s.

[18-04-2022_12-44-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_12-44-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.036770s with result Satisfiable.

[18-04-2022_12-44-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.21983240000008664, Incremental time limit = None
Running cumulative time = 0.8695266999993692, Cumulative time limit = 1734.671434199996
Used memory = (RSS = 2485.363281Mb, VMS = 2498.703125Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_12-44-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.753723s, Solving = 0.115804s, Total = 0.869527s, Memory = (RSS = 2485.363281Mb, VMS = 2498.703125Mb), Step range = [142-145]), Calls = 2
Final Model :: Total atoms = 22705, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[18-04-2022_12-44-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.570661s, Solving = 0.079033s, Total = 0.649694s, Memory = (RSS = 2482.992188Mb, VMS = 2496.453125Mb), Step range = [142-144]
2 : Statistics :: Grounding = 0.183062s, Solving = 0.036770s, Total = 0.219832s, Memory = (RSS = 2485.363281Mb, VMS = 2498.703125Mb), Step range = [145-145]

[18-04-2022_12-44-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.869527s due to: Stop condition reached.

[18-04-2022_12-44-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[18-04-2022_12-44-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[18-04-2022_12-44-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_12-44-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_12-44-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[18-04-2022_12-44-10] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38, 81: 39, 82: 40, 83: 41, 84: 42, 85: 43, 86: 44, 87: 45, 88: 46, 89: 47, 90: 48, 91: 48, 92: 48, 93: 49, 94: 49, 95: 49, 96: 49, 97: 50, 98: 50, 99: 50, 100: 51, 101: 51, 102: 51, 103: 52, 104: 52, 105: 52, 106: 53, 107: 53, 108: 53, 109: 54, 110: 54, 111: 54, 112: 54, 113: 55, 114: 56, 115: 57, 116: 58, 117: 58, 118: 58, 119: 59, 120: 59, 121: 59, 122: 59, 123: 60, 124: 60, 125: 60, 126: 61, 127: 61, 128: 61, 129: 62, 130: 62, 131: 62, 132: 63, 133: 63, 134: 63, 135: 64, 136: 64, 137: 64, 138: 64, 139: 65, 140: 66, 141: 67, 142: 68}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80, 39: 81, 40: 82, 41: 83, 42: 84, 43: 85, 44: 86, 45: 87, 46: 88, 47: 89, 48: 92, 49: 96, 50: 99, 51: 102, 52: 105, 53: 108, 54: 112, 55: 113, 56: 114, 57: 115, 58: 118, 59: 122, 60: 125, 61: 128, 62: 131, 63: 134, 64: 138, 65: 139, 66: 140, 67: 141, 68: 142}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24, 43: 25, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29, 49: 29, 50: 30, 51: 30, 52: 30, 53: 31, 54: 31, 55: 32, 56: 32, 57: 33, 58: 34, 59: 34, 60: 35, 61: 35, 62: 35, 63: 36, 64: 36, 65: 37, 66: 38, 67: 39, 68: 40, 69: 40, 70: 41, 71: 42}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42, 25: 44, 26: 45, 27: 46, 28: 47, 29: 49, 30: 52, 31: 54, 32: 56, 33: 57, 34: 59, 35: 62, 36: 64, 37: 65, 38: 66, 39: 67, 40: 69, 41: 70, 42: 71}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13, 31: 14, 32: 14, 33: 15, 34: 15, 35: 15, 36: 16, 37: 16, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30, 14: 32, 15: 35, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-44-10] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 3, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 18, 35: 18, 36: 19, 37: 19, 38: 19, 39: 20, 40: 20, 41: 20, 42: 21, 43: 21, 44: 21, 45: 22, 46: 22, 47: 22, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 28, 56: 29, 57: 30, 58: 30, 59: 31, 60: 31, 61: 31, 62: 31, 63: 32, 64: 32, 65: 32, 66: 33, 67: 33, 68: 33, 69: 34, 70: 34, 71: 34, 72: 35, 73: 35, 74: 35, 75: 35, 76: 36, 77: 36, 78: 36, 79: 37, 80: 38, 81: 39, 82: 40, 83: 41, 84: 42, 85: 43, 86: 44, 87: 45, 88: 46, 89: 47, 90: 48, 91: 48, 92: 48, 93: 49, 94: 49, 95: 49, 96: 49, 97: 50, 98: 50, 99: 50, 100: 51, 101: 51, 102: 51, 103: 52, 104: 52, 105: 52, 106: 53, 107: 53, 108: 53, 109: 54, 110: 54, 111: 54, 112: 54, 113: 55, 114: 56, 115: 57, 116: 58, 117: 58, 118: 58, 119: 59, 120: 59, 121: 59, 122: 59, 123: 60, 124: 60, 125: 60, 126: 61, 127: 61, 128: 61, 129: 62, 130: 62, 131: 62, 132: 63, 133: 63, 134: 63, 135: 64, 136: 64, 137: 64, 138: 64, 139: 65, 140: 66, 141: 67, 142: 68, 143: 69, 144: 70, 145: 71}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 10, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 35, 19: 38, 20: 41, 21: 44, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 55, 29: 56, 30: 58, 31: 62, 32: 65, 33: 68, 34: 71, 35: 75, 36: 78, 37: 79, 38: 80, 39: 81, 40: 82, 41: 83, 42: 84, 43: 85, 44: 86, 45: 87, 46: 88, 47: 89, 48: 92, 49: 96, 50: 99, 51: 102, 52: 105, 53: 108, 54: 112, 55: 113, 56: 114, 57: 115, 58: 118, 59: 122, 60: 125, 61: 128, 62: 131, 63: 134, 64: 138, 65: 139, 66: 140, 67: 141, 68: 142, 69: 143, 70: 144, 71: 145}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 12, 26: 13, 27: 14, 28: 15, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 24, 43: 25, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29, 49: 29, 50: 30, 51: 30, 52: 30, 53: 31, 54: 31, 55: 32, 56: 32, 57: 33, 58: 34, 59: 34, 60: 35, 61: 35, 62: 35, 63: 36, 64: 36, 65: 37, 66: 38, 67: 39, 68: 40, 69: 40, 70: 41, 71: 42}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 25, 13: 26, 14: 27, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 41, 24: 42, 25: 44, 26: 45, 27: 46, 28: 47, 29: 49, 30: 52, 31: 54, 32: 56, 33: 57, 34: 59, 35: 62, 36: 64, 37: 65, 38: 66, 39: 67, 40: 69, 41: 70, 42: 71}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 12, 28: 13, 29: 13, 30: 13, 31: 14, 32: 14, 33: 15, 34: 15, 35: 15, 36: 16, 37: 16, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 26, 12: 27, 13: 30, 14: 32, 15: 35, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_12-44-10] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 71, Last requested goal index = 71, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[18-04-2022_12-44-10] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.753723s, Solving = 0.115804s, Total = 0.869527s, Memory = (RSS = 2485.363281Mb, VMS = 2498.703125Mb), Step range = [142-145]), Calls = 2
Model :: Total atoms = 22705, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[18-04-2022_12-44-10] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 3 :: Actions = 3                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Planned actions:
        talos : move(((starting_room,1),3,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),4,0))
Step 5:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,0))
Step 6:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,1))
Step 7:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),4,0))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,0))
Step 9:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 10:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 3] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 11:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 12:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 13:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 5] talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(store_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 5] talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(store_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 17:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_2,store_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 21:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 23:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 24:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 11] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 25:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 26:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 27:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 28:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(puzzle_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_2) = aligned_with(puzzle_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 31:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_2,puzzle_room_door_handle_outer) -> grasping(manipulator_end_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 35:
    Current Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 18] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 37:
    Current Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 38:
    Current Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 19] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 39:
    Current Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 40:
    Current Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 41:
    Current Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 20] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 42:
    Current Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 43:
    Current Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 44:
    Current Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
        [Index = 21] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Planned actions:
        talos : move(((store_room,0),2,1))
Step 45:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 46:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 47:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),0,0))
Step 48:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 49:
    Current Sub-goals:
        [Index = 23] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Achieved Sub-goals:
        [Index = 23] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 50:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 51:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 52:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 53:
    Current Sub-goals:
        [Index = 27] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Achieved Sub-goals:
        [Index = 27] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 54:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 55:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 56:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 29] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 57:
    Current Sub-goals:
        [Index = 30] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 58:
    Current Sub-goals:
        [Index = 30] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 30] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),3,0))
Step 59:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,0))
Step 60:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 61:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 62:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 31] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 63:
    Current Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 64:
    Current Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 65:
    Current Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 32] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 66:
    Current Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 67:
    Current Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 68:
    Current Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 33] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 69:
    Current Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 70:
    Current Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 71:
    Current Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
        [Index = 34] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Planned actions:
        talos : move(((puzzle_room,0),0,1))
Step 72:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),0,0))
Step 73:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,0))
Step 74:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),2,0))
Step 75:
    Current Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
        [Index = 35] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Planned actions:
        talos : move(((puzzle_room,1),3,0))
Step 76:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),4,0))
Step 77:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),5,0))
Step 78:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 36] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 79:
    Current Sub-goals:
        [Index = 37] talos : put(manipulator_end_1,(block,6),puzzle_room_table_right) -> on((block,6)) = puzzle_room_table_right
    Achieved Sub-goals:
        [Index = 37] talos : put(manipulator_end_1,(block,6),puzzle_room_table_right) -> on((block,6)) = puzzle_room_table_right
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 80:
    Current Sub-goals:
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 38] talos : release(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 81:
    Current Sub-goals:
        [Index = 39] talos : configure(manipulator_end_1,aligned_with((block,3))) -> configuration(manipulator_end_1) = aligned_with((block,3))
    Achieved Sub-goals:
        [Index = 39] talos : configure(manipulator_end_1,aligned_with((block,3))) -> configuration(manipulator_end_1) = aligned_with((block,3))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 82:
    Current Sub-goals:
        [Index = 40] talos : grasp(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = (block,3)
    Achieved Sub-goals:
        [Index = 40] talos : grasp(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 83:
    Current Sub-goals:
        [Index = 41] talos : put(manipulator_end_1,(block,3),puzzle_room_table_left) -> on((block,3)) = puzzle_room_table_left
    Achieved Sub-goals:
        [Index = 41] talos : put(manipulator_end_1,(block,3),puzzle_room_table_left) -> on((block,3)) = puzzle_room_table_left
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 84:
    Current Sub-goals:
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 42] talos : release(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 85:
    Current Sub-goals:
        [Index = 43] talos : configure(manipulator_end_1,aligned_with((block,2))) -> configuration(manipulator_end_1) = aligned_with((block,2))
    Achieved Sub-goals:
        [Index = 43] talos : configure(manipulator_end_1,aligned_with((block,2))) -> configuration(manipulator_end_1) = aligned_with((block,2))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 86:
    Current Sub-goals:
        [Index = 44] talos : grasp(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = (block,2)
    Achieved Sub-goals:
        [Index = 44] talos : grasp(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 87:
    Current Sub-goals:
        [Index = 45] talos : put(manipulator_end_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 45] talos : put(manipulator_end_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 88:
    Current Sub-goals:
        [Index = 46] talos : release(manipulator_end_1,(block,2)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 46] talos : release(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 46] talos : release(manipulator_end_1,(block,2)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 46] talos : release(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,2))
Step 89:
    Current Sub-goals:
        [Index = 47] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 47] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 47] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 47] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 90:
    Current Sub-goals:
        [Index = 48] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),4,0))
Step 91:
    Current Sub-goals:
        [Index = 48] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),3,0))
Step 92:
    Current Sub-goals:
        [Index = 48] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
        [Index = 48] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Planned actions:
        talos : move(((puzzle_room,0),2,0))
Step 93:
    Current Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,0))
Step 94:
    Current Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,1))
Step 95:
    Current Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),0,1))
Step 96:
    Current Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 49] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 97:
    Current Sub-goals:
        [Index = 50] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 98:
    Current Sub-goals:
        [Index = 50] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 99:
    Current Sub-goals:
        [Index = 50] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 50] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 100:
    Current Sub-goals:
        [Index = 51] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 101:
    Current Sub-goals:
        [Index = 51] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 102:
    Current Sub-goals:
        [Index = 51] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 51] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 103:
    Current Sub-goals:
        [Index = 52] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 104:
    Current Sub-goals:
        [Index = 52] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 105:
    Current Sub-goals:
        [Index = 52] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 52] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 106:
    Current Sub-goals:
        [Index = 53] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 107:
    Current Sub-goals:
        [Index = 53] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 108:
    Current Sub-goals:
        [Index = 53] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
        [Index = 53] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Planned actions:
        talos : move(((store_room,0),2,1))
Step 109:
    Current Sub-goals:
        [Index = 54] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 110:
    Current Sub-goals:
        [Index = 54] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 111:
    Current Sub-goals:
        [Index = 54] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),0,0))
Step 112:
    Current Sub-goals:
        [Index = 54] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 54] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 113:
    Current Sub-goals:
        [Index = 55] talos : configure(manipulator_end_1,aligned_with((block,4))) -> configuration(manipulator_end_1) = aligned_with((block,4))
    Achieved Sub-goals:
        [Index = 55] talos : configure(manipulator_end_1,aligned_with((block,4))) -> configuration(manipulator_end_1) = aligned_with((block,4))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
Step 114:
    Current Sub-goals:
        [Index = 56] talos : grasp(manipulator_end_1,(block,4)) -> grasping(manipulator_end_1) = (block,4)
    Achieved Sub-goals:
        [Index = 56] talos : grasp(manipulator_end_1,(block,4)) -> grasping(manipulator_end_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
Step 115:
    Current Sub-goals:
        [Index = 57] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 57] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 116:
    Current Sub-goals:
        [Index = 58] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 117:
    Current Sub-goals:
        [Index = 58] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 118:
    Current Sub-goals:
        [Index = 58] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 58] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),3,0))
Step 119:
    Current Sub-goals:
        [Index = 59] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,0))
Step 120:
    Current Sub-goals:
        [Index = 59] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 121:
    Current Sub-goals:
        [Index = 59] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 122:
    Current Sub-goals:
        [Index = 59] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 59] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 123:
    Current Sub-goals:
        [Index = 60] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 124:
    Current Sub-goals:
        [Index = 60] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 125:
    Current Sub-goals:
        [Index = 60] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 60] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 126:
    Current Sub-goals:
        [Index = 61] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 127:
    Current Sub-goals:
        [Index = 61] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 128:
    Current Sub-goals:
        [Index = 61] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 61] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 129:
    Current Sub-goals:
        [Index = 62] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 130:
    Current Sub-goals:
        [Index = 62] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 131:
    Current Sub-goals:
        [Index = 62] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
        [Index = 62] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Planned actions:
        talos : move(((puzzle_room,0),0,1))
Step 132:
    Current Sub-goals:
        [Index = 63] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,1))
Step 133:
    Current Sub-goals:
        [Index = 63] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),2,1))
Step 134:
    Current Sub-goals:
        [Index = 63] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
        [Index = 63] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Planned actions:
        talos : move(((puzzle_room,1),3,1))
Step 135:
    Current Sub-goals:
        [Index = 64] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),4,1))
Step 136:
    Current Sub-goals:
        [Index = 64] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),5,1))
Step 137:
    Current Sub-goals:
        [Index = 64] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),5,0))
Step 138:
    Current Sub-goals:
        [Index = 64] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 64] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 139:
    Current Sub-goals:
        [Index = 65] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 65] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 140:
    Current Sub-goals:
        [Index = 66] talos : put(manipulator_end_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 66] talos : put(manipulator_end_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 141:
    Current Sub-goals:
        [Index = 67] talos : release(manipulator_end_2,(block,5)) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 67] talos : release(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = nothing
    Achieved Sub-goals:
        [Index = 67] talos : release(manipulator_end_2,(block,5)) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 67] talos : release(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,5))
Step 142:
    Current Sub-goals:
        [Index = 68] talos : configure(manipulator_end_2,aligned_with((block,1))) -> configuration(manipulator_end_2) = aligned_with((block,1))
    Achieved Sub-goals:
        [Index = 68] talos : configure(manipulator_end_2,aligned_with((block,1))) -> configuration(manipulator_end_2) = aligned_with((block,1))
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,1)))
Step 143:
    Current Sub-goals:
        [Index = 69] talos : grasp(manipulator_end_2,(block,1)) -> grasping(manipulator_end_2) = (block,1)
    Achieved Sub-goals:
        [Index = 69] talos : grasp(manipulator_end_2,(block,1)) -> grasping(manipulator_end_2) = (block,1)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,1))
Step 144:
    Current Sub-goals:
        [Index = 70] talos : put(manipulator_end_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 70] talos : put(manipulator_end_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_1,(block,4),(block,5))
Step 145:
    Current Sub-goals:
        [Index = 71] talos : put(manipulator_end_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 71] talos : put(manipulator_end_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_end_2,(block,1),(block,2))

[18-04-2022_12-44-10] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[18-04-2022_12-44-10] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[18-04-2022_12-44-10] DEBUG :: ASH Planner Main #1 >> Monolevel problem 18 at level 1 solved.

[18-04-2022_12-44-10] DEBUG :: ASH Planner Main #1 >> Online planning increment 18 finished.

[18-04-2022_12-44-10] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 145, chosen step range to extract = range(0, 146)

[18-04-2022_12-44-10] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 71, Total actions = 71, Produced sub-goal stages = 71, Produced sub-goal literals = 80
Level [1]: Length = 145, Total actions = 145, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-44-10] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 71, chosen step range to extract = range(0, 72)

[18-04-2022_12-44-10] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 71, Total actions = 71, Produced sub-goal stages = 71, Produced sub-goal literals = 80
Level [1]: Length = 145, Total actions = 145, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-44-10] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 42, chosen step range to extract = range(0, 43)

[18-04-2022_12-44-10] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 71, Total actions = 71, Produced sub-goal stages = 71, Produced sub-goal literals = 80
Level [1]: Length = 145, Total actions = 145, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-44-10] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 20, chosen step range to extract = range(0, 21)

[18-04-2022_12-44-10] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 71, Total actions = 71, Produced sub-goal stages = 71, Produced sub-goal literals = 80
Level [1]: Length = 145, Total actions = 145, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-44-10] DEBUG :: ASH Planner Main #1 >> Hierarchical plan generated successfully :: Ground Plan Quality >> Length = 145, Actions = 145

[18-04-2022_12-44-10] DEBUG :: ASH Planner Main #1 >> Hierarchical planning summary: (Execution latency = 13.1769752000082, Average ground wait time = 3.962885566666854, Absolution time = 66.19809250000344)

     ========================================================================================================================================================================================================     
     |        Lvl = 4 (classic), LE =  20, AC =  20, CF = 1.0, GT =   1.29s, ST =   0.78s, OT = 0.00s, TT =   2.08s, EF = (LE = 1.0, AC = 1.0), ED = (LE = 0.0, AC = 0.0), EB = (LE = 0.0, AC = 0.0)        |     
     |        Lvl = 3 (com-ref), LE =  42, AC =  42, CF = 1.0, GT =   2.97s, ST =   0.88s, OT = 0.00s, TT =   3.85s, EF = (LE = 2.1, AC = 2.1), ED = (LE = 2.1, AC = 2.1), EB = (LE = 1.0, AC = 1.0)        |     
     |        Lvl = 2 (com-ref), LE =  71, AC =  71, CF = 1.0, GT =   7.00s, ST =   1.62s, OT = 0.00s, TT =   8.62s, EF = (LE = 1.7, AC = 1.7), ED = (LE = 1.0, AC = 1.0), EB = (LE = 0.6, AC = 0.6)        |     
     |        Lvl = 1 (com-ref), LE = 145, AC = 145, CF = 1.0, GT =  41.92s, ST =   9.73s, OT = 0.00s, TT =  51.64s, EF = (LE = 2.0, AC = 2.0), ED = (LE = 1.2, AC = 1.2), EB = (LE = 0.6, AC = 0.6)        |     
     ========================================================================================================================================================================================================     

[18-04-2022_12-44-10] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 145, chosen step range to extract = range(0, 146)

[18-04-2022_12-44-10] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 71, Total actions = 71, Produced sub-goal stages = 71, Produced sub-goal literals = 80
Level [1]: Length = 145, Total actions = 145, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-44-10] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 71, chosen step range to extract = range(0, 72)

[18-04-2022_12-44-10] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 71, Total actions = 71, Produced sub-goal stages = 71, Produced sub-goal literals = 80
Level [1]: Length = 145, Total actions = 145, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-44-10] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 42, chosen step range to extract = range(0, 43)

[18-04-2022_12-44-10] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 71, Total actions = 71, Produced sub-goal stages = 71, Produced sub-goal literals = 80
Level [1]: Length = 145, Total actions = 145, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-44-10] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 20, chosen step range to extract = range(0, 21)

[18-04-2022_12-44-10] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [2]: Length = 71, Total actions = 71, Produced sub-goal stages = 71, Produced sub-goal literals = 80
Level [1]: Length = 145, Total actions = 145, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_12-44-10] DEBUG :: Experiment >> 

   ======================================================   
     Experimental run 50 : SUCCESSFUL : Time 94.796851s     
   ======================================================   

[18-04-2022_12-44-10] INFO :: Experiment >> 

  ################################################################################################  
        Completed 50 experimental runs : Real time 4864.632604s, Proccess time 6037.562500s         
  ################################################################################################  

[18-04-2022_12-44-10] DEBUG :: Experiment >> Refinement spread at run=0, level=3:
Root Mean Squared Errors: rmse_mchild=5.542562584220406, rmse_div_indices=0.3726779962499652, rmse_div_steps=3.1710495984067415
Mean Absolute Errors: mae_mchild=4.379999999999998, mae_div_indices=0.2500000000000002, mae_div_steps=1.6666666666666665

[18-04-2022_12-44-10] DEBUG :: Experiment >> Refinement spread at run=0, level=2:
Root Mean Squared Errors: rmse_mchild=1.9723685262409218, rmse_div_indices=2.772216655527699, rmse_div_steps=5.998765305059465
Mean Absolute Errors: mae_mchild=1.6394628099173558, mae_div_indices=1.833333333333334, mae_div_steps=4.311111111111112

[18-04-2022_12-44-10] DEBUG :: Experiment >> Refinement spread at run=0, level=1:
Root Mean Squared Errors: rmse_mchild=4.936654879222193, rmse_div_indices=5.902513753985196, rmse_div_steps=12.09914774760287
Mean Absolute Errors: mae_mchild=3.844475302519341, mae_div_indices=4.295321637426901, mae_div_steps=9.821637426900583

[18-04-2022_12-44-11] DEBUG :: Experiment >> Refinement spread at run=1, level=3:
Root Mean Squared Errors: rmse_mchild=5.563272418280448, rmse_div_indices=0.3726779962499652, rmse_div_steps=2.321398046197354
Mean Absolute Errors: mae_mchild=4.9499999999999975, mae_div_indices=0.2500000000000002, mae_div_steps=1.5000000000000004

[18-04-2022_12-44-11] DEBUG :: Experiment >> Refinement spread at run=1, level=2:
Root Mean Squared Errors: rmse_mchild=2.234623768876935, rmse_div_indices=2.1619607013250883, rmse_div_steps=5.152848906367413
Mean Absolute Errors: mae_mchild=1.8667355371900844, mae_div_indices=1.6222222222222211, mae_div_steps=4.099999999999999

[18-04-2022_12-44-11] DEBUG :: Experiment >> Refinement spread at run=1, level=1:
Root Mean Squared Errors: rmse_mchild=3.060424346900049, rmse_div_indices=5.113097122413758, rmse_div_steps=11.062180271477882
Mean Absolute Errors: mae_mchild=2.5135885736956958, mae_div_indices=4.236842105263157, mae_div_steps=8.973684210526315

[18-04-2022_12-44-11] DEBUG :: Experiment >> Refinement spread at run=2, level=3:
Root Mean Squared Errors: rmse_mchild=6.767200307364929, rmse_div_indices=0.3726779962499652, rmse_div_steps=4.6097722286464435
Mean Absolute Errors: mae_mchild=6.149999999999999, mae_div_indices=0.2500000000000002, mae_div_steps=3.25

[18-04-2022_12-44-11] DEBUG :: Experiment >> Refinement spread at run=2, level=2:
Root Mean Squared Errors: rmse_mchild=2.544074822889367, rmse_div_indices=4.453463071962462, rmse_div_steps=9.547347896240705
Mean Absolute Errors: mae_mchild=2.2477324263038545, mae_div_indices=3.6999999999999993, mae_div_steps=8.099999999999998

[18-04-2022_12-44-11] DEBUG :: Experiment >> Refinement spread at run=2, level=1:
Root Mean Squared Errors: rmse_mchild=4.171558987243353, rmse_div_indices=9.558249654211888, rmse_div_steps=22.637956964279468
Mean Absolute Errors: mae_mchild=3.163062884348345, mae_div_indices=8.39473684210526, mae_div_steps=19.92105263157895

[18-04-2022_12-44-12] DEBUG :: Experiment >> Refinement spread at run=3, level=3:
Root Mean Squared Errors: rmse_mchild=4.905099387372288, rmse_div_indices=0.3726779962499652, rmse_div_steps=2.321398046197354
Mean Absolute Errors: mae_mchild=4.1999999999999975, mae_div_indices=0.2500000000000002, mae_div_steps=1.5000000000000004

[18-04-2022_12-44-12] DEBUG :: Experiment >> Refinement spread at run=3, level=2:
Root Mean Squared Errors: rmse_mchild=1.7793437131669578, rmse_div_indices=2.1619607013250883, rmse_div_steps=4.339738855430512
Mean Absolute Errors: mae_mchild=1.5258264462809918, mae_div_indices=1.6222222222222211, mae_div_steps=3.3

[18-04-2022_12-44-12] DEBUG :: Experiment >> Refinement spread at run=3, level=1:
Root Mean Squared Errors: rmse_mchild=2.7414837831607435, rmse_div_indices=4.27918257483505, rmse_div_steps=9.185944640991934
Mean Absolute Errors: mae_mchild=2.225066666666667, mae_div_indices=3.3947368421052637, mae_div_steps=7.043859649122805

[18-04-2022_12-44-12] DEBUG :: Experiment >> Refinement spread at run=4, level=3:
Root Mean Squared Errors: rmse_mchild=5.52358579185659, rmse_div_indices=0.3726779962499652, rmse_div_steps=2.793842435706702
Mean Absolute Errors: mae_mchild=4.849999999999997, mae_div_indices=0.2500000000000002, mae_div_steps=1.7500000000000004

[18-04-2022_12-44-12] DEBUG :: Experiment >> Refinement spread at run=4, level=2:
Root Mean Squared Errors: rmse_mchild=2.053959590644373, rmse_div_indices=2.487003253955487, rmse_div_steps=5.220330626679871
Mean Absolute Errors: mae_mchild=1.6704545454545454, mae_div_indices=1.822222222222221, mae_div_steps=3.866666666666667

[18-04-2022_12-44-12] DEBUG :: Experiment >> Refinement spread at run=4, level=1:
Root Mean Squared Errors: rmse_mchild=3.324447029499498, rmse_div_indices=5.1250921163213965, rmse_div_steps=12.234450289209661
Mean Absolute Errors: mae_mchild=2.587788834542078, mae_div_indices=3.944444444444444, mae_div_steps=9.014619883040936

[18-04-2022_12-44-13] DEBUG :: Experiment >> Refinement spread at run=5, level=3:
Root Mean Squared Errors: rmse_mchild=6.715653356152324, rmse_div_indices=0.3726779962499652, rmse_div_steps=3.6590830666833587
Mean Absolute Errors: mae_mchild=6.099999999999997, mae_div_indices=0.2500000000000002, mae_div_steps=2.5000000000000004

[18-04-2022_12-44-13] DEBUG :: Experiment >> Refinement spread at run=5, level=2:
Root Mean Squared Errors: rmse_mchild=2.319685341300544, rmse_div_indices=3.6081184180287806, rmse_div_steps=7.439135752272622
Mean Absolute Errors: mae_mchild=1.903925619834709, mae_div_indices=2.899999999999998, mae_div_steps=6.200000000000001

[18-04-2022_12-44-13] DEBUG :: Experiment >> Refinement spread at run=5, level=1:
Root Mean Squared Errors: rmse_mchild=3.336565643684291, rmse_div_indices=7.4361151797737515, rmse_div_steps=16.180316176729907
Mean Absolute Errors: mae_mchild=2.6575342465753415, mae_div_indices=6.394736842105265, mae_div_steps=14.184210526315793

[18-04-2022_12-44-13] DEBUG :: Experiment >> Refinement spread at run=6, level=3:
Root Mean Squared Errors: rmse_mchild=5.708765190476831, rmse_div_indices=0.3726779962499652, rmse_div_steps=3.1710495984067415
Mean Absolute Errors: mae_mchild=4.4499999999999975, mae_div_indices=0.2500000000000002, mae_div_steps=1.6666666666666665

[18-04-2022_12-44-13] DEBUG :: Experiment >> Refinement spread at run=6, level=2:
Root Mean Squared Errors: rmse_mchild=2.2626481048278335, rmse_div_indices=2.772216655527699, rmse_div_steps=6.333040928922489
Mean Absolute Errors: mae_mchild=1.7913223140495846, mae_div_indices=1.833333333333334, mae_div_steps=4.388888888888888

[18-04-2022_12-44-13] DEBUG :: Experiment >> Refinement spread at run=6, level=1:
Root Mean Squared Errors: rmse_mchild=4.5490797396575875, rmse_div_indices=6.298882910955397, rmse_div_steps=13.49064725477716
Mean Absolute Errors: mae_mchild=3.456746106211294, mae_div_indices=4.464912280701755, mae_div_steps=10.646198830409356

[18-04-2022_12-44-14] DEBUG :: Experiment >> Refinement spread at run=7, level=3:
Root Mean Squared Errors: rmse_mchild=6.058465152165191, rmse_div_indices=0.3726779962499652, rmse_div_steps=3.640054944640259
Mean Absolute Errors: mae_mchild=5.149999999999999, mae_div_indices=0.2500000000000002, mae_div_steps=2.25

[18-04-2022_12-44-14] DEBUG :: Experiment >> Refinement spread at run=7, level=2:
Root Mean Squared Errors: rmse_mchild=1.7020895521497739, rmse_div_indices=3.5260932110954366, rmse_div_steps=6.718134661744532
Mean Absolute Errors: mae_mchild=1.4268707482993204, mae_div_indices=2.699999999999999, mae_div_steps=5.399999999999999

[18-04-2022_12-44-14] DEBUG :: Experiment >> Refinement spread at run=7, level=1:
Root Mean Squared Errors: rmse_mchild=3.518536943023576, rmse_div_indices=6.713105799381102, rmse_div_steps=12.156047596870785
Mean Absolute Errors: mae_mchild=2.8449905482041578, mae_div_indices=5.552631578947367, mae_div_steps=10.078947368421055

[18-04-2022_12-44-14] DEBUG :: Experiment >> Refinement spread at run=8, level=3:
Root Mean Squared Errors: rmse_mchild=7.296231904209185, rmse_div_indices=0.3726779962499652, rmse_div_steps=4.6097722286464435
Mean Absolute Errors: mae_mchild=6.549999999999999, mae_div_indices=0.2500000000000002, mae_div_steps=3.25

[18-04-2022_12-44-14] DEBUG :: Experiment >> Refinement spread at run=8, level=2:
Root Mean Squared Errors: rmse_mchild=2.9528769424646493, rmse_div_indices=4.453463071962462, rmse_div_steps=10.311087164723153
Mean Absolute Errors: mae_mchild=2.5209750566893416, mae_div_indices=3.6999999999999993, mae_div_steps=8.8

[18-04-2022_12-44-14] DEBUG :: Experiment >> Refinement spread at run=8, level=1:
Root Mean Squared Errors: rmse_mchild=6.240910072161322, rmse_div_indices=10.306865744807268, rmse_div_steps=26.48261594647366
Mean Absolute Errors: mae_mchild=4.798085944830171, mae_div_indices=9.078947368421055, mae_div_steps=22.97368421052632

[18-04-2022_12-44-15] DEBUG :: Experiment >> Refinement spread at run=9, level=3:
Root Mean Squared Errors: rmse_mchild=6.440108694734895, rmse_div_indices=0.3726779962499652, rmse_div_steps=4.6097722286464435
Mean Absolute Errors: mae_mchild=5.899999999999999, mae_div_indices=0.2500000000000002, mae_div_steps=3.25

[18-04-2022_12-44-15] DEBUG :: Experiment >> Refinement spread at run=9, level=2:
Root Mean Squared Errors: rmse_mchild=2.51561638068175, rmse_div_indices=4.453463071962462, rmse_div_steps=9.547347896240705
Mean Absolute Errors: mae_mchild=2.2477324263038545, mae_div_indices=3.6999999999999993, mae_div_steps=8.099999999999998

[18-04-2022_12-44-15] DEBUG :: Experiment >> Refinement spread at run=9, level=1:
Root Mean Squared Errors: rmse_mchild=4.142593288142358, rmse_div_indices=9.558249654211888, rmse_div_steps=22.637956964279468
Mean Absolute Errors: mae_mchild=3.134893870263838, mae_div_indices=8.39473684210526, mae_div_steps=19.92105263157895

[18-04-2022_12-44-15] DEBUG :: Experiment >> Refinement spread at run=10, level=3:
Root Mean Squared Errors: rmse_mchild=5.52358579185659, rmse_div_indices=0.3726779962499652, rmse_div_steps=2.793842435706702
Mean Absolute Errors: mae_mchild=4.849999999999997, mae_div_indices=0.2500000000000002, mae_div_steps=1.7500000000000004

[18-04-2022_12-44-15] DEBUG :: Experiment >> Refinement spread at run=10, level=2:
Root Mean Squared Errors: rmse_mchild=2.0035479893066066, rmse_div_indices=2.487003253955487, rmse_div_steps=5.220330626679871
Mean Absolute Errors: mae_mchild=1.6477272727272727, mae_div_indices=1.822222222222221, mae_div_steps=3.866666666666667

[18-04-2022_12-44-15] DEBUG :: Experiment >> Refinement spread at run=10, level=1:
Root Mean Squared Errors: rmse_mchild=3.3448051317736787, rmse_div_indices=5.1250921163213965, rmse_div_steps=12.234450289209661
Mean Absolute Errors: mae_mchild=2.6210153482880725, mae_div_indices=3.944444444444444, mae_div_steps=9.014619883040936

[18-04-2022_12-44-16] DEBUG :: Experiment >> Refinement spread at run=11, level=3:
Root Mean Squared Errors: rmse_mchild=7.263607918933949, rmse_div_indices=0.3726779962499652, rmse_div_steps=4.597704741377908
Mean Absolute Errors: mae_mchild=6.699999999999998, mae_div_indices=0.2500000000000002, mae_div_steps=3.2500000000000004

[18-04-2022_12-44-16] DEBUG :: Experiment >> Refinement spread at run=11, level=2:
Root Mean Squared Errors: rmse_mchild=2.552293977083074, rmse_div_indices=4.573676695889042, rmse_div_steps=9.413150769397431
Mean Absolute Errors: mae_mchild=2.1900826446280974, mae_div_indices=3.7999999999999985, mae_div_steps=8.000000000000002

[18-04-2022_12-44-16] DEBUG :: Experiment >> Refinement spread at run=11, level=1:
Root Mean Squared Errors: rmse_mchild=4.933960576774572, rmse_div_indices=9.484855066553642, rmse_div_steps=23.074155816988558
Mean Absolute Errors: mae_mchild=3.6958153499718494, mae_div_indices=8.342105263157897, mae_div_steps=20.18421052631579

[18-04-2022_12-44-16] DEBUG :: Experiment >> Refinement spread at run=12, level=3:
Root Mean Squared Errors: rmse_mchild=7.487656509215682, rmse_div_indices=0.3726779962499652, rmse_div_steps=4.949747468305833
Mean Absolute Errors: mae_mchild=6.849999999999999, mae_div_indices=0.2500000000000002, mae_div_steps=3.5

[18-04-2022_12-44-16] DEBUG :: Experiment >> Refinement spread at run=12, level=2:
Root Mean Squared Errors: rmse_mchild=2.3777557906881803, rmse_div_indices=4.809712396114067, rmse_div_steps=10.064054112790986
Mean Absolute Errors: mae_mchild=2.033446712018141, mae_div_indices=3.999999999999999, mae_div_steps=8.499999999999998

[18-04-2022_12-44-16] DEBUG :: Experiment >> Refinement spread at run=12, level=1:
Root Mean Squared Errors: rmse_mchild=6.560871188178253, rmse_div_indices=10.099673821764883, rmse_div_steps=26.626129642272375
Mean Absolute Errors: mae_mchild=5.429081531442174, mae_div_indices=8.815789473684207, mae_div_steps=22.973684210526322

[18-04-2022_12-44-17] DEBUG :: Experiment >> Refinement spread at run=13, level=3:
Root Mean Squared Errors: rmse_mchild=5.28677595515452, rmse_div_indices=0.3726779962499652, rmse_div_steps=3.1710495984067415
Mean Absolute Errors: mae_mchild=4.129999999999998, mae_div_indices=0.2500000000000002, mae_div_steps=1.6666666666666665

[18-04-2022_12-44-17] DEBUG :: Experiment >> Refinement spread at run=13, level=2:
Root Mean Squared Errors: rmse_mchild=2.4312339995011945, rmse_div_indices=2.772216655527699, rmse_div_steps=6.675549637517721
Mean Absolute Errors: mae_mchild=1.9245867768595029, mae_div_indices=1.833333333333334, mae_div_steps=4.688888888888888

[18-04-2022_12-44-17] DEBUG :: Experiment >> Refinement spread at run=13, level=1:
Root Mean Squared Errors: rmse_mchild=3.3988893575258645, rmse_div_indices=6.597706199545155, rmse_div_steps=14.281474934886436
Mean Absolute Errors: mae_mchild=2.6836179395759063, mae_div_indices=4.728070175438597, mae_div_steps=11.16666666666667

[18-04-2022_12-44-17] DEBUG :: Experiment >> Refinement spread at run=14, level=3:
Root Mean Squared Errors: rmse_mchild=6.612110101926614, rmse_div_indices=0.3726779962499652, rmse_div_steps=3.6590830666833587
Mean Absolute Errors: mae_mchild=5.999999999999997, mae_div_indices=0.2500000000000002, mae_div_steps=2.5000000000000004

[18-04-2022_12-44-17] DEBUG :: Experiment >> Refinement spread at run=14, level=2:
Root Mean Squared Errors: rmse_mchild=1.9473307647747005, rmse_div_indices=3.6081184180287806, rmse_div_steps=6.826147983767732
Mean Absolute Errors: mae_mchild=1.6043388429752072, mae_div_indices=2.899999999999998, mae_div_steps=5.699999999999998

[18-04-2022_12-44-17] DEBUG :: Experiment >> Refinement spread at run=14, level=1:
Root Mean Squared Errors: rmse_mchild=3.8164596179019594, rmse_div_indices=6.791198007006595, rmse_div_steps=11.770113637885272
Mean Absolute Errors: mae_mchild=3.0692322951795274, mae_div_indices=5.868421052631578, mae_div_steps=10.07894736842105

[18-04-2022_12-44-18] DEBUG :: Experiment >> Refinement spread at run=15, level=3:
Root Mean Squared Errors: rmse_mchild=5.071488933242386, rmse_div_indices=0.3726779962499652, rmse_div_steps=3.1710495984067415
Mean Absolute Errors: mae_mchild=3.8999999999999972, mae_div_indices=0.2500000000000002, mae_div_steps=1.6666666666666665

[18-04-2022_12-44-18] DEBUG :: Experiment >> Refinement spread at run=15, level=2:
Root Mean Squared Errors: rmse_mchild=2.380132557597482, rmse_div_indices=2.772216655527699, rmse_div_steps=6.675549637517721
Mean Absolute Errors: mae_mchild=1.9049586776859484, mae_div_indices=1.833333333333334, mae_div_steps=4.688888888888888

[18-04-2022_12-44-18] DEBUG :: Experiment >> Refinement spread at run=15, level=1:
Root Mean Squared Errors: rmse_mchild=4.599986945896768, rmse_div_indices=6.597706199545155, rmse_div_steps=13.867498147585755
Mean Absolute Errors: mae_mchild=3.456746106211294, mae_div_indices=4.728070175438597, mae_div_steps=11.014619883040936

[18-04-2022_12-44-18] DEBUG :: Experiment >> Refinement spread at run=16, level=3:
Root Mean Squared Errors: rmse_mchild=7.263607918933949, rmse_div_indices=0.3726779962499652, rmse_div_steps=4.597704741377908
Mean Absolute Errors: mae_mchild=6.699999999999998, mae_div_indices=0.2500000000000002, mae_div_steps=3.2500000000000004

[18-04-2022_12-44-18] DEBUG :: Experiment >> Refinement spread at run=16, level=2:
Root Mean Squared Errors: rmse_mchild=2.55956922705739, rmse_div_indices=4.573676695889042, rmse_div_steps=9.413150769397431
Mean Absolute Errors: mae_mchild=2.2128099173553704, mae_div_indices=3.7999999999999985, mae_div_steps=8.000000000000002

[18-04-2022_12-44-18] DEBUG :: Experiment >> Refinement spread at run=16, level=1:
Root Mean Squared Errors: rmse_mchild=4.95411484463054, rmse_div_indices=9.484855066553642, rmse_div_steps=23.074155816988558
Mean Absolute Errors: mae_mchild=3.73409645336836, mae_div_indices=8.342105263157897, mae_div_steps=20.18421052631579

[18-04-2022_12-44-19] DEBUG :: Experiment >> Refinement spread at run=17, level=3:
Root Mean Squared Errors: rmse_mchild=6.368673331236261, rmse_div_indices=0.3726779962499652, rmse_div_steps=3.9756201472921884
Mean Absolute Errors: mae_mchild=5.899999999999997, mae_div_indices=0.2500000000000002, mae_div_steps=2.7500000000000004

[18-04-2022_12-44-19] DEBUG :: Experiment >> Refinement spread at run=17, level=2:
Root Mean Squared Errors: rmse_mchild=2.418025883557438, rmse_div_indices=3.7128405817089924, rmse_div_steps=7.928616711820729
Mean Absolute Errors: mae_mchild=2.105371900826448, mae_div_indices=2.9999999999999982, mae_div_steps=6.699999999999998

[18-04-2022_12-44-19] DEBUG :: Experiment >> Refinement spread at run=17, level=1:
Root Mean Squared Errors: rmse_mchild=4.367787079906905, rmse_div_indices=7.863076542267132, rmse_div_steps=19.165878448069105
Mean Absolute Errors: mae_mchild=3.54889902797064, mae_div_indices=6.921052631578948, mae_div_steps=16.605263157894736

[18-04-2022_12-44-19] DEBUG :: Experiment >> Refinement spread at run=18, level=3:
Root Mean Squared Errors: rmse_mchild=5.129327441292863, rmse_div_indices=0.3726779962499652, rmse_div_steps=2.793842435706702
Mean Absolute Errors: mae_mchild=4.349999999999997, mae_div_indices=0.2500000000000002, mae_div_steps=1.7500000000000004

[18-04-2022_12-44-19] DEBUG :: Experiment >> Refinement spread at run=18, level=2:
Root Mean Squared Errors: rmse_mchild=2.086890901883382, rmse_div_indices=2.487003253955487, rmse_div_steps=5.339232848210258
Mean Absolute Errors: mae_mchild=1.7272727272727273, mae_div_indices=1.822222222222221, mae_div_steps=3.9666666666666672

[18-04-2022_12-44-19] DEBUG :: Experiment >> Refinement spread at run=18, level=1:
Root Mean Squared Errors: rmse_mchild=3.348685622078245, rmse_div_indices=5.314981217382674, rmse_div_steps=12.408868582315531
Mean Absolute Errors: mae_mchild=2.600775847529091, mae_div_indices=4.10233918128655, mae_div_steps=9.17251461988304

[18-04-2022_12-44-20] DEBUG :: Experiment >> Refinement spread at run=19, level=3:
Root Mean Squared Errors: rmse_mchild=6.403905058634145, rmse_div_indices=0.3726779962499652, rmse_div_steps=3.6590830666833587
Mean Absolute Errors: mae_mchild=5.849999999999997, mae_div_indices=0.2500000000000002, mae_div_steps=2.5000000000000004

[18-04-2022_12-44-20] DEBUG :: Experiment >> Refinement spread at run=19, level=2:
Root Mean Squared Errors: rmse_mchild=2.0474106808033827, rmse_div_indices=3.6081184180287806, rmse_div_steps=6.952750588129904
Mean Absolute Errors: mae_mchild=1.6952479338842983, mae_div_indices=2.899999999999998, mae_div_steps=5.799999999999999

[18-04-2022_12-44-20] DEBUG :: Experiment >> Refinement spread at run=19, level=1:
Root Mean Squared Errors: rmse_mchild=3.3946583942961737, rmse_div_indices=6.917045364113261, rmse_div_steps=12.53499973368914
Mean Absolute Errors: mae_mchild=2.748462606625669, mae_div_indices=5.973684210526314, mae_div_steps=10.763157894736844

[18-04-2022_12-44-20] DEBUG :: Experiment >> Refinement spread at run=20, level=3:
Root Mean Squared Errors: rmse_mchild=5.3674947601278555, rmse_div_indices=0.3726779962499652, rmse_div_steps=3.1710495984067415
Mean Absolute Errors: mae_mchild=4.229999999999999, mae_div_indices=0.2500000000000002, mae_div_steps=1.6666666666666665

[18-04-2022_12-44-20] DEBUG :: Experiment >> Refinement spread at run=20, level=2:
Root Mean Squared Errors: rmse_mchild=2.304942139070481, rmse_div_indices=2.772216655527699, rmse_div_steps=6.4589874220746495
Mean Absolute Errors: mae_mchild=1.8336776859504114, mae_div_indices=1.833333333333334, mae_div_steps=4.488888888888889

[18-04-2022_12-44-20] DEBUG :: Experiment >> Refinement spread at run=20, level=1:
Root Mean Squared Errors: rmse_mchild=3.3477949879982742, rmse_div_indices=6.365836876821477, rmse_div_steps=13.947111881122968
Mean Absolute Errors: mae_mchild=2.697316569712893, mae_div_indices=4.517543859649123, mae_div_steps=10.850877192982459

[18-04-2022_12-44-21] DEBUG :: Experiment >> Refinement spread at run=21, level=3:
Root Mean Squared Errors: rmse_mchild=6.058465152165191, rmse_div_indices=0.3726779962499652, rmse_div_steps=3.640054944640259
Mean Absolute Errors: mae_mchild=5.149999999999999, mae_div_indices=0.2500000000000002, mae_div_steps=2.25

[18-04-2022_12-44-21] DEBUG :: Experiment >> Refinement spread at run=21, level=2:
Root Mean Squared Errors: rmse_mchild=1.7020895521497739, rmse_div_indices=3.5260932110954366, rmse_div_steps=6.718134661744532
Mean Absolute Errors: mae_mchild=1.4268707482993204, mae_div_indices=2.699999999999999, mae_div_steps=5.399999999999999

[18-04-2022_12-44-21] DEBUG :: Experiment >> Refinement spread at run=21, level=1:
Root Mean Squared Errors: rmse_mchild=3.524471614445291, rmse_div_indices=6.713105799381102, rmse_div_steps=12.156047596870785
Mean Absolute Errors: mae_mchild=2.8594833018273462, mae_div_indices=5.552631578947367, mae_div_steps=10.078947368421055

[18-04-2022_12-44-21] DEBUG :: Experiment >> Refinement spread at run=22, level=3:
Root Mean Squared Errors: rmse_mchild=6.739436178197696, rmse_div_indices=0.3726779962499652, rmse_div_steps=3.6590830666833587
Mean Absolute Errors: mae_mchild=6.099999999999997, mae_div_indices=0.2500000000000002, mae_div_steps=2.5000000000000004

[18-04-2022_12-44-21] DEBUG :: Experiment >> Refinement spread at run=22, level=2:
Root Mean Squared Errors: rmse_mchild=1.9473307647747005, rmse_div_indices=3.6081184180287806, rmse_div_steps=6.826147983767732
Mean Absolute Errors: mae_mchild=1.6043388429752072, mae_div_indices=2.899999999999998, mae_div_steps=5.699999999999998

[18-04-2022_12-44-21] DEBUG :: Experiment >> Refinement spread at run=22, level=1:
Root Mean Squared Errors: rmse_mchild=3.8164596179019594, rmse_div_indices=6.791198007006595, rmse_div_steps=11.770113637885272
Mean Absolute Errors: mae_mchild=3.0843086689148973, mae_div_indices=5.868421052631578, mae_div_steps=10.07894736842105

[18-04-2022_12-44-21] DEBUG :: Experiment >> Refinement spread at run=23, level=3:
Root Mean Squared Errors: rmse_mchild=7.179832867135556, rmse_div_indices=0.3726779962499652, rmse_div_steps=4.597704741377908
Mean Absolute Errors: mae_mchild=6.649999999999999, mae_div_indices=0.2500000000000002, mae_div_steps=3.2500000000000004

[18-04-2022_12-44-21] DEBUG :: Experiment >> Refinement spread at run=23, level=2:
Root Mean Squared Errors: rmse_mchild=2.1601074162149394, rmse_div_indices=4.573676695889042, rmse_div_steps=8.791199303006682
Mean Absolute Errors: mae_mchild=1.826446280991737, mae_div_indices=3.7999999999999985, mae_div_steps=7.499999999999998

[18-04-2022_12-44-22] DEBUG :: Experiment >> Refinement spread at run=23, level=1:
Root Mean Squared Errors: rmse_mchild=4.819433483241058, rmse_div_indices=8.839234484773163, rmse_div_steps=20.9781632497541
Mean Absolute Errors: mae_mchild=3.6609799642927983, mae_div_indices=7.815789473684208, mae_div_steps=18.289473684210527

[18-04-2022_12-44-22] DEBUG :: Experiment >> Refinement spread at run=24, level=3:
Root Mean Squared Errors: rmse_mchild=5.522680508593629, rmse_div_indices=0.3726779962499652, rmse_div_steps=3.1710495984067415
Mean Absolute Errors: mae_mchild=4.2799999999999985, mae_div_indices=0.2500000000000002, mae_div_steps=1.6666666666666665

[18-04-2022_12-44-22] DEBUG :: Experiment >> Refinement spread at run=24, level=2:
Root Mean Squared Errors: rmse_mchild=2.385551809962744, rmse_div_indices=2.772216655527699, rmse_div_steps=6.519770502663986
Mean Absolute Errors: mae_mchild=1.9597107438016514, mae_div_indices=1.833333333333334, mae_div_steps=4.588888888888889

[18-04-2022_12-44-22] DEBUG :: Experiment >> Refinement spread at run=24, level=1:
Root Mean Squared Errors: rmse_mchild=4.637001477080037, rmse_div_indices=6.44753152516769, rmse_div_steps=13.595575332290444
Mean Absolute Errors: mae_mchild=3.4841433664852666, mae_div_indices=4.6228070175438605, mae_div_steps=10.804093567251462

[18-04-2022_12-44-22] DEBUG :: Experiment >> Refinement spread at run=25, level=3:
Root Mean Squared Errors: rmse_mchild=6.575712889109437, rmse_div_indices=0.3726779962499652, rmse_div_steps=4.2687494916219
Mean Absolute Errors: mae_mchild=6.099999999999997, mae_div_indices=0.2500000000000002, mae_div_steps=3.0000000000000004

[18-04-2022_12-44-22] DEBUG :: Experiment >> Refinement spread at run=25, level=2:
Root Mean Squared Errors: rmse_mchild=3.1542228679702444, rmse_div_indices=4.035490699429894, rmse_div_steps=9.066217309126024
Mean Absolute Errors: mae_mchild=2.7975206611570234, mae_div_indices=3.2999999999999985, mae_div_steps=7.700000000000001

[18-04-2022_12-44-23] DEBUG :: Experiment >> Refinement spread at run=25, level=1:
Root Mean Squared Errors: rmse_mchild=5.114911473769598, rmse_div_indices=9.062029042679702, rmse_div_steps=22.903209765093184
Mean Absolute Errors: mae_mchild=4.2407581159692205, mae_div_indices=7.973684210526319, mae_div_steps=20.078947368421055

[18-04-2022_12-44-23] DEBUG :: Experiment >> Refinement spread at run=26, level=3:
Root Mean Squared Errors: rmse_mchild=5.459853477887478, rmse_div_indices=0.3726779962499652, rmse_div_steps=3.1710495984067415
Mean Absolute Errors: mae_mchild=4.329999999999998, mae_div_indices=0.2500000000000002, mae_div_steps=1.6666666666666665

[18-04-2022_12-44-23] DEBUG :: Experiment >> Refinement spread at run=26, level=2:
Root Mean Squared Errors: rmse_mchild=2.3751359247750474, rmse_div_indices=2.772216655527699, rmse_div_steps=6.395021211559529
Mean Absolute Errors: mae_mchild=1.9369834710743787, mae_div_indices=1.833333333333334, mae_div_steps=4.488888888888889

[18-04-2022_12-44-23] DEBUG :: Experiment >> Refinement spread at run=26, level=1:
Root Mean Squared Errors: rmse_mchild=4.630015399230343, rmse_div_indices=6.3317557284128165, rmse_div_steps=13.500830239433283
Mean Absolute Errors: mae_mchild=3.47044473634828, mae_div_indices=4.517543859649123, mae_div_steps=10.698830409356725

[18-04-2022_12-44-23] DEBUG :: Experiment >> Refinement spread at run=27, level=3:
Root Mean Squared Errors: rmse_mchild=5.469003565550126, rmse_div_indices=0.3726779962499652, rmse_div_steps=2.793842435706702
Mean Absolute Errors: mae_mchild=4.849999999999997, mae_div_indices=0.2500000000000002, mae_div_steps=1.7500000000000004

[18-04-2022_12-44-23] DEBUG :: Experiment >> Refinement spread at run=27, level=2:
Root Mean Squared Errors: rmse_mchild=2.042864521828468, rmse_div_indices=2.487003253955487, rmse_div_steps=5.220330626679871
Mean Absolute Errors: mae_mchild=1.6477272727272727, mae_div_indices=1.822222222222221, mae_div_steps=3.866666666666667

[18-04-2022_12-44-24] DEBUG :: Experiment >> Refinement spread at run=27, level=1:
Root Mean Squared Errors: rmse_mchild=4.799013222907889, rmse_div_indices=5.1250921163213965, rmse_div_steps=13.10273917465895
Mean Absolute Errors: mae_mchild=4.019564850733677, mae_div_indices=3.944444444444444, mae_div_steps=9.65204678362573

[18-04-2022_12-44-24] DEBUG :: Experiment >> Refinement spread at run=28, level=3:
Root Mean Squared Errors: rmse_mchild=5.444263035526479, rmse_div_indices=0.3726779962499652, rmse_div_steps=2.793842435706702
Mean Absolute Errors: mae_mchild=4.799999999999997, mae_div_indices=0.2500000000000002, mae_div_steps=1.7500000000000004

[18-04-2022_12-44-24] DEBUG :: Experiment >> Refinement spread at run=28, level=2:
Root Mean Squared Errors: rmse_mchild=2.053959590644373, rmse_div_indices=2.487003253955487, rmse_div_steps=5.220330626679871
Mean Absolute Errors: mae_mchild=1.6704545454545454, mae_div_indices=1.822222222222221, mae_div_steps=3.866666666666667

[18-04-2022_12-44-24] DEBUG :: Experiment >> Refinement spread at run=28, level=1:
Root Mean Squared Errors: rmse_mchild=3.3646140082516918, rmse_div_indices=5.1250921163213965, rmse_div_steps=12.234450289209661
Mean Absolute Errors: mae_mchild=2.6210153482880725, mae_div_indices=3.944444444444444, mae_div_steps=9.014619883040936

[18-04-2022_12-44-24] DEBUG :: Experiment >> Refinement spread at run=29, level=3:
Root Mean Squared Errors: rmse_mchild=6.459102104782056, rmse_div_indices=0.3726779962499652, rmse_div_steps=4.2687494916219
Mean Absolute Errors: mae_mchild=5.999999999999997, mae_div_indices=0.2500000000000002, mae_div_steps=3.0000000000000004

[18-04-2022_12-44-24] DEBUG :: Experiment >> Refinement spread at run=29, level=2:
Root Mean Squared Errors: rmse_mchild=3.1697416924245108, rmse_div_indices=4.035490699429894, rmse_div_steps=9.101688894965635
Mean Absolute Errors: mae_mchild=2.752066115702478, mae_div_indices=3.2999999999999985, mae_div_steps=7.700000000000001

[18-04-2022_12-44-25] DEBUG :: Experiment >> Refinement spread at run=29, level=1:
Root Mean Squared Errors: rmse_mchild=4.881366103327597, rmse_div_indices=9.218143605952397, rmse_div_steps=23.185317915905276
Mean Absolute Errors: mae_mchild=3.933571026458996, mae_div_indices=8.078947368421055, mae_div_steps=20.23684210526315

[18-04-2022_12-44-25] DEBUG :: Experiment >> Refinement spread at run=30, level=3:
Root Mean Squared Errors: rmse_mchild=5.744127435912263, rmse_div_indices=0.3726779962499652, rmse_div_steps=3.640054944640259
Mean Absolute Errors: mae_mchild=4.949999999999998, mae_div_indices=0.2500000000000002, mae_div_steps=2.25

[18-04-2022_12-44-25] DEBUG :: Experiment >> Refinement spread at run=30, level=2:
Root Mean Squared Errors: rmse_mchild=1.7020895521497739, rmse_div_indices=3.5260932110954366, rmse_div_steps=6.718134661744532
Mean Absolute Errors: mae_mchild=1.4268707482993204, mae_div_indices=2.699999999999999, mae_div_steps=5.399999999999999

[18-04-2022_12-44-25] DEBUG :: Experiment >> Refinement spread at run=30, level=1:
Root Mean Squared Errors: rmse_mchild=3.510020063441332, rmse_div_indices=6.713105799381102, rmse_div_steps=12.156047596870785
Mean Absolute Errors: mae_mchild=2.8594833018273462, mae_div_indices=5.552631578947367, mae_div_steps=10.078947368421055

[18-04-2022_12-44-25] DEBUG :: Experiment >> Refinement spread at run=31, level=3:
Root Mean Squared Errors: rmse_mchild=5.38423625038872, rmse_div_indices=0.3726779962499652, rmse_div_steps=3.1710495984067415
Mean Absolute Errors: mae_mchild=4.249999999999997, mae_div_indices=0.2500000000000002, mae_div_steps=1.6666666666666665

[18-04-2022_12-44-25] DEBUG :: Experiment >> Refinement spread at run=31, level=2:
Root Mean Squared Errors: rmse_mchild=2.4756562699498783, rmse_div_indices=2.772216655527699, rmse_div_steps=6.493301391662254
Mean Absolute Errors: mae_mchild=1.9824380165289248, mae_div_indices=1.833333333333334, mae_div_steps=4.488888888888889

[18-04-2022_12-44-26] DEBUG :: Experiment >> Refinement spread at run=31, level=1:
Root Mean Squared Errors: rmse_mchild=4.601781537575651, rmse_div_indices=6.4525181327456425, rmse_div_steps=13.764643097811742
Mean Absolute Errors: mae_mchild=3.456746106211294, mae_div_indices=4.5701754385964914, mae_div_steps=10.85672514619883

[18-04-2022_12-44-26] DEBUG :: Experiment >> Refinement spread at run=32, level=3:
Root Mean Squared Errors: rmse_mchild=5.444263035526479, rmse_div_indices=0.3726779962499652, rmse_div_steps=2.793842435706702
Mean Absolute Errors: mae_mchild=4.799999999999997, mae_div_indices=0.2500000000000002, mae_div_steps=1.7500000000000004

[18-04-2022_12-44-26] DEBUG :: Experiment >> Refinement spread at run=32, level=2:
Root Mean Squared Errors: rmse_mchild=1.7635982891860138, rmse_div_indices=2.487003253955487, rmse_div_steps=4.568004670166906
Mean Absolute Errors: mae_mchild=1.5030991735537191, mae_div_indices=1.822222222222221, mae_div_steps=3.4

[18-04-2022_12-44-26] DEBUG :: Experiment >> Refinement spread at run=32, level=1:
Root Mean Squared Errors: rmse_mchild=3.828005959978329, rmse_div_indices=4.4578926655476865, rmse_div_steps=10.25510380230748
Mean Absolute Errors: mae_mchild=3.199644444444442, mae_div_indices=3.4473684210526323, mae_div_steps=7.3362573099415185

[18-04-2022_12-44-26] DEBUG :: Experiment >> Refinement spread at run=33, level=3:
Root Mean Squared Errors: rmse_mchild=7.290404652692469, rmse_div_indices=0.3726779962499652, rmse_div_steps=4.972144630058766
Mean Absolute Errors: mae_mchild=6.749999999999998, mae_div_indices=0.2500000000000002, mae_div_steps=3.5000000000000004

[18-04-2022_12-44-26] DEBUG :: Experiment >> Refinement spread at run=33, level=2:
Root Mean Squared Errors: rmse_mchild=2.6099281995126913, rmse_div_indices=4.817406709777305, rmse_div_steps=9.660151060853995
Mean Absolute Errors: mae_mchild=2.2128099173553704, mae_div_indices=3.9999999999999987, mae_div_steps=8.200000000000001

[18-04-2022_12-44-27] DEBUG :: Experiment >> Refinement spread at run=33, level=1:
Root Mean Squared Errors: rmse_mchild=4.927281294692597, rmse_div_indices=9.678934542559027, rmse_div_steps=23.294359681743913
Mean Absolute Errors: mae_mchild=3.7095139801088357, mae_div_indices=8.500000000000004, mae_div_steps=20.342105263157897

[18-04-2022_12-44-27] DEBUG :: Experiment >> Refinement spread at run=34, level=3:
Root Mean Squared Errors: rmse_mchild=5.708765190476831, rmse_div_indices=0.3726779962499652, rmse_div_steps=3.1710495984067415
Mean Absolute Errors: mae_mchild=4.4499999999999975, mae_div_indices=0.2500000000000002, mae_div_steps=1.6666666666666665

[18-04-2022_12-44-27] DEBUG :: Experiment >> Refinement spread at run=34, level=2:
Root Mean Squared Errors: rmse_mchild=1.7136876047318463, rmse_div_indices=2.772216655527699, rmse_div_steps=5.799105933644395
Mean Absolute Errors: mae_mchild=1.3512396694214879, mae_div_indices=1.833333333333334, mae_div_steps=4.111111111111112

[18-04-2022_12-44-27] DEBUG :: Experiment >> Refinement spread at run=34, level=1:
Root Mean Squared Errors: rmse_mchild=5.472134601035216, rmse_div_indices=5.680366995254772, rmse_div_steps=11.59415645649229
Mean Absolute Errors: mae_mchild=4.275937314024992, mae_div_indices=4.084795321637427, mae_div_steps=9.500000000000004

[18-04-2022_12-44-27] DEBUG :: Experiment >> Refinement spread at run=35, level=3:
Root Mean Squared Errors: rmse_mchild=6.21610810716802, rmse_div_indices=0.3726779962499652, rmse_div_steps=4.2687494916219
Mean Absolute Errors: mae_mchild=5.6999999999999975, mae_div_indices=0.2500000000000002, mae_div_steps=3.0000000000000004

[18-04-2022_12-44-27] DEBUG :: Experiment >> Refinement spread at run=35, level=2:
Root Mean Squared Errors: rmse_mchild=2.526256744769992, rmse_div_indices=4.035490699429894, rmse_div_steps=8.35175741097955
Mean Absolute Errors: mae_mchild=2.2190082644628117, mae_div_indices=3.2999999999999985, mae_div_steps=7.099999999999999

[18-04-2022_12-44-27] DEBUG :: Experiment >> Refinement spread at run=35, level=1:
Root Mean Squared Errors: rmse_mchild=4.363356640749201, rmse_div_indices=8.324761673470174, rmse_div_steps=20.03951992125719
Mean Absolute Errors: mae_mchild=3.515770680420551, mae_div_indices=7.342105263157892, mae_div_steps=17.5

[18-04-2022_12-44-28] DEBUG :: Experiment >> Refinement spread at run=36, level=3:
Root Mean Squared Errors: rmse_mchild=4.970915408654626, rmse_div_indices=0.3726779962499652, rmse_div_steps=2.321398046197354
Mean Absolute Errors: mae_mchild=4.349999999999997, mae_div_indices=0.2500000000000002, mae_div_steps=1.5000000000000004

[18-04-2022_12-44-28] DEBUG :: Experiment >> Refinement spread at run=36, level=2:
Root Mean Squared Errors: rmse_mchild=1.9489216132378067, rmse_div_indices=2.1619607013250883, rmse_div_steps=4.98627746550099
Mean Absolute Errors: mae_mchild=1.6363636363636365, mae_div_indices=1.6222222222222211, mae_div_steps=3.766666666666667

[18-04-2022_12-44-28] DEBUG :: Experiment >> Refinement spread at run=36, level=1:
Root Mean Squared Errors: rmse_mchild=4.772952552329671, rmse_div_indices=4.946842180962803, rmse_div_steps=12.693089553656902
Mean Absolute Errors: mae_mchild=4.001180637544269, mae_div_indices=3.891812865497076, mae_div_steps=9.494152046783624

[18-04-2022_12-44-28] DEBUG :: Experiment >> Refinement spread at run=37, level=3:
Root Mean Squared Errors: rmse_mchild=6.058465152165191, rmse_div_indices=0.3726779962499652, rmse_div_steps=3.640054944640259
Mean Absolute Errors: mae_mchild=5.149999999999999, mae_div_indices=0.2500000000000002, mae_div_steps=2.25

[18-04-2022_12-44-28] DEBUG :: Experiment >> Refinement spread at run=37, level=2:
Root Mean Squared Errors: rmse_mchild=2.2173770876655166, rmse_div_indices=3.5260932110954366, rmse_div_steps=7.46299512905484
Mean Absolute Errors: mae_mchild=1.9075963718820863, mae_div_indices=2.699999999999999, mae_div_steps=5.999999999999998

[18-04-2022_12-44-28] DEBUG :: Experiment >> Refinement spread at run=37, level=1:
Root Mean Squared Errors: rmse_mchild=2.9945728864841112, rmse_div_indices=7.482370443007601, rmse_div_steps=15.131892530016234
Mean Absolute Errors: mae_mchild=2.4140051577068045, mae_div_indices=6.184210526315788, mae_div_steps=12.657894736842108

[18-04-2022_12-44-29] DEBUG :: Experiment >> Refinement spread at run=38, level=3:
Root Mean Squared Errors: rmse_mchild=7.373940601876312, rmse_div_indices=0.3726779962499652, rmse_div_steps=4.6097722286464435
Mean Absolute Errors: mae_mchild=6.749999999999998, mae_div_indices=0.2500000000000002, mae_div_steps=3.25

[18-04-2022_12-44-29] DEBUG :: Experiment >> Refinement spread at run=38, level=2:
Root Mean Squared Errors: rmse_mchild=3.583247639116653, rmse_div_indices=4.453463071962462, rmse_div_steps=10.75208851374501
Mean Absolute Errors: mae_mchild=3.128684807256235, mae_div_indices=3.6999999999999993, mae_div_steps=8.999999999999996

[18-04-2022_12-44-29] DEBUG :: Experiment >> Refinement spread at run=38, level=1:
Root Mean Squared Errors: rmse_mchild=7.582607292123089, rmse_div_indices=10.78703557295709, rmse_div_steps=29.648780665177007
Mean Absolute Errors: mae_mchild=6.071216028565762, mae_div_indices=9.342105263157892, mae_div_steps=25.500000000000007

[18-04-2022_12-44-29] DEBUG :: Experiment >> Refinement spread at run=39, level=3:
Root Mean Squared Errors: rmse_mchild=5.67230112035671, rmse_div_indices=0.3726779962499652, rmse_div_steps=3.640054944640259
Mean Absolute Errors: mae_mchild=4.899999999999999, mae_div_indices=0.2500000000000002, mae_div_steps=2.25

[18-04-2022_12-44-29] DEBUG :: Experiment >> Refinement spread at run=39, level=2:
Root Mean Squared Errors: rmse_mchild=2.3758477024772846, rmse_div_indices=3.5260932110954366, rmse_div_steps=7.605310035806609
Mean Absolute Errors: mae_mchild=2.0028344671201816, mae_div_indices=2.699999999999999, mae_div_steps=6.099999999999999

[18-04-2022_12-44-29] DEBUG :: Experiment >> Refinement spread at run=39, level=1:
Root Mean Squared Errors: rmse_mchild=2.9534509384689747, rmse_div_indices=7.617532613576944, rmse_div_steps=15.391495968493391
Mean Absolute Errors: mae_mchild=2.3562785161674276, mae_div_indices=6.289473684210525, mae_div_steps=12.868421052631582

[18-04-2022_12-44-30] DEBUG :: Experiment >> Refinement spread at run=40, level=3:
Root Mean Squared Errors: rmse_mchild=5.3113086899557995, rmse_div_indices=0.3726779962499652, rmse_div_steps=3.1710495984067415
Mean Absolute Errors: mae_mchild=4.229999999999999, mae_div_indices=0.2500000000000002, mae_div_steps=1.6666666666666665

[18-04-2022_12-44-30] DEBUG :: Experiment >> Refinement spread at run=40, level=2:
Root Mean Squared Errors: rmse_mchild=2.4494370242031502, rmse_div_indices=2.772216655527699, rmse_div_steps=6.5537662341474965
Mean Absolute Errors: mae_mchild=1.9369834710743794, mae_div_indices=1.833333333333334, mae_div_steps=4.588888888888889

[18-04-2022_12-44-30] DEBUG :: Experiment >> Refinement spread at run=40, level=1:
Root Mean Squared Errors: rmse_mchild=4.507786054126422, rmse_div_indices=6.484612165100846, rmse_div_steps=13.774623530656148
Mean Absolute Errors: mae_mchild=3.415650215800335, mae_div_indices=4.6228070175438605, mae_div_steps=10.909356725146198

[18-04-2022_12-44-30] DEBUG :: Experiment >> Refinement spread at run=41, level=3:
Root Mean Squared Errors: rmse_mchild=7.511657606680431, rmse_div_indices=0.3726779962499652, rmse_div_steps=4.6097722286464435
Mean Absolute Errors: mae_mchild=6.849999999999999, mae_div_indices=0.2500000000000002, mae_div_steps=3.25

[18-04-2022_12-44-30] DEBUG :: Experiment >> Refinement spread at run=41, level=2:
Root Mean Squared Errors: rmse_mchild=3.3815531547608666, rmse_div_indices=4.453463071962462, rmse_div_steps=10.612187263637901
Mean Absolute Errors: mae_mchild=2.9858276643990926, mae_div_indices=3.6999999999999993, mae_div_steps=8.899999999999999

[18-04-2022_12-44-30] DEBUG :: Experiment >> Refinement spread at run=41, level=1:
Root Mean Squared Errors: rmse_mchild=7.374137319719334, rmse_div_indices=10.71387124418793, rmse_div_steps=29.69470224014048
Mean Absolute Errors: mae_mchild=5.775243007339818, mae_div_indices=9.289473684210524, mae_div_steps=25.552631578947363

[18-04-2022_12-44-31] DEBUG :: Experiment >> Refinement spread at run=42, level=3:
Root Mean Squared Errors: rmse_mchild=6.635510530471636, rmse_div_indices=0.3726779962499652, rmse_div_steps=4.2687494916219
Mean Absolute Errors: mae_mchild=6.149999999999997, mae_div_indices=0.2500000000000002, mae_div_steps=3.0000000000000004

[18-04-2022_12-44-31] DEBUG :: Experiment >> Refinement spread at run=42, level=2:
Root Mean Squared Errors: rmse_mchild=2.4731512838334986, rmse_div_indices=4.035490699429894, rmse_div_steps=8.252048006179816
Mean Absolute Errors: mae_mchild=2.1508264462809934, mae_div_indices=3.2999999999999985, mae_div_steps=6.999999999999998

[18-04-2022_12-44-31] DEBUG :: Experiment >> Refinement spread at run=42, level=1:
Root Mean Squared Errors: rmse_mchild=4.369898476611746, rmse_div_indices=8.272261594681238, rmse_div_steps=19.977997156130797
Mean Absolute Errors: mae_mchild=3.5435429478278118, mae_div_indices=7.289473684210523, mae_div_steps=17.44736842105263

[18-04-2022_12-44-31] DEBUG :: Experiment >> Refinement spread at run=43, level=3:
Root Mean Squared Errors: rmse_mchild=7.0192592201741615, rmse_div_indices=0.3726779962499652, rmse_div_steps=3.6590830666833587
Mean Absolute Errors: mae_mchild=6.349999999999997, mae_div_indices=0.2500000000000002, mae_div_steps=2.5000000000000004

[18-04-2022_12-44-31] DEBUG :: Experiment >> Refinement spread at run=43, level=2:
Root Mean Squared Errors: rmse_mchild=1.8541192692118846, rmse_div_indices=3.6081184180287806, rmse_div_steps=6.693833535979766
Mean Absolute Errors: mae_mchild=1.483471074380166, mae_div_indices=2.899999999999998, mae_div_steps=5.599999999999999

[18-04-2022_12-44-31] DEBUG :: Experiment >> Refinement spread at run=43, level=1:
Root Mean Squared Errors: rmse_mchild=3.8657546117812793, rmse_div_indices=6.666483915623808, rmse_div_steps=11.700598108702156
Mean Absolute Errors: mae_mchild=3.126562190041658, mae_div_indices=5.763157894736841, mae_div_steps=10.026315789473681

[18-04-2022_12-44-32] DEBUG :: Experiment >> Refinement spread at run=44, level=3:
Root Mean Squared Errors: rmse_mchild=5.469003565550126, rmse_div_indices=0.3726779962499652, rmse_div_steps=2.793842435706702
Mean Absolute Errors: mae_mchild=4.849999999999997, mae_div_indices=0.2500000000000002, mae_div_steps=1.7500000000000004

[18-04-2022_12-44-32] DEBUG :: Experiment >> Refinement spread at run=44, level=2:
Root Mean Squared Errors: rmse_mchild=2.012037637457474, rmse_div_indices=2.487003253955487, rmse_div_steps=5.220330626679871
Mean Absolute Errors: mae_mchild=1.5795454545454546, mae_div_indices=1.822222222222221, mae_div_steps=3.866666666666667

[18-04-2022_12-44-32] DEBUG :: Experiment >> Refinement spread at run=44, level=1:
Root Mean Squared Errors: rmse_mchild=4.74253636843587, rmse_div_indices=5.1250921163213965, rmse_div_steps=13.10273917465895
Mean Absolute Errors: mae_mchild=3.9752066115702425, mae_div_indices=3.944444444444444, mae_div_steps=9.65204678362573

[18-04-2022_12-44-32] DEBUG :: Experiment >> Refinement spread at run=45, level=3:
Root Mean Squared Errors: rmse_mchild=6.472634703117424, rmse_div_indices=0.3726779962499652, rmse_div_steps=4.6097722286464435
Mean Absolute Errors: mae_mchild=5.799999999999999, mae_div_indices=0.2500000000000002, mae_div_steps=3.25

[18-04-2022_12-44-32] DEBUG :: Experiment >> Refinement spread at run=45, level=2:
Root Mean Squared Errors: rmse_mchild=2.6518686633028055, rmse_div_indices=4.453463071962462, rmse_div_steps=9.789260933779914
Mean Absolute Errors: mae_mchild=2.3667800453514736, mae_div_indices=3.6999999999999993, mae_div_steps=8.399999999999999

[18-04-2022_12-44-32] DEBUG :: Experiment >> Refinement spread at run=45, level=1:
Root Mean Squared Errors: rmse_mchild=4.10289692074194, rmse_div_indices=9.767347240922495, rmse_div_steps=22.941137917872815
Mean Absolute Errors: mae_mchild=3.1067248561793304, mae_div_indices=8.657894736842103, mae_div_steps=20.289473684210527

[18-04-2022_12-44-33] DEBUG :: Experiment >> Refinement spread at run=46, level=3:
Root Mean Squared Errors: rmse_mchild=5.469003565550126, rmse_div_indices=0.3726779962499652, rmse_div_steps=2.793842435706702
Mean Absolute Errors: mae_mchild=4.849999999999997, mae_div_indices=0.2500000000000002, mae_div_steps=1.7500000000000004

[18-04-2022_12-44-33] DEBUG :: Experiment >> Refinement spread at run=46, level=2:
Root Mean Squared Errors: rmse_mchild=1.9721066262893965, rmse_div_indices=2.487003253955487, rmse_div_steps=5.220330626679871
Mean Absolute Errors: mae_mchild=1.5795454545454546, mae_div_indices=1.822222222222221, mae_div_steps=3.866666666666667

[18-04-2022_12-44-33] DEBUG :: Experiment >> Refinement spread at run=46, level=1:
Root Mean Squared Errors: rmse_mchild=4.756492398386464, rmse_div_indices=5.1250921163213965, rmse_div_steps=13.10273917465895
Mean Absolute Errors: mae_mchild=3.9806038117726383, mae_div_indices=3.944444444444444, mae_div_steps=9.65204678362573

[18-04-2022_12-44-33] DEBUG :: Experiment >> Refinement spread at run=47, level=3:
Root Mean Squared Errors: rmse_mchild=5.542562584220406, rmse_div_indices=0.3726779962499652, rmse_div_steps=3.1710495984067415
Mean Absolute Errors: mae_mchild=4.379999999999998, mae_div_indices=0.2500000000000002, mae_div_steps=1.6666666666666665

[18-04-2022_12-44-33] DEBUG :: Experiment >> Refinement spread at run=47, level=2:
Root Mean Squared Errors: rmse_mchild=1.9637073850792734, rmse_div_indices=2.772216655527699, rmse_div_steps=5.947610787036596
Mean Absolute Errors: mae_mchild=1.5940082644628104, mae_div_indices=1.833333333333334, mae_div_steps=4.211111111111111

[18-04-2022_12-44-33] DEBUG :: Experiment >> Refinement spread at run=47, level=1:
Root Mean Squared Errors: rmse_mchild=4.979824400648816, rmse_div_indices=5.83024145294259, rmse_div_steps=12.073261581866415
Mean Absolute Errors: mae_mchild=3.9008133306883535, mae_div_indices=4.190058479532164, mae_div_steps=9.774853801169588

[18-04-2022_12-44-34] DEBUG :: Experiment >> Refinement spread at run=48, level=3:
Root Mean Squared Errors: rmse_mchild=7.247413331665304, rmse_div_indices=0.3726779962499652, rmse_div_steps=4.6097722286464435
Mean Absolute Errors: mae_mchild=6.649999999999999, mae_div_indices=0.2500000000000002, mae_div_steps=3.25

[18-04-2022_12-44-34] DEBUG :: Experiment >> Refinement spread at run=48, level=2:
Root Mean Squared Errors: rmse_mchild=2.9129957462528298, rmse_div_indices=4.453463071962462, rmse_div_steps=10.003332777962884
Mean Absolute Errors: mae_mchild=2.5221088435374166, mae_div_indices=3.6999999999999993, mae_div_steps=8.4

[18-04-2022_12-44-34] DEBUG :: Experiment >> Refinement spread at run=48, level=1:
Root Mean Squared Errors: rmse_mchild=7.286910787369114, rmse_div_indices=10.01993626761256, rmse_div_steps=27.254012348346446
Mean Absolute Errors: mae_mchild=5.8928796471329505, mae_div_indices=8.710526315789474, mae_div_steps=23.394736842105264

[18-04-2022_12-44-34] DEBUG :: Experiment >> Refinement spread at run=49, level=3:
Root Mean Squared Errors: rmse_mchild=5.67230112035671, rmse_div_indices=0.3726779962499652, rmse_div_steps=3.640054944640259
Mean Absolute Errors: mae_mchild=4.899999999999999, mae_div_indices=0.2500000000000002, mae_div_steps=2.25

[18-04-2022_12-44-34] DEBUG :: Experiment >> Refinement spread at run=49, level=2:
Root Mean Squared Errors: rmse_mchild=2.384659811953327, rmse_div_indices=3.5260932110954366, rmse_div_steps=7.605310035806609
Mean Absolute Errors: mae_mchild=2.0266439909297054, mae_div_indices=2.699999999999999, mae_div_steps=6.099999999999999

[18-04-2022_12-44-34] DEBUG :: Experiment >> Refinement spread at run=49, level=1:
Root Mean Squared Errors: rmse_mchild=2.9825918254469173, rmse_div_indices=7.617532613576944, rmse_div_steps=15.391495968493391
Mean Absolute Errors: mae_mchild=2.3844475302519346, mae_div_indices=6.289473684210525, mae_div_steps=12.868421052631582

[18-04-2022_12-44-35] INFO :: Experiment >> 

   ======================================================   
                    Experimental Results                    
   ======================================================   

     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~     
             Concatenated Plan Level-Wise Means             

       LE      AC  QL_SCORE         GT         ST   OT         TT         LT         CT        WT    MET_PA  TI_SCORE          RSS          VMS     GRADE
0   20.00   20.00  1.000000   1.296951   0.847791  0.0   2.144742   2.144742   2.144742  2.144742  0.000000  1.000000  1588.751328  1598.126172  1.000000
1   43.44   43.44  0.967273   3.090878   1.019538  0.0   4.110416   4.504983   6.255158  2.199792  0.076305  0.998138  1622.373906  1632.641484  0.965467
2   72.56   72.56  0.924316   7.149191   1.891279  0.0   9.040471   6.629768  15.295628  1.908547  0.178579  0.957802  1629.548594  1640.411016  0.885240
3  146.16  146.16  0.883566  42.777889  11.688739  0.0  54.466628  13.382984  69.762256  4.185741  0.608666  0.900513  1677.090000  1701.228047  0.795661

     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~     
      Concatenated Plan Level-Wise Standard Deviation       

         LE        AC  QL_SCORE        GT        ST   OT        TT        LT        CT        WT    MET_PA  TI_SCORE         RSS         VMS     GRADE
0  0.000000  0.000000  0.000000  0.003800  0.238639  0.0  0.238654  0.238654  0.238654  0.238654  0.000000  0.000000  533.703374  536.812453  0.000000
1  0.907115  0.907115  0.020616  0.075862  0.344710  0.0  0.350356  0.411433  0.420900  0.140324  0.018959  0.006055  529.229283  532.013516  0.021197
2  2.366087  2.366087  0.029495  0.256212  0.526910  0.0  0.598528  0.541771  0.744639  0.084123  0.019175  0.008247  528.846818  531.676740  0.027041
3  4.883792  4.883792  0.029679  1.571002  1.268470  0.0  2.545588  0.580587  2.928783  0.160609  0.064962  0.002642  526.975736  530.856178  0.026796

[18-04-2022_12-44-35] INFO :: __main__ >> Saving results to excel file: ./experiments/results/ASH_Excel_2022-04-18_11-19-54_PL2_DC_hcr_online_3_3_2_min_bound_preach_opt.xlsx

[18-04-2022_12-44-43] INFO :: __main__ >> Saving results to data file: ./experiments/results/ASH_Data_2022-04-18_11-19-54_PL2_DC_hcr_online_3_3_2_min_bound_preach_opt.dat

[18-04-2022_12-44-44] INFO :: __main__ >> Saving results to figure file: ./experiments/results/ASH_Figure_2022-04-18_11-19-54_PL2_DC_hcr_online_3_3_2_min_bound_preach_opt.png

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=5.789999999999999.

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[18-04-2022_12-44-44] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=5.789999999999999 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[18-04-2022_12-44-47] INFO :: __main__ >> Overall time: Real = 5093.5778702, Process = 6312.015625

[18-04-2022_12-44-47] INFO :: __main__ >> Exiting with code 0

