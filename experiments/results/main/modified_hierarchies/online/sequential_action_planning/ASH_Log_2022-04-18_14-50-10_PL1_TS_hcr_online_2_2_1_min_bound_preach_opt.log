[18-04-2022_15-46-01] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 15 :: Actions = 15                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,store_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,store_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,store_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 11:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 12:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
Step 13:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 14:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 15:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,8))
Step 16:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 17:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 18:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 19:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 20:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 21:
    Current Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 22:
    Current Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 23:
    Current Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Achieved Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,9))
Step 24:
    Current Sub-goals:
        [Index = 8] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 8] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,9),puzzle_room_table)
Step 25:
    Current Sub-goals:
        [Index = 9] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 9] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,9))
Step 26:
    Current Sub-goals:
        [Index = 10] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 10] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
Step 27:
    Current Sub-goals:
        [Index = 11] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 11] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
Step 28:
    Current Sub-goals:
        [Index = 12] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Achieved Sub-goals:
        [Index = 12] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Planned actions:
        talos : put(manipulator_arm_2,(block,8),(block,9))
Step 29:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 13] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,8))
Step 30:
    Current Sub-goals:
        [Index = 14] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,7))
Step 31:
    Current Sub-goals:
        [Index = 14] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : put(manipulator_arm_2,(block,7),(block,8))
Step 32:
    Current Sub-goals:
        [Index = 14] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 14] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,3))
Step 33:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = (block,7)
    Achieved Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = (block,7)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,2))
Step 34:
    Current Sub-goals:
        [Index = 16] talos : put(manipulator_arm_2,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Achieved Sub-goals:
        [Index = 16] talos : put(manipulator_arm_2,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Planned actions:
        talos : put(manipulator_arm_1,(block,2),(block,3))
Step 35:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : release(manipulator_arm_2,(block,7))
Step 36:
    Current Sub-goals:
        [Index = 18] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 18] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : release(manipulator_arm_1,(block,2))
Step 37:
    Current Sub-goals:
        [Index = 19] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 19] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 38:
    Current Sub-goals:
        [Index = 20] talos : release(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 20] talos : release(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 39:
    Current Sub-goals:
        [Index = 21] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 40:
    Current Sub-goals:
        [Index = 21] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 21] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 41:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 42:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,4))
Step 43:
    Current Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 44:
    Current Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,5))
Step 45:
    Current Sub-goals:
        [Index = 24] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 46:
    Current Sub-goals:
        [Index = 24] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 47:
    Current Sub-goals:
        [Index = 24] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 48:
    Current Sub-goals:
        [Index = 24] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 24] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 49:
    Current Sub-goals:
        [Index = 25] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 50:
    Current Sub-goals:
        [Index = 25] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 51:
    Current Sub-goals:
        [Index = 25] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 25] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_arm_1,(block,5),(block,6))
Step 52:
    Current Sub-goals:
        [Index = 26] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 26] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,5))
Step 53:
    Current Sub-goals:
        [Index = 27] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 27] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_arm_2,(block,4),(block,5))
Step 54:
    Current Sub-goals:
        [Index = 28] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 28] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,4))
Step 55:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Achieved Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,1))
Step 56:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_arm_2,(block,1),(block,2))
Step 57:
    Current Sub-goals:
        [Index = 31] talos : release(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 31] talos : release(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,1))

[18-04-2022_15-46-01] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=42, end_step=None

[18-04-2022_15-46-01] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for parts of the existing plan at the current level that have already been divided: start_step=42

[18-04-2022_15-46-01] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=42

[18-04-2022_15-46-01] DEBUG :: ASH Planner Main #1 >> Preparing to invoke division strategy...

[18-04-2022_15-46-01] DEBUG :: ASH Planner Main #1 >> Online method OnlineMethod.GroundFirst chose to invoke the division strategy before a downwards level change:Current increment = 4, Current planning level is complete = True

[18-04-2022_15-46-01] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 57, chosen step range to extract = range(42, 58)

[18-04-2022_15-46-01] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 68, Total actions = 68, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-01] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =  15, AC =  15, CF = 1.0, GT =   7.08s, ST =   3.31s, OT = 0.00s, TT =  10.40s, EF = (LE = 1.7, AC = 1.7), ED = (LE = 1.1, AC = 1.1), EB = (LE = 0.7, AC = 0.7)

[18-04-2022_15-46-01] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=1, plan_length=15, start_step=42, blend=Blend(left=0, right=0)

[18-04-2022_15-46-01] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=0, small_group_size=15, large_group_size=16

[18-04-2022_15-46-01] DEBUG :: core.Strategies >> Division points generated:
[]

[18-04-2022_15-46-01] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 1, Problem Range = [4-4], Size = 15, Sub-goal Stage Range = [43-57]
Division points [total=0] : []

[18-04-2022_15-46-01] DEBUG :: ASH Planner Main #1 >> Monolevel problem 4 at level 2 solved.

[18-04-2022_15-46-01] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 4 at level 1:
Total Templated Partial Problems = 1, Problem Range = [4-4], Size = 15, Sub-goal Stage Range = [43-57]
Division points [total=0] : []

[18-04-2022_15-46-01] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [43-57]

[18-04-2022_15-46-01] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 68, chosen step range to extract = range(0, 69)

[18-04-2022_15-46-01] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 68, Total actions = 68, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-01] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 57, chosen step range to extract = range(0, 58)

[18-04-2022_15-46-01] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 68, Total actions = 68, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-01] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 31, chosen step range to extract = range(0, 32)

[18-04-2022_15-46-01] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 68, Total actions = 68, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-01] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[18-04-2022_15-46-01] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 68, Total actions = 68, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-01] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [43-57], problem number = 4, increment number = 4

[18-04-2022_15-46-01] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 43)
	('last_sgoals', 57)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001D5FEA66D00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1751.6801022999994)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[18-04-2022_15-46-01] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [43-57] : Concurrency disabled : Minimum search length bound enabled with value 82

[18-04-2022_15-46-01] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 43
last_sgoals = 57
start_step = 68
is_initial = False
is_final = True
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 82

[18-04-2022_15-46-01] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[18-04-2022_15-46-01] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[18-04-2022_15-46-01] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[18-04-2022_15-46-01] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[18-04-2022_15-46-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[18-04-2022_15-46-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[18-04-2022_15-46-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_15-46-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_15-46-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_15-46-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_15-46-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[18-04-2022_15-46-01] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_15-46-01] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 68 as problem start state.

[18-04-2022_15-46-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,4))', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 68})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 68})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 68})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 68})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,4)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(store_room,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(store_room,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(store_room,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(store_room,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(store_room,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(store_room,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(store_room,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 68})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 68})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 68})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 68})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'store_room', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 68})

[18-04-2022_15-46-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_15-46-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 68).
holds(1, complete_tower(red,puzzle_room_table), false, 68).
holds(1, complete_tower(yellow,puzzle_room_table), true, 68).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 68).
holds(1, configuration(manipulator_end_2), aligned_with((block,4)), 68).
holds(1, configuration(manipulator_limb_1), retracted, 68).
holds(1, configuration(manipulator_limb_2), extended, 68).
holds(1, configuration(puzzle_room_door), open, 68).
holds(1, configuration(starting_room_door), closed, 68).
holds(1, configuration(store_room_door), open, 68).
holds(1, grasping(manipulator_arm_1), nothing, 68).
holds(1, grasping(manipulator_arm_2), (block,4), 68).
holds(1, grasping(manipulator_end_1), nothing, 68).
holds(1, grasping(manipulator_end_2), (block,4), 68).
holds(1, in((block,1)), (puzzle_room,1), 68).
holds(1, in((block,2)), (puzzle_room,1), 68).
holds(1, in((block,3)), (puzzle_room,1), 68).
holds(1, in((block,4)), (store_room,0), 68).
holds(1, in((block,5)), (store_room,0), 68).
holds(1, in((block,6)), (puzzle_room,1), 68).
holds(1, in((block,7)), (puzzle_room,1), 68).
holds(1, in((block,8)), (puzzle_room,1), 68).
holds(1, in((block,9)), (puzzle_room,1), 68).
holds(1, in(manipulator_arm_1), (store_room,0), 68).
holds(1, in(manipulator_arm_2), (store_room,0), 68).
holds(1, in(manipulator_end_1), (store_room,0), 68).
holds(1, in(manipulator_end_2), (store_room,0), 68).
holds(1, in(manipulator_limb_1), (store_room,0), 68).
holds(1, in(manipulator_limb_2), (store_room,0), 68).
holds(1, in(puzzle_room_table), (puzzle_room,1), 68).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 68).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 68).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 68).
holds(1, in(talos), (store_room,0), 68).
holds(1, in_tower((block,1),(block,1)), true, 68).
holds(1, in_tower((block,1),(block,2)), false, 68).
holds(1, in_tower((block,1),(block,3)), false, 68).
holds(1, in_tower((block,1),(block,4)), false, 68).
holds(1, in_tower((block,1),(block,5)), false, 68).
holds(1, in_tower((block,1),(block,6)), false, 68).
holds(1, in_tower((block,1),(block,7)), false, 68).
holds(1, in_tower((block,1),(block,8)), false, 68).
holds(1, in_tower((block,1),(block,9)), false, 68).
holds(1, in_tower((block,2),(block,1)), false, 68).
holds(1, in_tower((block,2),(block,2)), false, 68).
holds(1, in_tower((block,2),(block,3)), false, 68).
holds(1, in_tower((block,2),(block,4)), false, 68).
holds(1, in_tower((block,2),(block,5)), false, 68).
holds(1, in_tower((block,2),(block,6)), false, 68).
holds(1, in_tower((block,2),(block,7)), false, 68).
holds(1, in_tower((block,2),(block,8)), false, 68).
holds(1, in_tower((block,2),(block,9)), false, 68).
holds(1, in_tower((block,3),(block,1)), false, 68).
holds(1, in_tower((block,3),(block,2)), true, 68).
holds(1, in_tower((block,3),(block,3)), true, 68).
holds(1, in_tower((block,3),(block,4)), false, 68).
holds(1, in_tower((block,3),(block,5)), false, 68).
holds(1, in_tower((block,3),(block,6)), false, 68).
holds(1, in_tower((block,3),(block,7)), false, 68).
holds(1, in_tower((block,3),(block,8)), false, 68).
holds(1, in_tower((block,3),(block,9)), false, 68).
holds(1, in_tower((block,4),(block,1)), false, 68).
holds(1, in_tower((block,4),(block,2)), false, 68).
holds(1, in_tower((block,4),(block,3)), false, 68).
holds(1, in_tower((block,4),(block,4)), false, 68).
holds(1, in_tower((block,4),(block,5)), false, 68).
holds(1, in_tower((block,4),(block,6)), false, 68).
holds(1, in_tower((block,4),(block,7)), false, 68).
holds(1, in_tower((block,4),(block,8)), false, 68).
holds(1, in_tower((block,4),(block,9)), false, 68).
holds(1, in_tower((block,5),(block,1)), false, 68).
holds(1, in_tower((block,5),(block,2)), false, 68).
holds(1, in_tower((block,5),(block,3)), false, 68).
holds(1, in_tower((block,5),(block,4)), false, 68).
holds(1, in_tower((block,5),(block,5)), false, 68).
holds(1, in_tower((block,5),(block,6)), false, 68).
holds(1, in_tower((block,5),(block,7)), false, 68).
holds(1, in_tower((block,5),(block,8)), false, 68).
holds(1, in_tower((block,5),(block,9)), false, 68).
holds(1, in_tower((block,6),(block,1)), false, 68).
holds(1, in_tower((block,6),(block,2)), false, 68).
holds(1, in_tower((block,6),(block,3)), false, 68).
holds(1, in_tower((block,6),(block,4)), false, 68).
holds(1, in_tower((block,6),(block,5)), false, 68).
holds(1, in_tower((block,6),(block,6)), true, 68).
holds(1, in_tower((block,6),(block,7)), false, 68).
holds(1, in_tower((block,6),(block,8)), false, 68).
holds(1, in_tower((block,6),(block,9)), false, 68).
holds(1, in_tower((block,7),(block,1)), false, 68).
holds(1, in_tower((block,7),(block,2)), false, 68).
holds(1, in_tower((block,7),(block,3)), false, 68).
holds(1, in_tower((block,7),(block,4)), false, 68).
holds(1, in_tower((block,7),(block,5)), false, 68).
holds(1, in_tower((block,7),(block,6)), false, 68).
holds(1, in_tower((block,7),(block,7)), false, 68).
holds(1, in_tower((block,7),(block,8)), false, 68).
holds(1, in_tower((block,7),(block,9)), false, 68).
holds(1, in_tower((block,8),(block,1)), false, 68).
holds(1, in_tower((block,8),(block,2)), false, 68).
holds(1, in_tower((block,8),(block,3)), false, 68).
holds(1, in_tower((block,8),(block,4)), false, 68).
holds(1, in_tower((block,8),(block,5)), false, 68).
holds(1, in_tower((block,8),(block,6)), false, 68).
holds(1, in_tower((block,8),(block,7)), false, 68).
holds(1, in_tower((block,8),(block,8)), false, 68).
holds(1, in_tower((block,8),(block,9)), false, 68).
holds(1, in_tower((block,9),(block,1)), false, 68).
holds(1, in_tower((block,9),(block,2)), false, 68).
holds(1, in_tower((block,9),(block,3)), false, 68).
holds(1, in_tower((block,9),(block,4)), false, 68).
holds(1, in_tower((block,9),(block,5)), false, 68).
holds(1, in_tower((block,9),(block,6)), false, 68).
holds(1, in_tower((block,9),(block,7)), true, 68).
holds(1, in_tower((block,9),(block,8)), true, 68).
holds(1, in_tower((block,9),(block,9)), true, 68).
holds(1, on((block,1)), puzzle_room_table_left, 68).
holds(1, on((block,2)), (block,3), 68).
holds(1, on((block,3)), puzzle_room_table_left, 68).
holds(1, on((block,4)), nothing, 68).
holds(1, on((block,5)), nothing, 68).
holds(1, on((block,6)), puzzle_room_table_right, 68).
holds(1, on((block,7)), (block,8), 68).
holds(1, on((block,8)), (block,9), 68).
holds(1, on((block,9)), puzzle_room_table_middle, 68).
holds(1, tower_base((block,1),puzzle_room_table), true, 68).
holds(1, tower_base((block,2),puzzle_room_table), false, 68).
holds(1, tower_base((block,3),puzzle_room_table), true, 68).
holds(1, tower_base((block,4),puzzle_room_table), false, 68).
holds(1, tower_base((block,5),puzzle_room_table), false, 68).
holds(1, tower_base((block,6),puzzle_room_table), true, 68).
holds(1, tower_base((block,7),puzzle_room_table), false, 68).
holds(1, tower_base((block,8),puzzle_room_table), false, 68).
holds(1, tower_base((block,9),puzzle_room_table), true, 68).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,7),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 68).
holds(2, complete_tower(blue,puzzle_room_table), false, 68).
holds(2, complete_tower(red,puzzle_room_table), false, 68).
holds(2, complete_tower(yellow,puzzle_room_table), true, 68).
holds(2, configuration(manipulator_arm_1), retracted, 68).
holds(2, configuration(manipulator_arm_2), extended, 68).
holds(2, configuration(puzzle_room_door), open, 68).
holds(2, configuration(starting_room_door), closed, 68).
holds(2, configuration(store_room_door), open, 68).
holds(2, grasping(manipulator_arm_1), nothing, 68).
holds(2, grasping(manipulator_arm_2), (block,4), 68).
holds(2, in((block,1)), puzzle_room, 68).
holds(2, in((block,2)), puzzle_room, 68).
holds(2, in((block,3)), puzzle_room, 68).
holds(2, in((block,4)), store_room, 68).
holds(2, in((block,5)), store_room, 68).
holds(2, in((block,6)), puzzle_room, 68).
holds(2, in((block,7)), puzzle_room, 68).
holds(2, in((block,8)), puzzle_room, 68).
holds(2, in((block,9)), puzzle_room, 68).
holds(2, in(manipulator_arm_1), store_room, 68).
holds(2, in(manipulator_arm_2), store_room, 68).
holds(2, in(puzzle_room_table), puzzle_room, 68).
holds(2, in(talos), store_room, 68).
holds(2, in_tower((block,1),(block,1)), true, 68).
holds(2, in_tower((block,1),(block,2)), false, 68).
holds(2, in_tower((block,1),(block,3)), false, 68).
holds(2, in_tower((block,1),(block,4)), false, 68).
holds(2, in_tower((block,1),(block,5)), false, 68).
holds(2, in_tower((block,1),(block,6)), false, 68).
holds(2, in_tower((block,1),(block,7)), false, 68).
holds(2, in_tower((block,1),(block,8)), false, 68).
holds(2, in_tower((block,1),(block,9)), false, 68).
holds(2, in_tower((block,2),(block,1)), false, 68).
holds(2, in_tower((block,2),(block,2)), false, 68).
holds(2, in_tower((block,2),(block,3)), false, 68).
holds(2, in_tower((block,2),(block,4)), false, 68).
holds(2, in_tower((block,2),(block,5)), false, 68).
holds(2, in_tower((block,2),(block,6)), false, 68).
holds(2, in_tower((block,2),(block,7)), false, 68).
holds(2, in_tower((block,2),(block,8)), false, 68).
holds(2, in_tower((block,2),(block,9)), false, 68).
holds(2, in_tower((block,3),(block,1)), false, 68).
holds(2, in_tower((block,3),(block,2)), true, 68).
holds(2, in_tower((block,3),(block,3)), true, 68).
holds(2, in_tower((block,3),(block,4)), false, 68).
holds(2, in_tower((block,3),(block,5)), false, 68).
holds(2, in_tower((block,3),(block,6)), false, 68).
holds(2, in_tower((block,3),(block,7)), false, 68).
holds(2, in_tower((block,3),(block,8)), false, 68).
holds(2, in_tower((block,3),(block,9)), false, 68).
holds(2, in_tower((block,4),(block,1)), false, 68).
holds(2, in_tower((block,4),(block,2)), false, 68).
holds(2, in_tower((block,4),(block,3)), false, 68).
holds(2, in_tower((block,4),(block,4)), false, 68).
holds(2, in_tower((block,4),(block,5)), false, 68).
holds(2, in_tower((block,4),(block,6)), false, 68).
holds(2, in_tower((block,4),(block,7)), false, 68).
holds(2, in_tower((block,4),(block,8)), false, 68).
holds(2, in_tower((block,4),(block,9)), false, 68).
holds(2, in_tower((block,5),(block,1)), false, 68).
holds(2, in_tower((block,5),(block,2)), false, 68).
holds(2, in_tower((block,5),(block,3)), false, 68).
holds(2, in_tower((block,5),(block,4)), false, 68).
holds(2, in_tower((block,5),(block,5)), false, 68).
holds(2, in_tower((block,5),(block,6)), false, 68).
holds(2, in_tower((block,5),(block,7)), false, 68).
holds(2, in_tower((block,5),(block,8)), false, 68).
holds(2, in_tower((block,5),(block,9)), false, 68).
holds(2, in_tower((block,6),(block,1)), false, 68).
holds(2, in_tower((block,6),(block,2)), false, 68).
holds(2, in_tower((block,6),(block,3)), false, 68).
holds(2, in_tower((block,6),(block,4)), false, 68).
holds(2, in_tower((block,6),(block,5)), false, 68).
holds(2, in_tower((block,6),(block,6)), true, 68).
holds(2, in_tower((block,6),(block,7)), false, 68).
holds(2, in_tower((block,6),(block,8)), false, 68).
holds(2, in_tower((block,6),(block,9)), false, 68).
holds(2, in_tower((block,7),(block,1)), false, 68).
holds(2, in_tower((block,7),(block,2)), false, 68).
holds(2, in_tower((block,7),(block,3)), false, 68).
holds(2, in_tower((block,7),(block,4)), false, 68).
holds(2, in_tower((block,7),(block,5)), false, 68).
holds(2, in_tower((block,7),(block,6)), false, 68).
holds(2, in_tower((block,7),(block,7)), false, 68).
holds(2, in_tower((block,7),(block,8)), false, 68).
holds(2, in_tower((block,7),(block,9)), false, 68).
holds(2, in_tower((block,8),(block,1)), false, 68).
holds(2, in_tower((block,8),(block,2)), false, 68).
holds(2, in_tower((block,8),(block,3)), false, 68).
holds(2, in_tower((block,8),(block,4)), false, 68).
holds(2, in_tower((block,8),(block,5)), false, 68).
holds(2, in_tower((block,8),(block,6)), false, 68).
holds(2, in_tower((block,8),(block,7)), false, 68).
holds(2, in_tower((block,8),(block,8)), false, 68).
holds(2, in_tower((block,8),(block,9)), false, 68).
holds(2, in_tower((block,9),(block,1)), false, 68).
holds(2, in_tower((block,9),(block,2)), false, 68).
holds(2, in_tower((block,9),(block,3)), false, 68).
holds(2, in_tower((block,9),(block,4)), false, 68).
holds(2, in_tower((block,9),(block,5)), false, 68).
holds(2, in_tower((block,9),(block,6)), false, 68).
holds(2, in_tower((block,9),(block,7)), true, 68).
holds(2, in_tower((block,9),(block,8)), true, 68).
holds(2, in_tower((block,9),(block,9)), true, 68).
holds(2, on((block,1)), puzzle_room_table, 68).
holds(2, on((block,2)), (block,3), 68).
holds(2, on((block,3)), puzzle_room_table, 68).
holds(2, on((block,4)), nothing, 68).
holds(2, on((block,5)), nothing, 68).
holds(2, on((block,6)), puzzle_room_table, 68).
holds(2, on((block,7)), (block,8), 68).
holds(2, on((block,8)), (block,9), 68).
holds(2, on((block,9)), puzzle_room_table, 68).
holds(2, tower_base((block,1),puzzle_room_table), true, 68).
holds(2, tower_base((block,2),puzzle_room_table), false, 68).
holds(2, tower_base((block,3),puzzle_room_table), true, 68).
holds(2, tower_base((block,4),puzzle_room_table), false, 68).
holds(2, tower_base((block,5),puzzle_room_table), false, 68).
holds(2, tower_base((block,6),puzzle_room_table), true, 68).
holds(2, tower_base((block,7),puzzle_room_table), false, 68).
holds(2, tower_base((block,8),puzzle_room_table), false, 68).
holds(2, tower_base((block,9),puzzle_room_table), true, 68).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,7),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 68).

[18-04-2022_15-46-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[18-04-2022_15-46-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_15-46-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[18-04-2022_15-46-01] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=82']

[18-04-2022_15-46-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 43})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,5))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,5)', 'I': 44})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 45})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 46})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 47})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 48})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 49})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 50})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 51})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,5))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 52})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 53})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 54})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,1))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'I': 55})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 56})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,1))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 57})

[18-04-2022_15-46-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_15-46-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 15 rules into program part base:

sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 43).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), (block,5), 44).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 45).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 46).
sub_goal(2, talos, move(hallway), in(talos), hallway, 47).
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 48).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 49).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 50).
sub_goal(2, talos, put(manipulator_arm_1,(block,5),(block,6)), on((block,5)), (block,6), 51).
sub_goal(2, talos, release(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), nothing, 52).
sub_goal(2, talos, put(manipulator_arm_2,(block,4),(block,5)), on((block,4)), (block,5), 53).
sub_goal(2, talos, release(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), nothing, 54).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 55).
sub_goal(2, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 56).
sub_goal(2, talos, release(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), nothing, 57).

[18-04-2022_15-46-01] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_15-46-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[18-04-2022_15-46-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=82']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001D610D188B0>]
	incrementor = SolveIncrementor(step_start=68, step_increase=1, step_increase_initial=15, step_end_min=83, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1751.6801022999994, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 68), range_=None), IncPart(name='plan_module', args=('#inc', 68, 'false', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 68, 'false', 'false', 'false', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 68, 43, 57, 'sequential', 'false'), range_=None)]

[18-04-2022_15-46-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_15-46-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_15-46-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_15-46-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1284 rules

[18-04-2022_15-46-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006852999999864551s

[18-04-2022_15-46-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[18-04-2022_15-46-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[18-04-2022_15-46-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.041094s.

[18-04-2022_15-46-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007402s with result Satisfiable.

[18-04-2022_15-46-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[18-04-2022_15-46-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001D612F77AE0>

[18-04-2022_15-46-01] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 68)
	('last_sgoals', 57)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001D5FEA66D00>)
	('first_sgoals', 43)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001D612F77AE0>)

[18-04-2022_15-46-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 68). %* None *%
#program plan_module(#inc, 68, false, true). %* None *%
#program optimisation_module(#inc, 68, false, false, false, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 68, 43, 57, sequential, false). %* None *%

[18-04-2022_15-46-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     67 : Current =     82
Incrementor step ends | Minimum  =     83 : Maximum =    300

[18-04-2022_15-46-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(82)]), ('state_module', [Number(68), Number(68)]), ('plan_module', [Number(68), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(68), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(68)]), ('action_preconditions', [Number(68)]), ('variable_relations', [Number(68)]), ('abstraction_mappings', [Number(68)]), ('conformance_module', [Number(68), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(69), Number(68)]), ('plan_module', [Number(69), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(69), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(69)]), ('action_preconditions', [Number(69)]), ('variable_relations', [Number(69)]), ('abstraction_mappings', [Number(69)]), ('conformance_module', [Number(69), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(70), Number(68)]), ('plan_module', [Number(70), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(70), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(70)]), ('action_preconditions', [Number(70)]), ('variable_relations', [Number(70)]), ('abstraction_mappings', [Number(70)]), ('conformance_module', [Number(70), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(71), Number(68)]), ('plan_module', [Number(71), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(71), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(71)]), ('action_preconditions', [Number(71)]), ('variable_relations', [Number(71)]), ('abstraction_mappings', [Number(71)]), ('conformance_module', [Number(71), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(72), Number(68)]), ('plan_module', [Number(72), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(72), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(72)]), ('action_preconditions', [Number(72)]), ('variable_relations', [Number(72)]), ('abstraction_mappings', [Number(72)]), ('conformance_module', [Number(72), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(73), Number(68)]), ('plan_module', [Number(73), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(73), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(73)]), ('action_preconditions', [Number(73)]), ('variable_relations', [Number(73)]), ('abstraction_mappings', [Number(73)]), ('conformance_module', [Number(73), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(74), Number(68)]), ('plan_module', [Number(74), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(74), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(74)]), ('action_preconditions', [Number(74)]), ('variable_relations', [Number(74)]), ('abstraction_mappings', [Number(74)]), ('conformance_module', [Number(74), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(75), Number(68)]), ('plan_module', [Number(75), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(75), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(75)]), ('action_preconditions', [Number(75)]), ('variable_relations', [Number(75)]), ('abstraction_mappings', [Number(75)]), ('conformance_module', [Number(75), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(76), Number(68)]), ('plan_module', [Number(76), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(76), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(76)]), ('action_preconditions', [Number(76)]), ('variable_relations', [Number(76)]), ('abstraction_mappings', [Number(76)]), ('conformance_module', [Number(76), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(77), Number(68)]), ('plan_module', [Number(77), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(77), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(77)]), ('action_preconditions', [Number(77)]), ('variable_relations', [Number(77)]), ('abstraction_mappings', [Number(77)]), ('conformance_module', [Number(77), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(78), Number(68)]), ('plan_module', [Number(78), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(78), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(78)]), ('action_preconditions', [Number(78)]), ('variable_relations', [Number(78)]), ('abstraction_mappings', [Number(78)]), ('conformance_module', [Number(78), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(79), Number(68)]), ('plan_module', [Number(79), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(79), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(79)]), ('action_preconditions', [Number(79)]), ('variable_relations', [Number(79)]), ('abstraction_mappings', [Number(79)]), ('conformance_module', [Number(79), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(80), Number(68)]), ('plan_module', [Number(80), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(80), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(80)]), ('action_preconditions', [Number(80)]), ('variable_relations', [Number(80)]), ('abstraction_mappings', [Number(80)]), ('conformance_module', [Number(80), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(81), Number(68)]), ('plan_module', [Number(81), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(81), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(81)]), ('action_preconditions', [Number(81)]), ('variable_relations', [Number(81)]), ('abstraction_mappings', [Number(81)]), ('conformance_module', [Number(81), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(82), Number(68)]), ('plan_module', [Number(82), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(82), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(82)]), ('action_preconditions', [Number(82)]), ('variable_relations', [Number(82)]), ('abstraction_mappings', [Number(82)]), ('conformance_module', [Number(82), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 2.129300s.

[18-04-2022_15-46-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 1.025975s with result Unsatisfiable.

[18-04-2022_15-46-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 3.1552748999997675, Incremental time limit = None
Running cumulative time = 3.1552748999997675, Cumulative time limit = 1751.6801022999994
Used memory = (RSS = 2226.195312Mb, VMS = 2241.699219Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     82 : Current =     83
Incrementor step ends | Minimum  =     83 : Maximum =    300

[18-04-2022_15-46-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(83)]), ('state_module', [Number(83), Number(68)]), ('plan_module', [Number(83), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(83), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(83)]), ('action_preconditions', [Number(83)]), ('variable_relations', [Number(83)]), ('abstraction_mappings', [Number(83)]), ('conformance_module', [Number(83), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.242089s.

[18-04-2022_15-46-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.051186s with result Unsatisfiable.

[18-04-2022_15-46-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2932751999996981, Incremental time limit = None
Running cumulative time = 3.4485500999994656, Cumulative time limit = 1751.6801022999994
Used memory = (RSS = 2233.359375Mb, VMS = 2256.160156Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     83 : Current =     84
Incrementor step ends | Minimum  =     83 : Maximum =    300

[18-04-2022_15-46-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(84)]), ('state_module', [Number(84), Number(68)]), ('plan_module', [Number(84), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(84), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(84)]), ('action_preconditions', [Number(84)]), ('variable_relations', [Number(84)]), ('abstraction_mappings', [Number(84)]), ('conformance_module', [Number(84), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.246310s.

[18-04-2022_15-46-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.058195s with result Unsatisfiable.

[18-04-2022_15-46-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.30450480000035896, Incremental time limit = None
Running cumulative time = 3.7530548999998246, Cumulative time limit = 1751.6801022999994
Used memory = (RSS = 2235.570312Mb, VMS = 2256.621094Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     84 : Current =     85
Incrementor step ends | Minimum  =     83 : Maximum =    300

[18-04-2022_15-46-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(85)]), ('state_module', [Number(85), Number(68)]), ('plan_module', [Number(85), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(85), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(85)]), ('action_preconditions', [Number(85)]), ('variable_relations', [Number(85)]), ('abstraction_mappings', [Number(85)]), ('conformance_module', [Number(85), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.251667s.

[18-04-2022_15-46-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.066585s with result Unsatisfiable.

[18-04-2022_15-46-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3182521000003362, Incremental time limit = None
Running cumulative time = 4.071307000000161, Cumulative time limit = 1751.6801022999994
Used memory = (RSS = 2237.722656Mb, VMS = 2257.796875Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     85 : Current =     86
Incrementor step ends | Minimum  =     83 : Maximum =    300

[18-04-2022_15-46-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(86)]), ('state_module', [Number(86), Number(68)]), ('plan_module', [Number(86), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(86), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(86)]), ('action_preconditions', [Number(86)]), ('variable_relations', [Number(86)]), ('abstraction_mappings', [Number(86)]), ('conformance_module', [Number(86), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.258543s.

[18-04-2022_15-46-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.080181s with result Unsatisfiable.

[18-04-2022_15-46-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3387246000002051, Incremental time limit = None
Running cumulative time = 4.410031600000366, Cumulative time limit = 1751.6801022999994
Used memory = (RSS = 2239.894531Mb, VMS = 2258.792969Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     86 : Current =     87
Incrementor step ends | Minimum  =     83 : Maximum =    300

[18-04-2022_15-46-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(87)]), ('state_module', [Number(87), Number(68)]), ('plan_module', [Number(87), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(87), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(87)]), ('action_preconditions', [Number(87)]), ('variable_relations', [Number(87)]), ('abstraction_mappings', [Number(87)]), ('conformance_module', [Number(87), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.254466s.

[18-04-2022_15-46-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.070655s with result Unsatisfiable.

[18-04-2022_15-46-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.325120799999695, Incremental time limit = None
Running cumulative time = 4.735152400000061, Cumulative time limit = 1751.6801022999994
Used memory = (RSS = 2242.046875Mb, VMS = 2259.253906Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     87 : Current =     88
Incrementor step ends | Minimum  =     83 : Maximum =    300

[18-04-2022_15-46-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(88)]), ('state_module', [Number(88), Number(68)]), ('plan_module', [Number(88), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(88), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(88)]), ('action_preconditions', [Number(88)]), ('variable_relations', [Number(88)]), ('abstraction_mappings', [Number(88)]), ('conformance_module', [Number(88), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.257319s.

[18-04-2022_15-46-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.088995s with result Unsatisfiable.

[18-04-2022_15-46-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.346313999999893, Incremental time limit = None
Running cumulative time = 5.081466399999954, Cumulative time limit = 1751.6801022999994
Used memory = (RSS = 2244.324219Mb, VMS = 2259.722656Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     88 : Current =     89
Incrementor step ends | Minimum  =     83 : Maximum =    300

[18-04-2022_15-46-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(89)]), ('state_module', [Number(89), Number(68)]), ('plan_module', [Number(89), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(89), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(89)]), ('action_preconditions', [Number(89)]), ('variable_relations', [Number(89)]), ('abstraction_mappings', [Number(89)]), ('conformance_module', [Number(89), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.261903s.

[18-04-2022_15-46-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.155954s with result Satisfiable.

[18-04-2022_15-46-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4178573999997752, Incremental time limit = None
Running cumulative time = 5.499323799999729, Cumulative time limit = 1751.6801022999994
Used memory = (RSS = 2249.378906Mb, VMS = 2263.195312Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.901598s, Solving = 1.597726s, Total = 5.499324s, Memory = (RSS = 2249.378906Mb, VMS = 2263.195312Mb), Step range = [68-89]), Calls = 8
Final Model :: Total atoms = 28756, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[18-04-2022_15-46-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 2.129300s, Solving = 1.025975s, Total = 3.155275s, Memory = (RSS = 2226.195312Mb, VMS = 2241.699219Mb), Step range = [68-82]
2 : Statistics :: Grounding = 0.242089s, Solving = 0.051186s, Total = 0.293275s, Memory = (RSS = 2233.359375Mb, VMS = 2256.160156Mb), Step range = [83-83]
3 : Statistics :: Grounding = 0.246310s, Solving = 0.058195s, Total = 0.304505s, Memory = (RSS = 2235.570312Mb, VMS = 2256.621094Mb), Step range = [84-84]
4 : Statistics :: Grounding = 0.251667s, Solving = 0.066585s, Total = 0.318252s, Memory = (RSS = 2237.722656Mb, VMS = 2257.796875Mb), Step range = [85-85]
5 : Statistics :: Grounding = 0.258543s, Solving = 0.080181s, Total = 0.338725s, Memory = (RSS = 2239.894531Mb, VMS = 2258.792969Mb), Step range = [86-86]
6 : Statistics :: Grounding = 0.254466s, Solving = 0.070655s, Total = 0.325121s, Memory = (RSS = 2242.046875Mb, VMS = 2259.253906Mb), Step range = [87-87]
7 : Statistics :: Grounding = 0.257319s, Solving = 0.088995s, Total = 0.346314s, Memory = (RSS = 2244.324219Mb, VMS = 2259.722656Mb), Step range = [88-88]
8 : Statistics :: Grounding = 0.261903s, Solving = 0.155954s, Total = 0.417857s, Memory = (RSS = 2249.378906Mb, VMS = 2263.195312Mb), Step range = [89-89]

[18-04-2022_15-46-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 5.499324s due to: Stop condition reached.

[18-04-2022_15-46-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[18-04-2022_15-46-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[18-04-2022_15-46-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_15-46-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_15-46-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 15, 29: 16, 30: 17, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 22, 42: 23, 43: 24, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29, 49: 30, 50: 30, 51: 30, 52: 30, 53: 31, 54: 32, 55: 33, 56: 34, 57: 34, 58: 35, 59: 36, 60: 37, 61: 38, 62: 39, 63: 40, 64: 40, 65: 41, 66: 41, 67: 42, 68: 42}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25, 14: 26, 15: 28, 16: 29, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 46, 28: 47, 29: 48, 30: 52, 31: 53, 32: 54, 33: 55, 34: 57, 35: 58, 36: 59, 37: 60, 38: 61, 39: 62, 40: 64, 41: 66, 42: 68}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 8, 25: 9, 26: 10, 27: 11, 28: 12, 29: 13, 30: 14, 31: 14, 32: 14, 33: 15, 34: 16, 35: 17, 36: 18, 37: 19, 38: 20, 39: 21, 40: 21, 41: 22, 42: 22, 43: 23, 44: 23, 45: 24, 46: 24, 47: 24, 48: 24, 49: 25, 50: 25, 51: 25, 52: 26, 53: 27, 54: 28, 55: 29, 56: 30, 57: 31}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 23, 8: 24, 9: 25, 10: 26, 11: 27, 12: 28, 13: 29, 14: 32, 15: 33, 16: 34, 17: 35, 18: 36, 19: 37, 20: 38, 21: 40, 22: 42, 23: 44, 24: 48, 25: 51, 26: 52, 27: 53, 28: 54, 29: 55, 30: 56, 31: 57}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 5, 7: 6, 8: 6, 9: 6, 10: 6, 11: 6, 12: 7, 13: 8, 14: 9, 15: 9, 16: 9, 17: 10, 18: 10, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 12, 25: 13, 26: 14, 27: 15, 28: 15, 29: 16, 30: 17, 31: 17}
Sub-goal achievement steps: {1: 1, 2: 2, 3: 3, 4: 4, 5: 6, 6: 11, 7: 12, 8: 13, 9: 16, 10: 21, 11: 23, 12: 24, 13: 25, 14: 26, 15: 28, 16: 29, 17: 31}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 15, 29: 16, 30: 17, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 22, 42: 23, 43: 24, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29, 49: 30, 50: 30, 51: 30, 52: 30, 53: 31, 54: 32, 55: 33, 56: 34, 57: 34, 58: 35, 59: 36, 60: 37, 61: 38, 62: 39, 63: 40, 64: 40, 65: 41, 66: 41, 67: 42, 68: 42, 69: 43, 70: 44, 71: 44, 72: 44, 73: 45, 74: 46, 75: 47, 76: 48, 77: 48, 78: 48, 79: 49, 80: 49, 81: 50, 82: 50, 83: 51, 84: 52, 85: 53, 86: 54, 87: 55, 88: 56, 89: 57}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25, 14: 26, 15: 28, 16: 29, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 46, 28: 47, 29: 48, 30: 52, 31: 53, 32: 54, 33: 55, 34: 57, 35: 58, 36: 59, 37: 60, 38: 61, 39: 62, 40: 64, 41: 66, 42: 68, 43: 69, 44: 72, 45: 73, 46: 74, 47: 75, 48: 78, 49: 80, 50: 82, 51: 83, 52: 84, 53: 85, 54: 86, 55: 87, 56: 88, 57: 89}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 8, 25: 9, 26: 10, 27: 11, 28: 12, 29: 13, 30: 14, 31: 14, 32: 14, 33: 15, 34: 16, 35: 17, 36: 18, 37: 19, 38: 20, 39: 21, 40: 21, 41: 22, 42: 22, 43: 23, 44: 23, 45: 24, 46: 24, 47: 24, 48: 24, 49: 25, 50: 25, 51: 25, 52: 26, 53: 27, 54: 28, 55: 29, 56: 30, 57: 31}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 23, 8: 24, 9: 25, 10: 26, 11: 27, 12: 28, 13: 29, 14: 32, 15: 33, 16: 34, 17: 35, 18: 36, 19: 37, 20: 38, 21: 40, 22: 42, 23: 44, 24: 48, 25: 51, 26: 52, 27: 53, 28: 54, 29: 55, 30: 56, 31: 57}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 5, 7: 6, 8: 6, 9: 6, 10: 6, 11: 6, 12: 7, 13: 8, 14: 9, 15: 9, 16: 9, 17: 10, 18: 10, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 12, 25: 13, 26: 14, 27: 15, 28: 15, 29: 16, 30: 17, 31: 17}
Sub-goal achievement steps: {1: 1, 2: 2, 3: 3, 4: 4, 5: 6, 6: 11, 7: 12, 8: 13, 9: 16, 10: 21, 11: 23, 12: 24, 13: 25, 14: 26, 15: 28, 16: 29, 17: 31}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 57, Last requested goal index = 57, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.901598s, Solving = 1.597726s, Total = 5.499324s, Memory = (RSS = 2249.378906Mb, VMS = 2263.195312Mb), Step range = [68-89]), Calls = 8
Model :: Total atoms = 28756, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 21 :: Actions = 21                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 25:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 26:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 27:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,8)))
Step 28:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,8))
Step 29:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 30:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 31:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 37:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 38:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 39:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,9)))
Step 40:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_1,(block,9))
Step 41:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 42:
    Current Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Achieved Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Planned actions:
        talos : put(manipulator_end_1,(block,9),puzzle_room_table_middle)
Step 43:
    Current Sub-goals:
        [Index = 24] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 24] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Planned actions:
        talos : release(manipulator_end_1,(block,9))
Step 44:
    Current Sub-goals:
        [Index = 25] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 25] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 45:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 46:
    Current Sub-goals:
        [Index = 27] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 27] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 47:
    Current Sub-goals:
        [Index = 28] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Achieved Sub-goals:
        [Index = 28] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Planned actions:
        talos : put(manipulator_end_2,(block,8),(block,9))
Step 48:
    Current Sub-goals:
        [Index = 29] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 29] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,8))
Step 49:
    Current Sub-goals:
        [Index = 30] talos : grasp(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = (block,7)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,7)))
Step 50:
    Current Sub-goals:
        [Index = 30] talos : grasp(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = (block,7)
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 51:
    Current Sub-goals:
        [Index = 30] talos : grasp(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = (block,7)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 52:
    Current Sub-goals:
        [Index = 30] talos : grasp(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = (block,7)
    Achieved Sub-goals:
        [Index = 30] talos : grasp(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = (block,7)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,7))
Step 53:
    Current Sub-goals:
        [Index = 31] talos : put(manipulator_arm_2,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Achieved Sub-goals:
        [Index = 31] talos : put(manipulator_arm_2,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Planned actions:
        talos : put(manipulator_end_2,(block,7),(block,8))
Step 54:
    Current Sub-goals:
        [Index = 32] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 32] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,7))
Step 55:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 56:
    Current Sub-goals:
        [Index = 34] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 57:
    Current Sub-goals:
        [Index = 34] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 34] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 58:
    Current Sub-goals:
        [Index = 35] talos : release(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 35] talos : release(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,2))
Step 59:
    Current Sub-goals:
        [Index = 36] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 36] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 60:
    Current Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : move((puzzle_room,0))
Step 61:
    Current Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : move((hallway,2))
Step 62:
    Current Sub-goals:
        [Index = 39] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 39] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 63:
    Current Sub-goals:
        [Index = 40] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 64:
    Current Sub-goals:
        [Index = 40] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 40] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 65:
    Current Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 66:
    Current Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 67:
    Current Sub-goals:
        [Index = 42] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 68:
    Current Sub-goals:
        [Index = 42] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 42] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 69:
    Current Sub-goals:
        [Index = 43] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 43] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 70:
    Current Sub-goals:
        [Index = 44] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 71:
    Current Sub-goals:
        [Index = 44] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 72:
    Current Sub-goals:
        [Index = 44] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 44] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 73:
    Current Sub-goals:
        [Index = 45] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 45] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 74:
    Current Sub-goals:
        [Index = 46] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 46] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : move((store_room,1))
Step 75:
    Current Sub-goals:
        [Index = 47] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 47] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 76:
    Current Sub-goals:
        [Index = 48] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 77:
    Current Sub-goals:
        [Index = 48] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 78:
    Current Sub-goals:
        [Index = 48] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 48] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 79:
    Current Sub-goals:
        [Index = 49] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 80:
    Current Sub-goals:
        [Index = 49] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 49] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 81:
    Current Sub-goals:
        [Index = 50] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 82:
    Current Sub-goals:
        [Index = 50] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 50] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 83:
    Current Sub-goals:
        [Index = 51] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 51] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : release(manipulator_end_1,(block,5))
Step 84:
    Current Sub-goals:
        [Index = 52] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 52] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_end_2,(block,4),(block,5))
Step 85:
    Current Sub-goals:
        [Index = 53] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 53] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : release(manipulator_end_2,(block,4))
Step 86:
    Current Sub-goals:
        [Index = 54] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 54] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,1)))
Step 87:
    Current Sub-goals:
        [Index = 55] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Achieved Sub-goals:
        [Index = 55] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,1))
Step 88:
    Current Sub-goals:
        [Index = 56] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 56] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_end_2,(block,1),(block,2))
Step 89:
    Current Sub-goals:
        [Index = 57] talos : release(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 57] talos : release(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,1))

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Monolevel problem 4 at level 1 solved.

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Online planning increment 4 finished.

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 89, chosen step range to extract = range(0, 90)

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 89, Total actions = 89, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 57, chosen step range to extract = range(0, 58)

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 89, Total actions = 89, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 31, chosen step range to extract = range(0, 32)

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 89, Total actions = 89, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 89, Total actions = 89, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Hierarchical plan generated successfully :: Ground Plan Quality >> Length = 89, Actions = 89

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Hierarchical planning summary: (Execution latency = 27.867178300001797, Average ground wait time = 13.531911800000103, Absolution time = 53.81922150000037)

     ========================================================================================================================================================================================================     
     |        Lvl = 4 (classic), LE =  17, AC =  17, CF = 1.0, GT =   1.39s, ST =   0.73s, OT = 0.00s, TT =   2.12s, EF = (LE = 1.0, AC = 1.0), ED = (LE = 0.0, AC = 0.0), EB = (LE = 0.0, AC = 0.0)        |     
     |        Lvl = 3 (com-ref), LE =  31, AC =  31, CF = 1.0, GT =   3.41s, ST =   2.69s, OT = 0.00s, TT =   6.10s, EF = (LE = 1.8, AC = 1.8), ED = (LE = 1.3, AC = 1.1), EB = (LE = 0.7, AC = 1.0)        |     
     |        Lvl = 2 (com-ref), LE =  57, AC =  57, CF = 1.0, GT =   7.08s, ST =   3.31s, OT = 0.00s, TT =  10.40s, EF = (LE = 1.8, AC = 1.8), ED = (LE = 1.8, AC = 1.8), EB = (LE = 1.0, AC = 1.0)        |     
     |        Lvl = 1 (com-ref), LE =  89, AC =  89, CF = 1.0, GT =  18.26s, ST =  16.94s, OT = 0.00s, TT =  35.20s, EF = (LE = 1.6, AC = 1.6), ED = (LE = 0.9, AC = 0.9), EB = (LE = 0.6, AC = 0.6)        |     
     ========================================================================================================================================================================================================     

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 89, chosen step range to extract = range(0, 90)

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 89, Total actions = 89, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 57, chosen step range to extract = range(0, 58)

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 89, Total actions = 89, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 31, chosen step range to extract = range(0, 32)

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 89, Total actions = 89, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 89, Total actions = 89, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-08] DEBUG :: Experiment >> 

   ======================================================   
     Experimental run 49 : SUCCESSFUL : Time 64.705378s     
   ======================================================   

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Arguments:
	('bottom_level', 1)
	('top_level', 4)
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001D5FEA66D00>)
	('online_method', <OnlineMethod.GroundFirst: 'ground-first'>)
	('save_grounding', False)
	('use_search_length_bound', True)
	('avoid_refining_sgoals_marked_for_blending', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 300)
	('pause_on_level_change', False)
	('pause_on_increment_change', False)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-4] : ONLINE MODE

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 0 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = False
Level = 3 : Solved problems = 0 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = False
Level = 2 : Solved problems = 0 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = False
Level = 1 : Solved problems = 0 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = False

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 4, Highest = 4.

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 1 by method ground-first is [1-4].

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Starting top-level classical planning: level = 4

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', False)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', None)
	('last_sgoals', None)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001D5FEA66D00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 300)
	('level', 4)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 4] classical : Concurrency disabled : Minimum search length bound disabled with value 0

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 4
concurrency = False
conformance = False
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 1
start_step = 0
is_initial = True
is_final = True
complete_planning = True
sequential_yield = False
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 0

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[18-04-2022_15-46-08] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[18-04-2022_15-46-08] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 4, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,8))', 'V': 'store_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 4, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 4, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 131 rules into program part ash_initial_state:

holds(4, complete_tower(blue,puzzle_room_table), false, 0).
holds(4, complete_tower(red,puzzle_room_table), false, 0).
holds(4, complete_tower(yellow,puzzle_room_table), false, 0).
holds(4, in((block,1)), puzzle_room, 0).
holds(4, in((block,2)), puzzle_room, 0).
holds(4, in((block,3)), puzzle_room, 0).
holds(4, in((block,4)), store_room, 0).
holds(4, in((block,5)), store_room, 0).
holds(4, in((block,6)), store_room, 0).
holds(4, in((block,7)), puzzle_room, 0).
holds(4, in((block,8)), store_room, 0).
holds(4, in((block,9)), puzzle_room, 0).
holds(4, in(puzzle_room_table), puzzle_room, 0).
holds(4, in(talos), starting_room, 0).
holds(4, in_tower((block,1),(block,1)), true, 0).
holds(4, in_tower((block,1),(block,2)), false, 0).
holds(4, in_tower((block,1),(block,3)), true, 0).
holds(4, in_tower((block,1),(block,4)), false, 0).
holds(4, in_tower((block,1),(block,5)), false, 0).
holds(4, in_tower((block,1),(block,6)), false, 0).
holds(4, in_tower((block,1),(block,7)), false, 0).
holds(4, in_tower((block,1),(block,8)), false, 0).
holds(4, in_tower((block,1),(block,9)), false, 0).
holds(4, in_tower((block,2),(block,1)), false, 0).
holds(4, in_tower((block,2),(block,2)), true, 0).
holds(4, in_tower((block,2),(block,3)), false, 0).
holds(4, in_tower((block,2),(block,4)), false, 0).
holds(4, in_tower((block,2),(block,5)), false, 0).
holds(4, in_tower((block,2),(block,6)), false, 0).
holds(4, in_tower((block,2),(block,7)), false, 0).
holds(4, in_tower((block,2),(block,8)), false, 0).
holds(4, in_tower((block,2),(block,9)), false, 0).
holds(4, in_tower((block,3),(block,1)), false, 0).
holds(4, in_tower((block,3),(block,2)), false, 0).
holds(4, in_tower((block,3),(block,3)), false, 0).
holds(4, in_tower((block,3),(block,4)), false, 0).
holds(4, in_tower((block,3),(block,5)), false, 0).
holds(4, in_tower((block,3),(block,6)), false, 0).
holds(4, in_tower((block,3),(block,7)), false, 0).
holds(4, in_tower((block,3),(block,8)), false, 0).
holds(4, in_tower((block,3),(block,9)), false, 0).
holds(4, in_tower((block,4),(block,1)), false, 0).
holds(4, in_tower((block,4),(block,2)), false, 0).
holds(4, in_tower((block,4),(block,3)), false, 0).
holds(4, in_tower((block,4),(block,4)), false, 0).
holds(4, in_tower((block,4),(block,5)), false, 0).
holds(4, in_tower((block,4),(block,6)), false, 0).
holds(4, in_tower((block,4),(block,7)), false, 0).
holds(4, in_tower((block,4),(block,8)), false, 0).
holds(4, in_tower((block,4),(block,9)), false, 0).
holds(4, in_tower((block,5),(block,1)), false, 0).
holds(4, in_tower((block,5),(block,2)), false, 0).
holds(4, in_tower((block,5),(block,3)), false, 0).
holds(4, in_tower((block,5),(block,4)), false, 0).
holds(4, in_tower((block,5),(block,5)), false, 0).
holds(4, in_tower((block,5),(block,6)), false, 0).
holds(4, in_tower((block,5),(block,7)), false, 0).
holds(4, in_tower((block,5),(block,8)), false, 0).
holds(4, in_tower((block,5),(block,9)), false, 0).
holds(4, in_tower((block,6),(block,1)), false, 0).
holds(4, in_tower((block,6),(block,2)), false, 0).
holds(4, in_tower((block,6),(block,3)), false, 0).
holds(4, in_tower((block,6),(block,4)), false, 0).
holds(4, in_tower((block,6),(block,5)), false, 0).
holds(4, in_tower((block,6),(block,6)), false, 0).
holds(4, in_tower((block,6),(block,7)), false, 0).
holds(4, in_tower((block,6),(block,8)), false, 0).
holds(4, in_tower((block,6),(block,9)), false, 0).
holds(4, in_tower((block,7),(block,1)), false, 0).
holds(4, in_tower((block,7),(block,2)), false, 0).
holds(4, in_tower((block,7),(block,3)), false, 0).
holds(4, in_tower((block,7),(block,4)), false, 0).
holds(4, in_tower((block,7),(block,5)), false, 0).
holds(4, in_tower((block,7),(block,6)), false, 0).
holds(4, in_tower((block,7),(block,7)), true, 0).
holds(4, in_tower((block,7),(block,8)), false, 0).
holds(4, in_tower((block,7),(block,9)), true, 0).
holds(4, in_tower((block,8),(block,1)), false, 0).
holds(4, in_tower((block,8),(block,2)), false, 0).
holds(4, in_tower((block,8),(block,3)), false, 0).
holds(4, in_tower((block,8),(block,4)), false, 0).
holds(4, in_tower((block,8),(block,5)), false, 0).
holds(4, in_tower((block,8),(block,6)), false, 0).
holds(4, in_tower((block,8),(block,7)), false, 0).
holds(4, in_tower((block,8),(block,8)), false, 0).
holds(4, in_tower((block,8),(block,9)), false, 0).
holds(4, in_tower((block,9),(block,1)), false, 0).
holds(4, in_tower((block,9),(block,2)), false, 0).
holds(4, in_tower((block,9),(block,3)), false, 0).
holds(4, in_tower((block,9),(block,4)), false, 0).
holds(4, in_tower((block,9),(block,5)), false, 0).
holds(4, in_tower((block,9),(block,6)), false, 0).
holds(4, in_tower((block,9),(block,7)), false, 0).
holds(4, in_tower((block,9),(block,8)), false, 0).
holds(4, in_tower((block,9),(block,9)), false, 0).
holds(4, on((block,1)), puzzle_room_table, 0).
holds(4, on((block,2)), puzzle_room_table, 0).
holds(4, on((block,3)), (block,1), 0).
holds(4, on((block,4)), nothing, 0).
holds(4, on((block,5)), nothing, 0).
holds(4, on((block,6)), nothing, 0).
holds(4, on((block,7)), puzzle_room_table, 0).
holds(4, on((block,8)), nothing, 0).
holds(4, on((block,9)), (block,7), 0).
holds(4, tower_base((block,1),puzzle_room_table), true, 0).
holds(4, tower_base((block,2),puzzle_room_table), true, 0).
holds(4, tower_base((block,3),puzzle_room_table), false, 0).
holds(4, tower_base((block,4),puzzle_room_table), false, 0).
holds(4, tower_base((block,5),puzzle_room_table), false, 0).
holds(4, tower_base((block,6),puzzle_room_table), false, 0).
holds(4, tower_base((block,7),puzzle_room_table), true, 0).
holds(4, tower_base((block,8),puzzle_room_table), false, 0).
holds(4, tower_base((block,9),puzzle_room_table), false, 0).
holds(4, transporting(talos,(block,1)), false, 0).
holds(4, transporting(talos,(block,2)), false, 0).
holds(4, transporting(talos,(block,3)), false, 0).
holds(4, transporting(talos,(block,4)), false, 0).
holds(4, transporting(talos,(block,5)), false, 0).
holds(4, transporting(talos,(block,6)), false, 0).
holds(4, transporting(talos,(block,7)), false, 0).
holds(4, transporting(talos,(block,8)), false, 0).
holds(4, transporting(talos,(block,9)), false, 0).
holds(4, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(4, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(4, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(4, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(4, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(4, unordered_tower((block,6),puzzle_room_table), false, 0).
holds(4, unordered_tower((block,7),puzzle_room_table), true, 0).
holds(4, unordered_tower((block,8),puzzle_room_table), false, 0).
holds(4, unordered_tower((block,9),puzzle_room_table), false, 0).

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 4, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 294 rules into program part ash_goal_state:

final_goal(4, complete_tower(blue,puzzle_room_table), false, false).
final_goal(4, complete_tower(blue,puzzle_room_table), true, true).
final_goal(4, complete_tower(red,puzzle_room_table), false, false).
final_goal(4, complete_tower(red,puzzle_room_table), true, true).
final_goal(4, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(4, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(4, in_tower((block,1),(block,1)), false, true).
final_goal(4, in_tower((block,1),(block,1)), true, false).
final_goal(4, in_tower((block,1),(block,2)), false, true).
final_goal(4, in_tower((block,1),(block,2)), true, false).
final_goal(4, in_tower((block,1),(block,3)), false, true).
final_goal(4, in_tower((block,1),(block,3)), true, false).
final_goal(4, in_tower((block,1),(block,4)), false, true).
final_goal(4, in_tower((block,1),(block,4)), true, false).
final_goal(4, in_tower((block,1),(block,5)), false, true).
final_goal(4, in_tower((block,1),(block,5)), true, false).
final_goal(4, in_tower((block,1),(block,6)), false, true).
final_goal(4, in_tower((block,1),(block,6)), true, false).
final_goal(4, in_tower((block,1),(block,7)), false, true).
final_goal(4, in_tower((block,1),(block,7)), true, false).
final_goal(4, in_tower((block,1),(block,8)), false, true).
final_goal(4, in_tower((block,1),(block,8)), true, false).
final_goal(4, in_tower((block,1),(block,9)), false, true).
final_goal(4, in_tower((block,1),(block,9)), true, false).
final_goal(4, in_tower((block,2),(block,1)), false, true).
final_goal(4, in_tower((block,2),(block,1)), true, false).
final_goal(4, in_tower((block,2),(block,2)), false, true).
final_goal(4, in_tower((block,2),(block,2)), true, false).
final_goal(4, in_tower((block,2),(block,3)), false, true).
final_goal(4, in_tower((block,2),(block,3)), true, false).
final_goal(4, in_tower((block,2),(block,4)), false, true).
final_goal(4, in_tower((block,2),(block,4)), true, false).
final_goal(4, in_tower((block,2),(block,5)), false, true).
final_goal(4, in_tower((block,2),(block,5)), true, false).
final_goal(4, in_tower((block,2),(block,6)), false, true).
final_goal(4, in_tower((block,2),(block,6)), true, false).
final_goal(4, in_tower((block,2),(block,7)), false, true).
final_goal(4, in_tower((block,2),(block,7)), true, false).
final_goal(4, in_tower((block,2),(block,8)), false, true).
final_goal(4, in_tower((block,2),(block,8)), true, false).
final_goal(4, in_tower((block,2),(block,9)), false, true).
final_goal(4, in_tower((block,2),(block,9)), true, false).
final_goal(4, in_tower((block,3),(block,1)), false, false).
final_goal(4, in_tower((block,3),(block,1)), true, true).
final_goal(4, in_tower((block,3),(block,2)), false, false).
final_goal(4, in_tower((block,3),(block,2)), true, true).
final_goal(4, in_tower((block,3),(block,3)), false, false).
final_goal(4, in_tower((block,3),(block,3)), true, true).
final_goal(4, in_tower((block,3),(block,4)), false, true).
final_goal(4, in_tower((block,3),(block,4)), true, false).
final_goal(4, in_tower((block,3),(block,5)), false, true).
final_goal(4, in_tower((block,3),(block,5)), true, false).
final_goal(4, in_tower((block,3),(block,6)), false, true).
final_goal(4, in_tower((block,3),(block,6)), true, false).
final_goal(4, in_tower((block,3),(block,7)), false, true).
final_goal(4, in_tower((block,3),(block,7)), true, false).
final_goal(4, in_tower((block,3),(block,8)), false, true).
final_goal(4, in_tower((block,3),(block,8)), true, false).
final_goal(4, in_tower((block,3),(block,9)), false, true).
final_goal(4, in_tower((block,3),(block,9)), true, false).
final_goal(4, in_tower((block,4),(block,1)), false, true).
final_goal(4, in_tower((block,4),(block,1)), true, false).
final_goal(4, in_tower((block,4),(block,2)), false, true).
final_goal(4, in_tower((block,4),(block,2)), true, false).
final_goal(4, in_tower((block,4),(block,3)), false, true).
final_goal(4, in_tower((block,4),(block,3)), true, false).
final_goal(4, in_tower((block,4),(block,4)), false, true).
final_goal(4, in_tower((block,4),(block,4)), true, false).
final_goal(4, in_tower((block,4),(block,5)), false, true).
final_goal(4, in_tower((block,4),(block,5)), true, false).
final_goal(4, in_tower((block,4),(block,6)), false, true).
final_goal(4, in_tower((block,4),(block,6)), true, false).
final_goal(4, in_tower((block,4),(block,7)), false, true).
final_goal(4, in_tower((block,4),(block,7)), true, false).
final_goal(4, in_tower((block,4),(block,8)), false, true).
final_goal(4, in_tower((block,4),(block,8)), true, false).
final_goal(4, in_tower((block,4),(block,9)), false, true).
final_goal(4, in_tower((block,4),(block,9)), true, false).
final_goal(4, in_tower((block,5),(block,1)), false, true).
final_goal(4, in_tower((block,5),(block,1)), true, false).
final_goal(4, in_tower((block,5),(block,2)), false, true).
final_goal(4, in_tower((block,5),(block,2)), true, false).
final_goal(4, in_tower((block,5),(block,3)), false, true).
final_goal(4, in_tower((block,5),(block,3)), true, false).
final_goal(4, in_tower((block,5),(block,4)), false, true).
final_goal(4, in_tower((block,5),(block,4)), true, false).
final_goal(4, in_tower((block,5),(block,5)), false, true).
final_goal(4, in_tower((block,5),(block,5)), true, false).
final_goal(4, in_tower((block,5),(block,6)), false, true).
final_goal(4, in_tower((block,5),(block,6)), true, false).
final_goal(4, in_tower((block,5),(block,7)), false, true).
final_goal(4, in_tower((block,5),(block,7)), true, false).
final_goal(4, in_tower((block,5),(block,8)), false, true).
final_goal(4, in_tower((block,5),(block,8)), true, false).
final_goal(4, in_tower((block,5),(block,9)), false, true).
final_goal(4, in_tower((block,5),(block,9)), true, false).
final_goal(4, in_tower((block,6),(block,1)), false, true).
final_goal(4, in_tower((block,6),(block,1)), true, false).
final_goal(4, in_tower((block,6),(block,2)), false, true).
final_goal(4, in_tower((block,6),(block,2)), true, false).
final_goal(4, in_tower((block,6),(block,3)), false, true).
final_goal(4, in_tower((block,6),(block,3)), true, false).
final_goal(4, in_tower((block,6),(block,4)), false, false).
final_goal(4, in_tower((block,6),(block,4)), true, true).
final_goal(4, in_tower((block,6),(block,5)), false, false).
final_goal(4, in_tower((block,6),(block,5)), true, true).
final_goal(4, in_tower((block,6),(block,6)), false, false).
final_goal(4, in_tower((block,6),(block,6)), true, true).
final_goal(4, in_tower((block,6),(block,7)), false, true).
final_goal(4, in_tower((block,6),(block,7)), true, false).
final_goal(4, in_tower((block,6),(block,8)), false, true).
final_goal(4, in_tower((block,6),(block,8)), true, false).
final_goal(4, in_tower((block,6),(block,9)), false, true).
final_goal(4, in_tower((block,6),(block,9)), true, false).
final_goal(4, in_tower((block,7),(block,1)), false, true).
final_goal(4, in_tower((block,7),(block,1)), true, false).
final_goal(4, in_tower((block,7),(block,2)), false, true).
final_goal(4, in_tower((block,7),(block,2)), true, false).
final_goal(4, in_tower((block,7),(block,3)), false, true).
final_goal(4, in_tower((block,7),(block,3)), true, false).
final_goal(4, in_tower((block,7),(block,4)), false, true).
final_goal(4, in_tower((block,7),(block,4)), true, false).
final_goal(4, in_tower((block,7),(block,5)), false, true).
final_goal(4, in_tower((block,7),(block,5)), true, false).
final_goal(4, in_tower((block,7),(block,6)), false, true).
final_goal(4, in_tower((block,7),(block,6)), true, false).
final_goal(4, in_tower((block,7),(block,7)), false, true).
final_goal(4, in_tower((block,7),(block,7)), true, false).
final_goal(4, in_tower((block,7),(block,8)), false, true).
final_goal(4, in_tower((block,7),(block,8)), true, false).
final_goal(4, in_tower((block,7),(block,9)), false, true).
final_goal(4, in_tower((block,7),(block,9)), true, false).
final_goal(4, in_tower((block,8),(block,1)), false, true).
final_goal(4, in_tower((block,8),(block,1)), true, false).
final_goal(4, in_tower((block,8),(block,2)), false, true).
final_goal(4, in_tower((block,8),(block,2)), true, false).
final_goal(4, in_tower((block,8),(block,3)), false, true).
final_goal(4, in_tower((block,8),(block,3)), true, false).
final_goal(4, in_tower((block,8),(block,4)), false, true).
final_goal(4, in_tower((block,8),(block,4)), true, false).
final_goal(4, in_tower((block,8),(block,5)), false, true).
final_goal(4, in_tower((block,8),(block,5)), true, false).
final_goal(4, in_tower((block,8),(block,6)), false, true).
final_goal(4, in_tower((block,8),(block,6)), true, false).
final_goal(4, in_tower((block,8),(block,7)), false, true).
final_goal(4, in_tower((block,8),(block,7)), true, false).
final_goal(4, in_tower((block,8),(block,8)), false, true).
final_goal(4, in_tower((block,8),(block,8)), true, false).
final_goal(4, in_tower((block,8),(block,9)), false, true).
final_goal(4, in_tower((block,8),(block,9)), true, false).
final_goal(4, in_tower((block,9),(block,1)), false, true).
final_goal(4, in_tower((block,9),(block,1)), true, false).
final_goal(4, in_tower((block,9),(block,2)), false, true).
final_goal(4, in_tower((block,9),(block,2)), true, false).
final_goal(4, in_tower((block,9),(block,3)), false, true).
final_goal(4, in_tower((block,9),(block,3)), true, false).
final_goal(4, in_tower((block,9),(block,4)), false, true).
final_goal(4, in_tower((block,9),(block,4)), true, false).
final_goal(4, in_tower((block,9),(block,5)), false, true).
final_goal(4, in_tower((block,9),(block,5)), true, false).
final_goal(4, in_tower((block,9),(block,6)), false, true).
final_goal(4, in_tower((block,9),(block,6)), true, false).
final_goal(4, in_tower((block,9),(block,7)), false, false).
final_goal(4, in_tower((block,9),(block,7)), true, true).
final_goal(4, in_tower((block,9),(block,8)), false, false).
final_goal(4, in_tower((block,9),(block,8)), true, true).
final_goal(4, in_tower((block,9),(block,9)), false, false).
final_goal(4, in_tower((block,9),(block,9)), true, true).
final_goal(4, on((block,1)), (block,2), true).
final_goal(4, on((block,1)), (block,3), false).
final_goal(4, on((block,1)), (block,4), false).
final_goal(4, on((block,1)), (block,5), false).
final_goal(4, on((block,1)), (block,6), false).
final_goal(4, on((block,1)), (block,7), false).
final_goal(4, on((block,1)), (block,8), false).
final_goal(4, on((block,1)), (block,9), false).
final_goal(4, on((block,1)), nothing, false).
final_goal(4, on((block,1)), puzzle_room_table, false).
final_goal(4, on((block,2)), (block,1), false).
final_goal(4, on((block,2)), (block,3), true).
final_goal(4, on((block,2)), (block,4), false).
final_goal(4, on((block,2)), (block,5), false).
final_goal(4, on((block,2)), (block,6), false).
final_goal(4, on((block,2)), (block,7), false).
final_goal(4, on((block,2)), (block,8), false).
final_goal(4, on((block,2)), (block,9), false).
final_goal(4, on((block,2)), nothing, false).
final_goal(4, on((block,2)), puzzle_room_table, false).
final_goal(4, on((block,3)), (block,1), false).
final_goal(4, on((block,3)), (block,2), false).
final_goal(4, on((block,3)), (block,4), false).
final_goal(4, on((block,3)), (block,5), false).
final_goal(4, on((block,3)), (block,6), false).
final_goal(4, on((block,3)), (block,7), false).
final_goal(4, on((block,3)), (block,8), false).
final_goal(4, on((block,3)), (block,9), false).
final_goal(4, on((block,3)), nothing, false).
final_goal(4, on((block,3)), puzzle_room_table, true).
final_goal(4, on((block,4)), (block,1), false).
final_goal(4, on((block,4)), (block,2), false).
final_goal(4, on((block,4)), (block,3), false).
final_goal(4, on((block,4)), (block,5), true).
final_goal(4, on((block,4)), (block,6), false).
final_goal(4, on((block,4)), (block,7), false).
final_goal(4, on((block,4)), (block,8), false).
final_goal(4, on((block,4)), (block,9), false).
final_goal(4, on((block,4)), nothing, false).
final_goal(4, on((block,4)), puzzle_room_table, false).
final_goal(4, on((block,5)), (block,1), false).
final_goal(4, on((block,5)), (block,2), false).
final_goal(4, on((block,5)), (block,3), false).
final_goal(4, on((block,5)), (block,4), false).
final_goal(4, on((block,5)), (block,6), true).
final_goal(4, on((block,5)), (block,7), false).
final_goal(4, on((block,5)), (block,8), false).
final_goal(4, on((block,5)), (block,9), false).
final_goal(4, on((block,5)), nothing, false).
final_goal(4, on((block,5)), puzzle_room_table, false).
final_goal(4, on((block,6)), (block,1), false).
final_goal(4, on((block,6)), (block,2), false).
final_goal(4, on((block,6)), (block,3), false).
final_goal(4, on((block,6)), (block,4), false).
final_goal(4, on((block,6)), (block,5), false).
final_goal(4, on((block,6)), (block,7), false).
final_goal(4, on((block,6)), (block,8), false).
final_goal(4, on((block,6)), (block,9), false).
final_goal(4, on((block,6)), nothing, false).
final_goal(4, on((block,6)), puzzle_room_table, true).
final_goal(4, on((block,7)), (block,1), false).
final_goal(4, on((block,7)), (block,2), false).
final_goal(4, on((block,7)), (block,3), false).
final_goal(4, on((block,7)), (block,4), false).
final_goal(4, on((block,7)), (block,5), false).
final_goal(4, on((block,7)), (block,6), false).
final_goal(4, on((block,7)), (block,8), true).
final_goal(4, on((block,7)), (block,9), false).
final_goal(4, on((block,7)), nothing, false).
final_goal(4, on((block,7)), puzzle_room_table, false).
final_goal(4, on((block,8)), (block,1), false).
final_goal(4, on((block,8)), (block,2), false).
final_goal(4, on((block,8)), (block,3), false).
final_goal(4, on((block,8)), (block,4), false).
final_goal(4, on((block,8)), (block,5), false).
final_goal(4, on((block,8)), (block,6), false).
final_goal(4, on((block,8)), (block,7), false).
final_goal(4, on((block,8)), (block,9), true).
final_goal(4, on((block,8)), nothing, false).
final_goal(4, on((block,8)), puzzle_room_table, false).
final_goal(4, on((block,9)), (block,1), false).
final_goal(4, on((block,9)), (block,2), false).
final_goal(4, on((block,9)), (block,3), false).
final_goal(4, on((block,9)), (block,4), false).
final_goal(4, on((block,9)), (block,5), false).
final_goal(4, on((block,9)), (block,6), false).
final_goal(4, on((block,9)), (block,7), false).
final_goal(4, on((block,9)), (block,8), false).
final_goal(4, on((block,9)), nothing, false).
final_goal(4, on((block,9)), puzzle_room_table, true).
final_goal(4, tower_base((block,1),puzzle_room_table), false, true).
final_goal(4, tower_base((block,1),puzzle_room_table), true, false).
final_goal(4, tower_base((block,2),puzzle_room_table), false, true).
final_goal(4, tower_base((block,2),puzzle_room_table), true, false).
final_goal(4, tower_base((block,3),puzzle_room_table), false, false).
final_goal(4, tower_base((block,3),puzzle_room_table), true, true).
final_goal(4, tower_base((block,4),puzzle_room_table), false, true).
final_goal(4, tower_base((block,4),puzzle_room_table), true, false).
final_goal(4, tower_base((block,5),puzzle_room_table), false, true).
final_goal(4, tower_base((block,5),puzzle_room_table), true, false).
final_goal(4, tower_base((block,6),puzzle_room_table), false, false).
final_goal(4, tower_base((block,6),puzzle_room_table), true, true).
final_goal(4, tower_base((block,7),puzzle_room_table), false, true).
final_goal(4, tower_base((block,7),puzzle_room_table), true, false).
final_goal(4, tower_base((block,8),puzzle_room_table), false, true).
final_goal(4, tower_base((block,8),puzzle_room_table), true, false).
final_goal(4, tower_base((block,9),puzzle_room_table), false, false).
final_goal(4, tower_base((block,9),puzzle_room_table), true, true).
final_goal(4, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,9),puzzle_room_table), true, false).

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore']

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001D610D180D0>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=1, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(4, 'classical')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'false', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'false', 'false', 'false', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None)]

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 813 rules

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004869200000030105s

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(4, 'classical')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(4), Function('classical', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.026522s.

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004234s with result Satisfiable.

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001D6130FC130>

[18-04-2022_15-46-08] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 4)
	('start_step', 0)
	('last_sgoals', 1)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001D5FEA66D00>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001D6130FC130>)

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, true). %* None *%
#program optimisation_module(#inc, 0, false, false, false, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =      1 : Maximum =    300

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)])]

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.080171s.

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005742s with result Unsatisfiable.

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.08591309999974328, Incremental time limit = None
Running cumulative time = 0.08591309999974328, Cumulative time limit = 1800
Used memory = (RSS = 2186.601562Mb, VMS = 2199.632812Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =      1 : Maximum =    300

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)])]

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.059505s.

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.003930s with result Unsatisfiable.

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.06343480000032287, Incremental time limit = None
Running cumulative time = 0.14934790000006615, Cumulative time limit = 1800
Used memory = (RSS = 2186.601562Mb, VMS = 2199.632812Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =      1 : Maximum =    300

[18-04-2022_15-46-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)])]

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.065442s.

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006871s with result Unsatisfiable.

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.07231299999966723, Incremental time limit = None
Running cumulative time = 0.22166089999973337, Cumulative time limit = 1800
Used memory = (RSS = 2186.601562Mb, VMS = 2199.632812Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =      1 : Maximum =    300

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)])]

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.069028s.

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007897s with result Unsatisfiable.

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.07692510000015318, Incremental time limit = None
Running cumulative time = 0.29858599999988655, Cumulative time limit = 1800
Used memory = (RSS = 2186.613281Mb, VMS = 2199.632812Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =      1 : Maximum =    300

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)])]

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.071519s.

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008998s with result Unsatisfiable.

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.08051759999989372, Incremental time limit = None
Running cumulative time = 0.37910359999978027, Cumulative time limit = 1800
Used memory = (RSS = 2186.613281Mb, VMS = 2199.632812Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =      1 : Maximum =    300

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)])]

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.074463s.

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010553s with result Unsatisfiable.

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.08501639999985855, Incremental time limit = None
Running cumulative time = 0.4641199999996388, Cumulative time limit = 1800
Used memory = (RSS = 2186.617188Mb, VMS = 2199.632812Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =      1 : Maximum =    300

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)])]

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.076011s.

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010579s with result Unsatisfiable.

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.08659069999976055, Incremental time limit = None
Running cumulative time = 0.5507106999993994, Cumulative time limit = 1800
Used memory = (RSS = 2187.726562Mb, VMS = 2200.718750Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =      1 : Maximum =    300

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)])]

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.077710s.

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013244s with result Unsatisfiable.

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.09095440000010058, Incremental time limit = None
Running cumulative time = 0.6416650999994999, Cumulative time limit = 1800
Used memory = (RSS = 2187.914062Mb, VMS = 2200.906250Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =      1 : Maximum =    300

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)])]

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.080359s.

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013215s with result Unsatisfiable.

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.09357439999985218, Incremental time limit = None
Running cumulative time = 0.7352394999993521, Cumulative time limit = 1800
Used memory = (RSS = 2188.113281Mb, VMS = 2201.101562Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =      1 : Maximum =    300

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)])]

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.082279s.

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.015934s with result Unsatisfiable.

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.09821270000020377, Incremental time limit = None
Running cumulative time = 0.8334521999995559, Cumulative time limit = 1800
Used memory = (RSS = 2188.312500Mb, VMS = 2201.285156Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =      1 : Maximum =    300

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)])]

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.084089s.

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.019931s with result Unsatisfiable.

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.10401980000006006, Incremental time limit = None
Running cumulative time = 0.937471999999616, Cumulative time limit = 1800
Used memory = (RSS = 2193.335938Mb, VMS = 2208.136719Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =      1 : Maximum =    300

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)])]

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.086768s.

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.023266s with result Unsatisfiable.

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11003440000013143, Incremental time limit = None
Running cumulative time = 1.0475063999997474, Cumulative time limit = 1800
Used memory = (RSS = 2194.234375Mb, VMS = 2208.332031Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =      1 : Maximum =    300

[18-04-2022_15-46-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)])]

[18-04-2022_15-46-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.087976s.

[18-04-2022_15-46-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.037646s with result Unsatisfiable.

[18-04-2022_15-46-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.12562219999927038, Incremental time limit = None
Running cumulative time = 1.1731285999990178, Cumulative time limit = 1800
Used memory = (RSS = 2194.859375Mb, VMS = 2208.515625Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =      1 : Maximum =    300

[18-04-2022_15-46-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)])]

[18-04-2022_15-46-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.089839s.

[18-04-2022_15-46-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.080604s with result Unsatisfiable.

[18-04-2022_15-46-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1704433999993853, Incremental time limit = None
Running cumulative time = 1.343571999998403, Cumulative time limit = 1800
Used memory = (RSS = 2195.421875Mb, VMS = 2208.707031Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =      1 : Maximum =    300

[18-04-2022_15-46-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)])]

[18-04-2022_15-46-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.091851s.

[18-04-2022_15-46-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.138083s with result Unsatisfiable.

[18-04-2022_15-46-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2299337000004016, Incremental time limit = None
Running cumulative time = 1.5735056999988046, Cumulative time limit = 1800
Used memory = (RSS = 2196.058594Mb, VMS = 2209.429688Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =      1 : Maximum =    300

[18-04-2022_15-46-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)])]

[18-04-2022_15-46-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.092554s.

[18-04-2022_15-46-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.311562s with result Unsatisfiable.

[18-04-2022_15-46-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4041157999999996, Incremental time limit = None
Running cumulative time = 1.9776214999988042, Cumulative time limit = 1800
Used memory = (RSS = 2196.738281Mb, VMS = 2212.417969Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =      1 : Maximum =    300

[18-04-2022_15-46-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)])]

[18-04-2022_15-46-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.094373s.

[18-04-2022_15-46-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.245487s with result Satisfiable.

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.33986010000035094, Incremental time limit = None
Running cumulative time = 2.317481599999155, Cumulative time limit = 1800
Used memory = (RSS = 2197.617188Mb, VMS = 2212.605469Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.363936s, Solving = 0.953545s, Total = 2.317482s, Memory = (RSS = 2197.617188Mb, VMS = 2212.605469Mb), Step range = [0-17]), Calls = 17
Final Model :: Total atoms = 13640, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.080171s, Solving = 0.005742s, Total = 0.085913s, Memory = (RSS = 2186.601562Mb, VMS = 2199.632812Mb), Step range = [0-1]
2 : Statistics :: Grounding = 0.059505s, Solving = 0.003930s, Total = 0.063435s, Memory = (RSS = 2186.601562Mb, VMS = 2199.632812Mb), Step range = [2-2]
3 : Statistics :: Grounding = 0.065442s, Solving = 0.006871s, Total = 0.072313s, Memory = (RSS = 2186.601562Mb, VMS = 2199.632812Mb), Step range = [3-3]
4 : Statistics :: Grounding = 0.069028s, Solving = 0.007897s, Total = 0.076925s, Memory = (RSS = 2186.613281Mb, VMS = 2199.632812Mb), Step range = [4-4]
5 : Statistics :: Grounding = 0.071519s, Solving = 0.008998s, Total = 0.080518s, Memory = (RSS = 2186.613281Mb, VMS = 2199.632812Mb), Step range = [5-5]
6 : Statistics :: Grounding = 0.074463s, Solving = 0.010553s, Total = 0.085016s, Memory = (RSS = 2186.617188Mb, VMS = 2199.632812Mb), Step range = [6-6]
7 : Statistics :: Grounding = 0.076011s, Solving = 0.010579s, Total = 0.086591s, Memory = (RSS = 2187.726562Mb, VMS = 2200.718750Mb), Step range = [7-7]
8 : Statistics :: Grounding = 0.077710s, Solving = 0.013244s, Total = 0.090954s, Memory = (RSS = 2187.914062Mb, VMS = 2200.906250Mb), Step range = [8-8]
9 : Statistics :: Grounding = 0.080359s, Solving = 0.013215s, Total = 0.093574s, Memory = (RSS = 2188.113281Mb, VMS = 2201.101562Mb), Step range = [9-9]
10 : Statistics :: Grounding = 0.082279s, Solving = 0.015934s, Total = 0.098213s, Memory = (RSS = 2188.312500Mb, VMS = 2201.285156Mb), Step range = [10-10]
11 : Statistics :: Grounding = 0.084089s, Solving = 0.019931s, Total = 0.104020s, Memory = (RSS = 2193.335938Mb, VMS = 2208.136719Mb), Step range = [11-11]
12 : Statistics :: Grounding = 0.086768s, Solving = 0.023266s, Total = 0.110034s, Memory = (RSS = 2194.234375Mb, VMS = 2208.332031Mb), Step range = [12-12]
13 : Statistics :: Grounding = 0.087976s, Solving = 0.037646s, Total = 0.125622s, Memory = (RSS = 2194.859375Mb, VMS = 2208.515625Mb), Step range = [13-13]
14 : Statistics :: Grounding = 0.089839s, Solving = 0.080604s, Total = 0.170443s, Memory = (RSS = 2195.421875Mb, VMS = 2208.707031Mb), Step range = [14-14]
15 : Statistics :: Grounding = 0.091851s, Solving = 0.138083s, Total = 0.229934s, Memory = (RSS = 2196.058594Mb, VMS = 2209.429688Mb), Step range = [15-15]
16 : Statistics :: Grounding = 0.092554s, Solving = 0.311562s, Total = 0.404116s, Memory = (RSS = 2196.738281Mb, VMS = 2212.417969Mb), Step range = [16-16]
17 : Statistics :: Grounding = 0.094373s, Solving = 0.245487s, Total = 0.339860s, Memory = (RSS = 2197.617188Mb, VMS = 2212.605469Mb), Step range = [17-17]

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 2.317482s due to: Stop condition reached.

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[18-04-2022_15-46-11] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 1, Last requested goal index = 1, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[18-04-2022_15-46-11] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.363936s, Solving = 0.953545s, Total = 2.317482s, Memory = (RSS = 2197.617188Mb, VMS = 2212.605469Mb), Step range = [0-17]), Calls = 17
Model :: Total atoms = 13640, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[18-04-2022_15-46-11] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 4                 
          ========================================          
                 Steps = 17 :: Actions = 17                 
                ----------------------------                

Step 1:
    Planned actions:
        talos : move(store_room)
Step 2:
    Planned actions:
        talos : collect((block,5))
Step 3:
    Planned actions:
        talos : collect((block,6))
Step 4:
    Planned actions:
        talos : move(puzzle_room)
Step 5:
    Planned actions:
        talos : place_upon((block,6),puzzle_room_table)
Step 6:
    Planned actions:
        talos : place_upon((block,5),(block,6))
Step 7:
    Planned actions:
        talos : place_upon((block,9),puzzle_room_table)
Step 8:
    Planned actions:
        talos : place_upon((block,3),puzzle_room_table)
Step 9:
    Planned actions:
        talos : place_upon((block,2),(block,3))
Step 10:
    Planned actions:
        talos : place_upon((block,1),(block,2))
Step 11:
    Planned actions:
        talos : move(store_room)
Step 12:
    Planned actions:
        talos : collect((block,8))
Step 13:
    Planned actions:
        talos : collect((block,4))
Step 14:
    Planned actions:
        talos : move(puzzle_room)
Step 15:
    Planned actions:
        talos : place_upon((block,4),(block,5))
Step 16:
    Planned actions:
        talos : place_upon((block,8),(block,9))
Step 17:
    Planned actions:
        talos : place_upon((block,7),(block,8))

[18-04-2022_15-46-11] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[18-04-2022_15-46-11] DEBUG :: ASH Planner Main #1 >> Preparing to invoke division strategy...

[18-04-2022_15-46-11] DEBUG :: ASH Planner Main #1 >> Online method OnlineMethod.GroundFirst chose to invoke the division strategy before a downwards level change:Current increment = 1, Current planning level is complete = True

[18-04-2022_15-46-11] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[18-04-2022_15-46-11] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0
Level [2]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-11] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 4 (classic), LE =  17, AC =  17, CF = 1.0, GT =   1.39s, ST =   0.96s, OT = 0.00s, TT =   2.35s, EF = (LE = 1.0, AC = 1.0), ED = (LE = 0.0, AC = 0.0), EB = (LE = 0.0, AC = 0.0)

[18-04-2022_15-46-11] DEBUG :: core.Strategies >> Making heterogenous divisions: division_points=[], plan_length=17, start_step=0, blend=Blend(left=0, right=0)

[18-04-2022_15-46-11] DEBUG :: core.Strategies >> Division points generated:
[]

[18-04-2022_15-46-11] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=17, start_step=0, blend=Blend(left=0, right=0)

[18-04-2022_15-46-11] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=1, small_group_size=8, large_group_size=9

[18-04-2022_15-46-11] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=8, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[18-04-2022_15-46-11] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 17, Sub-goal Stage Range = [1-17]
Division points [total=1] : [(Index = 8, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[18-04-2022_15-46-11] DEBUG :: ASH Planner Main #1 >> Monolevel problem 1 at level 4 solved.

[18-04-2022_15-46-11] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 4 to proactively divide planning problem 1 at level 3:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 17, Sub-goal Stage Range = [1-17]
Division points [total=1] : [(Index = 8, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[18-04-2022_15-46-11] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-8]

[18-04-2022_15-46-11] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[18-04-2022_15-46-11] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0
Level [2]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-11] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 3, sgoals range = [1-8], problem number = 1, increment number = 1

[18-04-2022_15-46-11] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 8)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001D5FEA66D00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1797.6517618000012)
	('length_limit', 300)
	('level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[18-04-2022_15-46-11] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 3] partial conformance refinement (sequential) with sgoals range [1-8] : Concurrency disabled : Minimum search length bound enabled with value 7

[18-04-2022_15-46-11] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 3
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 8
start_step = 0
is_initial = True
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 7

[18-04-2022_15-46-11] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[18-04-2022_15-46-11] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[18-04-2022_15-46-11] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[18-04-2022_15-46-11] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[18-04-2022_15-46-11] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_15-46-11] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,8))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,8))', 'V': 'store_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 4, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 4, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 257 rules into program part ash_initial_state:

holds(3, complete_tower(blue,puzzle_room_table), false, 0).
holds(3, complete_tower(red,puzzle_room_table), false, 0).
holds(3, complete_tower(yellow,puzzle_room_table), false, 0).
holds(3, grasping(manipulator_arm_1), nothing, 0).
holds(3, grasping(manipulator_arm_2), nothing, 0).
holds(3, in((block,1)), puzzle_room, 0).
holds(3, in((block,2)), puzzle_room, 0).
holds(3, in((block,3)), puzzle_room, 0).
holds(3, in((block,4)), store_room, 0).
holds(3, in((block,5)), store_room, 0).
holds(3, in((block,6)), store_room, 0).
holds(3, in((block,7)), puzzle_room, 0).
holds(3, in((block,8)), store_room, 0).
holds(3, in((block,9)), puzzle_room, 0).
holds(3, in(manipulator_arm_1), starting_room, 0).
holds(3, in(manipulator_arm_2), starting_room, 0).
holds(3, in(puzzle_room_table), puzzle_room, 0).
holds(3, in(talos), starting_room, 0).
holds(3, in_tower((block,1),(block,1)), true, 0).
holds(3, in_tower((block,1),(block,2)), false, 0).
holds(3, in_tower((block,1),(block,3)), true, 0).
holds(3, in_tower((block,1),(block,4)), false, 0).
holds(3, in_tower((block,1),(block,5)), false, 0).
holds(3, in_tower((block,1),(block,6)), false, 0).
holds(3, in_tower((block,1),(block,7)), false, 0).
holds(3, in_tower((block,1),(block,8)), false, 0).
holds(3, in_tower((block,1),(block,9)), false, 0).
holds(3, in_tower((block,2),(block,1)), false, 0).
holds(3, in_tower((block,2),(block,2)), true, 0).
holds(3, in_tower((block,2),(block,3)), false, 0).
holds(3, in_tower((block,2),(block,4)), false, 0).
holds(3, in_tower((block,2),(block,5)), false, 0).
holds(3, in_tower((block,2),(block,6)), false, 0).
holds(3, in_tower((block,2),(block,7)), false, 0).
holds(3, in_tower((block,2),(block,8)), false, 0).
holds(3, in_tower((block,2),(block,9)), false, 0).
holds(3, in_tower((block,3),(block,1)), false, 0).
holds(3, in_tower((block,3),(block,2)), false, 0).
holds(3, in_tower((block,3),(block,3)), false, 0).
holds(3, in_tower((block,3),(block,4)), false, 0).
holds(3, in_tower((block,3),(block,5)), false, 0).
holds(3, in_tower((block,3),(block,6)), false, 0).
holds(3, in_tower((block,3),(block,7)), false, 0).
holds(3, in_tower((block,3),(block,8)), false, 0).
holds(3, in_tower((block,3),(block,9)), false, 0).
holds(3, in_tower((block,4),(block,1)), false, 0).
holds(3, in_tower((block,4),(block,2)), false, 0).
holds(3, in_tower((block,4),(block,3)), false, 0).
holds(3, in_tower((block,4),(block,4)), false, 0).
holds(3, in_tower((block,4),(block,5)), false, 0).
holds(3, in_tower((block,4),(block,6)), false, 0).
holds(3, in_tower((block,4),(block,7)), false, 0).
holds(3, in_tower((block,4),(block,8)), false, 0).
holds(3, in_tower((block,4),(block,9)), false, 0).
holds(3, in_tower((block,5),(block,1)), false, 0).
holds(3, in_tower((block,5),(block,2)), false, 0).
holds(3, in_tower((block,5),(block,3)), false, 0).
holds(3, in_tower((block,5),(block,4)), false, 0).
holds(3, in_tower((block,5),(block,5)), false, 0).
holds(3, in_tower((block,5),(block,6)), false, 0).
holds(3, in_tower((block,5),(block,7)), false, 0).
holds(3, in_tower((block,5),(block,8)), false, 0).
holds(3, in_tower((block,5),(block,9)), false, 0).
holds(3, in_tower((block,6),(block,1)), false, 0).
holds(3, in_tower((block,6),(block,2)), false, 0).
holds(3, in_tower((block,6),(block,3)), false, 0).
holds(3, in_tower((block,6),(block,4)), false, 0).
holds(3, in_tower((block,6),(block,5)), false, 0).
holds(3, in_tower((block,6),(block,6)), false, 0).
holds(3, in_tower((block,6),(block,7)), false, 0).
holds(3, in_tower((block,6),(block,8)), false, 0).
holds(3, in_tower((block,6),(block,9)), false, 0).
holds(3, in_tower((block,7),(block,1)), false, 0).
holds(3, in_tower((block,7),(block,2)), false, 0).
holds(3, in_tower((block,7),(block,3)), false, 0).
holds(3, in_tower((block,7),(block,4)), false, 0).
holds(3, in_tower((block,7),(block,5)), false, 0).
holds(3, in_tower((block,7),(block,6)), false, 0).
holds(3, in_tower((block,7),(block,7)), true, 0).
holds(3, in_tower((block,7),(block,8)), false, 0).
holds(3, in_tower((block,7),(block,9)), true, 0).
holds(3, in_tower((block,8),(block,1)), false, 0).
holds(3, in_tower((block,8),(block,2)), false, 0).
holds(3, in_tower((block,8),(block,3)), false, 0).
holds(3, in_tower((block,8),(block,4)), false, 0).
holds(3, in_tower((block,8),(block,5)), false, 0).
holds(3, in_tower((block,8),(block,6)), false, 0).
holds(3, in_tower((block,8),(block,7)), false, 0).
holds(3, in_tower((block,8),(block,8)), false, 0).
holds(3, in_tower((block,8),(block,9)), false, 0).
holds(3, in_tower((block,9),(block,1)), false, 0).
holds(3, in_tower((block,9),(block,2)), false, 0).
holds(3, in_tower((block,9),(block,3)), false, 0).
holds(3, in_tower((block,9),(block,4)), false, 0).
holds(3, in_tower((block,9),(block,5)), false, 0).
holds(3, in_tower((block,9),(block,6)), false, 0).
holds(3, in_tower((block,9),(block,7)), false, 0).
holds(3, in_tower((block,9),(block,8)), false, 0).
holds(3, in_tower((block,9),(block,9)), false, 0).
holds(3, on((block,1)), puzzle_room_table, 0).
holds(3, on((block,2)), puzzle_room_table, 0).
holds(3, on((block,3)), (block,1), 0).
holds(3, on((block,4)), nothing, 0).
holds(3, on((block,5)), nothing, 0).
holds(3, on((block,6)), nothing, 0).
holds(3, on((block,7)), puzzle_room_table, 0).
holds(3, on((block,8)), nothing, 0).
holds(3, on((block,9)), (block,7), 0).
holds(3, tower_base((block,1),puzzle_room_table), true, 0).
holds(3, tower_base((block,2),puzzle_room_table), true, 0).
holds(3, tower_base((block,3),puzzle_room_table), false, 0).
holds(3, tower_base((block,4),puzzle_room_table), false, 0).
holds(3, tower_base((block,5),puzzle_room_table), false, 0).
holds(3, tower_base((block,6),puzzle_room_table), false, 0).
holds(3, tower_base((block,7),puzzle_room_table), true, 0).
holds(3, tower_base((block,8),puzzle_room_table), false, 0).
holds(3, tower_base((block,9),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,7),puzzle_room_table), true, 0).
holds(3, unordered_tower((block,8),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,9),puzzle_room_table), false, 0).
holds(4, complete_tower(blue,puzzle_room_table), false, 0).
holds(4, complete_tower(red,puzzle_room_table), false, 0).
holds(4, complete_tower(yellow,puzzle_room_table), false, 0).
holds(4, in((block,1)), puzzle_room, 0).
holds(4, in((block,2)), puzzle_room, 0).
holds(4, in((block,3)), puzzle_room, 0).
holds(4, in((block,4)), store_room, 0).
holds(4, in((block,5)), store_room, 0).
holds(4, in((block,6)), store_room, 0).
holds(4, in((block,7)), puzzle_room, 0).
holds(4, in((block,8)), store_room, 0).
holds(4, in((block,9)), puzzle_room, 0).
holds(4, in(puzzle_room_table), puzzle_room, 0).
holds(4, in(talos), starting_room, 0).
holds(4, in_tower((block,1),(block,1)), true, 0).
holds(4, in_tower((block,1),(block,2)), false, 0).
holds(4, in_tower((block,1),(block,3)), true, 0).
holds(4, in_tower((block,1),(block,4)), false, 0).
holds(4, in_tower((block,1),(block,5)), false, 0).
holds(4, in_tower((block,1),(block,6)), false, 0).
holds(4, in_tower((block,1),(block,7)), false, 0).
holds(4, in_tower((block,1),(block,8)), false, 0).
holds(4, in_tower((block,1),(block,9)), false, 0).
holds(4, in_tower((block,2),(block,1)), false, 0).
holds(4, in_tower((block,2),(block,2)), true, 0).
holds(4, in_tower((block,2),(block,3)), false, 0).
holds(4, in_tower((block,2),(block,4)), false, 0).
holds(4, in_tower((block,2),(block,5)), false, 0).
holds(4, in_tower((block,2),(block,6)), false, 0).
holds(4, in_tower((block,2),(block,7)), false, 0).
holds(4, in_tower((block,2),(block,8)), false, 0).
holds(4, in_tower((block,2),(block,9)), false, 0).
holds(4, in_tower((block,3),(block,1)), false, 0).
holds(4, in_tower((block,3),(block,2)), false, 0).
holds(4, in_tower((block,3),(block,3)), false, 0).
holds(4, in_tower((block,3),(block,4)), false, 0).
holds(4, in_tower((block,3),(block,5)), false, 0).
holds(4, in_tower((block,3),(block,6)), false, 0).
holds(4, in_tower((block,3),(block,7)), false, 0).
holds(4, in_tower((block,3),(block,8)), false, 0).
holds(4, in_tower((block,3),(block,9)), false, 0).
holds(4, in_tower((block,4),(block,1)), false, 0).
holds(4, in_tower((block,4),(block,2)), false, 0).
holds(4, in_tower((block,4),(block,3)), false, 0).
holds(4, in_tower((block,4),(block,4)), false, 0).
holds(4, in_tower((block,4),(block,5)), false, 0).
holds(4, in_tower((block,4),(block,6)), false, 0).
holds(4, in_tower((block,4),(block,7)), false, 0).
holds(4, in_tower((block,4),(block,8)), false, 0).
holds(4, in_tower((block,4),(block,9)), false, 0).
holds(4, in_tower((block,5),(block,1)), false, 0).
holds(4, in_tower((block,5),(block,2)), false, 0).
holds(4, in_tower((block,5),(block,3)), false, 0).
holds(4, in_tower((block,5),(block,4)), false, 0).
holds(4, in_tower((block,5),(block,5)), false, 0).
holds(4, in_tower((block,5),(block,6)), false, 0).
holds(4, in_tower((block,5),(block,7)), false, 0).
holds(4, in_tower((block,5),(block,8)), false, 0).
holds(4, in_tower((block,5),(block,9)), false, 0).
holds(4, in_tower((block,6),(block,1)), false, 0).
holds(4, in_tower((block,6),(block,2)), false, 0).
holds(4, in_tower((block,6),(block,3)), false, 0).
holds(4, in_tower((block,6),(block,4)), false, 0).
holds(4, in_tower((block,6),(block,5)), false, 0).
holds(4, in_tower((block,6),(block,6)), false, 0).
holds(4, in_tower((block,6),(block,7)), false, 0).
holds(4, in_tower((block,6),(block,8)), false, 0).
holds(4, in_tower((block,6),(block,9)), false, 0).
holds(4, in_tower((block,7),(block,1)), false, 0).
holds(4, in_tower((block,7),(block,2)), false, 0).
holds(4, in_tower((block,7),(block,3)), false, 0).
holds(4, in_tower((block,7),(block,4)), false, 0).
holds(4, in_tower((block,7),(block,5)), false, 0).
holds(4, in_tower((block,7),(block,6)), false, 0).
holds(4, in_tower((block,7),(block,7)), true, 0).
holds(4, in_tower((block,7),(block,8)), false, 0).
holds(4, in_tower((block,7),(block,9)), true, 0).
holds(4, in_tower((block,8),(block,1)), false, 0).
holds(4, in_tower((block,8),(block,2)), false, 0).
holds(4, in_tower((block,8),(block,3)), false, 0).
holds(4, in_tower((block,8),(block,4)), false, 0).
holds(4, in_tower((block,8),(block,5)), false, 0).
holds(4, in_tower((block,8),(block,6)), false, 0).
holds(4, in_tower((block,8),(block,7)), false, 0).
holds(4, in_tower((block,8),(block,8)), false, 0).
holds(4, in_tower((block,8),(block,9)), false, 0).
holds(4, in_tower((block,9),(block,1)), false, 0).
holds(4, in_tower((block,9),(block,2)), false, 0).
holds(4, in_tower((block,9),(block,3)), false, 0).
holds(4, in_tower((block,9),(block,4)), false, 0).
holds(4, in_tower((block,9),(block,5)), false, 0).
holds(4, in_tower((block,9),(block,6)), false, 0).
holds(4, in_tower((block,9),(block,7)), false, 0).
holds(4, in_tower((block,9),(block,8)), false, 0).
holds(4, in_tower((block,9),(block,9)), false, 0).
holds(4, on((block,1)), puzzle_room_table, 0).
holds(4, on((block,2)), puzzle_room_table, 0).
holds(4, on((block,3)), (block,1), 0).
holds(4, on((block,4)), nothing, 0).
holds(4, on((block,5)), nothing, 0).
holds(4, on((block,6)), nothing, 0).
holds(4, on((block,7)), puzzle_room_table, 0).
holds(4, on((block,8)), nothing, 0).
holds(4, on((block,9)), (block,7), 0).
holds(4, tower_base((block,1),puzzle_room_table), true, 0).
holds(4, tower_base((block,2),puzzle_room_table), true, 0).
holds(4, tower_base((block,3),puzzle_room_table), false, 0).
holds(4, tower_base((block,4),puzzle_room_table), false, 0).
holds(4, tower_base((block,5),puzzle_room_table), false, 0).
holds(4, tower_base((block,6),puzzle_room_table), false, 0).
holds(4, tower_base((block,7),puzzle_room_table), true, 0).
holds(4, tower_base((block,8),puzzle_room_table), false, 0).
holds(4, tower_base((block,9),puzzle_room_table), false, 0).
holds(4, transporting(talos,(block,1)), false, 0).
holds(4, transporting(talos,(block,2)), false, 0).
holds(4, transporting(talos,(block,3)), false, 0).
holds(4, transporting(talos,(block,4)), false, 0).
holds(4, transporting(talos,(block,5)), false, 0).
holds(4, transporting(talos,(block,6)), false, 0).
holds(4, transporting(talos,(block,7)), false, 0).
holds(4, transporting(talos,(block,8)), false, 0).
holds(4, transporting(talos,(block,9)), false, 0).
holds(4, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(4, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(4, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(4, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(4, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(4, unordered_tower((block,6),puzzle_room_table), false, 0).
holds(4, unordered_tower((block,7),puzzle_room_table), true, 0).
holds(4, unordered_tower((block,8),puzzle_room_table), false, 0).
holds(4, unordered_tower((block,9),puzzle_room_table), false, 0).

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 588 rules into program part ash_goal_state:

final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(3, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,1),(block,7)), false, true).
final_goal(3, in_tower((block,1),(block,7)), true, false).
final_goal(3, in_tower((block,1),(block,8)), false, true).
final_goal(3, in_tower((block,1),(block,8)), true, false).
final_goal(3, in_tower((block,1),(block,9)), false, true).
final_goal(3, in_tower((block,1),(block,9)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,7)), false, true).
final_goal(3, in_tower((block,2),(block,7)), true, false).
final_goal(3, in_tower((block,2),(block,8)), false, true).
final_goal(3, in_tower((block,2),(block,8)), true, false).
final_goal(3, in_tower((block,2),(block,9)), false, true).
final_goal(3, in_tower((block,2),(block,9)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,7)), false, true).
final_goal(3, in_tower((block,3),(block,7)), true, false).
final_goal(3, in_tower((block,3),(block,8)), false, true).
final_goal(3, in_tower((block,3),(block,8)), true, false).
final_goal(3, in_tower((block,3),(block,9)), false, true).
final_goal(3, in_tower((block,3),(block,9)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,7)), false, true).
final_goal(3, in_tower((block,4),(block,7)), true, false).
final_goal(3, in_tower((block,4),(block,8)), false, true).
final_goal(3, in_tower((block,4),(block,8)), true, false).
final_goal(3, in_tower((block,4),(block,9)), false, true).
final_goal(3, in_tower((block,4),(block,9)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,7)), false, true).
final_goal(3, in_tower((block,5),(block,7)), true, false).
final_goal(3, in_tower((block,5),(block,8)), false, true).
final_goal(3, in_tower((block,5),(block,8)), true, false).
final_goal(3, in_tower((block,5),(block,9)), false, true).
final_goal(3, in_tower((block,5),(block,9)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, in_tower((block,6),(block,7)), false, true).
final_goal(3, in_tower((block,6),(block,7)), true, false).
final_goal(3, in_tower((block,6),(block,8)), false, true).
final_goal(3, in_tower((block,6),(block,8)), true, false).
final_goal(3, in_tower((block,6),(block,9)), false, true).
final_goal(3, in_tower((block,6),(block,9)), true, false).
final_goal(3, in_tower((block,7),(block,1)), false, true).
final_goal(3, in_tower((block,7),(block,1)), true, false).
final_goal(3, in_tower((block,7),(block,2)), false, true).
final_goal(3, in_tower((block,7),(block,2)), true, false).
final_goal(3, in_tower((block,7),(block,3)), false, true).
final_goal(3, in_tower((block,7),(block,3)), true, false).
final_goal(3, in_tower((block,7),(block,4)), false, true).
final_goal(3, in_tower((block,7),(block,4)), true, false).
final_goal(3, in_tower((block,7),(block,5)), false, true).
final_goal(3, in_tower((block,7),(block,5)), true, false).
final_goal(3, in_tower((block,7),(block,6)), false, true).
final_goal(3, in_tower((block,7),(block,6)), true, false).
final_goal(3, in_tower((block,7),(block,7)), false, true).
final_goal(3, in_tower((block,7),(block,7)), true, false).
final_goal(3, in_tower((block,7),(block,8)), false, true).
final_goal(3, in_tower((block,7),(block,8)), true, false).
final_goal(3, in_tower((block,7),(block,9)), false, true).
final_goal(3, in_tower((block,7),(block,9)), true, false).
final_goal(3, in_tower((block,8),(block,1)), false, true).
final_goal(3, in_tower((block,8),(block,1)), true, false).
final_goal(3, in_tower((block,8),(block,2)), false, true).
final_goal(3, in_tower((block,8),(block,2)), true, false).
final_goal(3, in_tower((block,8),(block,3)), false, true).
final_goal(3, in_tower((block,8),(block,3)), true, false).
final_goal(3, in_tower((block,8),(block,4)), false, true).
final_goal(3, in_tower((block,8),(block,4)), true, false).
final_goal(3, in_tower((block,8),(block,5)), false, true).
final_goal(3, in_tower((block,8),(block,5)), true, false).
final_goal(3, in_tower((block,8),(block,6)), false, true).
final_goal(3, in_tower((block,8),(block,6)), true, false).
final_goal(3, in_tower((block,8),(block,7)), false, true).
final_goal(3, in_tower((block,8),(block,7)), true, false).
final_goal(3, in_tower((block,8),(block,8)), false, true).
final_goal(3, in_tower((block,8),(block,8)), true, false).
final_goal(3, in_tower((block,8),(block,9)), false, true).
final_goal(3, in_tower((block,8),(block,9)), true, false).
final_goal(3, in_tower((block,9),(block,1)), false, true).
final_goal(3, in_tower((block,9),(block,1)), true, false).
final_goal(3, in_tower((block,9),(block,2)), false, true).
final_goal(3, in_tower((block,9),(block,2)), true, false).
final_goal(3, in_tower((block,9),(block,3)), false, true).
final_goal(3, in_tower((block,9),(block,3)), true, false).
final_goal(3, in_tower((block,9),(block,4)), false, true).
final_goal(3, in_tower((block,9),(block,4)), true, false).
final_goal(3, in_tower((block,9),(block,5)), false, true).
final_goal(3, in_tower((block,9),(block,5)), true, false).
final_goal(3, in_tower((block,9),(block,6)), false, true).
final_goal(3, in_tower((block,9),(block,6)), true, false).
final_goal(3, in_tower((block,9),(block,7)), false, false).
final_goal(3, in_tower((block,9),(block,7)), true, true).
final_goal(3, in_tower((block,9),(block,8)), false, false).
final_goal(3, in_tower((block,9),(block,8)), true, true).
final_goal(3, in_tower((block,9),(block,9)), false, false).
final_goal(3, in_tower((block,9),(block,9)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), (block,7), false).
final_goal(3, on((block,1)), (block,8), false).
final_goal(3, on((block,1)), (block,9), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), (block,7), false).
final_goal(3, on((block,2)), (block,8), false).
final_goal(3, on((block,2)), (block,9), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), (block,7), false).
final_goal(3, on((block,3)), (block,8), false).
final_goal(3, on((block,3)), (block,9), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), (block,7), false).
final_goal(3, on((block,4)), (block,8), false).
final_goal(3, on((block,4)), (block,9), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), (block,7), false).
final_goal(3, on((block,5)), (block,8), false).
final_goal(3, on((block,5)), (block,9), false).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), (block,7), false).
final_goal(3, on((block,6)), (block,8), false).
final_goal(3, on((block,6)), (block,9), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, on((block,7)), (block,1), false).
final_goal(3, on((block,7)), (block,2), false).
final_goal(3, on((block,7)), (block,3), false).
final_goal(3, on((block,7)), (block,4), false).
final_goal(3, on((block,7)), (block,5), false).
final_goal(3, on((block,7)), (block,6), false).
final_goal(3, on((block,7)), (block,8), true).
final_goal(3, on((block,7)), (block,9), false).
final_goal(3, on((block,7)), nothing, false).
final_goal(3, on((block,7)), puzzle_room_table, false).
final_goal(3, on((block,8)), (block,1), false).
final_goal(3, on((block,8)), (block,2), false).
final_goal(3, on((block,8)), (block,3), false).
final_goal(3, on((block,8)), (block,4), false).
final_goal(3, on((block,8)), (block,5), false).
final_goal(3, on((block,8)), (block,6), false).
final_goal(3, on((block,8)), (block,7), false).
final_goal(3, on((block,8)), (block,9), true).
final_goal(3, on((block,8)), nothing, false).
final_goal(3, on((block,8)), puzzle_room_table, false).
final_goal(3, on((block,9)), (block,1), false).
final_goal(3, on((block,9)), (block,2), false).
final_goal(3, on((block,9)), (block,3), false).
final_goal(3, on((block,9)), (block,4), false).
final_goal(3, on((block,9)), (block,5), false).
final_goal(3, on((block,9)), (block,6), false).
final_goal(3, on((block,9)), (block,7), false).
final_goal(3, on((block,9)), (block,8), false).
final_goal(3, on((block,9)), nothing, false).
final_goal(3, on((block,9)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, tower_base((block,7),puzzle_room_table), false, true).
final_goal(3, tower_base((block,7),puzzle_room_table), true, false).
final_goal(3, tower_base((block,8),puzzle_room_table), false, true).
final_goal(3, tower_base((block,8),puzzle_room_table), true, false).
final_goal(3, tower_base((block,9),puzzle_room_table), false, false).
final_goal(3, tower_base((block,9),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(4, complete_tower(blue,puzzle_room_table), false, false).
final_goal(4, complete_tower(blue,puzzle_room_table), true, true).
final_goal(4, complete_tower(red,puzzle_room_table), false, false).
final_goal(4, complete_tower(red,puzzle_room_table), true, true).
final_goal(4, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(4, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(4, in_tower((block,1),(block,1)), false, true).
final_goal(4, in_tower((block,1),(block,1)), true, false).
final_goal(4, in_tower((block,1),(block,2)), false, true).
final_goal(4, in_tower((block,1),(block,2)), true, false).
final_goal(4, in_tower((block,1),(block,3)), false, true).
final_goal(4, in_tower((block,1),(block,3)), true, false).
final_goal(4, in_tower((block,1),(block,4)), false, true).
final_goal(4, in_tower((block,1),(block,4)), true, false).
final_goal(4, in_tower((block,1),(block,5)), false, true).
final_goal(4, in_tower((block,1),(block,5)), true, false).
final_goal(4, in_tower((block,1),(block,6)), false, true).
final_goal(4, in_tower((block,1),(block,6)), true, false).
final_goal(4, in_tower((block,1),(block,7)), false, true).
final_goal(4, in_tower((block,1),(block,7)), true, false).
final_goal(4, in_tower((block,1),(block,8)), false, true).
final_goal(4, in_tower((block,1),(block,8)), true, false).
final_goal(4, in_tower((block,1),(block,9)), false, true).
final_goal(4, in_tower((block,1),(block,9)), true, false).
final_goal(4, in_tower((block,2),(block,1)), false, true).
final_goal(4, in_tower((block,2),(block,1)), true, false).
final_goal(4, in_tower((block,2),(block,2)), false, true).
final_goal(4, in_tower((block,2),(block,2)), true, false).
final_goal(4, in_tower((block,2),(block,3)), false, true).
final_goal(4, in_tower((block,2),(block,3)), true, false).
final_goal(4, in_tower((block,2),(block,4)), false, true).
final_goal(4, in_tower((block,2),(block,4)), true, false).
final_goal(4, in_tower((block,2),(block,5)), false, true).
final_goal(4, in_tower((block,2),(block,5)), true, false).
final_goal(4, in_tower((block,2),(block,6)), false, true).
final_goal(4, in_tower((block,2),(block,6)), true, false).
final_goal(4, in_tower((block,2),(block,7)), false, true).
final_goal(4, in_tower((block,2),(block,7)), true, false).
final_goal(4, in_tower((block,2),(block,8)), false, true).
final_goal(4, in_tower((block,2),(block,8)), true, false).
final_goal(4, in_tower((block,2),(block,9)), false, true).
final_goal(4, in_tower((block,2),(block,9)), true, false).
final_goal(4, in_tower((block,3),(block,1)), false, false).
final_goal(4, in_tower((block,3),(block,1)), true, true).
final_goal(4, in_tower((block,3),(block,2)), false, false).
final_goal(4, in_tower((block,3),(block,2)), true, true).
final_goal(4, in_tower((block,3),(block,3)), false, false).
final_goal(4, in_tower((block,3),(block,3)), true, true).
final_goal(4, in_tower((block,3),(block,4)), false, true).
final_goal(4, in_tower((block,3),(block,4)), true, false).
final_goal(4, in_tower((block,3),(block,5)), false, true).
final_goal(4, in_tower((block,3),(block,5)), true, false).
final_goal(4, in_tower((block,3),(block,6)), false, true).
final_goal(4, in_tower((block,3),(block,6)), true, false).
final_goal(4, in_tower((block,3),(block,7)), false, true).
final_goal(4, in_tower((block,3),(block,7)), true, false).
final_goal(4, in_tower((block,3),(block,8)), false, true).
final_goal(4, in_tower((block,3),(block,8)), true, false).
final_goal(4, in_tower((block,3),(block,9)), false, true).
final_goal(4, in_tower((block,3),(block,9)), true, false).
final_goal(4, in_tower((block,4),(block,1)), false, true).
final_goal(4, in_tower((block,4),(block,1)), true, false).
final_goal(4, in_tower((block,4),(block,2)), false, true).
final_goal(4, in_tower((block,4),(block,2)), true, false).
final_goal(4, in_tower((block,4),(block,3)), false, true).
final_goal(4, in_tower((block,4),(block,3)), true, false).
final_goal(4, in_tower((block,4),(block,4)), false, true).
final_goal(4, in_tower((block,4),(block,4)), true, false).
final_goal(4, in_tower((block,4),(block,5)), false, true).
final_goal(4, in_tower((block,4),(block,5)), true, false).
final_goal(4, in_tower((block,4),(block,6)), false, true).
final_goal(4, in_tower((block,4),(block,6)), true, false).
final_goal(4, in_tower((block,4),(block,7)), false, true).
final_goal(4, in_tower((block,4),(block,7)), true, false).
final_goal(4, in_tower((block,4),(block,8)), false, true).
final_goal(4, in_tower((block,4),(block,8)), true, false).
final_goal(4, in_tower((block,4),(block,9)), false, true).
final_goal(4, in_tower((block,4),(block,9)), true, false).
final_goal(4, in_tower((block,5),(block,1)), false, true).
final_goal(4, in_tower((block,5),(block,1)), true, false).
final_goal(4, in_tower((block,5),(block,2)), false, true).
final_goal(4, in_tower((block,5),(block,2)), true, false).
final_goal(4, in_tower((block,5),(block,3)), false, true).
final_goal(4, in_tower((block,5),(block,3)), true, false).
final_goal(4, in_tower((block,5),(block,4)), false, true).
final_goal(4, in_tower((block,5),(block,4)), true, false).
final_goal(4, in_tower((block,5),(block,5)), false, true).
final_goal(4, in_tower((block,5),(block,5)), true, false).
final_goal(4, in_tower((block,5),(block,6)), false, true).
final_goal(4, in_tower((block,5),(block,6)), true, false).
final_goal(4, in_tower((block,5),(block,7)), false, true).
final_goal(4, in_tower((block,5),(block,7)), true, false).
final_goal(4, in_tower((block,5),(block,8)), false, true).
final_goal(4, in_tower((block,5),(block,8)), true, false).
final_goal(4, in_tower((block,5),(block,9)), false, true).
final_goal(4, in_tower((block,5),(block,9)), true, false).
final_goal(4, in_tower((block,6),(block,1)), false, true).
final_goal(4, in_tower((block,6),(block,1)), true, false).
final_goal(4, in_tower((block,6),(block,2)), false, true).
final_goal(4, in_tower((block,6),(block,2)), true, false).
final_goal(4, in_tower((block,6),(block,3)), false, true).
final_goal(4, in_tower((block,6),(block,3)), true, false).
final_goal(4, in_tower((block,6),(block,4)), false, false).
final_goal(4, in_tower((block,6),(block,4)), true, true).
final_goal(4, in_tower((block,6),(block,5)), false, false).
final_goal(4, in_tower((block,6),(block,5)), true, true).
final_goal(4, in_tower((block,6),(block,6)), false, false).
final_goal(4, in_tower((block,6),(block,6)), true, true).
final_goal(4, in_tower((block,6),(block,7)), false, true).
final_goal(4, in_tower((block,6),(block,7)), true, false).
final_goal(4, in_tower((block,6),(block,8)), false, true).
final_goal(4, in_tower((block,6),(block,8)), true, false).
final_goal(4, in_tower((block,6),(block,9)), false, true).
final_goal(4, in_tower((block,6),(block,9)), true, false).
final_goal(4, in_tower((block,7),(block,1)), false, true).
final_goal(4, in_tower((block,7),(block,1)), true, false).
final_goal(4, in_tower((block,7),(block,2)), false, true).
final_goal(4, in_tower((block,7),(block,2)), true, false).
final_goal(4, in_tower((block,7),(block,3)), false, true).
final_goal(4, in_tower((block,7),(block,3)), true, false).
final_goal(4, in_tower((block,7),(block,4)), false, true).
final_goal(4, in_tower((block,7),(block,4)), true, false).
final_goal(4, in_tower((block,7),(block,5)), false, true).
final_goal(4, in_tower((block,7),(block,5)), true, false).
final_goal(4, in_tower((block,7),(block,6)), false, true).
final_goal(4, in_tower((block,7),(block,6)), true, false).
final_goal(4, in_tower((block,7),(block,7)), false, true).
final_goal(4, in_tower((block,7),(block,7)), true, false).
final_goal(4, in_tower((block,7),(block,8)), false, true).
final_goal(4, in_tower((block,7),(block,8)), true, false).
final_goal(4, in_tower((block,7),(block,9)), false, true).
final_goal(4, in_tower((block,7),(block,9)), true, false).
final_goal(4, in_tower((block,8),(block,1)), false, true).
final_goal(4, in_tower((block,8),(block,1)), true, false).
final_goal(4, in_tower((block,8),(block,2)), false, true).
final_goal(4, in_tower((block,8),(block,2)), true, false).
final_goal(4, in_tower((block,8),(block,3)), false, true).
final_goal(4, in_tower((block,8),(block,3)), true, false).
final_goal(4, in_tower((block,8),(block,4)), false, true).
final_goal(4, in_tower((block,8),(block,4)), true, false).
final_goal(4, in_tower((block,8),(block,5)), false, true).
final_goal(4, in_tower((block,8),(block,5)), true, false).
final_goal(4, in_tower((block,8),(block,6)), false, true).
final_goal(4, in_tower((block,8),(block,6)), true, false).
final_goal(4, in_tower((block,8),(block,7)), false, true).
final_goal(4, in_tower((block,8),(block,7)), true, false).
final_goal(4, in_tower((block,8),(block,8)), false, true).
final_goal(4, in_tower((block,8),(block,8)), true, false).
final_goal(4, in_tower((block,8),(block,9)), false, true).
final_goal(4, in_tower((block,8),(block,9)), true, false).
final_goal(4, in_tower((block,9),(block,1)), false, true).
final_goal(4, in_tower((block,9),(block,1)), true, false).
final_goal(4, in_tower((block,9),(block,2)), false, true).
final_goal(4, in_tower((block,9),(block,2)), true, false).
final_goal(4, in_tower((block,9),(block,3)), false, true).
final_goal(4, in_tower((block,9),(block,3)), true, false).
final_goal(4, in_tower((block,9),(block,4)), false, true).
final_goal(4, in_tower((block,9),(block,4)), true, false).
final_goal(4, in_tower((block,9),(block,5)), false, true).
final_goal(4, in_tower((block,9),(block,5)), true, false).
final_goal(4, in_tower((block,9),(block,6)), false, true).
final_goal(4, in_tower((block,9),(block,6)), true, false).
final_goal(4, in_tower((block,9),(block,7)), false, false).
final_goal(4, in_tower((block,9),(block,7)), true, true).
final_goal(4, in_tower((block,9),(block,8)), false, false).
final_goal(4, in_tower((block,9),(block,8)), true, true).
final_goal(4, in_tower((block,9),(block,9)), false, false).
final_goal(4, in_tower((block,9),(block,9)), true, true).
final_goal(4, on((block,1)), (block,2), true).
final_goal(4, on((block,1)), (block,3), false).
final_goal(4, on((block,1)), (block,4), false).
final_goal(4, on((block,1)), (block,5), false).
final_goal(4, on((block,1)), (block,6), false).
final_goal(4, on((block,1)), (block,7), false).
final_goal(4, on((block,1)), (block,8), false).
final_goal(4, on((block,1)), (block,9), false).
final_goal(4, on((block,1)), nothing, false).
final_goal(4, on((block,1)), puzzle_room_table, false).
final_goal(4, on((block,2)), (block,1), false).
final_goal(4, on((block,2)), (block,3), true).
final_goal(4, on((block,2)), (block,4), false).
final_goal(4, on((block,2)), (block,5), false).
final_goal(4, on((block,2)), (block,6), false).
final_goal(4, on((block,2)), (block,7), false).
final_goal(4, on((block,2)), (block,8), false).
final_goal(4, on((block,2)), (block,9), false).
final_goal(4, on((block,2)), nothing, false).
final_goal(4, on((block,2)), puzzle_room_table, false).
final_goal(4, on((block,3)), (block,1), false).
final_goal(4, on((block,3)), (block,2), false).
final_goal(4, on((block,3)), (block,4), false).
final_goal(4, on((block,3)), (block,5), false).
final_goal(4, on((block,3)), (block,6), false).
final_goal(4, on((block,3)), (block,7), false).
final_goal(4, on((block,3)), (block,8), false).
final_goal(4, on((block,3)), (block,9), false).
final_goal(4, on((block,3)), nothing, false).
final_goal(4, on((block,3)), puzzle_room_table, true).
final_goal(4, on((block,4)), (block,1), false).
final_goal(4, on((block,4)), (block,2), false).
final_goal(4, on((block,4)), (block,3), false).
final_goal(4, on((block,4)), (block,5), true).
final_goal(4, on((block,4)), (block,6), false).
final_goal(4, on((block,4)), (block,7), false).
final_goal(4, on((block,4)), (block,8), false).
final_goal(4, on((block,4)), (block,9), false).
final_goal(4, on((block,4)), nothing, false).
final_goal(4, on((block,4)), puzzle_room_table, false).
final_goal(4, on((block,5)), (block,1), false).
final_goal(4, on((block,5)), (block,2), false).
final_goal(4, on((block,5)), (block,3), false).
final_goal(4, on((block,5)), (block,4), false).
final_goal(4, on((block,5)), (block,6), true).
final_goal(4, on((block,5)), (block,7), false).
final_goal(4, on((block,5)), (block,8), false).
final_goal(4, on((block,5)), (block,9), false).
final_goal(4, on((block,5)), nothing, false).
final_goal(4, on((block,5)), puzzle_room_table, false).
final_goal(4, on((block,6)), (block,1), false).
final_goal(4, on((block,6)), (block,2), false).
final_goal(4, on((block,6)), (block,3), false).
final_goal(4, on((block,6)), (block,4), false).
final_goal(4, on((block,6)), (block,5), false).
final_goal(4, on((block,6)), (block,7), false).
final_goal(4, on((block,6)), (block,8), false).
final_goal(4, on((block,6)), (block,9), false).
final_goal(4, on((block,6)), nothing, false).
final_goal(4, on((block,6)), puzzle_room_table, true).
final_goal(4, on((block,7)), (block,1), false).
final_goal(4, on((block,7)), (block,2), false).
final_goal(4, on((block,7)), (block,3), false).
final_goal(4, on((block,7)), (block,4), false).
final_goal(4, on((block,7)), (block,5), false).
final_goal(4, on((block,7)), (block,6), false).
final_goal(4, on((block,7)), (block,8), true).
final_goal(4, on((block,7)), (block,9), false).
final_goal(4, on((block,7)), nothing, false).
final_goal(4, on((block,7)), puzzle_room_table, false).
final_goal(4, on((block,8)), (block,1), false).
final_goal(4, on((block,8)), (block,2), false).
final_goal(4, on((block,8)), (block,3), false).
final_goal(4, on((block,8)), (block,4), false).
final_goal(4, on((block,8)), (block,5), false).
final_goal(4, on((block,8)), (block,6), false).
final_goal(4, on((block,8)), (block,7), false).
final_goal(4, on((block,8)), (block,9), true).
final_goal(4, on((block,8)), nothing, false).
final_goal(4, on((block,8)), puzzle_room_table, false).
final_goal(4, on((block,9)), (block,1), false).
final_goal(4, on((block,9)), (block,2), false).
final_goal(4, on((block,9)), (block,3), false).
final_goal(4, on((block,9)), (block,4), false).
final_goal(4, on((block,9)), (block,5), false).
final_goal(4, on((block,9)), (block,6), false).
final_goal(4, on((block,9)), (block,7), false).
final_goal(4, on((block,9)), (block,8), false).
final_goal(4, on((block,9)), nothing, false).
final_goal(4, on((block,9)), puzzle_room_table, true).
final_goal(4, tower_base((block,1),puzzle_room_table), false, true).
final_goal(4, tower_base((block,1),puzzle_room_table), true, false).
final_goal(4, tower_base((block,2),puzzle_room_table), false, true).
final_goal(4, tower_base((block,2),puzzle_room_table), true, false).
final_goal(4, tower_base((block,3),puzzle_room_table), false, false).
final_goal(4, tower_base((block,3),puzzle_room_table), true, true).
final_goal(4, tower_base((block,4),puzzle_room_table), false, true).
final_goal(4, tower_base((block,4),puzzle_room_table), true, false).
final_goal(4, tower_base((block,5),puzzle_room_table), false, true).
final_goal(4, tower_base((block,5),puzzle_room_table), true, false).
final_goal(4, tower_base((block,6),puzzle_room_table), false, false).
final_goal(4, tower_base((block,6),puzzle_room_table), true, true).
final_goal(4, tower_base((block,7),puzzle_room_table), false, true).
final_goal(4, tower_base((block,7),puzzle_room_table), true, false).
final_goal(4, tower_base((block,8),puzzle_room_table), false, true).
final_goal(4, tower_base((block,8),puzzle_room_table), true, false).
final_goal(4, tower_base((block,9),puzzle_room_table), false, false).
final_goal(4, tower_base((block,9),puzzle_room_table), true, true).
final_goal(4, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,9),puzzle_room_table), true, false).

[18-04-2022_15-46-11] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=7']

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 4, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 1})
SubGoal({'L': 4, 'R': 'talos', 'A': 'collect((block,5))', 'F': 'on((block,5))', 'V': 'nothing', 'I': 2})
SubGoal({'L': 4, 'R': 'talos', 'A': 'collect((block,5))', 'F': 'transporting(talos,(block,5))', 'V': 'true', 'I': 2})
SubGoal({'L': 4, 'R': 'talos', 'A': 'collect((block,6))', 'F': 'on((block,6))', 'V': 'nothing', 'I': 3})
SubGoal({'L': 4, 'R': 'talos', 'A': 'collect((block,6))', 'F': 'transporting(talos,(block,6))', 'V': 'true', 'I': 3})
SubGoal({'L': 4, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 4})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,6),puzzle_room_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'I': 5})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,6),puzzle_room_table)', 'F': 'transporting(talos,(block,6))', 'V': 'false', 'I': 5})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 6})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,5),(block,6))', 'F': 'transporting(talos,(block,5))', 'V': 'false', 'I': 6})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,9),puzzle_room_table)', 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'I': 7})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,9),puzzle_room_table)', 'F': 'transporting(talos,(block,9))', 'V': 'false', 'I': 7})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 8})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,3),puzzle_room_table)', 'F': 'transporting(talos,(block,3))', 'V': 'false', 'I': 8})

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 14 rules into program part base:

sub_goal(4, talos, move(store_room), in(talos), store_room, 1).
sub_goal(4, talos, collect((block,5)), on((block,5)), nothing, 2).
sub_goal(4, talos, collect((block,5)), transporting(talos,(block,5)), true, 2).
sub_goal(4, talos, collect((block,6)), on((block,6)), nothing, 3).
sub_goal(4, talos, collect((block,6)), transporting(talos,(block,6)), true, 3).
sub_goal(4, talos, move(puzzle_room), in(talos), puzzle_room, 4).
sub_goal(4, talos, place_upon((block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 5).
sub_goal(4, talos, place_upon((block,6),puzzle_room_table), transporting(talos,(block,6)), false, 5).
sub_goal(4, talos, place_upon((block,5),(block,6)), on((block,5)), (block,6), 6).
sub_goal(4, talos, place_upon((block,5),(block,6)), transporting(talos,(block,5)), false, 6).
sub_goal(4, talos, place_upon((block,9),puzzle_room_table), on((block,9)), puzzle_room_table, 7).
sub_goal(4, talos, place_upon((block,9),puzzle_room_table), transporting(talos,(block,9)), false, 7).
sub_goal(4, talos, place_upon((block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 8).
sub_goal(4, talos, place_upon((block,3),puzzle_room_table), transporting(talos,(block,3)), false, 8).

[18-04-2022_15-46-11] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=7']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001D610D18280>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=8, step_end_min=8, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1797.6517618000012, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(3, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 8, 'sequential', 'false'), range_=None)]

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1249 rules

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006567100000211212s

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(3, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(3), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.032536s.

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005940s with result Satisfiable.

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001D61325D8B0>

[18-04-2022_15-46-11] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 3)
	('start_step', 0)
	('last_sgoals', 8)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001D5FEA66D00>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001D61325D8B0>)

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, false). %* None *%
#program optimisation_module(#inc, 0, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, 8, sequential, false). %* None *%

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      7
Incrementor step ends | Minimum  =      8 : Maximum =    300

[18-04-2022_15-46-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('conformance_module', [Number(0), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('conformance_module', [Number(1), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('conformance_module', [Number(2), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('conformance_module', [Number(3), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('conformance_module', [Number(4), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('conformance_module', [Number(5), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('conformance_module', [Number(6), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('conformance_module', [Number(7), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.533094s.

[18-04-2022_15-46-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.208939s with result Unsatisfiable.

[18-04-2022_15-46-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.7420331000002989, Incremental time limit = None
Running cumulative time = 0.7420331000002989, Cumulative time limit = 1797.6517618000012
Used memory = (RSS = 2201.449219Mb, VMS = 2214.687500Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =      8 : Maximum =    300

[18-04-2022_15-46-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('conformance_module', [Number(8), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.125841s.

[18-04-2022_15-46-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.035687s with result Unsatisfiable.

[18-04-2022_15-46-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.16152770000007877, Incremental time limit = None
Running cumulative time = 0.9035608000003776, Cumulative time limit = 1797.6517618000012
Used memory = (RSS = 2203.046875Mb, VMS = 2218.078125Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =      8 : Maximum =    300

[18-04-2022_15-46-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('conformance_module', [Number(9), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.129203s.

[18-04-2022_15-46-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.034999s with result Unsatisfiable.

[18-04-2022_15-46-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1642018000002281, Incremental time limit = None
Running cumulative time = 1.0677626000006057, Cumulative time limit = 1797.6517618000012
Used memory = (RSS = 2204.667969Mb, VMS = 2218.488281Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =      8 : Maximum =    300

[18-04-2022_15-46-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('conformance_module', [Number(10), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.131551s.

[18-04-2022_15-46-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.044640s with result Unsatisfiable.

[18-04-2022_15-46-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.17619029999968916, Incremental time limit = None
Running cumulative time = 1.243952900000295, Cumulative time limit = 1797.6517618000012
Used memory = (RSS = 2205.953125Mb, VMS = 2218.902344Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =      8 : Maximum =    300

[18-04-2022_15-46-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('conformance_module', [Number(11), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.135154s.

[18-04-2022_15-46-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.086823s with result Unsatisfiable.

[18-04-2022_15-46-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.22197730000016236, Incremental time limit = None
Running cumulative time = 1.4659302000004573, Cumulative time limit = 1797.6517618000012
Used memory = (RSS = 2207.535156Mb, VMS = 2224.667969Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =      8 : Maximum =    300

[18-04-2022_15-46-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('conformance_module', [Number(12), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.136568s.

[18-04-2022_15-46-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.141356s with result Unsatisfiable.

[18-04-2022_15-46-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.27792330000011134, Incremental time limit = None
Running cumulative time = 1.7438535000005686, Cumulative time limit = 1797.6517618000012
Used memory = (RSS = 2209.078125Mb, VMS = 2225.082031Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =      8 : Maximum =    300

[18-04-2022_15-46-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('conformance_module', [Number(13), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.140812s.

[18-04-2022_15-46-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.245757s with result Satisfiable.

[18-04-2022_15-46-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3865689999997812, Incremental time limit = None
Running cumulative time = 2.13042250000035, Cumulative time limit = 1797.6517618000012
Used memory = (RSS = 2210.738281Mb, VMS = 2225.750000Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.332223s, Solving = 0.798200s, Total = 2.130423s, Memory = (RSS = 2210.738281Mb, VMS = 2225.750000Mb), Step range = [0-13]), Calls = 7
Final Model :: Total atoms = 13730, Cost = (-4,), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[18-04-2022_15-46-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.533094s, Solving = 0.208939s, Total = 0.742033s, Memory = (RSS = 2201.449219Mb, VMS = 2214.687500Mb), Step range = [0-7]
2 : Statistics :: Grounding = 0.125841s, Solving = 0.035687s, Total = 0.161528s, Memory = (RSS = 2203.046875Mb, VMS = 2218.078125Mb), Step range = [8-8]
3 : Statistics :: Grounding = 0.129203s, Solving = 0.034999s, Total = 0.164202s, Memory = (RSS = 2204.667969Mb, VMS = 2218.488281Mb), Step range = [9-9]
4 : Statistics :: Grounding = 0.131551s, Solving = 0.044640s, Total = 0.176190s, Memory = (RSS = 2205.953125Mb, VMS = 2218.902344Mb), Step range = [10-10]
5 : Statistics :: Grounding = 0.135154s, Solving = 0.086823s, Total = 0.221977s, Memory = (RSS = 2207.535156Mb, VMS = 2224.667969Mb), Step range = [11-11]
6 : Statistics :: Grounding = 0.136568s, Solving = 0.141356s, Total = 0.277923s, Memory = (RSS = 2209.078125Mb, VMS = 2225.082031Mb), Step range = [12-12]
7 : Statistics :: Grounding = 0.140812s, Solving = 0.245757s, Total = 0.386569s, Memory = (RSS = 2210.738281Mb, VMS = 2225.750000Mb), Step range = [13-13]

[18-04-2022_15-46-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 2.130423s due to: Stop condition reached.

[18-04-2022_15-46-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[18-04-2022_15-46-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[18-04-2022_15-46-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_15-46-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_15-46-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[18-04-2022_15-46-14] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 2 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_15-46-14] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 2 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 6, 9: 7, 10: 7, 11: 7, 12: 7, 13: 8}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 6, 6: 8, 7: 12, 8: 13}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_15-46-14] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 8, Last requested goal index = 8, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[18-04-2022_15-46-14] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.332223s, Solving = 0.798200s, Total = 2.130423s, Memory = (RSS = 2210.738281Mb, VMS = 2225.750000Mb), Step range = [0-13]), Calls = 7
Model :: Total atoms = 13730, Cost = (-4,), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[18-04-2022_15-46-14] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
                 Steps = 13 :: Actions = 13                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 2:
    Current Sub-goals:
        [Index = 2] talos : collect((block,5)) -> on((block,5)) = nothing
        [Index = 2] talos : collect((block,5)) -> transporting(talos,(block,5)) = true
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : collect((block,5)) -> on((block,5)) = nothing
        [Index = 2] talos : collect((block,5)) -> transporting(talos,(block,5)) = true
    Achieved Sub-goals:
        [Index = 2] talos : collect((block,5)) -> on((block,5)) = nothing
        [Index = 2] talos : collect((block,5)) -> transporting(talos,(block,5)) = true
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,5))
Step 4:
    Current Sub-goals:
        [Index = 3] talos : collect((block,6)) -> on((block,6)) = nothing
        [Index = 3] talos : collect((block,6)) -> transporting(talos,(block,6)) = true
    Achieved Sub-goals:
        [Index = 3] talos : collect((block,6)) -> on((block,6)) = nothing
        [Index = 3] talos : collect((block,6)) -> transporting(talos,(block,6)) = true
    Planned actions:
        talos : move(puzzle_room)
Step 5:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 6:
    Current Sub-goals:
        [Index = 5] talos : place_upon((block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
        [Index = 5] talos : place_upon((block,6),puzzle_room_table) -> transporting(talos,(block,6)) = false
    Achieved Sub-goals:
        [Index = 5] talos : place_upon((block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
        [Index = 5] talos : place_upon((block,6),puzzle_room_table) -> transporting(talos,(block,6)) = false
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 7:
    Current Sub-goals:
        [Index = 6] talos : place_upon((block,5),(block,6)) -> on((block,5)) = (block,6)
        [Index = 6] talos : place_upon((block,5),(block,6)) -> transporting(talos,(block,5)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : put(manipulator_arm_2,(block,5),(block,6))
Step 8:
    Current Sub-goals:
        [Index = 6] talos : place_upon((block,5),(block,6)) -> on((block,5)) = (block,6)
        [Index = 6] talos : place_upon((block,5),(block,6)) -> transporting(talos,(block,5)) = false
    Achieved Sub-goals:
        [Index = 6] talos : place_upon((block,5),(block,6)) -> on((block,5)) = (block,6)
        [Index = 6] talos : place_upon((block,5),(block,6)) -> transporting(talos,(block,5)) = false
    Planned actions:
        talos : release(manipulator_arm_2,(block,5))
Step 9:
    Current Sub-goals:
        [Index = 7] talos : place_upon((block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
        [Index = 7] talos : place_upon((block,9),puzzle_room_table) -> transporting(talos,(block,9)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
Step 10:
    Current Sub-goals:
        [Index = 7] talos : place_upon((block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
        [Index = 7] talos : place_upon((block,9),puzzle_room_table) -> transporting(talos,(block,9)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,9))
Step 11:
    Current Sub-goals:
        [Index = 7] talos : place_upon((block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
        [Index = 7] talos : place_upon((block,9),puzzle_room_table) -> transporting(talos,(block,9)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
Step 12:
    Current Sub-goals:
        [Index = 7] talos : place_upon((block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
        [Index = 7] talos : place_upon((block,9),puzzle_room_table) -> transporting(talos,(block,9)) = false
    Achieved Sub-goals:
        [Index = 7] talos : place_upon((block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
        [Index = 7] talos : place_upon((block,9),puzzle_room_table) -> transporting(talos,(block,9)) = false
    Planned actions:
        talos : put(manipulator_arm_2,(block,9),puzzle_room_table)
Step 13:
    Current Sub-goals:
        [Index = 8] talos : place_upon((block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 8] talos : place_upon((block,3),puzzle_room_table) -> transporting(talos,(block,3)) = false
    Achieved Sub-goals:
        [Index = 8] talos : place_upon((block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 8] talos : place_upon((block,3),puzzle_room_table) -> transporting(talos,(block,3)) = false
    Planned actions:
        talos : release(manipulator_arm_1,(block,3))

[18-04-2022_15-46-14] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[18-04-2022_15-46-14] DEBUG :: ASH Planner Main #1 >> Value of end step of abstract plan to divide adjusted for right blend of current problem: end_step=13

[18-04-2022_15-46-14] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[18-04-2022_15-46-14] DEBUG :: ASH Planner Main #1 >> Preparing to invoke division strategy...

[18-04-2022_15-46-14] DEBUG :: ASH Planner Main #1 >> Online method OnlineMethod.GroundFirst chose to invoke the division strategy before a downwards level change:Current increment = 1, Current planning level is complete = False

[18-04-2022_15-46-14] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 13, chosen step range to extract = range(0, 14)

[18-04-2022_15-46-14] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 13, Total actions = 13, Produced sub-goal stages = 13, Produced sub-goal literals = 13
Level [2]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-14] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 3 (par-ref), LE =  13, AC =  13, CF = 1.0, GT =   1.36s, ST =   0.80s, OT = 0.00s, TT =   2.17s, EF = (LE = 1.6, AC = 1.6), ED = (LE = 1.1, AC = 0.5), EB = (LE = 0.7, AC = 0.5)

[18-04-2022_15-46-14] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=13, start_step=0, blend=Blend(left=0, right=0)

[18-04-2022_15-46-14] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=1, small_group_size=6, large_group_size=7

[18-04-2022_15-46-14] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=6, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[18-04-2022_15-46-14] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 13, Sub-goal Stage Range = [1-13]
Division points [total=1] : [(Index = 6, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[18-04-2022_15-46-14] DEBUG :: ASH Planner Main #1 >> Monolevel problem 1 at level 3 solved.

[18-04-2022_15-46-14] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning problem 1 at level 2:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 13, Sub-goal Stage Range = [1-13]
Division points [total=1] : [(Index = 6, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[18-04-2022_15-46-14] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-6]

[18-04-2022_15-46-14] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 13, chosen step range to extract = range(0, 14)

[18-04-2022_15-46-14] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 13, Total actions = 13, Produced sub-goal stages = 13, Produced sub-goal literals = 13
Level [2]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-14] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[18-04-2022_15-46-14] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 13, Total actions = 13, Produced sub-goal stages = 13, Produced sub-goal literals = 13
Level [2]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-14] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [1-6], problem number = 1, increment number = 1

[18-04-2022_15-46-14] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 6)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001D5FEA66D00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1795.4828632000003)
	('length_limit', 300)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[18-04-2022_15-46-14] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 2] partial conformance refinement (sequential) with sgoals range [1-6] : Concurrency disabled : Minimum search length bound enabled with value 5

[18-04-2022_15-46-14] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 6
start_step = 0
is_initial = True
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 5

[18-04-2022_15-46-14] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[18-04-2022_15-46-14] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[18-04-2022_15-46-14] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[18-04-2022_15-46-14] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[18-04-2022_15-46-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[18-04-2022_15-46-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[18-04-2022_15-46-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_15-46-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_15-46-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_15-46-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_15-46-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[18-04-2022_15-46-14] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_15-46-14] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[18-04-2022_15-46-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,8))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})

[18-04-2022_15-46-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_15-46-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 257 rules into program part ash_initial_state:

holds(2, complete_tower(blue,puzzle_room_table), false, 0).
holds(2, complete_tower(red,puzzle_room_table), false, 0).
holds(2, complete_tower(yellow,puzzle_room_table), false, 0).
holds(2, configuration(manipulator_arm_1), retracted, 0).
holds(2, configuration(manipulator_arm_2), retracted, 0).
holds(2, configuration(puzzle_room_door), closed, 0).
holds(2, configuration(starting_room_door), closed, 0).
holds(2, configuration(store_room_door), closed, 0).
holds(2, grasping(manipulator_arm_1), nothing, 0).
holds(2, grasping(manipulator_arm_2), nothing, 0).
holds(2, in((block,1)), puzzle_room, 0).
holds(2, in((block,2)), puzzle_room, 0).
holds(2, in((block,3)), puzzle_room, 0).
holds(2, in((block,4)), store_room, 0).
holds(2, in((block,5)), store_room, 0).
holds(2, in((block,6)), store_room, 0).
holds(2, in((block,7)), puzzle_room, 0).
holds(2, in((block,8)), store_room, 0).
holds(2, in((block,9)), puzzle_room, 0).
holds(2, in(manipulator_arm_1), starting_room, 0).
holds(2, in(manipulator_arm_2), starting_room, 0).
holds(2, in(puzzle_room_table), puzzle_room, 0).
holds(2, in(talos), starting_room, 0).
holds(2, in_tower((block,1),(block,1)), true, 0).
holds(2, in_tower((block,1),(block,2)), false, 0).
holds(2, in_tower((block,1),(block,3)), true, 0).
holds(2, in_tower((block,1),(block,4)), false, 0).
holds(2, in_tower((block,1),(block,5)), false, 0).
holds(2, in_tower((block,1),(block,6)), false, 0).
holds(2, in_tower((block,1),(block,7)), false, 0).
holds(2, in_tower((block,1),(block,8)), false, 0).
holds(2, in_tower((block,1),(block,9)), false, 0).
holds(2, in_tower((block,2),(block,1)), false, 0).
holds(2, in_tower((block,2),(block,2)), true, 0).
holds(2, in_tower((block,2),(block,3)), false, 0).
holds(2, in_tower((block,2),(block,4)), false, 0).
holds(2, in_tower((block,2),(block,5)), false, 0).
holds(2, in_tower((block,2),(block,6)), false, 0).
holds(2, in_tower((block,2),(block,7)), false, 0).
holds(2, in_tower((block,2),(block,8)), false, 0).
holds(2, in_tower((block,2),(block,9)), false, 0).
holds(2, in_tower((block,3),(block,1)), false, 0).
holds(2, in_tower((block,3),(block,2)), false, 0).
holds(2, in_tower((block,3),(block,3)), false, 0).
holds(2, in_tower((block,3),(block,4)), false, 0).
holds(2, in_tower((block,3),(block,5)), false, 0).
holds(2, in_tower((block,3),(block,6)), false, 0).
holds(2, in_tower((block,3),(block,7)), false, 0).
holds(2, in_tower((block,3),(block,8)), false, 0).
holds(2, in_tower((block,3),(block,9)), false, 0).
holds(2, in_tower((block,4),(block,1)), false, 0).
holds(2, in_tower((block,4),(block,2)), false, 0).
holds(2, in_tower((block,4),(block,3)), false, 0).
holds(2, in_tower((block,4),(block,4)), false, 0).
holds(2, in_tower((block,4),(block,5)), false, 0).
holds(2, in_tower((block,4),(block,6)), false, 0).
holds(2, in_tower((block,4),(block,7)), false, 0).
holds(2, in_tower((block,4),(block,8)), false, 0).
holds(2, in_tower((block,4),(block,9)), false, 0).
holds(2, in_tower((block,5),(block,1)), false, 0).
holds(2, in_tower((block,5),(block,2)), false, 0).
holds(2, in_tower((block,5),(block,3)), false, 0).
holds(2, in_tower((block,5),(block,4)), false, 0).
holds(2, in_tower((block,5),(block,5)), false, 0).
holds(2, in_tower((block,5),(block,6)), false, 0).
holds(2, in_tower((block,5),(block,7)), false, 0).
holds(2, in_tower((block,5),(block,8)), false, 0).
holds(2, in_tower((block,5),(block,9)), false, 0).
holds(2, in_tower((block,6),(block,1)), false, 0).
holds(2, in_tower((block,6),(block,2)), false, 0).
holds(2, in_tower((block,6),(block,3)), false, 0).
holds(2, in_tower((block,6),(block,4)), false, 0).
holds(2, in_tower((block,6),(block,5)), false, 0).
holds(2, in_tower((block,6),(block,6)), false, 0).
holds(2, in_tower((block,6),(block,7)), false, 0).
holds(2, in_tower((block,6),(block,8)), false, 0).
holds(2, in_tower((block,6),(block,9)), false, 0).
holds(2, in_tower((block,7),(block,1)), false, 0).
holds(2, in_tower((block,7),(block,2)), false, 0).
holds(2, in_tower((block,7),(block,3)), false, 0).
holds(2, in_tower((block,7),(block,4)), false, 0).
holds(2, in_tower((block,7),(block,5)), false, 0).
holds(2, in_tower((block,7),(block,6)), false, 0).
holds(2, in_tower((block,7),(block,7)), true, 0).
holds(2, in_tower((block,7),(block,8)), false, 0).
holds(2, in_tower((block,7),(block,9)), true, 0).
holds(2, in_tower((block,8),(block,1)), false, 0).
holds(2, in_tower((block,8),(block,2)), false, 0).
holds(2, in_tower((block,8),(block,3)), false, 0).
holds(2, in_tower((block,8),(block,4)), false, 0).
holds(2, in_tower((block,8),(block,5)), false, 0).
holds(2, in_tower((block,8),(block,6)), false, 0).
holds(2, in_tower((block,8),(block,7)), false, 0).
holds(2, in_tower((block,8),(block,8)), false, 0).
holds(2, in_tower((block,8),(block,9)), false, 0).
holds(2, in_tower((block,9),(block,1)), false, 0).
holds(2, in_tower((block,9),(block,2)), false, 0).
holds(2, in_tower((block,9),(block,3)), false, 0).
holds(2, in_tower((block,9),(block,4)), false, 0).
holds(2, in_tower((block,9),(block,5)), false, 0).
holds(2, in_tower((block,9),(block,6)), false, 0).
holds(2, in_tower((block,9),(block,7)), false, 0).
holds(2, in_tower((block,9),(block,8)), false, 0).
holds(2, in_tower((block,9),(block,9)), false, 0).
holds(2, on((block,1)), puzzle_room_table, 0).
holds(2, on((block,2)), puzzle_room_table, 0).
holds(2, on((block,3)), (block,1), 0).
holds(2, on((block,4)), nothing, 0).
holds(2, on((block,5)), nothing, 0).
holds(2, on((block,6)), nothing, 0).
holds(2, on((block,7)), puzzle_room_table, 0).
holds(2, on((block,8)), nothing, 0).
holds(2, on((block,9)), (block,7), 0).
holds(2, tower_base((block,1),puzzle_room_table), true, 0).
holds(2, tower_base((block,2),puzzle_room_table), true, 0).
holds(2, tower_base((block,3),puzzle_room_table), false, 0).
holds(2, tower_base((block,4),puzzle_room_table), false, 0).
holds(2, tower_base((block,5),puzzle_room_table), false, 0).
holds(2, tower_base((block,6),puzzle_room_table), false, 0).
holds(2, tower_base((block,7),puzzle_room_table), true, 0).
holds(2, tower_base((block,8),puzzle_room_table), false, 0).
holds(2, tower_base((block,9),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,7),puzzle_room_table), true, 0).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 0).
holds(3, complete_tower(blue,puzzle_room_table), false, 0).
holds(3, complete_tower(red,puzzle_room_table), false, 0).
holds(3, complete_tower(yellow,puzzle_room_table), false, 0).
holds(3, grasping(manipulator_arm_1), nothing, 0).
holds(3, grasping(manipulator_arm_2), nothing, 0).
holds(3, in((block,1)), puzzle_room, 0).
holds(3, in((block,2)), puzzle_room, 0).
holds(3, in((block,3)), puzzle_room, 0).
holds(3, in((block,4)), store_room, 0).
holds(3, in((block,5)), store_room, 0).
holds(3, in((block,6)), store_room, 0).
holds(3, in((block,7)), puzzle_room, 0).
holds(3, in((block,8)), store_room, 0).
holds(3, in((block,9)), puzzle_room, 0).
holds(3, in(manipulator_arm_1), starting_room, 0).
holds(3, in(manipulator_arm_2), starting_room, 0).
holds(3, in(puzzle_room_table), puzzle_room, 0).
holds(3, in(talos), starting_room, 0).
holds(3, in_tower((block,1),(block,1)), true, 0).
holds(3, in_tower((block,1),(block,2)), false, 0).
holds(3, in_tower((block,1),(block,3)), true, 0).
holds(3, in_tower((block,1),(block,4)), false, 0).
holds(3, in_tower((block,1),(block,5)), false, 0).
holds(3, in_tower((block,1),(block,6)), false, 0).
holds(3, in_tower((block,1),(block,7)), false, 0).
holds(3, in_tower((block,1),(block,8)), false, 0).
holds(3, in_tower((block,1),(block,9)), false, 0).
holds(3, in_tower((block,2),(block,1)), false, 0).
holds(3, in_tower((block,2),(block,2)), true, 0).
holds(3, in_tower((block,2),(block,3)), false, 0).
holds(3, in_tower((block,2),(block,4)), false, 0).
holds(3, in_tower((block,2),(block,5)), false, 0).
holds(3, in_tower((block,2),(block,6)), false, 0).
holds(3, in_tower((block,2),(block,7)), false, 0).
holds(3, in_tower((block,2),(block,8)), false, 0).
holds(3, in_tower((block,2),(block,9)), false, 0).
holds(3, in_tower((block,3),(block,1)), false, 0).
holds(3, in_tower((block,3),(block,2)), false, 0).
holds(3, in_tower((block,3),(block,3)), false, 0).
holds(3, in_tower((block,3),(block,4)), false, 0).
holds(3, in_tower((block,3),(block,5)), false, 0).
holds(3, in_tower((block,3),(block,6)), false, 0).
holds(3, in_tower((block,3),(block,7)), false, 0).
holds(3, in_tower((block,3),(block,8)), false, 0).
holds(3, in_tower((block,3),(block,9)), false, 0).
holds(3, in_tower((block,4),(block,1)), false, 0).
holds(3, in_tower((block,4),(block,2)), false, 0).
holds(3, in_tower((block,4),(block,3)), false, 0).
holds(3, in_tower((block,4),(block,4)), false, 0).
holds(3, in_tower((block,4),(block,5)), false, 0).
holds(3, in_tower((block,4),(block,6)), false, 0).
holds(3, in_tower((block,4),(block,7)), false, 0).
holds(3, in_tower((block,4),(block,8)), false, 0).
holds(3, in_tower((block,4),(block,9)), false, 0).
holds(3, in_tower((block,5),(block,1)), false, 0).
holds(3, in_tower((block,5),(block,2)), false, 0).
holds(3, in_tower((block,5),(block,3)), false, 0).
holds(3, in_tower((block,5),(block,4)), false, 0).
holds(3, in_tower((block,5),(block,5)), false, 0).
holds(3, in_tower((block,5),(block,6)), false, 0).
holds(3, in_tower((block,5),(block,7)), false, 0).
holds(3, in_tower((block,5),(block,8)), false, 0).
holds(3, in_tower((block,5),(block,9)), false, 0).
holds(3, in_tower((block,6),(block,1)), false, 0).
holds(3, in_tower((block,6),(block,2)), false, 0).
holds(3, in_tower((block,6),(block,3)), false, 0).
holds(3, in_tower((block,6),(block,4)), false, 0).
holds(3, in_tower((block,6),(block,5)), false, 0).
holds(3, in_tower((block,6),(block,6)), false, 0).
holds(3, in_tower((block,6),(block,7)), false, 0).
holds(3, in_tower((block,6),(block,8)), false, 0).
holds(3, in_tower((block,6),(block,9)), false, 0).
holds(3, in_tower((block,7),(block,1)), false, 0).
holds(3, in_tower((block,7),(block,2)), false, 0).
holds(3, in_tower((block,7),(block,3)), false, 0).
holds(3, in_tower((block,7),(block,4)), false, 0).
holds(3, in_tower((block,7),(block,5)), false, 0).
holds(3, in_tower((block,7),(block,6)), false, 0).
holds(3, in_tower((block,7),(block,7)), true, 0).
holds(3, in_tower((block,7),(block,8)), false, 0).
holds(3, in_tower((block,7),(block,9)), true, 0).
holds(3, in_tower((block,8),(block,1)), false, 0).
holds(3, in_tower((block,8),(block,2)), false, 0).
holds(3, in_tower((block,8),(block,3)), false, 0).
holds(3, in_tower((block,8),(block,4)), false, 0).
holds(3, in_tower((block,8),(block,5)), false, 0).
holds(3, in_tower((block,8),(block,6)), false, 0).
holds(3, in_tower((block,8),(block,7)), false, 0).
holds(3, in_tower((block,8),(block,8)), false, 0).
holds(3, in_tower((block,8),(block,9)), false, 0).
holds(3, in_tower((block,9),(block,1)), false, 0).
holds(3, in_tower((block,9),(block,2)), false, 0).
holds(3, in_tower((block,9),(block,3)), false, 0).
holds(3, in_tower((block,9),(block,4)), false, 0).
holds(3, in_tower((block,9),(block,5)), false, 0).
holds(3, in_tower((block,9),(block,6)), false, 0).
holds(3, in_tower((block,9),(block,7)), false, 0).
holds(3, in_tower((block,9),(block,8)), false, 0).
holds(3, in_tower((block,9),(block,9)), false, 0).
holds(3, on((block,1)), puzzle_room_table, 0).
holds(3, on((block,2)), puzzle_room_table, 0).
holds(3, on((block,3)), (block,1), 0).
holds(3, on((block,4)), nothing, 0).
holds(3, on((block,5)), nothing, 0).
holds(3, on((block,6)), nothing, 0).
holds(3, on((block,7)), puzzle_room_table, 0).
holds(3, on((block,8)), nothing, 0).
holds(3, on((block,9)), (block,7), 0).
holds(3, tower_base((block,1),puzzle_room_table), true, 0).
holds(3, tower_base((block,2),puzzle_room_table), true, 0).
holds(3, tower_base((block,3),puzzle_room_table), false, 0).
holds(3, tower_base((block,4),puzzle_room_table), false, 0).
holds(3, tower_base((block,5),puzzle_room_table), false, 0).
holds(3, tower_base((block,6),puzzle_room_table), false, 0).
holds(3, tower_base((block,7),puzzle_room_table), true, 0).
holds(3, tower_base((block,8),puzzle_room_table), false, 0).
holds(3, tower_base((block,9),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,7),puzzle_room_table), true, 0).
holds(3, unordered_tower((block,8),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,9),puzzle_room_table), false, 0).

[18-04-2022_15-46-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[18-04-2022_15-46-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_15-46-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 588 rules into program part ash_goal_state:

final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(3, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,1),(block,7)), false, true).
final_goal(3, in_tower((block,1),(block,7)), true, false).
final_goal(3, in_tower((block,1),(block,8)), false, true).
final_goal(3, in_tower((block,1),(block,8)), true, false).
final_goal(3, in_tower((block,1),(block,9)), false, true).
final_goal(3, in_tower((block,1),(block,9)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,7)), false, true).
final_goal(3, in_tower((block,2),(block,7)), true, false).
final_goal(3, in_tower((block,2),(block,8)), false, true).
final_goal(3, in_tower((block,2),(block,8)), true, false).
final_goal(3, in_tower((block,2),(block,9)), false, true).
final_goal(3, in_tower((block,2),(block,9)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,7)), false, true).
final_goal(3, in_tower((block,3),(block,7)), true, false).
final_goal(3, in_tower((block,3),(block,8)), false, true).
final_goal(3, in_tower((block,3),(block,8)), true, false).
final_goal(3, in_tower((block,3),(block,9)), false, true).
final_goal(3, in_tower((block,3),(block,9)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,7)), false, true).
final_goal(3, in_tower((block,4),(block,7)), true, false).
final_goal(3, in_tower((block,4),(block,8)), false, true).
final_goal(3, in_tower((block,4),(block,8)), true, false).
final_goal(3, in_tower((block,4),(block,9)), false, true).
final_goal(3, in_tower((block,4),(block,9)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,7)), false, true).
final_goal(3, in_tower((block,5),(block,7)), true, false).
final_goal(3, in_tower((block,5),(block,8)), false, true).
final_goal(3, in_tower((block,5),(block,8)), true, false).
final_goal(3, in_tower((block,5),(block,9)), false, true).
final_goal(3, in_tower((block,5),(block,9)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, in_tower((block,6),(block,7)), false, true).
final_goal(3, in_tower((block,6),(block,7)), true, false).
final_goal(3, in_tower((block,6),(block,8)), false, true).
final_goal(3, in_tower((block,6),(block,8)), true, false).
final_goal(3, in_tower((block,6),(block,9)), false, true).
final_goal(3, in_tower((block,6),(block,9)), true, false).
final_goal(3, in_tower((block,7),(block,1)), false, true).
final_goal(3, in_tower((block,7),(block,1)), true, false).
final_goal(3, in_tower((block,7),(block,2)), false, true).
final_goal(3, in_tower((block,7),(block,2)), true, false).
final_goal(3, in_tower((block,7),(block,3)), false, true).
final_goal(3, in_tower((block,7),(block,3)), true, false).
final_goal(3, in_tower((block,7),(block,4)), false, true).
final_goal(3, in_tower((block,7),(block,4)), true, false).
final_goal(3, in_tower((block,7),(block,5)), false, true).
final_goal(3, in_tower((block,7),(block,5)), true, false).
final_goal(3, in_tower((block,7),(block,6)), false, true).
final_goal(3, in_tower((block,7),(block,6)), true, false).
final_goal(3, in_tower((block,7),(block,7)), false, true).
final_goal(3, in_tower((block,7),(block,7)), true, false).
final_goal(3, in_tower((block,7),(block,8)), false, true).
final_goal(3, in_tower((block,7),(block,8)), true, false).
final_goal(3, in_tower((block,7),(block,9)), false, true).
final_goal(3, in_tower((block,7),(block,9)), true, false).
final_goal(3, in_tower((block,8),(block,1)), false, true).
final_goal(3, in_tower((block,8),(block,1)), true, false).
final_goal(3, in_tower((block,8),(block,2)), false, true).
final_goal(3, in_tower((block,8),(block,2)), true, false).
final_goal(3, in_tower((block,8),(block,3)), false, true).
final_goal(3, in_tower((block,8),(block,3)), true, false).
final_goal(3, in_tower((block,8),(block,4)), false, true).
final_goal(3, in_tower((block,8),(block,4)), true, false).
final_goal(3, in_tower((block,8),(block,5)), false, true).
final_goal(3, in_tower((block,8),(block,5)), true, false).
final_goal(3, in_tower((block,8),(block,6)), false, true).
final_goal(3, in_tower((block,8),(block,6)), true, false).
final_goal(3, in_tower((block,8),(block,7)), false, true).
final_goal(3, in_tower((block,8),(block,7)), true, false).
final_goal(3, in_tower((block,8),(block,8)), false, true).
final_goal(3, in_tower((block,8),(block,8)), true, false).
final_goal(3, in_tower((block,8),(block,9)), false, true).
final_goal(3, in_tower((block,8),(block,9)), true, false).
final_goal(3, in_tower((block,9),(block,1)), false, true).
final_goal(3, in_tower((block,9),(block,1)), true, false).
final_goal(3, in_tower((block,9),(block,2)), false, true).
final_goal(3, in_tower((block,9),(block,2)), true, false).
final_goal(3, in_tower((block,9),(block,3)), false, true).
final_goal(3, in_tower((block,9),(block,3)), true, false).
final_goal(3, in_tower((block,9),(block,4)), false, true).
final_goal(3, in_tower((block,9),(block,4)), true, false).
final_goal(3, in_tower((block,9),(block,5)), false, true).
final_goal(3, in_tower((block,9),(block,5)), true, false).
final_goal(3, in_tower((block,9),(block,6)), false, true).
final_goal(3, in_tower((block,9),(block,6)), true, false).
final_goal(3, in_tower((block,9),(block,7)), false, false).
final_goal(3, in_tower((block,9),(block,7)), true, true).
final_goal(3, in_tower((block,9),(block,8)), false, false).
final_goal(3, in_tower((block,9),(block,8)), true, true).
final_goal(3, in_tower((block,9),(block,9)), false, false).
final_goal(3, in_tower((block,9),(block,9)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), (block,7), false).
final_goal(3, on((block,1)), (block,8), false).
final_goal(3, on((block,1)), (block,9), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), (block,7), false).
final_goal(3, on((block,2)), (block,8), false).
final_goal(3, on((block,2)), (block,9), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), (block,7), false).
final_goal(3, on((block,3)), (block,8), false).
final_goal(3, on((block,3)), (block,9), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), (block,7), false).
final_goal(3, on((block,4)), (block,8), false).
final_goal(3, on((block,4)), (block,9), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), (block,7), false).
final_goal(3, on((block,5)), (block,8), false).
final_goal(3, on((block,5)), (block,9), false).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), (block,7), false).
final_goal(3, on((block,6)), (block,8), false).
final_goal(3, on((block,6)), (block,9), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, on((block,7)), (block,1), false).
final_goal(3, on((block,7)), (block,2), false).
final_goal(3, on((block,7)), (block,3), false).
final_goal(3, on((block,7)), (block,4), false).
final_goal(3, on((block,7)), (block,5), false).
final_goal(3, on((block,7)), (block,6), false).
final_goal(3, on((block,7)), (block,8), true).
final_goal(3, on((block,7)), (block,9), false).
final_goal(3, on((block,7)), nothing, false).
final_goal(3, on((block,7)), puzzle_room_table, false).
final_goal(3, on((block,8)), (block,1), false).
final_goal(3, on((block,8)), (block,2), false).
final_goal(3, on((block,8)), (block,3), false).
final_goal(3, on((block,8)), (block,4), false).
final_goal(3, on((block,8)), (block,5), false).
final_goal(3, on((block,8)), (block,6), false).
final_goal(3, on((block,8)), (block,7), false).
final_goal(3, on((block,8)), (block,9), true).
final_goal(3, on((block,8)), nothing, false).
final_goal(3, on((block,8)), puzzle_room_table, false).
final_goal(3, on((block,9)), (block,1), false).
final_goal(3, on((block,9)), (block,2), false).
final_goal(3, on((block,9)), (block,3), false).
final_goal(3, on((block,9)), (block,4), false).
final_goal(3, on((block,9)), (block,5), false).
final_goal(3, on((block,9)), (block,6), false).
final_goal(3, on((block,9)), (block,7), false).
final_goal(3, on((block,9)), (block,8), false).
final_goal(3, on((block,9)), nothing, false).
final_goal(3, on((block,9)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, tower_base((block,7),puzzle_room_table), false, true).
final_goal(3, tower_base((block,7),puzzle_room_table), true, false).
final_goal(3, tower_base((block,8),puzzle_room_table), false, true).
final_goal(3, tower_base((block,8),puzzle_room_table), true, false).
final_goal(3, tower_base((block,9),puzzle_room_table), false, false).
final_goal(3, tower_base((block,9),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,9),puzzle_room_table), true, false).

[18-04-2022_15-46-14] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=5']

[18-04-2022_15-46-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 1})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'I': 2})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'I': 3})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 4})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,6),puzzle_room_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'I': 5})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 6})

[18-04-2022_15-46-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_15-46-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 6 rules into program part base:

sub_goal(3, talos, move(store_room), in(talos), store_room, 1).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), (block,6), 2).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), (block,5), 3).
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 4).
sub_goal(3, talos, put(manipulator_arm_1,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 5).
sub_goal(3, talos, release(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), nothing, 6).

[18-04-2022_15-46-14] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_15-46-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[18-04-2022_15-46-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=5']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001D5A00E0DC0>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=6, step_end_min=6, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1795.4828632000003, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 6, 'sequential', 'false'), range_=None)]

[18-04-2022_15-46-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_15-46-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_15-46-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_15-46-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1241 rules

[18-04-2022_15-46-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006672200000139128s

[18-04-2022_15-46-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[18-04-2022_15-46-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[18-04-2022_15-46-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.034750s.

[18-04-2022_15-46-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006422s with result Satisfiable.

[18-04-2022_15-46-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[18-04-2022_15-46-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001D61325DF90>

[18-04-2022_15-46-14] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 2)
	('start_step', 0)
	('last_sgoals', 6)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001D5FEA66D00>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001D61325DF90>)

[18-04-2022_15-46-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, false). %* None *%
#program optimisation_module(#inc, 0, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, 6, sequential, false). %* None *%

[18-04-2022_15-46-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      5
Incrementor step ends | Minimum  =      6 : Maximum =    300

[18-04-2022_15-46-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('conformance_module', [Number(0), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('conformance_module', [Number(1), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('conformance_module', [Number(2), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('conformance_module', [Number(3), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('conformance_module', [Number(4), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('conformance_module', [Number(5), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.466584s.

[18-04-2022_15-46-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.153796s with result Unsatisfiable.

[18-04-2022_15-46-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.6203805999998622, Incremental time limit = None
Running cumulative time = 0.6203805999998622, Cumulative time limit = 1795.4828632000003
Used memory = (RSS = 2196.796875Mb, VMS = 2209.781250Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =      6 : Maximum =    300

[18-04-2022_15-46-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('conformance_module', [Number(6), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.133158s.

[18-04-2022_15-46-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.024959s with result Unsatisfiable.

[18-04-2022_15-46-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.15811629999961951, Incremental time limit = None
Running cumulative time = 0.7784968999994817, Cumulative time limit = 1795.4828632000003
Used memory = (RSS = 2202.796875Mb, VMS = 2216.808594Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =      6 : Maximum =    300

[18-04-2022_15-46-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('conformance_module', [Number(7), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.137319s.

[18-04-2022_15-46-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.027742s with result Unsatisfiable.

[18-04-2022_15-46-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.16506170000002385, Incremental time limit = None
Running cumulative time = 0.9435585999995055, Cumulative time limit = 1795.4828632000003
Used memory = (RSS = 2204.382812Mb, VMS = 2217.238281Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =      6 : Maximum =    300

[18-04-2022_15-46-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('conformance_module', [Number(8), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.140986s.

[18-04-2022_15-46-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.033076s with result Unsatisfiable.

[18-04-2022_15-46-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1740618000003451, Incremental time limit = None
Running cumulative time = 1.1176203999998506, Cumulative time limit = 1795.4828632000003
Used memory = (RSS = 2205.871094Mb, VMS = 2221.613281Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =      6 : Maximum =    300

[18-04-2022_15-46-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('conformance_module', [Number(9), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.144684s.

[18-04-2022_15-46-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.034563s with result Unsatisfiable.

[18-04-2022_15-46-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1792476999999053, Incremental time limit = None
Running cumulative time = 1.296868099999756, Cumulative time limit = 1795.4828632000003
Used memory = (RSS = 2207.421875Mb, VMS = 2222.042969Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =      6 : Maximum =    300

[18-04-2022_15-46-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('conformance_module', [Number(10), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.146732s.

[18-04-2022_15-46-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.035649s with result Unsatisfiable.

[18-04-2022_15-46-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.18238109999947483, Incremental time limit = None
Running cumulative time = 1.4792491999992308, Cumulative time limit = 1795.4828632000003
Used memory = (RSS = 2208.910156Mb, VMS = 2222.468750Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =      6 : Maximum =    300

[18-04-2022_15-46-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('conformance_module', [Number(11), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.149950s.

[18-04-2022_15-46-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.048915s with result Unsatisfiable.

[18-04-2022_15-46-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.19886429999996835, Incremental time limit = None
Running cumulative time = 1.6781134999991991, Cumulative time limit = 1795.4828632000003
Used memory = (RSS = 2210.246094Mb, VMS = 2222.890625Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =      6 : Maximum =    300

[18-04-2022_15-46-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('conformance_module', [Number(12), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.151201s.

[18-04-2022_15-46-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.053859s with result Unsatisfiable.

[18-04-2022_15-46-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.20505939999975453, Incremental time limit = None
Running cumulative time = 1.8831728999989537, Cumulative time limit = 1795.4828632000003
Used memory = (RSS = 2214.117188Mb, VMS = 2233.210938Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =      6 : Maximum =    300

[18-04-2022_15-46-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('conformance_module', [Number(13), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.155394s.

[18-04-2022_15-46-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.080678s with result Unsatisfiable.

[18-04-2022_15-46-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.23607129999982135, Incremental time limit = None
Running cumulative time = 2.119244199998775, Cumulative time limit = 1795.4828632000003
Used memory = (RSS = 2215.804688Mb, VMS = 2233.632812Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =      6 : Maximum =    300

[18-04-2022_15-46-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('conformance_module', [Number(14), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.158656s.

[18-04-2022_15-46-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.090158s with result Unsatisfiable.

[18-04-2022_15-46-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.24881469999945693, Incremental time limit = None
Running cumulative time = 2.368058899998232, Cumulative time limit = 1795.4828632000003
Used memory = (RSS = 2217.554688Mb, VMS = 2234.062500Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =      6 : Maximum =    300

[18-04-2022_15-46-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('conformance_module', [Number(15), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.159134s.

[18-04-2022_15-46-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.109391s with result Unsatisfiable.

[18-04-2022_15-46-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2685253999998167, Incremental time limit = None
Running cumulative time = 2.6365842999980487, Cumulative time limit = 1795.4828632000003
Used memory = (RSS = 2219.332031Mb, VMS = 2234.488281Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =      6 : Maximum =    300

[18-04-2022_15-46-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.163092s.

[18-04-2022_15-46-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.138647s with result Unsatisfiable.

[18-04-2022_15-46-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3017397000003257, Incremental time limit = None
Running cumulative time = 2.9383239999983743, Cumulative time limit = 1795.4828632000003
Used memory = (RSS = 2221.003906Mb, VMS = 2234.910156Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =      6 : Maximum =    300

[18-04-2022_15-46-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.165897s.

[18-04-2022_15-46-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.178170s with result Unsatisfiable.

[18-04-2022_15-46-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3440670999998474, Incremental time limit = None
Running cumulative time = 3.2823910999982218, Cumulative time limit = 1795.4828632000003
Used memory = (RSS = 2227.953125Mb, VMS = 2251.320312Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =      6 : Maximum =    300

[18-04-2022_15-46-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('conformance_module', [Number(18), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.167403s.

[18-04-2022_15-46-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.250982s with result Unsatisfiable.

[18-04-2022_15-46-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4183840000005148, Incremental time limit = None
Running cumulative time = 3.7007750999987366, Cumulative time limit = 1795.4828632000003
Used memory = (RSS = 2229.726562Mb, VMS = 2251.750000Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =      6 : Maximum =    300

[18-04-2022_15-46-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('state_module', [Number(19), Number(0)]), ('plan_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('conformance_module', [Number(19), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.169507s.

[18-04-2022_15-46-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.278873s with result Unsatisfiable.

[18-04-2022_15-46-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4483808999998473, Incremental time limit = None
Running cumulative time = 4.149155999998584, Cumulative time limit = 1795.4828632000003
Used memory = (RSS = 2231.707031Mb, VMS = 2252.179688Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =      6 : Maximum =    300

[18-04-2022_15-46-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('state_module', [Number(20), Number(0)]), ('plan_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.166633s.

[18-04-2022_15-46-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.145280s with result Unsatisfiable.

[18-04-2022_15-46-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3119123000001309, Incremental time limit = None
Running cumulative time = 4.461068299998715, Cumulative time limit = 1795.4828632000003
Used memory = (RSS = 2234.464844Mb, VMS = 2253.660156Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     20 : Current =     21
Incrementor step ends | Minimum  =      6 : Maximum =    300

[18-04-2022_15-46-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('state_module', [Number(21), Number(0)]), ('plan_module', [Number(21), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.168931s.

[18-04-2022_15-46-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.206235s with result Satisfiable.

[18-04-2022_15-46-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.37516590000041106, Incremental time limit = None
Running cumulative time = 4.836234199999126, Cumulative time limit = 1795.4828632000003
Used memory = (RSS = 2238.062500Mb, VMS = 2256.246094Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.945261s, Solving = 1.890973s, Total = 4.836234s, Memory = (RSS = 2238.062500Mb, VMS = 2256.246094Mb), Step range = [0-21]), Calls = 17
Final Model :: Total atoms = 19479, Cost = (-1,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[18-04-2022_15-46-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.466584s, Solving = 0.153796s, Total = 0.620381s, Memory = (RSS = 2196.796875Mb, VMS = 2209.781250Mb), Step range = [0-5]
2 : Statistics :: Grounding = 0.133158s, Solving = 0.024959s, Total = 0.158116s, Memory = (RSS = 2202.796875Mb, VMS = 2216.808594Mb), Step range = [6-6]
3 : Statistics :: Grounding = 0.137319s, Solving = 0.027742s, Total = 0.165062s, Memory = (RSS = 2204.382812Mb, VMS = 2217.238281Mb), Step range = [7-7]
4 : Statistics :: Grounding = 0.140986s, Solving = 0.033076s, Total = 0.174062s, Memory = (RSS = 2205.871094Mb, VMS = 2221.613281Mb), Step range = [8-8]
5 : Statistics :: Grounding = 0.144684s, Solving = 0.034563s, Total = 0.179248s, Memory = (RSS = 2207.421875Mb, VMS = 2222.042969Mb), Step range = [9-9]
6 : Statistics :: Grounding = 0.146732s, Solving = 0.035649s, Total = 0.182381s, Memory = (RSS = 2208.910156Mb, VMS = 2222.468750Mb), Step range = [10-10]
7 : Statistics :: Grounding = 0.149950s, Solving = 0.048915s, Total = 0.198864s, Memory = (RSS = 2210.246094Mb, VMS = 2222.890625Mb), Step range = [11-11]
8 : Statistics :: Grounding = 0.151201s, Solving = 0.053859s, Total = 0.205059s, Memory = (RSS = 2214.117188Mb, VMS = 2233.210938Mb), Step range = [12-12]
9 : Statistics :: Grounding = 0.155394s, Solving = 0.080678s, Total = 0.236071s, Memory = (RSS = 2215.804688Mb, VMS = 2233.632812Mb), Step range = [13-13]
10 : Statistics :: Grounding = 0.158656s, Solving = 0.090158s, Total = 0.248815s, Memory = (RSS = 2217.554688Mb, VMS = 2234.062500Mb), Step range = [14-14]
11 : Statistics :: Grounding = 0.159134s, Solving = 0.109391s, Total = 0.268525s, Memory = (RSS = 2219.332031Mb, VMS = 2234.488281Mb), Step range = [15-15]
12 : Statistics :: Grounding = 0.163092s, Solving = 0.138647s, Total = 0.301740s, Memory = (RSS = 2221.003906Mb, VMS = 2234.910156Mb), Step range = [16-16]
13 : Statistics :: Grounding = 0.165897s, Solving = 0.178170s, Total = 0.344067s, Memory = (RSS = 2227.953125Mb, VMS = 2251.320312Mb), Step range = [17-17]
14 : Statistics :: Grounding = 0.167403s, Solving = 0.250982s, Total = 0.418384s, Memory = (RSS = 2229.726562Mb, VMS = 2251.750000Mb), Step range = [18-18]
15 : Statistics :: Grounding = 0.169507s, Solving = 0.278873s, Total = 0.448381s, Memory = (RSS = 2231.707031Mb, VMS = 2252.179688Mb), Step range = [19-19]
16 : Statistics :: Grounding = 0.166633s, Solving = 0.145280s, Total = 0.311912s, Memory = (RSS = 2234.464844Mb, VMS = 2253.660156Mb), Step range = [20-20]
17 : Statistics :: Grounding = 0.168931s, Solving = 0.206235s, Total = 0.375166s, Memory = (RSS = 2238.062500Mb, VMS = 2256.246094Mb), Step range = [21-21]

[18-04-2022_15-46-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 4.836234s due to: Stop condition reached.

[18-04-2022_15-46-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[18-04-2022_15-46-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[18-04-2022_15-46-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_15-46-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_15-46-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[18-04-2022_15-46-20] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 2 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 6, 9: 7, 10: 7, 11: 7, 12: 7, 13: 8}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 6, 6: 8, 7: 12, 8: 13}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_15-46-20] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 6, 9: 7, 10: 7, 11: 7, 12: 7, 13: 8}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 6, 6: 8, 7: 12, 8: 13}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_15-46-20] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 6, Last requested goal index = 6, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[18-04-2022_15-46-20] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.945261s, Solving = 1.890973s, Total = 4.836234s, Memory = (RSS = 2238.062500Mb, VMS = 2256.246094Mb), Step range = [0-21]), Calls = 17
Model :: Total atoms = 19479, Cost = (-1,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[18-04-2022_15-46-20] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 21 :: Actions = 21                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,store_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,store_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,store_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 11:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 12:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,5))
Step 15:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 17:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 18:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 19:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 20:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 21:
    Current Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))

[18-04-2022_15-46-20] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[18-04-2022_15-46-20] DEBUG :: ASH Planner Main #1 >> Value of end step of abstract plan to divide adjusted for right blend of current problem: end_step=21

[18-04-2022_15-46-20] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[18-04-2022_15-46-20] DEBUG :: ASH Planner Main #1 >> Preparing to invoke division strategy...

[18-04-2022_15-46-20] DEBUG :: ASH Planner Main #1 >> Online method OnlineMethod.GroundFirst chose to invoke the division strategy before a downwards level change:Current increment = 1, Current planning level is complete = False

[18-04-2022_15-46-20] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 21, chosen step range to extract = range(0, 22)

[18-04-2022_15-46-20] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 13, Total actions = 13, Produced sub-goal stages = 13, Produced sub-goal literals = 13
Level [2]: Length = 21, Total actions = 21, Produced sub-goal stages = 21, Produced sub-goal literals = 21
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-20] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =  21, AC =  21, CF = 1.0, GT =   2.98s, ST =   1.90s, OT = 0.00s, TT =   4.88s, EF = (LE = 3.5, AC = 3.5), ED = (LE = 3.3, AC = 3.3), EB = (LE = 1.0, AC = 1.0)

[18-04-2022_15-46-20] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=1, plan_length=21, start_step=0, blend=Blend(left=0, right=0)

[18-04-2022_15-46-20] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=0, small_group_size=21, large_group_size=22

[18-04-2022_15-46-20] DEBUG :: core.Strategies >> Division points generated:
[]

[18-04-2022_15-46-20] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 1, Problem Range = [1-1], Size = 21, Sub-goal Stage Range = [1-21]
Division points [total=0] : []

[18-04-2022_15-46-20] DEBUG :: ASH Planner Main #1 >> Monolevel problem 1 at level 2 solved.

[18-04-2022_15-46-20] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 1 at level 1:
Total Templated Partial Problems = 1, Problem Range = [1-1], Size = 21, Sub-goal Stage Range = [1-21]
Division points [total=0] : []

[18-04-2022_15-46-20] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-21]

[18-04-2022_15-46-20] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 21, chosen step range to extract = range(0, 22)

[18-04-2022_15-46-20] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 13, Total actions = 13, Produced sub-goal stages = 13, Produced sub-goal literals = 13
Level [2]: Length = 21, Total actions = 21, Produced sub-goal stages = 21, Produced sub-goal literals = 21
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-20] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 13, chosen step range to extract = range(0, 14)

[18-04-2022_15-46-20] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 13, Total actions = 13, Produced sub-goal stages = 13, Produced sub-goal literals = 13
Level [2]: Length = 21, Total actions = 21, Produced sub-goal stages = 21, Produced sub-goal literals = 21
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-20] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[18-04-2022_15-46-20] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 13, Total actions = 13, Produced sub-goal stages = 13, Produced sub-goal literals = 13
Level [2]: Length = 21, Total actions = 21, Produced sub-goal stages = 21, Produced sub-goal literals = 21
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-20] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [1-21], problem number = 1, increment number = 1

[18-04-2022_15-46-20] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 21)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001D5FEA66D00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1790.6054564000015)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[18-04-2022_15-46-20] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [1-21] : Concurrency disabled : Minimum search length bound enabled with value 20

[18-04-2022_15-46-20] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 21
start_step = 0
is_initial = True
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 20

[18-04-2022_15-46-20] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[18-04-2022_15-46-20] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[18-04-2022_15-46-20] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[18-04-2022_15-46-20] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[18-04-2022_15-46-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[18-04-2022_15-46-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[18-04-2022_15-46-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_15-46-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_15-46-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_15-46-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_15-46-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[18-04-2022_15-46-20] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_15-46-20] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[18-04-2022_15-46-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})

[18-04-2022_15-46-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_15-46-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 0).
holds(1, complete_tower(red,puzzle_room_table), false, 0).
holds(1, complete_tower(yellow,puzzle_room_table), false, 0).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0).
holds(1, configuration(manipulator_limb_1), retracted, 0).
holds(1, configuration(manipulator_limb_2), retracted, 0).
holds(1, configuration(puzzle_room_door), closed, 0).
holds(1, configuration(starting_room_door), closed, 0).
holds(1, configuration(store_room_door), closed, 0).
holds(1, grasping(manipulator_arm_1), nothing, 0).
holds(1, grasping(manipulator_arm_2), nothing, 0).
holds(1, grasping(manipulator_end_1), nothing, 0).
holds(1, grasping(manipulator_end_2), nothing, 0).
holds(1, in((block,1)), (puzzle_room,1), 0).
holds(1, in((block,2)), (puzzle_room,1), 0).
holds(1, in((block,3)), (puzzle_room,1), 0).
holds(1, in((block,4)), (store_room,0), 0).
holds(1, in((block,5)), (store_room,0), 0).
holds(1, in((block,6)), (store_room,0), 0).
holds(1, in((block,7)), (puzzle_room,1), 0).
holds(1, in((block,8)), (store_room,0), 0).
holds(1, in((block,9)), (puzzle_room,1), 0).
holds(1, in(manipulator_arm_1), (starting_room,0), 0).
holds(1, in(manipulator_arm_2), (starting_room,0), 0).
holds(1, in(manipulator_end_1), (starting_room,0), 0).
holds(1, in(manipulator_end_2), (starting_room,0), 0).
holds(1, in(manipulator_limb_1), (starting_room,0), 0).
holds(1, in(manipulator_limb_2), (starting_room,0), 0).
holds(1, in(puzzle_room_table), (puzzle_room,1), 0).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 0).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0).
holds(1, in(talos), (starting_room,0), 0).
holds(1, in_tower((block,1),(block,1)), true, 0).
holds(1, in_tower((block,1),(block,2)), false, 0).
holds(1, in_tower((block,1),(block,3)), true, 0).
holds(1, in_tower((block,1),(block,4)), false, 0).
holds(1, in_tower((block,1),(block,5)), false, 0).
holds(1, in_tower((block,1),(block,6)), false, 0).
holds(1, in_tower((block,1),(block,7)), false, 0).
holds(1, in_tower((block,1),(block,8)), false, 0).
holds(1, in_tower((block,1),(block,9)), false, 0).
holds(1, in_tower((block,2),(block,1)), false, 0).
holds(1, in_tower((block,2),(block,2)), true, 0).
holds(1, in_tower((block,2),(block,3)), false, 0).
holds(1, in_tower((block,2),(block,4)), false, 0).
holds(1, in_tower((block,2),(block,5)), false, 0).
holds(1, in_tower((block,2),(block,6)), false, 0).
holds(1, in_tower((block,2),(block,7)), false, 0).
holds(1, in_tower((block,2),(block,8)), false, 0).
holds(1, in_tower((block,2),(block,9)), false, 0).
holds(1, in_tower((block,3),(block,1)), false, 0).
holds(1, in_tower((block,3),(block,2)), false, 0).
holds(1, in_tower((block,3),(block,3)), false, 0).
holds(1, in_tower((block,3),(block,4)), false, 0).
holds(1, in_tower((block,3),(block,5)), false, 0).
holds(1, in_tower((block,3),(block,6)), false, 0).
holds(1, in_tower((block,3),(block,7)), false, 0).
holds(1, in_tower((block,3),(block,8)), false, 0).
holds(1, in_tower((block,3),(block,9)), false, 0).
holds(1, in_tower((block,4),(block,1)), false, 0).
holds(1, in_tower((block,4),(block,2)), false, 0).
holds(1, in_tower((block,4),(block,3)), false, 0).
holds(1, in_tower((block,4),(block,4)), false, 0).
holds(1, in_tower((block,4),(block,5)), false, 0).
holds(1, in_tower((block,4),(block,6)), false, 0).
holds(1, in_tower((block,4),(block,7)), false, 0).
holds(1, in_tower((block,4),(block,8)), false, 0).
holds(1, in_tower((block,4),(block,9)), false, 0).
holds(1, in_tower((block,5),(block,1)), false, 0).
holds(1, in_tower((block,5),(block,2)), false, 0).
holds(1, in_tower((block,5),(block,3)), false, 0).
holds(1, in_tower((block,5),(block,4)), false, 0).
holds(1, in_tower((block,5),(block,5)), false, 0).
holds(1, in_tower((block,5),(block,6)), false, 0).
holds(1, in_tower((block,5),(block,7)), false, 0).
holds(1, in_tower((block,5),(block,8)), false, 0).
holds(1, in_tower((block,5),(block,9)), false, 0).
holds(1, in_tower((block,6),(block,1)), false, 0).
holds(1, in_tower((block,6),(block,2)), false, 0).
holds(1, in_tower((block,6),(block,3)), false, 0).
holds(1, in_tower((block,6),(block,4)), false, 0).
holds(1, in_tower((block,6),(block,5)), false, 0).
holds(1, in_tower((block,6),(block,6)), false, 0).
holds(1, in_tower((block,6),(block,7)), false, 0).
holds(1, in_tower((block,6),(block,8)), false, 0).
holds(1, in_tower((block,6),(block,9)), false, 0).
holds(1, in_tower((block,7),(block,1)), false, 0).
holds(1, in_tower((block,7),(block,2)), false, 0).
holds(1, in_tower((block,7),(block,3)), false, 0).
holds(1, in_tower((block,7),(block,4)), false, 0).
holds(1, in_tower((block,7),(block,5)), false, 0).
holds(1, in_tower((block,7),(block,6)), false, 0).
holds(1, in_tower((block,7),(block,7)), true, 0).
holds(1, in_tower((block,7),(block,8)), false, 0).
holds(1, in_tower((block,7),(block,9)), true, 0).
holds(1, in_tower((block,8),(block,1)), false, 0).
holds(1, in_tower((block,8),(block,2)), false, 0).
holds(1, in_tower((block,8),(block,3)), false, 0).
holds(1, in_tower((block,8),(block,4)), false, 0).
holds(1, in_tower((block,8),(block,5)), false, 0).
holds(1, in_tower((block,8),(block,6)), false, 0).
holds(1, in_tower((block,8),(block,7)), false, 0).
holds(1, in_tower((block,8),(block,8)), false, 0).
holds(1, in_tower((block,8),(block,9)), false, 0).
holds(1, in_tower((block,9),(block,1)), false, 0).
holds(1, in_tower((block,9),(block,2)), false, 0).
holds(1, in_tower((block,9),(block,3)), false, 0).
holds(1, in_tower((block,9),(block,4)), false, 0).
holds(1, in_tower((block,9),(block,5)), false, 0).
holds(1, in_tower((block,9),(block,6)), false, 0).
holds(1, in_tower((block,9),(block,7)), false, 0).
holds(1, in_tower((block,9),(block,8)), false, 0).
holds(1, in_tower((block,9),(block,9)), false, 0).
holds(1, on((block,1)), puzzle_room_table_left, 0).
holds(1, on((block,2)), puzzle_room_table_right, 0).
holds(1, on((block,3)), (block,1), 0).
holds(1, on((block,4)), nothing, 0).
holds(1, on((block,5)), nothing, 0).
holds(1, on((block,6)), nothing, 0).
holds(1, on((block,7)), puzzle_room_table_middle, 0).
holds(1, on((block,8)), nothing, 0).
holds(1, on((block,9)), (block,7), 0).
holds(1, tower_base((block,1),puzzle_room_table), true, 0).
holds(1, tower_base((block,2),puzzle_room_table), true, 0).
holds(1, tower_base((block,3),puzzle_room_table), false, 0).
holds(1, tower_base((block,4),puzzle_room_table), false, 0).
holds(1, tower_base((block,5),puzzle_room_table), false, 0).
holds(1, tower_base((block,6),puzzle_room_table), false, 0).
holds(1, tower_base((block,7),puzzle_room_table), true, 0).
holds(1, tower_base((block,8),puzzle_room_table), false, 0).
holds(1, tower_base((block,9),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,7),puzzle_room_table), true, 0).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 0).
holds(2, complete_tower(blue,puzzle_room_table), false, 0).
holds(2, complete_tower(red,puzzle_room_table), false, 0).
holds(2, complete_tower(yellow,puzzle_room_table), false, 0).
holds(2, configuration(manipulator_arm_1), retracted, 0).
holds(2, configuration(manipulator_arm_2), retracted, 0).
holds(2, configuration(puzzle_room_door), closed, 0).
holds(2, configuration(starting_room_door), closed, 0).
holds(2, configuration(store_room_door), closed, 0).
holds(2, grasping(manipulator_arm_1), nothing, 0).
holds(2, grasping(manipulator_arm_2), nothing, 0).
holds(2, in((block,1)), puzzle_room, 0).
holds(2, in((block,2)), puzzle_room, 0).
holds(2, in((block,3)), puzzle_room, 0).
holds(2, in((block,4)), store_room, 0).
holds(2, in((block,5)), store_room, 0).
holds(2, in((block,6)), store_room, 0).
holds(2, in((block,7)), puzzle_room, 0).
holds(2, in((block,8)), store_room, 0).
holds(2, in((block,9)), puzzle_room, 0).
holds(2, in(manipulator_arm_1), starting_room, 0).
holds(2, in(manipulator_arm_2), starting_room, 0).
holds(2, in(puzzle_room_table), puzzle_room, 0).
holds(2, in(talos), starting_room, 0).
holds(2, in_tower((block,1),(block,1)), true, 0).
holds(2, in_tower((block,1),(block,2)), false, 0).
holds(2, in_tower((block,1),(block,3)), true, 0).
holds(2, in_tower((block,1),(block,4)), false, 0).
holds(2, in_tower((block,1),(block,5)), false, 0).
holds(2, in_tower((block,1),(block,6)), false, 0).
holds(2, in_tower((block,1),(block,7)), false, 0).
holds(2, in_tower((block,1),(block,8)), false, 0).
holds(2, in_tower((block,1),(block,9)), false, 0).
holds(2, in_tower((block,2),(block,1)), false, 0).
holds(2, in_tower((block,2),(block,2)), true, 0).
holds(2, in_tower((block,2),(block,3)), false, 0).
holds(2, in_tower((block,2),(block,4)), false, 0).
holds(2, in_tower((block,2),(block,5)), false, 0).
holds(2, in_tower((block,2),(block,6)), false, 0).
holds(2, in_tower((block,2),(block,7)), false, 0).
holds(2, in_tower((block,2),(block,8)), false, 0).
holds(2, in_tower((block,2),(block,9)), false, 0).
holds(2, in_tower((block,3),(block,1)), false, 0).
holds(2, in_tower((block,3),(block,2)), false, 0).
holds(2, in_tower((block,3),(block,3)), false, 0).
holds(2, in_tower((block,3),(block,4)), false, 0).
holds(2, in_tower((block,3),(block,5)), false, 0).
holds(2, in_tower((block,3),(block,6)), false, 0).
holds(2, in_tower((block,3),(block,7)), false, 0).
holds(2, in_tower((block,3),(block,8)), false, 0).
holds(2, in_tower((block,3),(block,9)), false, 0).
holds(2, in_tower((block,4),(block,1)), false, 0).
holds(2, in_tower((block,4),(block,2)), false, 0).
holds(2, in_tower((block,4),(block,3)), false, 0).
holds(2, in_tower((block,4),(block,4)), false, 0).
holds(2, in_tower((block,4),(block,5)), false, 0).
holds(2, in_tower((block,4),(block,6)), false, 0).
holds(2, in_tower((block,4),(block,7)), false, 0).
holds(2, in_tower((block,4),(block,8)), false, 0).
holds(2, in_tower((block,4),(block,9)), false, 0).
holds(2, in_tower((block,5),(block,1)), false, 0).
holds(2, in_tower((block,5),(block,2)), false, 0).
holds(2, in_tower((block,5),(block,3)), false, 0).
holds(2, in_tower((block,5),(block,4)), false, 0).
holds(2, in_tower((block,5),(block,5)), false, 0).
holds(2, in_tower((block,5),(block,6)), false, 0).
holds(2, in_tower((block,5),(block,7)), false, 0).
holds(2, in_tower((block,5),(block,8)), false, 0).
holds(2, in_tower((block,5),(block,9)), false, 0).
holds(2, in_tower((block,6),(block,1)), false, 0).
holds(2, in_tower((block,6),(block,2)), false, 0).
holds(2, in_tower((block,6),(block,3)), false, 0).
holds(2, in_tower((block,6),(block,4)), false, 0).
holds(2, in_tower((block,6),(block,5)), false, 0).
holds(2, in_tower((block,6),(block,6)), false, 0).
holds(2, in_tower((block,6),(block,7)), false, 0).
holds(2, in_tower((block,6),(block,8)), false, 0).
holds(2, in_tower((block,6),(block,9)), false, 0).
holds(2, in_tower((block,7),(block,1)), false, 0).
holds(2, in_tower((block,7),(block,2)), false, 0).
holds(2, in_tower((block,7),(block,3)), false, 0).
holds(2, in_tower((block,7),(block,4)), false, 0).
holds(2, in_tower((block,7),(block,5)), false, 0).
holds(2, in_tower((block,7),(block,6)), false, 0).
holds(2, in_tower((block,7),(block,7)), true, 0).
holds(2, in_tower((block,7),(block,8)), false, 0).
holds(2, in_tower((block,7),(block,9)), true, 0).
holds(2, in_tower((block,8),(block,1)), false, 0).
holds(2, in_tower((block,8),(block,2)), false, 0).
holds(2, in_tower((block,8),(block,3)), false, 0).
holds(2, in_tower((block,8),(block,4)), false, 0).
holds(2, in_tower((block,8),(block,5)), false, 0).
holds(2, in_tower((block,8),(block,6)), false, 0).
holds(2, in_tower((block,8),(block,7)), false, 0).
holds(2, in_tower((block,8),(block,8)), false, 0).
holds(2, in_tower((block,8),(block,9)), false, 0).
holds(2, in_tower((block,9),(block,1)), false, 0).
holds(2, in_tower((block,9),(block,2)), false, 0).
holds(2, in_tower((block,9),(block,3)), false, 0).
holds(2, in_tower((block,9),(block,4)), false, 0).
holds(2, in_tower((block,9),(block,5)), false, 0).
holds(2, in_tower((block,9),(block,6)), false, 0).
holds(2, in_tower((block,9),(block,7)), false, 0).
holds(2, in_tower((block,9),(block,8)), false, 0).
holds(2, in_tower((block,9),(block,9)), false, 0).
holds(2, on((block,1)), puzzle_room_table, 0).
holds(2, on((block,2)), puzzle_room_table, 0).
holds(2, on((block,3)), (block,1), 0).
holds(2, on((block,4)), nothing, 0).
holds(2, on((block,5)), nothing, 0).
holds(2, on((block,6)), nothing, 0).
holds(2, on((block,7)), puzzle_room_table, 0).
holds(2, on((block,8)), nothing, 0).
holds(2, on((block,9)), (block,7), 0).
holds(2, tower_base((block,1),puzzle_room_table), true, 0).
holds(2, tower_base((block,2),puzzle_room_table), true, 0).
holds(2, tower_base((block,3),puzzle_room_table), false, 0).
holds(2, tower_base((block,4),puzzle_room_table), false, 0).
holds(2, tower_base((block,5),puzzle_room_table), false, 0).
holds(2, tower_base((block,6),puzzle_room_table), false, 0).
holds(2, tower_base((block,7),puzzle_room_table), true, 0).
holds(2, tower_base((block,8),puzzle_room_table), false, 0).
holds(2, tower_base((block,9),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,7),puzzle_room_table), true, 0).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 0).

[18-04-2022_15-46-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[18-04-2022_15-46-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_15-46-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[18-04-2022_15-46-20] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=20']

[18-04-2022_15-46-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 1})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 2})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,store_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_1)', 'V': 'store_room_door_handle_outer', 'I': 3})
SubGoal({'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,store_room_door)', 'F': 'configuration(store_room_door)', 'V': 'open', 'I': 4})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,store_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 5})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,puzzle_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_1)', 'V': 'puzzle_room_door_handle_outer', 'I': 6})
SubGoal({'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,puzzle_room_door)', 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'I': 7})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,puzzle_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 8})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 9})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 10})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 11})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'I': 12})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 13})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'I': 14})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 15})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 16})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 17})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 18})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 19})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,6),puzzle_room_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'I': 20})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 21})

[18-04-2022_15-46-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_15-46-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 21 rules into program part base:

sub_goal(2, talos, move(hallway), in(talos), hallway, 1).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 2).
sub_goal(2, talos, grasp(manipulator_arm_1,store_room_door_handle_outer), grasping(manipulator_arm_1), store_room_door_handle_outer, 3).
sub_goal(2, talos, actuate(manipulator_arm_1,store_room_door), configuration(store_room_door), open, 4).
sub_goal(2, talos, release(manipulator_arm_1,store_room_door_handle_outer), grasping(manipulator_arm_1), nothing, 5).
sub_goal(2, talos, grasp(manipulator_arm_1,puzzle_room_door_handle_outer), grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 6).
sub_goal(2, talos, actuate(manipulator_arm_1,puzzle_room_door), configuration(puzzle_room_door), open, 7).
sub_goal(2, talos, release(manipulator_arm_1,puzzle_room_door_handle_outer), grasping(manipulator_arm_1), nothing, 8).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 9).
sub_goal(2, talos, move(store_room), in(talos), store_room, 10).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 11).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), (block,6), 12).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 13).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), (block,5), 14).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 15).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 16).
sub_goal(2, talos, move(hallway), in(talos), hallway, 17).
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 18).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 19).
sub_goal(2, talos, put(manipulator_arm_1,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 20).
sub_goal(2, talos, release(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), nothing, 21).

[18-04-2022_15-46-20] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_15-46-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[18-04-2022_15-46-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=20']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001D5A00E0820>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=21, step_end_min=21, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1790.6054564000015, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 21, 'sequential', 'false'), range_=None)]

[18-04-2022_15-46-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_15-46-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_15-46-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_15-46-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1290 rules

[18-04-2022_15-46-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006816000000071654s

[18-04-2022_15-46-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[18-04-2022_15-46-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[18-04-2022_15-46-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.041182s.

[18-04-2022_15-46-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007020s with result Satisfiable.

[18-04-2022_15-46-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[18-04-2022_15-46-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001D613811C20>

[18-04-2022_15-46-20] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 0)
	('last_sgoals', 21)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001D5FEA66D00>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001D613811C20>)

[18-04-2022_15-46-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, false). %* None *%
#program optimisation_module(#inc, 0, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, 21, sequential, false). %* None *%

[18-04-2022_15-46-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =     20
Incrementor step ends | Minimum  =     21 : Maximum =    300

[18-04-2022_15-46-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('conformance_module', [Number(0), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('conformance_module', [Number(1), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('conformance_module', [Number(2), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('conformance_module', [Number(3), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('conformance_module', [Number(4), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('conformance_module', [Number(5), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('conformance_module', [Number(6), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('conformance_module', [Number(7), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('conformance_module', [Number(8), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('conformance_module', [Number(9), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('conformance_module', [Number(10), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('conformance_module', [Number(11), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('conformance_module', [Number(12), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('conformance_module', [Number(13), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('conformance_module', [Number(14), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('conformance_module', [Number(15), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('conformance_module', [Number(18), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(19), Number(0)]), ('plan_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('conformance_module', [Number(19), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(20), Number(0)]), ('plan_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 3.184891s.

[18-04-2022_15-46-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 1.518961s with result Unsatisfiable.

[18-04-2022_15-46-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 4.7038525000002664, Incremental time limit = None
Running cumulative time = 4.7038525000002664, Cumulative time limit = 1790.6054564000015
Used memory = (RSS = 2281.433594Mb, VMS = 2300.050781Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     20 : Current =     21
Incrementor step ends | Minimum  =     21 : Maximum =    300

[18-04-2022_15-46-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('state_module', [Number(21), Number(0)]), ('plan_module', [Number(21), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.274535s.

[18-04-2022_15-46-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.065185s with result Unsatisfiable.

[18-04-2022_15-46-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3397205000001122, Incremental time limit = None
Running cumulative time = 5.043573000000379, Cumulative time limit = 1790.6054564000015
Used memory = (RSS = 2288.214844Mb, VMS = 2321.515625Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     21 : Current =     22
Incrementor step ends | Minimum  =     21 : Maximum =    300

[18-04-2022_15-46-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(22)]), ('state_module', [Number(22), Number(0)]), ('plan_module', [Number(22), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.279285s.

[18-04-2022_15-46-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.071132s with result Unsatisfiable.

[18-04-2022_15-46-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3504170000001068, Incremental time limit = None
Running cumulative time = 5.3939900000004855, Cumulative time limit = 1790.6054564000015
Used memory = (RSS = 2291.054688Mb, VMS = 2322.046875Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     22 : Current =     23
Incrementor step ends | Minimum  =     21 : Maximum =    300

[18-04-2022_15-46-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(23)]), ('state_module', [Number(23), Number(0)]), ('plan_module', [Number(23), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('conformance_module', [Number(23), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.281312s.

[18-04-2022_15-46-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.082691s with result Unsatisfiable.

[18-04-2022_15-46-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.36400280000043495, Incremental time limit = None
Running cumulative time = 5.75799280000092, Cumulative time limit = 1790.6054564000015
Used memory = (RSS = 2300.027344Mb, VMS = 2331.574219Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     23 : Current =     24
Incrementor step ends | Minimum  =     21 : Maximum =    300

[18-04-2022_15-46-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(24)]), ('state_module', [Number(24), Number(0)]), ('plan_module', [Number(24), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.286178s.

[18-04-2022_15-46-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.076677s with result Unsatisfiable.

[18-04-2022_15-46-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3628552999994099, Incremental time limit = None
Running cumulative time = 6.12084810000033, Cumulative time limit = 1790.6054564000015
Used memory = (RSS = 2303.039062Mb, VMS = 2332.101562Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     24 : Current =     25
Incrementor step ends | Minimum  =     21 : Maximum =    300

[18-04-2022_15-46-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(25)]), ('state_module', [Number(25), Number(0)]), ('plan_module', [Number(25), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.291771s.

[18-04-2022_15-46-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.086194s with result Unsatisfiable.

[18-04-2022_15-46-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.37796460000026855, Incremental time limit = None
Running cumulative time = 6.498812700000599, Cumulative time limit = 1790.6054564000015
Used memory = (RSS = 2306.210938Mb, VMS = 2332.636719Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     25 : Current =     26
Incrementor step ends | Minimum  =     21 : Maximum =    300

[18-04-2022_15-46-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(26)]), ('state_module', [Number(26), Number(0)]), ('plan_module', [Number(26), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.293827s.

[18-04-2022_15-46-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.106076s with result Unsatisfiable.

[18-04-2022_15-46-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3999029999999948, Incremental time limit = None
Running cumulative time = 6.898715700000594, Cumulative time limit = 1790.6054564000015
Used memory = (RSS = 2309.902344Mb, VMS = 2335.414062Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     26 : Current =     27
Incrementor step ends | Minimum  =     21 : Maximum =    300

[18-04-2022_15-46-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(27)]), ('state_module', [Number(27), Number(0)]), ('plan_module', [Number(27), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('conformance_module', [Number(27), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.302398s.

[18-04-2022_15-46-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.077665s with result Unsatisfiable.

[18-04-2022_15-46-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3800631999997677, Incremental time limit = None
Running cumulative time = 7.278778900000361, Cumulative time limit = 1790.6054564000015
Used memory = (RSS = 2316.250000Mb, VMS = 2339.035156Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     27 : Current =     28
Incrementor step ends | Minimum  =     21 : Maximum =    300

[18-04-2022_15-46-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(28)]), ('state_module', [Number(28), Number(0)]), ('plan_module', [Number(28), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('conformance_module', [Number(28), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.307854s.

[18-04-2022_15-46-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.130224s with result Unsatisfiable.

[18-04-2022_15-46-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.43807710000010047, Incremental time limit = None
Running cumulative time = 7.716856000000462, Cumulative time limit = 1790.6054564000015
Used memory = (RSS = 2319.464844Mb, VMS = 2340.484375Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     28 : Current =     29
Incrementor step ends | Minimum  =     21 : Maximum =    300

[18-04-2022_15-46-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(29)]), ('state_module', [Number(29), Number(0)]), ('plan_module', [Number(29), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.310412s.

[18-04-2022_15-46-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.170936s with result Unsatisfiable.

[18-04-2022_15-46-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4813481999999567, Incremental time limit = None
Running cumulative time = 8.198204200000418, Cumulative time limit = 1790.6054564000015
Used memory = (RSS = 2322.628906Mb, VMS = 2341.113281Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     29 : Current =     30
Incrementor step ends | Minimum  =     21 : Maximum =    300

[18-04-2022_15-46-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(30)]), ('state_module', [Number(30), Number(0)]), ('plan_module', [Number(30), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.313184s.

[18-04-2022_15-46-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.263431s with result Unsatisfiable.

[18-04-2022_15-46-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.576614999999947, Incremental time limit = None
Running cumulative time = 8.774819200000366, Cumulative time limit = 1790.6054564000015
Used memory = (RSS = 2325.992188Mb, VMS = 2373.863281Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     30 : Current =     31
Incrementor step ends | Minimum  =     21 : Maximum =    300

[18-04-2022_15-46-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(31)]), ('state_module', [Number(31), Number(0)]), ('plan_module', [Number(31), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(31), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('conformance_module', [Number(31), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.317785s.

[18-04-2022_15-46-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.216160s with result Unsatisfiable.

[18-04-2022_15-46-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5339451999998346, Incremental time limit = None
Running cumulative time = 9.3087644000002, Cumulative time limit = 1790.6054564000015
Used memory = (RSS = 2330.300781Mb, VMS = 2375.972656Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     31 : Current =     32
Incrementor step ends | Minimum  =     21 : Maximum =    300

[18-04-2022_15-46-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(32)]), ('state_module', [Number(32), Number(0)]), ('plan_module', [Number(32), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(32), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('conformance_module', [Number(32), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.322003s.

[18-04-2022_15-46-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.548181s with result Unsatisfiable.

[18-04-2022_15-46-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.8701842000000397, Incremental time limit = None
Running cumulative time = 10.17894860000024, Cumulative time limit = 1790.6054564000015
Used memory = (RSS = 2335.488281Mb, VMS = 2378.953125Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     32 : Current =     33
Incrementor step ends | Minimum  =     21 : Maximum =    300

[18-04-2022_15-46-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(33)]), ('state_module', [Number(33), Number(0)]), ('plan_module', [Number(33), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(33), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('conformance_module', [Number(33), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.328480s.

[18-04-2022_15-46-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.322754s with result Unsatisfiable.

[18-04-2022_15-46-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.6512339999999313, Incremental time limit = None
Running cumulative time = 10.830182600000171, Cumulative time limit = 1790.6054564000015
Used memory = (RSS = 2338.937500Mb, VMS = 2382.769531Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     33 : Current =     34
Incrementor step ends | Minimum  =     21 : Maximum =    300

[18-04-2022_15-46-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(34)]), ('state_module', [Number(34), Number(0)]), ('plan_module', [Number(34), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(34), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(34)]), ('action_preconditions', [Number(34)]), ('variable_relations', [Number(34)]), ('abstraction_mappings', [Number(34)]), ('conformance_module', [Number(34), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.332590s.

[18-04-2022_15-46-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.784550s with result Unsatisfiable.

[18-04-2022_15-46-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.1171400999996877, Incremental time limit = None
Running cumulative time = 11.947322699999859, Cumulative time limit = 1790.6054564000015
Used memory = (RSS = 2342.714844Mb, VMS = 2384.332031Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     34 : Current =     35
Incrementor step ends | Minimum  =     21 : Maximum =    300

[18-04-2022_15-46-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(35)]), ('state_module', [Number(35), Number(0)]), ('plan_module', [Number(35), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(35), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(35)]), ('action_preconditions', [Number(35)]), ('variable_relations', [Number(35)]), ('abstraction_mappings', [Number(35)]), ('conformance_module', [Number(35), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.339276s.

[18-04-2022_15-46-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.911319s with result Unsatisfiable.

[18-04-2022_15-46-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.2505953999998383, Incremental time limit = None
Running cumulative time = 13.197918099999697, Cumulative time limit = 1790.6054564000015
Used memory = (RSS = 2348.933594Mb, VMS = 2390.382812Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     35 : Current =     36
Incrementor step ends | Minimum  =     21 : Maximum =    300

[18-04-2022_15-46-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(36)]), ('state_module', [Number(36), Number(0)]), ('plan_module', [Number(36), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(36), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('conformance_module', [Number(36), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.339417s.

[18-04-2022_15-46-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.798107s with result Unsatisfiable.

[18-04-2022_15-46-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.137523500000043, Incremental time limit = None
Running cumulative time = 14.33544159999974, Cumulative time limit = 1790.6054564000015
Used memory = (RSS = 2351.843750Mb, VMS = 2391.019531Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =     36 : Current =     37
Incrementor step ends | Minimum  =     21 : Maximum =    300

[18-04-2022_15-46-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(37)]), ('state_module', [Number(37), Number(0)]), ('plan_module', [Number(37), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(37), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(37)]), ('action_preconditions', [Number(37)]), ('variable_relations', [Number(37)]), ('abstraction_mappings', [Number(37)]), ('conformance_module', [Number(37), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.346901s.

[18-04-2022_15-46-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 1.191493s with result Unsatisfiable.

[18-04-2022_15-46-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.538393399999677, Incremental time limit = None
Running cumulative time = 15.873834999999417, Cumulative time limit = 1790.6054564000015
Used memory = (RSS = 2356.058594Mb, VMS = 2392.687500Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [19]:
Running step bounds   | Previous =     37 : Current =     38
Incrementor step ends | Minimum  =     21 : Maximum =    300

[18-04-2022_15-46-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(38)]), ('state_module', [Number(38), Number(0)]), ('plan_module', [Number(38), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(38), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('conformance_module', [Number(38), Number(0), Number(1), Number(21), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.354618s.

[18-04-2022_15-46-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 1.757967s with result Satisfiable.

[18-04-2022_15-46-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [19]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.112585500000023, Incremental time limit = None
Running cumulative time = 17.98642049999944, Cumulative time limit = 1790.6054564000015
Used memory = (RSS = 2367.292969Mb, VMS = 2401.750000Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 8.806718s, Solving = 9.179702s, Total = 17.986420s, Memory = (RSS = 2367.292969Mb, VMS = 2401.750000Mb), Step range = [0-38]), Calls = 19
Final Model :: Total atoms = 35084, Cost = (-1,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[18-04-2022_15-46-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 3.184891s, Solving = 1.518961s, Total = 4.703853s, Memory = (RSS = 2281.433594Mb, VMS = 2300.050781Mb), Step range = [0-20]
2 : Statistics :: Grounding = 0.274535s, Solving = 0.065185s, Total = 0.339721s, Memory = (RSS = 2288.214844Mb, VMS = 2321.515625Mb), Step range = [21-21]
3 : Statistics :: Grounding = 0.279285s, Solving = 0.071132s, Total = 0.350417s, Memory = (RSS = 2291.054688Mb, VMS = 2322.046875Mb), Step range = [22-22]
4 : Statistics :: Grounding = 0.281312s, Solving = 0.082691s, Total = 0.364003s, Memory = (RSS = 2300.027344Mb, VMS = 2331.574219Mb), Step range = [23-23]
5 : Statistics :: Grounding = 0.286178s, Solving = 0.076677s, Total = 0.362855s, Memory = (RSS = 2303.039062Mb, VMS = 2332.101562Mb), Step range = [24-24]
6 : Statistics :: Grounding = 0.291771s, Solving = 0.086194s, Total = 0.377965s, Memory = (RSS = 2306.210938Mb, VMS = 2332.636719Mb), Step range = [25-25]
7 : Statistics :: Grounding = 0.293827s, Solving = 0.106076s, Total = 0.399903s, Memory = (RSS = 2309.902344Mb, VMS = 2335.414062Mb), Step range = [26-26]
8 : Statistics :: Grounding = 0.302398s, Solving = 0.077665s, Total = 0.380063s, Memory = (RSS = 2316.250000Mb, VMS = 2339.035156Mb), Step range = [27-27]
9 : Statistics :: Grounding = 0.307854s, Solving = 0.130224s, Total = 0.438077s, Memory = (RSS = 2319.464844Mb, VMS = 2340.484375Mb), Step range = [28-28]
10 : Statistics :: Grounding = 0.310412s, Solving = 0.170936s, Total = 0.481348s, Memory = (RSS = 2322.628906Mb, VMS = 2341.113281Mb), Step range = [29-29]
11 : Statistics :: Grounding = 0.313184s, Solving = 0.263431s, Total = 0.576615s, Memory = (RSS = 2325.992188Mb, VMS = 2373.863281Mb), Step range = [30-30]
12 : Statistics :: Grounding = 0.317785s, Solving = 0.216160s, Total = 0.533945s, Memory = (RSS = 2330.300781Mb, VMS = 2375.972656Mb), Step range = [31-31]
13 : Statistics :: Grounding = 0.322003s, Solving = 0.548181s, Total = 0.870184s, Memory = (RSS = 2335.488281Mb, VMS = 2378.953125Mb), Step range = [32-32]
14 : Statistics :: Grounding = 0.328480s, Solving = 0.322754s, Total = 0.651234s, Memory = (RSS = 2338.937500Mb, VMS = 2382.769531Mb), Step range = [33-33]
15 : Statistics :: Grounding = 0.332590s, Solving = 0.784550s, Total = 1.117140s, Memory = (RSS = 2342.714844Mb, VMS = 2384.332031Mb), Step range = [34-34]
16 : Statistics :: Grounding = 0.339276s, Solving = 0.911319s, Total = 1.250595s, Memory = (RSS = 2348.933594Mb, VMS = 2390.382812Mb), Step range = [35-35]
17 : Statistics :: Grounding = 0.339417s, Solving = 0.798107s, Total = 1.137524s, Memory = (RSS = 2351.843750Mb, VMS = 2391.019531Mb), Step range = [36-36]
18 : Statistics :: Grounding = 0.346901s, Solving = 1.191493s, Total = 1.538393s, Memory = (RSS = 2356.058594Mb, VMS = 2392.687500Mb), Step range = [37-37]
19 : Statistics :: Grounding = 0.354618s, Solving = 1.757967s, Total = 2.112586s, Memory = (RSS = 2367.292969Mb, VMS = 2401.750000Mb), Step range = [38-38]

[18-04-2022_15-46-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 17.986420s due to: Stop condition reached.

[18-04-2022_15-46-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[18-04-2022_15-46-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[18-04-2022_15-46-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_15-46-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_15-46-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[18-04-2022_15-46-40] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 6, 9: 7, 10: 7, 11: 7, 12: 7, 13: 8}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 6, 6: 8, 7: 12, 8: 13}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_15-46-40] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 13, 27: 14, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 26, 14: 28, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 6, 9: 7, 10: 7, 11: 7, 12: 7, 13: 8}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 6, 6: 8, 7: 12, 8: 13}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_15-46-40] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 21, Last requested goal index = 21, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[18-04-2022_15-46-40] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 8.806718s, Solving = 9.179702s, Total = 17.986420s, Memory = (RSS = 2367.292969Mb, VMS = 2401.750000Mb), Step range = [0-38]), Calls = 19
Model :: Total atoms = 35084, Cost = (-1,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[18-04-2022_15-46-40] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 38 :: Actions = 38                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 25:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 26:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 27:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 28:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 29:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 30:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : move((store_room,1))
Step 31:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 37:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 38:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))

[18-04-2022_15-46-40] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[18-04-2022_15-46-40] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[18-04-2022_15-46-40] DEBUG :: ASH Planner Main #1 >> Monolevel problem 1 at level 1 solved.

[18-04-2022_15-46-40] DEBUG :: ASH Planner Main #1 >> Online planning increment 1 finished.

[18-04-2022_15-46-40] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 17 : Goals achieved = 8 : Goals unachieved = 9 : Complete = False
Level = 2 : Solved problems = 1 : Total constraining sub-goal stages = 13 : Goals achieved = 6 : Goals unachieved = 7 : Complete = False
Level = 1 : Solved problems = 1 : Total constraining sub-goal stages = 21 : Goals achieved = 21 : Goals unachieved = 0 : Complete = False

[18-04-2022_15-46-40] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 2, Highest = 3.

[18-04-2022_15-46-40] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 2 by method ground-first is [1-2].

[18-04-2022_15-46-40] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning problem 2 at level 2:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 13, Sub-goal Stage Range = [1-13]
Division points [total=1] : [(Index = 6, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[18-04-2022_15-46-40] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [7-13]

[18-04-2022_15-46-40] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 21, chosen step range to extract = range(0, 22)

[18-04-2022_15-46-40] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 13, Total actions = 13, Produced sub-goal stages = 13, Produced sub-goal literals = 13
Level [2]: Length = 21, Total actions = 21, Produced sub-goal stages = 21, Produced sub-goal literals = 21
Level [1]: Length = 38, Total actions = 38, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-40] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 13, chosen step range to extract = range(0, 14)

[18-04-2022_15-46-40] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 13, Total actions = 13, Produced sub-goal stages = 13, Produced sub-goal literals = 13
Level [2]: Length = 21, Total actions = 21, Produced sub-goal stages = 21, Produced sub-goal literals = 21
Level [1]: Length = 38, Total actions = 38, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-40] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[18-04-2022_15-46-40] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 13, Total actions = 13, Produced sub-goal stages = 13, Produced sub-goal literals = 13
Level [2]: Length = 21, Total actions = 21, Produced sub-goal stages = 21, Produced sub-goal literals = 21
Level [1]: Length = 38, Total actions = 38, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-40] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [7-13], problem number = 2, increment number = 2

[18-04-2022_15-46-40] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 7)
	('last_sgoals', 13)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001D5FEA66D00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1790.6054564000015)
	('length_limit', 300)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[18-04-2022_15-46-40] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 2] partial conformance refinement (sequential) with sgoals range [7-13] : Concurrency disabled : Minimum search length bound enabled with value 27

[18-04-2022_15-46-40] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 7
last_sgoals = 13
start_step = 21
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 27

[18-04-2022_15-46-40] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[18-04-2022_15-46-40] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[18-04-2022_15-46-40] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[18-04-2022_15-46-40] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[18-04-2022_15-46-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[18-04-2022_15-46-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[18-04-2022_15-46-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_15-46-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_15-46-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_15-46-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_15-46-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[18-04-2022_15-46-40] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_15-46-40] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 21 as problem start state.

[18-04-2022_15-46-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 21})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 21})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 21})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 21})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 21})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 21})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 21})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 21})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'store_room', 'S': 21})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 21})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 21})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 21})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 21})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 21})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 21})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 21})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 21})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 21})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 21})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 21})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 21})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 21})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 21})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 21})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 21})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 21})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 21})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 3, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 3, 'F': 'in((block,8))', 'V': 'store_room', 'S': 21})
Fluent({'L': 3, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 21})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 21})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 21})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 21})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 21})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 21})
Fluent({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 21})
Fluent({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'S': 21})
Fluent({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 21})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 21})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 21})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 21})
Fluent({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 21})
Fluent({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 21})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 21})
Fluent({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 21})

[18-04-2022_15-46-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_15-46-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 257 rules into program part ash_initial_state:

holds(2, complete_tower(blue,puzzle_room_table), false, 21).
holds(2, complete_tower(red,puzzle_room_table), false, 21).
holds(2, complete_tower(yellow,puzzle_room_table), false, 21).
holds(2, configuration(manipulator_arm_1), extended, 21).
holds(2, configuration(manipulator_arm_2), retracted, 21).
holds(2, configuration(puzzle_room_door), open, 21).
holds(2, configuration(starting_room_door), closed, 21).
holds(2, configuration(store_room_door), open, 21).
holds(2, grasping(manipulator_arm_1), nothing, 21).
holds(2, grasping(manipulator_arm_2), (block,5), 21).
holds(2, in((block,1)), puzzle_room, 21).
holds(2, in((block,2)), puzzle_room, 21).
holds(2, in((block,3)), puzzle_room, 21).
holds(2, in((block,4)), store_room, 21).
holds(2, in((block,5)), puzzle_room, 21).
holds(2, in((block,6)), puzzle_room, 21).
holds(2, in((block,7)), puzzle_room, 21).
holds(2, in((block,8)), store_room, 21).
holds(2, in((block,9)), puzzle_room, 21).
holds(2, in(manipulator_arm_1), puzzle_room, 21).
holds(2, in(manipulator_arm_2), puzzle_room, 21).
holds(2, in(puzzle_room_table), puzzle_room, 21).
holds(2, in(talos), puzzle_room, 21).
holds(2, in_tower((block,1),(block,1)), true, 21).
holds(2, in_tower((block,1),(block,2)), false, 21).
holds(2, in_tower((block,1),(block,3)), true, 21).
holds(2, in_tower((block,1),(block,4)), false, 21).
holds(2, in_tower((block,1),(block,5)), false, 21).
holds(2, in_tower((block,1),(block,6)), false, 21).
holds(2, in_tower((block,1),(block,7)), false, 21).
holds(2, in_tower((block,1),(block,8)), false, 21).
holds(2, in_tower((block,1),(block,9)), false, 21).
holds(2, in_tower((block,2),(block,1)), false, 21).
holds(2, in_tower((block,2),(block,2)), true, 21).
holds(2, in_tower((block,2),(block,3)), false, 21).
holds(2, in_tower((block,2),(block,4)), false, 21).
holds(2, in_tower((block,2),(block,5)), false, 21).
holds(2, in_tower((block,2),(block,6)), false, 21).
holds(2, in_tower((block,2),(block,7)), false, 21).
holds(2, in_tower((block,2),(block,8)), false, 21).
holds(2, in_tower((block,2),(block,9)), false, 21).
holds(2, in_tower((block,3),(block,1)), false, 21).
holds(2, in_tower((block,3),(block,2)), false, 21).
holds(2, in_tower((block,3),(block,3)), false, 21).
holds(2, in_tower((block,3),(block,4)), false, 21).
holds(2, in_tower((block,3),(block,5)), false, 21).
holds(2, in_tower((block,3),(block,6)), false, 21).
holds(2, in_tower((block,3),(block,7)), false, 21).
holds(2, in_tower((block,3),(block,8)), false, 21).
holds(2, in_tower((block,3),(block,9)), false, 21).
holds(2, in_tower((block,4),(block,1)), false, 21).
holds(2, in_tower((block,4),(block,2)), false, 21).
holds(2, in_tower((block,4),(block,3)), false, 21).
holds(2, in_tower((block,4),(block,4)), false, 21).
holds(2, in_tower((block,4),(block,5)), false, 21).
holds(2, in_tower((block,4),(block,6)), false, 21).
holds(2, in_tower((block,4),(block,7)), false, 21).
holds(2, in_tower((block,4),(block,8)), false, 21).
holds(2, in_tower((block,4),(block,9)), false, 21).
holds(2, in_tower((block,5),(block,1)), false, 21).
holds(2, in_tower((block,5),(block,2)), false, 21).
holds(2, in_tower((block,5),(block,3)), false, 21).
holds(2, in_tower((block,5),(block,4)), false, 21).
holds(2, in_tower((block,5),(block,5)), false, 21).
holds(2, in_tower((block,5),(block,6)), false, 21).
holds(2, in_tower((block,5),(block,7)), false, 21).
holds(2, in_tower((block,5),(block,8)), false, 21).
holds(2, in_tower((block,5),(block,9)), false, 21).
holds(2, in_tower((block,6),(block,1)), false, 21).
holds(2, in_tower((block,6),(block,2)), false, 21).
holds(2, in_tower((block,6),(block,3)), false, 21).
holds(2, in_tower((block,6),(block,4)), false, 21).
holds(2, in_tower((block,6),(block,5)), false, 21).
holds(2, in_tower((block,6),(block,6)), true, 21).
holds(2, in_tower((block,6),(block,7)), false, 21).
holds(2, in_tower((block,6),(block,8)), false, 21).
holds(2, in_tower((block,6),(block,9)), false, 21).
holds(2, in_tower((block,7),(block,1)), false, 21).
holds(2, in_tower((block,7),(block,2)), false, 21).
holds(2, in_tower((block,7),(block,3)), false, 21).
holds(2, in_tower((block,7),(block,4)), false, 21).
holds(2, in_tower((block,7),(block,5)), false, 21).
holds(2, in_tower((block,7),(block,6)), false, 21).
holds(2, in_tower((block,7),(block,7)), true, 21).
holds(2, in_tower((block,7),(block,8)), false, 21).
holds(2, in_tower((block,7),(block,9)), true, 21).
holds(2, in_tower((block,8),(block,1)), false, 21).
holds(2, in_tower((block,8),(block,2)), false, 21).
holds(2, in_tower((block,8),(block,3)), false, 21).
holds(2, in_tower((block,8),(block,4)), false, 21).
holds(2, in_tower((block,8),(block,5)), false, 21).
holds(2, in_tower((block,8),(block,6)), false, 21).
holds(2, in_tower((block,8),(block,7)), false, 21).
holds(2, in_tower((block,8),(block,8)), false, 21).
holds(2, in_tower((block,8),(block,9)), false, 21).
holds(2, in_tower((block,9),(block,1)), false, 21).
holds(2, in_tower((block,9),(block,2)), false, 21).
holds(2, in_tower((block,9),(block,3)), false, 21).
holds(2, in_tower((block,9),(block,4)), false, 21).
holds(2, in_tower((block,9),(block,5)), false, 21).
holds(2, in_tower((block,9),(block,6)), false, 21).
holds(2, in_tower((block,9),(block,7)), false, 21).
holds(2, in_tower((block,9),(block,8)), false, 21).
holds(2, in_tower((block,9),(block,9)), false, 21).
holds(2, on((block,1)), puzzle_room_table, 21).
holds(2, on((block,2)), puzzle_room_table, 21).
holds(2, on((block,3)), (block,1), 21).
holds(2, on((block,4)), nothing, 21).
holds(2, on((block,5)), nothing, 21).
holds(2, on((block,6)), puzzle_room_table, 21).
holds(2, on((block,7)), puzzle_room_table, 21).
holds(2, on((block,8)), nothing, 21).
holds(2, on((block,9)), (block,7), 21).
holds(2, tower_base((block,1),puzzle_room_table), true, 21).
holds(2, tower_base((block,2),puzzle_room_table), true, 21).
holds(2, tower_base((block,3),puzzle_room_table), false, 21).
holds(2, tower_base((block,4),puzzle_room_table), false, 21).
holds(2, tower_base((block,5),puzzle_room_table), false, 21).
holds(2, tower_base((block,6),puzzle_room_table), true, 21).
holds(2, tower_base((block,7),puzzle_room_table), true, 21).
holds(2, tower_base((block,8),puzzle_room_table), false, 21).
holds(2, tower_base((block,9),puzzle_room_table), false, 21).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 21).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 21).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 21).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 21).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 21).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 21).
holds(2, unordered_tower((block,7),puzzle_room_table), true, 21).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 21).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 21).
holds(3, complete_tower(blue,puzzle_room_table), false, 21).
holds(3, complete_tower(red,puzzle_room_table), false, 21).
holds(3, complete_tower(yellow,puzzle_room_table), false, 21).
holds(3, grasping(manipulator_arm_1), nothing, 21).
holds(3, grasping(manipulator_arm_2), (block,5), 21).
holds(3, in((block,1)), puzzle_room, 21).
holds(3, in((block,2)), puzzle_room, 21).
holds(3, in((block,3)), puzzle_room, 21).
holds(3, in((block,4)), store_room, 21).
holds(3, in((block,5)), puzzle_room, 21).
holds(3, in((block,6)), puzzle_room, 21).
holds(3, in((block,7)), puzzle_room, 21).
holds(3, in((block,8)), store_room, 21).
holds(3, in((block,9)), puzzle_room, 21).
holds(3, in(manipulator_arm_1), puzzle_room, 21).
holds(3, in(manipulator_arm_2), puzzle_room, 21).
holds(3, in(puzzle_room_table), puzzle_room, 21).
holds(3, in(talos), puzzle_room, 21).
holds(3, in_tower((block,1),(block,1)), true, 21).
holds(3, in_tower((block,1),(block,2)), false, 21).
holds(3, in_tower((block,1),(block,3)), true, 21).
holds(3, in_tower((block,1),(block,4)), false, 21).
holds(3, in_tower((block,1),(block,5)), false, 21).
holds(3, in_tower((block,1),(block,6)), false, 21).
holds(3, in_tower((block,1),(block,7)), false, 21).
holds(3, in_tower((block,1),(block,8)), false, 21).
holds(3, in_tower((block,1),(block,9)), false, 21).
holds(3, in_tower((block,2),(block,1)), false, 21).
holds(3, in_tower((block,2),(block,2)), true, 21).
holds(3, in_tower((block,2),(block,3)), false, 21).
holds(3, in_tower((block,2),(block,4)), false, 21).
holds(3, in_tower((block,2),(block,5)), false, 21).
holds(3, in_tower((block,2),(block,6)), false, 21).
holds(3, in_tower((block,2),(block,7)), false, 21).
holds(3, in_tower((block,2),(block,8)), false, 21).
holds(3, in_tower((block,2),(block,9)), false, 21).
holds(3, in_tower((block,3),(block,1)), false, 21).
holds(3, in_tower((block,3),(block,2)), false, 21).
holds(3, in_tower((block,3),(block,3)), false, 21).
holds(3, in_tower((block,3),(block,4)), false, 21).
holds(3, in_tower((block,3),(block,5)), false, 21).
holds(3, in_tower((block,3),(block,6)), false, 21).
holds(3, in_tower((block,3),(block,7)), false, 21).
holds(3, in_tower((block,3),(block,8)), false, 21).
holds(3, in_tower((block,3),(block,9)), false, 21).
holds(3, in_tower((block,4),(block,1)), false, 21).
holds(3, in_tower((block,4),(block,2)), false, 21).
holds(3, in_tower((block,4),(block,3)), false, 21).
holds(3, in_tower((block,4),(block,4)), false, 21).
holds(3, in_tower((block,4),(block,5)), false, 21).
holds(3, in_tower((block,4),(block,6)), false, 21).
holds(3, in_tower((block,4),(block,7)), false, 21).
holds(3, in_tower((block,4),(block,8)), false, 21).
holds(3, in_tower((block,4),(block,9)), false, 21).
holds(3, in_tower((block,5),(block,1)), false, 21).
holds(3, in_tower((block,5),(block,2)), false, 21).
holds(3, in_tower((block,5),(block,3)), false, 21).
holds(3, in_tower((block,5),(block,4)), false, 21).
holds(3, in_tower((block,5),(block,5)), false, 21).
holds(3, in_tower((block,5),(block,6)), false, 21).
holds(3, in_tower((block,5),(block,7)), false, 21).
holds(3, in_tower((block,5),(block,8)), false, 21).
holds(3, in_tower((block,5),(block,9)), false, 21).
holds(3, in_tower((block,6),(block,1)), false, 21).
holds(3, in_tower((block,6),(block,2)), false, 21).
holds(3, in_tower((block,6),(block,3)), false, 21).
holds(3, in_tower((block,6),(block,4)), false, 21).
holds(3, in_tower((block,6),(block,5)), false, 21).
holds(3, in_tower((block,6),(block,6)), true, 21).
holds(3, in_tower((block,6),(block,7)), false, 21).
holds(3, in_tower((block,6),(block,8)), false, 21).
holds(3, in_tower((block,6),(block,9)), false, 21).
holds(3, in_tower((block,7),(block,1)), false, 21).
holds(3, in_tower((block,7),(block,2)), false, 21).
holds(3, in_tower((block,7),(block,3)), false, 21).
holds(3, in_tower((block,7),(block,4)), false, 21).
holds(3, in_tower((block,7),(block,5)), false, 21).
holds(3, in_tower((block,7),(block,6)), false, 21).
holds(3, in_tower((block,7),(block,7)), true, 21).
holds(3, in_tower((block,7),(block,8)), false, 21).
holds(3, in_tower((block,7),(block,9)), true, 21).
holds(3, in_tower((block,8),(block,1)), false, 21).
holds(3, in_tower((block,8),(block,2)), false, 21).
holds(3, in_tower((block,8),(block,3)), false, 21).
holds(3, in_tower((block,8),(block,4)), false, 21).
holds(3, in_tower((block,8),(block,5)), false, 21).
holds(3, in_tower((block,8),(block,6)), false, 21).
holds(3, in_tower((block,8),(block,7)), false, 21).
holds(3, in_tower((block,8),(block,8)), false, 21).
holds(3, in_tower((block,8),(block,9)), false, 21).
holds(3, in_tower((block,9),(block,1)), false, 21).
holds(3, in_tower((block,9),(block,2)), false, 21).
holds(3, in_tower((block,9),(block,3)), false, 21).
holds(3, in_tower((block,9),(block,4)), false, 21).
holds(3, in_tower((block,9),(block,5)), false, 21).
holds(3, in_tower((block,9),(block,6)), false, 21).
holds(3, in_tower((block,9),(block,7)), false, 21).
holds(3, in_tower((block,9),(block,8)), false, 21).
holds(3, in_tower((block,9),(block,9)), false, 21).
holds(3, on((block,1)), puzzle_room_table, 21).
holds(3, on((block,2)), puzzle_room_table, 21).
holds(3, on((block,3)), (block,1), 21).
holds(3, on((block,4)), nothing, 21).
holds(3, on((block,5)), nothing, 21).
holds(3, on((block,6)), puzzle_room_table, 21).
holds(3, on((block,7)), puzzle_room_table, 21).
holds(3, on((block,8)), nothing, 21).
holds(3, on((block,9)), (block,7), 21).
holds(3, tower_base((block,1),puzzle_room_table), true, 21).
holds(3, tower_base((block,2),puzzle_room_table), true, 21).
holds(3, tower_base((block,3),puzzle_room_table), false, 21).
holds(3, tower_base((block,4),puzzle_room_table), false, 21).
holds(3, tower_base((block,5),puzzle_room_table), false, 21).
holds(3, tower_base((block,6),puzzle_room_table), true, 21).
holds(3, tower_base((block,7),puzzle_room_table), true, 21).
holds(3, tower_base((block,8),puzzle_room_table), false, 21).
holds(3, tower_base((block,9),puzzle_room_table), false, 21).
holds(3, unordered_tower((block,1),puzzle_room_table), true, 21).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 21).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 21).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 21).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 21).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 21).
holds(3, unordered_tower((block,7),puzzle_room_table), true, 21).
holds(3, unordered_tower((block,8),puzzle_room_table), false, 21).
holds(3, unordered_tower((block,9),puzzle_room_table), false, 21).

[18-04-2022_15-46-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[18-04-2022_15-46-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_15-46-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 588 rules into program part ash_goal_state:

final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(3, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,1),(block,7)), false, true).
final_goal(3, in_tower((block,1),(block,7)), true, false).
final_goal(3, in_tower((block,1),(block,8)), false, true).
final_goal(3, in_tower((block,1),(block,8)), true, false).
final_goal(3, in_tower((block,1),(block,9)), false, true).
final_goal(3, in_tower((block,1),(block,9)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,7)), false, true).
final_goal(3, in_tower((block,2),(block,7)), true, false).
final_goal(3, in_tower((block,2),(block,8)), false, true).
final_goal(3, in_tower((block,2),(block,8)), true, false).
final_goal(3, in_tower((block,2),(block,9)), false, true).
final_goal(3, in_tower((block,2),(block,9)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,7)), false, true).
final_goal(3, in_tower((block,3),(block,7)), true, false).
final_goal(3, in_tower((block,3),(block,8)), false, true).
final_goal(3, in_tower((block,3),(block,8)), true, false).
final_goal(3, in_tower((block,3),(block,9)), false, true).
final_goal(3, in_tower((block,3),(block,9)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,7)), false, true).
final_goal(3, in_tower((block,4),(block,7)), true, false).
final_goal(3, in_tower((block,4),(block,8)), false, true).
final_goal(3, in_tower((block,4),(block,8)), true, false).
final_goal(3, in_tower((block,4),(block,9)), false, true).
final_goal(3, in_tower((block,4),(block,9)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,7)), false, true).
final_goal(3, in_tower((block,5),(block,7)), true, false).
final_goal(3, in_tower((block,5),(block,8)), false, true).
final_goal(3, in_tower((block,5),(block,8)), true, false).
final_goal(3, in_tower((block,5),(block,9)), false, true).
final_goal(3, in_tower((block,5),(block,9)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, in_tower((block,6),(block,7)), false, true).
final_goal(3, in_tower((block,6),(block,7)), true, false).
final_goal(3, in_tower((block,6),(block,8)), false, true).
final_goal(3, in_tower((block,6),(block,8)), true, false).
final_goal(3, in_tower((block,6),(block,9)), false, true).
final_goal(3, in_tower((block,6),(block,9)), true, false).
final_goal(3, in_tower((block,7),(block,1)), false, true).
final_goal(3, in_tower((block,7),(block,1)), true, false).
final_goal(3, in_tower((block,7),(block,2)), false, true).
final_goal(3, in_tower((block,7),(block,2)), true, false).
final_goal(3, in_tower((block,7),(block,3)), false, true).
final_goal(3, in_tower((block,7),(block,3)), true, false).
final_goal(3, in_tower((block,7),(block,4)), false, true).
final_goal(3, in_tower((block,7),(block,4)), true, false).
final_goal(3, in_tower((block,7),(block,5)), false, true).
final_goal(3, in_tower((block,7),(block,5)), true, false).
final_goal(3, in_tower((block,7),(block,6)), false, true).
final_goal(3, in_tower((block,7),(block,6)), true, false).
final_goal(3, in_tower((block,7),(block,7)), false, true).
final_goal(3, in_tower((block,7),(block,7)), true, false).
final_goal(3, in_tower((block,7),(block,8)), false, true).
final_goal(3, in_tower((block,7),(block,8)), true, false).
final_goal(3, in_tower((block,7),(block,9)), false, true).
final_goal(3, in_tower((block,7),(block,9)), true, false).
final_goal(3, in_tower((block,8),(block,1)), false, true).
final_goal(3, in_tower((block,8),(block,1)), true, false).
final_goal(3, in_tower((block,8),(block,2)), false, true).
final_goal(3, in_tower((block,8),(block,2)), true, false).
final_goal(3, in_tower((block,8),(block,3)), false, true).
final_goal(3, in_tower((block,8),(block,3)), true, false).
final_goal(3, in_tower((block,8),(block,4)), false, true).
final_goal(3, in_tower((block,8),(block,4)), true, false).
final_goal(3, in_tower((block,8),(block,5)), false, true).
final_goal(3, in_tower((block,8),(block,5)), true, false).
final_goal(3, in_tower((block,8),(block,6)), false, true).
final_goal(3, in_tower((block,8),(block,6)), true, false).
final_goal(3, in_tower((block,8),(block,7)), false, true).
final_goal(3, in_tower((block,8),(block,7)), true, false).
final_goal(3, in_tower((block,8),(block,8)), false, true).
final_goal(3, in_tower((block,8),(block,8)), true, false).
final_goal(3, in_tower((block,8),(block,9)), false, true).
final_goal(3, in_tower((block,8),(block,9)), true, false).
final_goal(3, in_tower((block,9),(block,1)), false, true).
final_goal(3, in_tower((block,9),(block,1)), true, false).
final_goal(3, in_tower((block,9),(block,2)), false, true).
final_goal(3, in_tower((block,9),(block,2)), true, false).
final_goal(3, in_tower((block,9),(block,3)), false, true).
final_goal(3, in_tower((block,9),(block,3)), true, false).
final_goal(3, in_tower((block,9),(block,4)), false, true).
final_goal(3, in_tower((block,9),(block,4)), true, false).
final_goal(3, in_tower((block,9),(block,5)), false, true).
final_goal(3, in_tower((block,9),(block,5)), true, false).
final_goal(3, in_tower((block,9),(block,6)), false, true).
final_goal(3, in_tower((block,9),(block,6)), true, false).
final_goal(3, in_tower((block,9),(block,7)), false, false).
final_goal(3, in_tower((block,9),(block,7)), true, true).
final_goal(3, in_tower((block,9),(block,8)), false, false).
final_goal(3, in_tower((block,9),(block,8)), true, true).
final_goal(3, in_tower((block,9),(block,9)), false, false).
final_goal(3, in_tower((block,9),(block,9)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), (block,7), false).
final_goal(3, on((block,1)), (block,8), false).
final_goal(3, on((block,1)), (block,9), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), (block,7), false).
final_goal(3, on((block,2)), (block,8), false).
final_goal(3, on((block,2)), (block,9), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), (block,7), false).
final_goal(3, on((block,3)), (block,8), false).
final_goal(3, on((block,3)), (block,9), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), (block,7), false).
final_goal(3, on((block,4)), (block,8), false).
final_goal(3, on((block,4)), (block,9), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), (block,7), false).
final_goal(3, on((block,5)), (block,8), false).
final_goal(3, on((block,5)), (block,9), false).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), (block,7), false).
final_goal(3, on((block,6)), (block,8), false).
final_goal(3, on((block,6)), (block,9), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, on((block,7)), (block,1), false).
final_goal(3, on((block,7)), (block,2), false).
final_goal(3, on((block,7)), (block,3), false).
final_goal(3, on((block,7)), (block,4), false).
final_goal(3, on((block,7)), (block,5), false).
final_goal(3, on((block,7)), (block,6), false).
final_goal(3, on((block,7)), (block,8), true).
final_goal(3, on((block,7)), (block,9), false).
final_goal(3, on((block,7)), nothing, false).
final_goal(3, on((block,7)), puzzle_room_table, false).
final_goal(3, on((block,8)), (block,1), false).
final_goal(3, on((block,8)), (block,2), false).
final_goal(3, on((block,8)), (block,3), false).
final_goal(3, on((block,8)), (block,4), false).
final_goal(3, on((block,8)), (block,5), false).
final_goal(3, on((block,8)), (block,6), false).
final_goal(3, on((block,8)), (block,7), false).
final_goal(3, on((block,8)), (block,9), true).
final_goal(3, on((block,8)), nothing, false).
final_goal(3, on((block,8)), puzzle_room_table, false).
final_goal(3, on((block,9)), (block,1), false).
final_goal(3, on((block,9)), (block,2), false).
final_goal(3, on((block,9)), (block,3), false).
final_goal(3, on((block,9)), (block,4), false).
final_goal(3, on((block,9)), (block,5), false).
final_goal(3, on((block,9)), (block,6), false).
final_goal(3, on((block,9)), (block,7), false).
final_goal(3, on((block,9)), (block,8), false).
final_goal(3, on((block,9)), nothing, false).
final_goal(3, on((block,9)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, tower_base((block,7),puzzle_room_table), false, true).
final_goal(3, tower_base((block,7),puzzle_room_table), true, false).
final_goal(3, tower_base((block,8),puzzle_room_table), false, true).
final_goal(3, tower_base((block,8),puzzle_room_table), true, false).
final_goal(3, tower_base((block,9),puzzle_room_table), false, false).
final_goal(3, tower_base((block,9),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,9),puzzle_room_table), true, false).

[18-04-2022_15-46-40] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=27']

[18-04-2022_15-46-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 7})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 8})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'I': 9})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,9))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,9)', 'I': 10})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 11})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,9),puzzle_room_table)', 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'I': 12})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 13})

[18-04-2022_15-46-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_15-46-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 7 rules into program part base:

sub_goal(3, talos, put(manipulator_arm_2,(block,5),(block,6)), on((block,5)), (block,6), 7).
sub_goal(3, talos, release(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), nothing, 8).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 9).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,9)), grasping(manipulator_arm_2), (block,9), 10).
sub_goal(3, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 11).
sub_goal(3, talos, put(manipulator_arm_2,(block,9),puzzle_room_table), on((block,9)), puzzle_room_table, 12).
sub_goal(3, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 13).

[18-04-2022_15-46-40] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_15-46-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[18-04-2022_15-46-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=27']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001D5A00E0550>]
	incrementor = SolveIncrementor(step_start=21, step_increase=1, step_increase_initial=7, step_end_min=28, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1790.6054564000015, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 21), range_=None), IncPart(name='plan_module', args=('#inc', 21, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 21, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 21, 7, 13, 'sequential', 'false'), range_=None)]

[18-04-2022_15-46-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_15-46-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_15-46-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_15-46-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1242 rules

[18-04-2022_15-46-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006519000000025699s

[18-04-2022_15-46-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[18-04-2022_15-46-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[18-04-2022_15-46-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.034384s.

[18-04-2022_15-46-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006923s with result Satisfiable.

[18-04-2022_15-46-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[18-04-2022_15-46-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001D6135C4B80>

[18-04-2022_15-46-40] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 2)
	('start_step', 21)
	('last_sgoals', 13)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001D5FEA66D00>)
	('first_sgoals', 7)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001D6135C4B80>)

[18-04-2022_15-46-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 21). %* None *%
#program plan_module(#inc, 21, false, false). %* None *%
#program optimisation_module(#inc, 21, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 21, 7, 13, sequential, false). %* None *%

[18-04-2022_15-46-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     20 : Current =     27
Incrementor step ends | Minimum  =     28 : Maximum =    300

[18-04-2022_15-46-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(27)]), ('state_module', [Number(21), Number(21)]), ('plan_module', [Number(21), Number(21), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(21), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(21), Number(7), Number(13), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(22), Number(21)]), ('plan_module', [Number(22), Number(21), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(21), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(21), Number(7), Number(13), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(23), Number(21)]), ('plan_module', [Number(23), Number(21), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(21), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('conformance_module', [Number(23), Number(21), Number(7), Number(13), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(24), Number(21)]), ('plan_module', [Number(24), Number(21), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(21), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(21), Number(7), Number(13), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(25), Number(21)]), ('plan_module', [Number(25), Number(21), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(21), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(21), Number(7), Number(13), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(26), Number(21)]), ('plan_module', [Number(26), Number(21), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(21), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(21), Number(7), Number(13), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(27), Number(21)]), ('plan_module', [Number(27), Number(21), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(21), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('conformance_module', [Number(27), Number(21), Number(7), Number(13), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.551717s.

[18-04-2022_15-46-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.221839s with result Unsatisfiable.

[18-04-2022_15-46-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.7735566000001199, Incremental time limit = None
Running cumulative time = 0.7735566000001199, Cumulative time limit = 1790.6054564000015
Used memory = (RSS = 2210.718750Mb, VMS = 2225.554688Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     27 : Current =     28
Incrementor step ends | Minimum  =     28 : Maximum =    300

[18-04-2022_15-46-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(28)]), ('state_module', [Number(28), Number(21)]), ('plan_module', [Number(28), Number(21), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(21), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('conformance_module', [Number(28), Number(21), Number(7), Number(13), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.139227s.

[18-04-2022_15-46-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.027092s with result Unsatisfiable.

[18-04-2022_15-46-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.16631889999962368, Incremental time limit = None
Running cumulative time = 0.9398754999997436, Cumulative time limit = 1790.6054564000015
Used memory = (RSS = 2212.617188Mb, VMS = 2228.687500Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     28 : Current =     29
Incrementor step ends | Minimum  =     28 : Maximum =    300

[18-04-2022_15-46-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(29)]), ('state_module', [Number(29), Number(21)]), ('plan_module', [Number(29), Number(21), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(21), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(21), Number(7), Number(13), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.142277s.

[18-04-2022_15-46-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.039739s with result Satisfiable.

[18-04-2022_15-46-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.18201670000007653, Incremental time limit = None
Running cumulative time = 1.1218921999998201, Cumulative time limit = 1790.6054564000015
Used memory = (RSS = 2214.242188Mb, VMS = 2229.121094Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.833222s, Solving = 0.288670s, Total = 1.121892s, Memory = (RSS = 2214.242188Mb, VMS = 2229.121094Mb), Step range = [21-29]), Calls = 3
Final Model :: Total atoms = 11110, Cost = (-3,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[18-04-2022_15-46-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.551717s, Solving = 0.221839s, Total = 0.773557s, Memory = (RSS = 2210.718750Mb, VMS = 2225.554688Mb), Step range = [21-27]
2 : Statistics :: Grounding = 0.139227s, Solving = 0.027092s, Total = 0.166319s, Memory = (RSS = 2212.617188Mb, VMS = 2228.687500Mb), Step range = [28-28]
3 : Statistics :: Grounding = 0.142277s, Solving = 0.039739s, Total = 0.182017s, Memory = (RSS = 2214.242188Mb, VMS = 2229.121094Mb), Step range = [29-29]

[18-04-2022_15-46-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 1.121892s due to: Stop condition reached.

[18-04-2022_15-46-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[18-04-2022_15-46-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[18-04-2022_15-46-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_15-46-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_15-46-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[18-04-2022_15-46-42] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 13, 27: 14, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 26, 14: 28, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 6, 9: 7, 10: 7, 11: 7, 12: 7, 13: 8}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 6, 6: 8, 7: 12, 8: 13}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_15-46-42] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 13, 27: 14, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 26, 14: 28, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 8, 25: 9, 26: 10, 27: 11, 28: 12, 29: 13}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 23, 8: 24, 9: 25, 10: 26, 11: 27, 12: 28, 13: 29}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 6, 9: 7, 10: 7, 11: 7, 12: 7, 13: 8}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 6, 6: 8, 7: 12, 8: 13}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_15-46-42] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 13, Last requested goal index = 13, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[18-04-2022_15-46-42] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.833222s, Solving = 0.288670s, Total = 1.121892s, Memory = (RSS = 2214.242188Mb, VMS = 2229.121094Mb), Step range = [21-29]), Calls = 3
Model :: Total atoms = 11110, Cost = (-3,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[18-04-2022_15-46-42] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                  Steps = 8 :: Actions = 8                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,store_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,store_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,store_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 11:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 12:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,5))
Step 15:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 17:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 18:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 19:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 20:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 21:
    Current Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 22:
    Current Sub-goals:
        [Index = 7] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 23:
    Current Sub-goals:
        [Index = 7] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 7] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_arm_2,(block,5),(block,6))
Step 24:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,5))
Step 25:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
Step 26:
    Current Sub-goals:
        [Index = 10] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
    Achieved Sub-goals:
        [Index = 10] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,9))
Step 27:
    Current Sub-goals:
        [Index = 11] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 11] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
Step 28:
    Current Sub-goals:
        [Index = 12] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 12] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_2,(block,9),puzzle_room_table)
Step 29:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,3))

[18-04-2022_15-46-42] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=21, end_step=None

[18-04-2022_15-46-42] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for parts of the existing plan at the current level that have already been divided: start_step=21

[18-04-2022_15-46-42] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=21

[18-04-2022_15-46-42] DEBUG :: ASH Planner Main #1 >> Preparing to invoke division strategy...

[18-04-2022_15-46-42] DEBUG :: ASH Planner Main #1 >> Online method OnlineMethod.GroundFirst chose to invoke the division strategy before a downwards level change:Current increment = 2, Current planning level is complete = False

[18-04-2022_15-46-42] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 29, chosen step range to extract = range(21, 30)

[18-04-2022_15-46-42] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 13, Total actions = 13, Produced sub-goal stages = 13, Produced sub-goal literals = 13
Level [2]: Length = 29, Total actions = 29, Produced sub-goal stages = 29, Produced sub-goal literals = 29
Level [1]: Length = 38, Total actions = 38, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-42] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =   8, AC =   8, CF = 1.0, GT =   3.81s, ST =   2.19s, OT = 0.00s, TT =   6.00s, EF = (LE = 1.1, AC = 1.1), ED = (LE = 0.4, AC = 0.4), EB = (LE = 0.3, AC = 0.3)

[18-04-2022_15-46-42] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=1, plan_length=8, start_step=21, blend=Blend(left=0, right=0)

[18-04-2022_15-46-42] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=0, small_group_size=8, large_group_size=9

[18-04-2022_15-46-42] DEBUG :: core.Strategies >> Division points generated:
[]

[18-04-2022_15-46-42] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 1, Problem Range = [2-2], Size = 8, Sub-goal Stage Range = [22-29]
Division points [total=0] : []

[18-04-2022_15-46-42] DEBUG :: ASH Planner Main #1 >> Monolevel problem 2 at level 2 solved.

[18-04-2022_15-46-42] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 2 at level 1:
Total Templated Partial Problems = 1, Problem Range = [2-2], Size = 8, Sub-goal Stage Range = [22-29]
Division points [total=0] : []

[18-04-2022_15-46-42] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [22-29]

[18-04-2022_15-46-42] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 38, chosen step range to extract = range(0, 39)

[18-04-2022_15-46-42] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 13, Total actions = 13, Produced sub-goal stages = 13, Produced sub-goal literals = 13
Level [2]: Length = 29, Total actions = 29, Produced sub-goal stages = 29, Produced sub-goal literals = 29
Level [1]: Length = 38, Total actions = 38, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-42] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 29, chosen step range to extract = range(0, 30)

[18-04-2022_15-46-42] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 13, Total actions = 13, Produced sub-goal stages = 13, Produced sub-goal literals = 13
Level [2]: Length = 29, Total actions = 29, Produced sub-goal stages = 29, Produced sub-goal literals = 29
Level [1]: Length = 38, Total actions = 38, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-42] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 13, chosen step range to extract = range(0, 14)

[18-04-2022_15-46-42] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 13, Total actions = 13, Produced sub-goal stages = 13, Produced sub-goal literals = 13
Level [2]: Length = 29, Total actions = 29, Produced sub-goal stages = 29, Produced sub-goal literals = 29
Level [1]: Length = 38, Total actions = 38, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-42] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[18-04-2022_15-46-42] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 13, Total actions = 13, Produced sub-goal stages = 13, Produced sub-goal literals = 13
Level [2]: Length = 29, Total actions = 29, Produced sub-goal stages = 29, Produced sub-goal literals = 29
Level [1]: Length = 38, Total actions = 38, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-42] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [22-29], problem number = 2, increment number = 2

[18-04-2022_15-46-42] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 22)
	('last_sgoals', 29)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001D5FEA66D00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1771.448941200002)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[18-04-2022_15-46-42] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [22-29] : Concurrency disabled : Minimum search length bound enabled with value 45

[18-04-2022_15-46-42] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 22
last_sgoals = 29
start_step = 38
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 45

[18-04-2022_15-46-42] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[18-04-2022_15-46-42] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[18-04-2022_15-46-42] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[18-04-2022_15-46-42] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[18-04-2022_15-46-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[18-04-2022_15-46-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[18-04-2022_15-46-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_15-46-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_15-46-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_15-46-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_15-46-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[18-04-2022_15-46-42] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_15-46-42] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 38 as problem start state.

[18-04-2022_15-46-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 38})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 38})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 38})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 38})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 38})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 38})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 38})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 38})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 38})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 38})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 38})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 38})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 38})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 38})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 38})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 38})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 38})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 38})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(store_room,0)', 'S': 38})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 38})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 38})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 38})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 38})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 38})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 38})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 38})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 38})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 38})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 38})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 38})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 38})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 38})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 38})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 38})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 38})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 38})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 38})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'S': 38})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 38})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 38})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 38})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 38})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 38})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 38})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 38})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 38})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 38})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 38})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 38})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 38})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 38})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 38})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 38})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 38})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 38})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 38})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 38})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 38})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 38})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'store_room', 'S': 38})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 38})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 38})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 38})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 38})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 38})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 38})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 38})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 38})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 38})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 38})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 38})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 38})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 38})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 38})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 38})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 38})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 38})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 38})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 38})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 38})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 38})

[18-04-2022_15-46-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_15-46-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 38).
holds(1, complete_tower(red,puzzle_room_table), false, 38).
holds(1, complete_tower(yellow,puzzle_room_table), false, 38).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 38).
holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 38).
holds(1, configuration(manipulator_limb_1), extended, 38).
holds(1, configuration(manipulator_limb_2), retracted, 38).
holds(1, configuration(puzzle_room_door), open, 38).
holds(1, configuration(starting_room_door), closed, 38).
holds(1, configuration(store_room_door), open, 38).
holds(1, grasping(manipulator_arm_1), nothing, 38).
holds(1, grasping(manipulator_arm_2), (block,5), 38).
holds(1, grasping(manipulator_end_1), nothing, 38).
holds(1, grasping(manipulator_end_2), (block,5), 38).
holds(1, in((block,1)), (puzzle_room,1), 38).
holds(1, in((block,2)), (puzzle_room,1), 38).
holds(1, in((block,3)), (puzzle_room,1), 38).
holds(1, in((block,4)), (store_room,0), 38).
holds(1, in((block,5)), (puzzle_room,1), 38).
holds(1, in((block,6)), (puzzle_room,1), 38).
holds(1, in((block,7)), (puzzle_room,1), 38).
holds(1, in((block,8)), (store_room,0), 38).
holds(1, in((block,9)), (puzzle_room,1), 38).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 38).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 38).
holds(1, in(manipulator_end_1), (puzzle_room,1), 38).
holds(1, in(manipulator_end_2), (puzzle_room,1), 38).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 38).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 38).
holds(1, in(puzzle_room_table), (puzzle_room,1), 38).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 38).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 38).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 38).
holds(1, in(talos), (puzzle_room,1), 38).
holds(1, in_tower((block,1),(block,1)), true, 38).
holds(1, in_tower((block,1),(block,2)), false, 38).
holds(1, in_tower((block,1),(block,3)), true, 38).
holds(1, in_tower((block,1),(block,4)), false, 38).
holds(1, in_tower((block,1),(block,5)), false, 38).
holds(1, in_tower((block,1),(block,6)), false, 38).
holds(1, in_tower((block,1),(block,7)), false, 38).
holds(1, in_tower((block,1),(block,8)), false, 38).
holds(1, in_tower((block,1),(block,9)), false, 38).
holds(1, in_tower((block,2),(block,1)), false, 38).
holds(1, in_tower((block,2),(block,2)), true, 38).
holds(1, in_tower((block,2),(block,3)), false, 38).
holds(1, in_tower((block,2),(block,4)), false, 38).
holds(1, in_tower((block,2),(block,5)), false, 38).
holds(1, in_tower((block,2),(block,6)), false, 38).
holds(1, in_tower((block,2),(block,7)), false, 38).
holds(1, in_tower((block,2),(block,8)), false, 38).
holds(1, in_tower((block,2),(block,9)), false, 38).
holds(1, in_tower((block,3),(block,1)), false, 38).
holds(1, in_tower((block,3),(block,2)), false, 38).
holds(1, in_tower((block,3),(block,3)), false, 38).
holds(1, in_tower((block,3),(block,4)), false, 38).
holds(1, in_tower((block,3),(block,5)), false, 38).
holds(1, in_tower((block,3),(block,6)), false, 38).
holds(1, in_tower((block,3),(block,7)), false, 38).
holds(1, in_tower((block,3),(block,8)), false, 38).
holds(1, in_tower((block,3),(block,9)), false, 38).
holds(1, in_tower((block,4),(block,1)), false, 38).
holds(1, in_tower((block,4),(block,2)), false, 38).
holds(1, in_tower((block,4),(block,3)), false, 38).
holds(1, in_tower((block,4),(block,4)), false, 38).
holds(1, in_tower((block,4),(block,5)), false, 38).
holds(1, in_tower((block,4),(block,6)), false, 38).
holds(1, in_tower((block,4),(block,7)), false, 38).
holds(1, in_tower((block,4),(block,8)), false, 38).
holds(1, in_tower((block,4),(block,9)), false, 38).
holds(1, in_tower((block,5),(block,1)), false, 38).
holds(1, in_tower((block,5),(block,2)), false, 38).
holds(1, in_tower((block,5),(block,3)), false, 38).
holds(1, in_tower((block,5),(block,4)), false, 38).
holds(1, in_tower((block,5),(block,5)), false, 38).
holds(1, in_tower((block,5),(block,6)), false, 38).
holds(1, in_tower((block,5),(block,7)), false, 38).
holds(1, in_tower((block,5),(block,8)), false, 38).
holds(1, in_tower((block,5),(block,9)), false, 38).
holds(1, in_tower((block,6),(block,1)), false, 38).
holds(1, in_tower((block,6),(block,2)), false, 38).
holds(1, in_tower((block,6),(block,3)), false, 38).
holds(1, in_tower((block,6),(block,4)), false, 38).
holds(1, in_tower((block,6),(block,5)), false, 38).
holds(1, in_tower((block,6),(block,6)), true, 38).
holds(1, in_tower((block,6),(block,7)), false, 38).
holds(1, in_tower((block,6),(block,8)), false, 38).
holds(1, in_tower((block,6),(block,9)), false, 38).
holds(1, in_tower((block,7),(block,1)), false, 38).
holds(1, in_tower((block,7),(block,2)), false, 38).
holds(1, in_tower((block,7),(block,3)), false, 38).
holds(1, in_tower((block,7),(block,4)), false, 38).
holds(1, in_tower((block,7),(block,5)), false, 38).
holds(1, in_tower((block,7),(block,6)), false, 38).
holds(1, in_tower((block,7),(block,7)), true, 38).
holds(1, in_tower((block,7),(block,8)), false, 38).
holds(1, in_tower((block,7),(block,9)), true, 38).
holds(1, in_tower((block,8),(block,1)), false, 38).
holds(1, in_tower((block,8),(block,2)), false, 38).
holds(1, in_tower((block,8),(block,3)), false, 38).
holds(1, in_tower((block,8),(block,4)), false, 38).
holds(1, in_tower((block,8),(block,5)), false, 38).
holds(1, in_tower((block,8),(block,6)), false, 38).
holds(1, in_tower((block,8),(block,7)), false, 38).
holds(1, in_tower((block,8),(block,8)), false, 38).
holds(1, in_tower((block,8),(block,9)), false, 38).
holds(1, in_tower((block,9),(block,1)), false, 38).
holds(1, in_tower((block,9),(block,2)), false, 38).
holds(1, in_tower((block,9),(block,3)), false, 38).
holds(1, in_tower((block,9),(block,4)), false, 38).
holds(1, in_tower((block,9),(block,5)), false, 38).
holds(1, in_tower((block,9),(block,6)), false, 38).
holds(1, in_tower((block,9),(block,7)), false, 38).
holds(1, in_tower((block,9),(block,8)), false, 38).
holds(1, in_tower((block,9),(block,9)), false, 38).
holds(1, on((block,1)), puzzle_room_table_left, 38).
holds(1, on((block,2)), puzzle_room_table_right, 38).
holds(1, on((block,3)), (block,1), 38).
holds(1, on((block,4)), nothing, 38).
holds(1, on((block,5)), nothing, 38).
holds(1, on((block,6)), puzzle_room_table_right, 38).
holds(1, on((block,7)), puzzle_room_table_middle, 38).
holds(1, on((block,8)), nothing, 38).
holds(1, on((block,9)), (block,7), 38).
holds(1, tower_base((block,1),puzzle_room_table), true, 38).
holds(1, tower_base((block,2),puzzle_room_table), true, 38).
holds(1, tower_base((block,3),puzzle_room_table), false, 38).
holds(1, tower_base((block,4),puzzle_room_table), false, 38).
holds(1, tower_base((block,5),puzzle_room_table), false, 38).
holds(1, tower_base((block,6),puzzle_room_table), true, 38).
holds(1, tower_base((block,7),puzzle_room_table), true, 38).
holds(1, tower_base((block,8),puzzle_room_table), false, 38).
holds(1, tower_base((block,9),puzzle_room_table), false, 38).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 38).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 38).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 38).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 38).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 38).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 38).
holds(1, unordered_tower((block,7),puzzle_room_table), true, 38).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 38).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 38).
holds(2, complete_tower(blue,puzzle_room_table), false, 38).
holds(2, complete_tower(red,puzzle_room_table), false, 38).
holds(2, complete_tower(yellow,puzzle_room_table), false, 38).
holds(2, configuration(manipulator_arm_1), extended, 38).
holds(2, configuration(manipulator_arm_2), retracted, 38).
holds(2, configuration(puzzle_room_door), open, 38).
holds(2, configuration(starting_room_door), closed, 38).
holds(2, configuration(store_room_door), open, 38).
holds(2, grasping(manipulator_arm_1), nothing, 38).
holds(2, grasping(manipulator_arm_2), (block,5), 38).
holds(2, in((block,1)), puzzle_room, 38).
holds(2, in((block,2)), puzzle_room, 38).
holds(2, in((block,3)), puzzle_room, 38).
holds(2, in((block,4)), store_room, 38).
holds(2, in((block,5)), puzzle_room, 38).
holds(2, in((block,6)), puzzle_room, 38).
holds(2, in((block,7)), puzzle_room, 38).
holds(2, in((block,8)), store_room, 38).
holds(2, in((block,9)), puzzle_room, 38).
holds(2, in(manipulator_arm_1), puzzle_room, 38).
holds(2, in(manipulator_arm_2), puzzle_room, 38).
holds(2, in(puzzle_room_table), puzzle_room, 38).
holds(2, in(talos), puzzle_room, 38).
holds(2, in_tower((block,1),(block,1)), true, 38).
holds(2, in_tower((block,1),(block,2)), false, 38).
holds(2, in_tower((block,1),(block,3)), true, 38).
holds(2, in_tower((block,1),(block,4)), false, 38).
holds(2, in_tower((block,1),(block,5)), false, 38).
holds(2, in_tower((block,1),(block,6)), false, 38).
holds(2, in_tower((block,1),(block,7)), false, 38).
holds(2, in_tower((block,1),(block,8)), false, 38).
holds(2, in_tower((block,1),(block,9)), false, 38).
holds(2, in_tower((block,2),(block,1)), false, 38).
holds(2, in_tower((block,2),(block,2)), true, 38).
holds(2, in_tower((block,2),(block,3)), false, 38).
holds(2, in_tower((block,2),(block,4)), false, 38).
holds(2, in_tower((block,2),(block,5)), false, 38).
holds(2, in_tower((block,2),(block,6)), false, 38).
holds(2, in_tower((block,2),(block,7)), false, 38).
holds(2, in_tower((block,2),(block,8)), false, 38).
holds(2, in_tower((block,2),(block,9)), false, 38).
holds(2, in_tower((block,3),(block,1)), false, 38).
holds(2, in_tower((block,3),(block,2)), false, 38).
holds(2, in_tower((block,3),(block,3)), false, 38).
holds(2, in_tower((block,3),(block,4)), false, 38).
holds(2, in_tower((block,3),(block,5)), false, 38).
holds(2, in_tower((block,3),(block,6)), false, 38).
holds(2, in_tower((block,3),(block,7)), false, 38).
holds(2, in_tower((block,3),(block,8)), false, 38).
holds(2, in_tower((block,3),(block,9)), false, 38).
holds(2, in_tower((block,4),(block,1)), false, 38).
holds(2, in_tower((block,4),(block,2)), false, 38).
holds(2, in_tower((block,4),(block,3)), false, 38).
holds(2, in_tower((block,4),(block,4)), false, 38).
holds(2, in_tower((block,4),(block,5)), false, 38).
holds(2, in_tower((block,4),(block,6)), false, 38).
holds(2, in_tower((block,4),(block,7)), false, 38).
holds(2, in_tower((block,4),(block,8)), false, 38).
holds(2, in_tower((block,4),(block,9)), false, 38).
holds(2, in_tower((block,5),(block,1)), false, 38).
holds(2, in_tower((block,5),(block,2)), false, 38).
holds(2, in_tower((block,5),(block,3)), false, 38).
holds(2, in_tower((block,5),(block,4)), false, 38).
holds(2, in_tower((block,5),(block,5)), false, 38).
holds(2, in_tower((block,5),(block,6)), false, 38).
holds(2, in_tower((block,5),(block,7)), false, 38).
holds(2, in_tower((block,5),(block,8)), false, 38).
holds(2, in_tower((block,5),(block,9)), false, 38).
holds(2, in_tower((block,6),(block,1)), false, 38).
holds(2, in_tower((block,6),(block,2)), false, 38).
holds(2, in_tower((block,6),(block,3)), false, 38).
holds(2, in_tower((block,6),(block,4)), false, 38).
holds(2, in_tower((block,6),(block,5)), false, 38).
holds(2, in_tower((block,6),(block,6)), true, 38).
holds(2, in_tower((block,6),(block,7)), false, 38).
holds(2, in_tower((block,6),(block,8)), false, 38).
holds(2, in_tower((block,6),(block,9)), false, 38).
holds(2, in_tower((block,7),(block,1)), false, 38).
holds(2, in_tower((block,7),(block,2)), false, 38).
holds(2, in_tower((block,7),(block,3)), false, 38).
holds(2, in_tower((block,7),(block,4)), false, 38).
holds(2, in_tower((block,7),(block,5)), false, 38).
holds(2, in_tower((block,7),(block,6)), false, 38).
holds(2, in_tower((block,7),(block,7)), true, 38).
holds(2, in_tower((block,7),(block,8)), false, 38).
holds(2, in_tower((block,7),(block,9)), true, 38).
holds(2, in_tower((block,8),(block,1)), false, 38).
holds(2, in_tower((block,8),(block,2)), false, 38).
holds(2, in_tower((block,8),(block,3)), false, 38).
holds(2, in_tower((block,8),(block,4)), false, 38).
holds(2, in_tower((block,8),(block,5)), false, 38).
holds(2, in_tower((block,8),(block,6)), false, 38).
holds(2, in_tower((block,8),(block,7)), false, 38).
holds(2, in_tower((block,8),(block,8)), false, 38).
holds(2, in_tower((block,8),(block,9)), false, 38).
holds(2, in_tower((block,9),(block,1)), false, 38).
holds(2, in_tower((block,9),(block,2)), false, 38).
holds(2, in_tower((block,9),(block,3)), false, 38).
holds(2, in_tower((block,9),(block,4)), false, 38).
holds(2, in_tower((block,9),(block,5)), false, 38).
holds(2, in_tower((block,9),(block,6)), false, 38).
holds(2, in_tower((block,9),(block,7)), false, 38).
holds(2, in_tower((block,9),(block,8)), false, 38).
holds(2, in_tower((block,9),(block,9)), false, 38).
holds(2, on((block,1)), puzzle_room_table, 38).
holds(2, on((block,2)), puzzle_room_table, 38).
holds(2, on((block,3)), (block,1), 38).
holds(2, on((block,4)), nothing, 38).
holds(2, on((block,5)), nothing, 38).
holds(2, on((block,6)), puzzle_room_table, 38).
holds(2, on((block,7)), puzzle_room_table, 38).
holds(2, on((block,8)), nothing, 38).
holds(2, on((block,9)), (block,7), 38).
holds(2, tower_base((block,1),puzzle_room_table), true, 38).
holds(2, tower_base((block,2),puzzle_room_table), true, 38).
holds(2, tower_base((block,3),puzzle_room_table), false, 38).
holds(2, tower_base((block,4),puzzle_room_table), false, 38).
holds(2, tower_base((block,5),puzzle_room_table), false, 38).
holds(2, tower_base((block,6),puzzle_room_table), true, 38).
holds(2, tower_base((block,7),puzzle_room_table), true, 38).
holds(2, tower_base((block,8),puzzle_room_table), false, 38).
holds(2, tower_base((block,9),puzzle_room_table), false, 38).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 38).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 38).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 38).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 38).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 38).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 38).
holds(2, unordered_tower((block,7),puzzle_room_table), true, 38).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 38).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 38).

[18-04-2022_15-46-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[18-04-2022_15-46-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_15-46-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[18-04-2022_15-46-42] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=45']

[18-04-2022_15-46-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 22})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 23})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 24})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'I': 25})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,9))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,9)', 'I': 26})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 27})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,9),puzzle_room_table)', 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'I': 28})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 29})

[18-04-2022_15-46-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_15-46-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 8 rules into program part base:

sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 22).
sub_goal(2, talos, put(manipulator_arm_2,(block,5),(block,6)), on((block,5)), (block,6), 23).
sub_goal(2, talos, release(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), nothing, 24).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 25).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,9)), grasping(manipulator_arm_2), (block,9), 26).
sub_goal(2, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 27).
sub_goal(2, talos, put(manipulator_arm_2,(block,9),puzzle_room_table), on((block,9)), puzzle_room_table, 28).
sub_goal(2, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 29).

[18-04-2022_15-46-42] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_15-46-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[18-04-2022_15-46-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=45']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001D5FD8F81F0>]
	incrementor = SolveIncrementor(step_start=38, step_increase=1, step_increase_initial=8, step_end_min=46, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1771.448941200002, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 38), range_=None), IncPart(name='plan_module', args=('#inc', 38, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 38, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 38, 22, 29, 'sequential', 'false'), range_=None)]

[18-04-2022_15-46-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_15-46-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_15-46-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_15-46-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1277 rules

[18-04-2022_15-46-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0067453999999997905s

[18-04-2022_15-46-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[18-04-2022_15-46-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[18-04-2022_15-46-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.041382s.

[18-04-2022_15-46-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008095s with result Satisfiable.

[18-04-2022_15-46-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[18-04-2022_15-46-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001D6149B69A0>

[18-04-2022_15-46-42] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 38)
	('last_sgoals', 29)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001D5FEA66D00>)
	('first_sgoals', 22)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001D6149B69A0>)

[18-04-2022_15-46-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 38). %* None *%
#program plan_module(#inc, 38, false, false). %* None *%
#program optimisation_module(#inc, 38, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 38, 22, 29, sequential, false). %* None *%

[18-04-2022_15-46-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     37 : Current =     45
Incrementor step ends | Minimum  =     46 : Maximum =    300

[18-04-2022_15-46-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(45)]), ('state_module', [Number(38), Number(38)]), ('plan_module', [Number(38), Number(38), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(38), Number(38), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('conformance_module', [Number(38), Number(38), Number(22), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(39), Number(38)]), ('plan_module', [Number(39), Number(38), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(39), Number(38), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(39)]), ('action_preconditions', [Number(39)]), ('variable_relations', [Number(39)]), ('abstraction_mappings', [Number(39)]), ('conformance_module', [Number(39), Number(38), Number(22), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(40), Number(38)]), ('plan_module', [Number(40), Number(38), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(40), Number(38), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(40)]), ('action_preconditions', [Number(40)]), ('variable_relations', [Number(40)]), ('abstraction_mappings', [Number(40)]), ('conformance_module', [Number(40), Number(38), Number(22), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(41), Number(38)]), ('plan_module', [Number(41), Number(38), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(41), Number(38), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(41)]), ('action_preconditions', [Number(41)]), ('variable_relations', [Number(41)]), ('abstraction_mappings', [Number(41)]), ('conformance_module', [Number(41), Number(38), Number(22), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(42), Number(38)]), ('plan_module', [Number(42), Number(38), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(42), Number(38), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('conformance_module', [Number(42), Number(38), Number(22), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(43), Number(38)]), ('plan_module', [Number(43), Number(38), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(43), Number(38), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(43)]), ('action_preconditions', [Number(43)]), ('variable_relations', [Number(43)]), ('abstraction_mappings', [Number(43)]), ('conformance_module', [Number(43), Number(38), Number(22), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(44), Number(38)]), ('plan_module', [Number(44), Number(38), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(44), Number(38), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(44)]), ('action_preconditions', [Number(44)]), ('variable_relations', [Number(44)]), ('abstraction_mappings', [Number(44)]), ('conformance_module', [Number(44), Number(38), Number(22), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(45), Number(38)]), ('plan_module', [Number(45), Number(38), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(45), Number(38), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(45)]), ('action_preconditions', [Number(45)]), ('variable_relations', [Number(45)]), ('abstraction_mappings', [Number(45)]), ('conformance_module', [Number(45), Number(38), Number(22), Number(29), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.064491s.

[18-04-2022_15-46-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.505628s with result Unsatisfiable.

[18-04-2022_15-46-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.5701183000001038, Incremental time limit = None
Running cumulative time = 1.5701183000001038, Cumulative time limit = 1771.448941200002
Used memory = (RSS = 2220.531250Mb, VMS = 2235.269531Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     45 : Current =     46
Incrementor step ends | Minimum  =     46 : Maximum =    300

[18-04-2022_15-46-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(46)]), ('state_module', [Number(46), Number(38)]), ('plan_module', [Number(46), Number(38), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(46), Number(38), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(46)]), ('action_preconditions', [Number(46)]), ('variable_relations', [Number(46)]), ('abstraction_mappings', [Number(46)]), ('conformance_module', [Number(46), Number(38), Number(22), Number(29), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.211848s.

[18-04-2022_15-46-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.043268s with result Unsatisfiable.

[18-04-2022_15-46-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.25511599999981627, Incremental time limit = None
Running cumulative time = 1.82523429999992, Cumulative time limit = 1771.448941200002
Used memory = (RSS = 2222.781250Mb, VMS = 2239.753906Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     46 : Current =     47
Incrementor step ends | Minimum  =     46 : Maximum =    300

[18-04-2022_15-46-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(47)]), ('state_module', [Number(47), Number(38)]), ('plan_module', [Number(47), Number(38), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(47), Number(38), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(47)]), ('action_preconditions', [Number(47)]), ('variable_relations', [Number(47)]), ('abstraction_mappings', [Number(47)]), ('conformance_module', [Number(47), Number(38), Number(22), Number(29), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.215680s.

[18-04-2022_15-46-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.051794s with result Unsatisfiable.

[18-04-2022_15-46-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2674732000000404, Incremental time limit = None
Running cumulative time = 2.0927074999999604, Cumulative time limit = 1771.448941200002
Used memory = (RSS = 2224.738281Mb, VMS = 2240.277344Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     47 : Current =     48
Incrementor step ends | Minimum  =     46 : Maximum =    300

[18-04-2022_15-46-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(48)]), ('state_module', [Number(48), Number(38)]), ('plan_module', [Number(48), Number(38), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(48), Number(38), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(48)]), ('action_preconditions', [Number(48)]), ('variable_relations', [Number(48)]), ('abstraction_mappings', [Number(48)]), ('conformance_module', [Number(48), Number(38), Number(22), Number(29), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.221119s.

[18-04-2022_15-46-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.105141s with result Satisfiable.

[18-04-2022_15-46-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.32626089999985197, Incremental time limit = None
Running cumulative time = 2.4189683999998124, Cumulative time limit = 1771.448941200002
Used memory = (RSS = 2229.292969Mb, VMS = 2243.312500Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.713137s, Solving = 0.705831s, Total = 2.418968s, Memory = (RSS = 2229.292969Mb, VMS = 2243.312500Mb), Step range = [38-48]), Calls = 4
Final Model :: Total atoms = 13978, Cost = (-3,), Optimality proven = False, Number = 3, Thread ID = 2, Model type = ModelType.StableModel

[18-04-2022_15-46-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 1.064491s, Solving = 0.505628s, Total = 1.570118s, Memory = (RSS = 2220.531250Mb, VMS = 2235.269531Mb), Step range = [38-45]
2 : Statistics :: Grounding = 0.211848s, Solving = 0.043268s, Total = 0.255116s, Memory = (RSS = 2222.781250Mb, VMS = 2239.753906Mb), Step range = [46-46]
3 : Statistics :: Grounding = 0.215680s, Solving = 0.051794s, Total = 0.267473s, Memory = (RSS = 2224.738281Mb, VMS = 2240.277344Mb), Step range = [47-47]
4 : Statistics :: Grounding = 0.221119s, Solving = 0.105141s, Total = 0.326261s, Memory = (RSS = 2229.292969Mb, VMS = 2243.312500Mb), Step range = [48-48]

[18-04-2022_15-46-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 2.418968s due to: Stop condition reached.

[18-04-2022_15-46-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[18-04-2022_15-46-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[18-04-2022_15-46-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_15-46-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_15-46-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[18-04-2022_15-46-45] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 13, 27: 14, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 26, 14: 28, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 8, 25: 9, 26: 10, 27: 11, 28: 12, 29: 13}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 23, 8: 24, 9: 25, 10: 26, 11: 27, 12: 28, 13: 29}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 6, 9: 7, 10: 7, 11: 7, 12: 7, 13: 8}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 6, 6: 8, 7: 12, 8: 13}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_15-46-45] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 13, 27: 14, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 22, 42: 23, 43: 24, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 26, 14: 28, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 46, 28: 47, 29: 48}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 8, 25: 9, 26: 10, 27: 11, 28: 12, 29: 13}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 23, 8: 24, 9: 25, 10: 26, 11: 27, 12: 28, 13: 29}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 6, 9: 7, 10: 7, 11: 7, 12: 7, 13: 8}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 6, 6: 8, 7: 12, 8: 13}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_15-46-45] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 29, Last requested goal index = 29, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[18-04-2022_15-46-45] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.713137s, Solving = 0.705831s, Total = 2.418968s, Memory = (RSS = 2229.292969Mb, VMS = 2243.312500Mb), Step range = [38-48]), Calls = 4
Model :: Total atoms = 13978, Cost = (-3,), Optimality proven = False, Number = 3, Thread ID = 2, Model type = ModelType.StableModel

[18-04-2022_15-46-45] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 10 :: Actions = 10                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 25:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 26:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 27:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 28:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 29:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 30:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : move((store_room,1))
Step 31:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 37:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 38:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 39:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 40:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 41:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 42:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 43:
    Current Sub-goals:
        [Index = 24] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 24] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,5))
Step 44:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,9)))
Step 45:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
    Achieved Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,9))
Step 46:
    Current Sub-goals:
        [Index = 27] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 27] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 47:
    Current Sub-goals:
        [Index = 28] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 28] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,9),puzzle_room_table_middle)
Step 48:
    Current Sub-goals:
        [Index = 29] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 29] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))

[18-04-2022_15-46-45] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[18-04-2022_15-46-45] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[18-04-2022_15-46-45] DEBUG :: ASH Planner Main #1 >> Monolevel problem 2 at level 1 solved.

[18-04-2022_15-46-45] DEBUG :: ASH Planner Main #1 >> Online planning increment 2 finished.

[18-04-2022_15-46-45] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 17 : Goals achieved = 8 : Goals unachieved = 9 : Complete = False
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 13 : Goals achieved = 13 : Goals unachieved = 0 : Complete = False
Level = 1 : Solved problems = 2 : Total constraining sub-goal stages = 29 : Goals achieved = 29 : Goals unachieved = 0 : Complete = False

[18-04-2022_15-46-45] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 3, Highest = 3.

[18-04-2022_15-46-45] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 3 by method ground-first is [1-3].

[18-04-2022_15-46-45] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 4 to proactively divide planning problem 2 at level 3:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 17, Sub-goal Stage Range = [1-17]
Division points [total=1] : [(Index = 8, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[18-04-2022_15-46-45] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [9-17]

[18-04-2022_15-46-45] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 13, chosen step range to extract = range(0, 14)

[18-04-2022_15-46-45] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 13, Total actions = 13, Produced sub-goal stages = 13, Produced sub-goal literals = 13
Level [2]: Length = 29, Total actions = 29, Produced sub-goal stages = 29, Produced sub-goal literals = 29
Level [1]: Length = 48, Total actions = 48, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-45] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[18-04-2022_15-46-45] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 13, Total actions = 13, Produced sub-goal stages = 13, Produced sub-goal literals = 13
Level [2]: Length = 29, Total actions = 29, Produced sub-goal stages = 29, Produced sub-goal literals = 29
Level [1]: Length = 48, Total actions = 48, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-45] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 3, sgoals range = [9-17], problem number = 2, increment number = 3

[18-04-2022_15-46-45] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 9)
	('last_sgoals', 17)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001D5FEA66D00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1795.4828632000003)
	('length_limit', 300)
	('level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[18-04-2022_15-46-45] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 3] partial conformance refinement (sequential) with sgoals range [9-17] : Concurrency disabled : Minimum search length bound enabled with value 21

[18-04-2022_15-46-45] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 3
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 9
last_sgoals = 17
start_step = 13
is_initial = False
is_final = True
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 21

[18-04-2022_15-46-45] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[18-04-2022_15-46-45] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[18-04-2022_15-46-45] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[18-04-2022_15-46-45] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[18-04-2022_15-46-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[18-04-2022_15-46-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[18-04-2022_15-46-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_15-46-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_15-46-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_15-46-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_15-46-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[18-04-2022_15-46-45] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_15-46-45] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 13 as problem start state.

[18-04-2022_15-46-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 13})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,9)', 'S': 13})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 13})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 13})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 13})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 13})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 13})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 13})
Fluent({'L': 3, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 13})
Fluent({'L': 3, 'F': 'in((block,8))', 'V': 'store_room', 'S': 13})
Fluent({'L': 3, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 13})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 13})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 13})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 13})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 13})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 13})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 13})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 13})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 13})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 13})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 13})
Fluent({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 13})
Fluent({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'S': 13})
Fluent({'L': 3, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 13})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 13})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 13})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 13})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 13})
Fluent({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 13})
Fluent({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 13})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 13})
Fluent({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 13})
Fluent({'L': 4, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 13})
Fluent({'L': 4, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 13})
Fluent({'L': 4, 'F': 'in((block,4))', 'V': 'store_room', 'S': 13})
Fluent({'L': 4, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 13})
Fluent({'L': 4, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 13})
Fluent({'L': 4, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 13})
Fluent({'L': 4, 'F': 'in((block,8))', 'V': 'store_room', 'S': 13})
Fluent({'L': 4, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 13})
Fluent({'L': 4, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 13})
Fluent({'L': 4, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 13})
Fluent({'L': 4, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 13})
Fluent({'L': 4, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 13})
Fluent({'L': 4, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 13})
Fluent({'L': 4, 'F': 'on((block,4))', 'V': 'nothing', 'S': 13})
Fluent({'L': 4, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 13})
Fluent({'L': 4, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 13})
Fluent({'L': 4, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 13})
Fluent({'L': 4, 'F': 'on((block,8))', 'V': 'nothing', 'S': 13})
Fluent({'L': 4, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 13})
Fluent({'L': 4, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 13})
Fluent({'L': 4, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 13})
Fluent({'L': 4, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 13})
Fluent({'L': 4, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 13})
Fluent({'L': 4, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 13})
Fluent({'L': 4, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 13})
Fluent({'L': 4, 'F': 'transporting(talos,(block,1))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'transporting(talos,(block,2))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'transporting(talos,(block,3))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'transporting(talos,(block,4))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'transporting(talos,(block,5))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'transporting(talos,(block,6))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'transporting(talos,(block,7))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'transporting(talos,(block,8))', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'transporting(talos,(block,9))', 'V': 'true', 'S': 13})
Fluent({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 13})
Fluent({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 13})

[18-04-2022_15-46-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_15-46-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 257 rules into program part ash_initial_state:

holds(3, complete_tower(blue,puzzle_room_table), false, 13).
holds(3, complete_tower(red,puzzle_room_table), false, 13).
holds(3, complete_tower(yellow,puzzle_room_table), false, 13).
holds(3, grasping(manipulator_arm_1), nothing, 13).
holds(3, grasping(manipulator_arm_2), (block,9), 13).
holds(3, in((block,1)), puzzle_room, 13).
holds(3, in((block,2)), puzzle_room, 13).
holds(3, in((block,3)), puzzle_room, 13).
holds(3, in((block,4)), store_room, 13).
holds(3, in((block,5)), puzzle_room, 13).
holds(3, in((block,6)), puzzle_room, 13).
holds(3, in((block,7)), puzzle_room, 13).
holds(3, in((block,8)), store_room, 13).
holds(3, in((block,9)), puzzle_room, 13).
holds(3, in(manipulator_arm_1), puzzle_room, 13).
holds(3, in(manipulator_arm_2), puzzle_room, 13).
holds(3, in(puzzle_room_table), puzzle_room, 13).
holds(3, in(talos), puzzle_room, 13).
holds(3, in_tower((block,1),(block,1)), true, 13).
holds(3, in_tower((block,1),(block,2)), false, 13).
holds(3, in_tower((block,1),(block,3)), false, 13).
holds(3, in_tower((block,1),(block,4)), false, 13).
holds(3, in_tower((block,1),(block,5)), false, 13).
holds(3, in_tower((block,1),(block,6)), false, 13).
holds(3, in_tower((block,1),(block,7)), false, 13).
holds(3, in_tower((block,1),(block,8)), false, 13).
holds(3, in_tower((block,1),(block,9)), false, 13).
holds(3, in_tower((block,2),(block,1)), false, 13).
holds(3, in_tower((block,2),(block,2)), true, 13).
holds(3, in_tower((block,2),(block,3)), false, 13).
holds(3, in_tower((block,2),(block,4)), false, 13).
holds(3, in_tower((block,2),(block,5)), false, 13).
holds(3, in_tower((block,2),(block,6)), false, 13).
holds(3, in_tower((block,2),(block,7)), false, 13).
holds(3, in_tower((block,2),(block,8)), false, 13).
holds(3, in_tower((block,2),(block,9)), false, 13).
holds(3, in_tower((block,3),(block,1)), false, 13).
holds(3, in_tower((block,3),(block,2)), false, 13).
holds(3, in_tower((block,3),(block,3)), true, 13).
holds(3, in_tower((block,3),(block,4)), false, 13).
holds(3, in_tower((block,3),(block,5)), false, 13).
holds(3, in_tower((block,3),(block,6)), false, 13).
holds(3, in_tower((block,3),(block,7)), false, 13).
holds(3, in_tower((block,3),(block,8)), false, 13).
holds(3, in_tower((block,3),(block,9)), false, 13).
holds(3, in_tower((block,4),(block,1)), false, 13).
holds(3, in_tower((block,4),(block,2)), false, 13).
holds(3, in_tower((block,4),(block,3)), false, 13).
holds(3, in_tower((block,4),(block,4)), false, 13).
holds(3, in_tower((block,4),(block,5)), false, 13).
holds(3, in_tower((block,4),(block,6)), false, 13).
holds(3, in_tower((block,4),(block,7)), false, 13).
holds(3, in_tower((block,4),(block,8)), false, 13).
holds(3, in_tower((block,4),(block,9)), false, 13).
holds(3, in_tower((block,5),(block,1)), false, 13).
holds(3, in_tower((block,5),(block,2)), false, 13).
holds(3, in_tower((block,5),(block,3)), false, 13).
holds(3, in_tower((block,5),(block,4)), false, 13).
holds(3, in_tower((block,5),(block,5)), false, 13).
holds(3, in_tower((block,5),(block,6)), false, 13).
holds(3, in_tower((block,5),(block,7)), false, 13).
holds(3, in_tower((block,5),(block,8)), false, 13).
holds(3, in_tower((block,5),(block,9)), false, 13).
holds(3, in_tower((block,6),(block,1)), false, 13).
holds(3, in_tower((block,6),(block,2)), false, 13).
holds(3, in_tower((block,6),(block,3)), false, 13).
holds(3, in_tower((block,6),(block,4)), false, 13).
holds(3, in_tower((block,6),(block,5)), true, 13).
holds(3, in_tower((block,6),(block,6)), true, 13).
holds(3, in_tower((block,6),(block,7)), false, 13).
holds(3, in_tower((block,6),(block,8)), false, 13).
holds(3, in_tower((block,6),(block,9)), false, 13).
holds(3, in_tower((block,7),(block,1)), false, 13).
holds(3, in_tower((block,7),(block,2)), false, 13).
holds(3, in_tower((block,7),(block,3)), false, 13).
holds(3, in_tower((block,7),(block,4)), false, 13).
holds(3, in_tower((block,7),(block,5)), false, 13).
holds(3, in_tower((block,7),(block,6)), false, 13).
holds(3, in_tower((block,7),(block,7)), true, 13).
holds(3, in_tower((block,7),(block,8)), false, 13).
holds(3, in_tower((block,7),(block,9)), false, 13).
holds(3, in_tower((block,8),(block,1)), false, 13).
holds(3, in_tower((block,8),(block,2)), false, 13).
holds(3, in_tower((block,8),(block,3)), false, 13).
holds(3, in_tower((block,8),(block,4)), false, 13).
holds(3, in_tower((block,8),(block,5)), false, 13).
holds(3, in_tower((block,8),(block,6)), false, 13).
holds(3, in_tower((block,8),(block,7)), false, 13).
holds(3, in_tower((block,8),(block,8)), false, 13).
holds(3, in_tower((block,8),(block,9)), false, 13).
holds(3, in_tower((block,9),(block,1)), false, 13).
holds(3, in_tower((block,9),(block,2)), false, 13).
holds(3, in_tower((block,9),(block,3)), false, 13).
holds(3, in_tower((block,9),(block,4)), false, 13).
holds(3, in_tower((block,9),(block,5)), false, 13).
holds(3, in_tower((block,9),(block,6)), false, 13).
holds(3, in_tower((block,9),(block,7)), false, 13).
holds(3, in_tower((block,9),(block,8)), false, 13).
holds(3, in_tower((block,9),(block,9)), true, 13).
holds(3, on((block,1)), puzzle_room_table, 13).
holds(3, on((block,2)), puzzle_room_table, 13).
holds(3, on((block,3)), puzzle_room_table, 13).
holds(3, on((block,4)), nothing, 13).
holds(3, on((block,5)), (block,6), 13).
holds(3, on((block,6)), puzzle_room_table, 13).
holds(3, on((block,7)), puzzle_room_table, 13).
holds(3, on((block,8)), nothing, 13).
holds(3, on((block,9)), puzzle_room_table, 13).
holds(3, tower_base((block,1),puzzle_room_table), true, 13).
holds(3, tower_base((block,2),puzzle_room_table), true, 13).
holds(3, tower_base((block,3),puzzle_room_table), true, 13).
holds(3, tower_base((block,4),puzzle_room_table), false, 13).
holds(3, tower_base((block,5),puzzle_room_table), false, 13).
holds(3, tower_base((block,6),puzzle_room_table), true, 13).
holds(3, tower_base((block,7),puzzle_room_table), true, 13).
holds(3, tower_base((block,8),puzzle_room_table), false, 13).
holds(3, tower_base((block,9),puzzle_room_table), true, 13).
holds(3, unordered_tower((block,1),puzzle_room_table), false, 13).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 13).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 13).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 13).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 13).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 13).
holds(3, unordered_tower((block,7),puzzle_room_table), false, 13).
holds(3, unordered_tower((block,8),puzzle_room_table), false, 13).
holds(3, unordered_tower((block,9),puzzle_room_table), false, 13).
holds(4, complete_tower(blue,puzzle_room_table), false, 13).
holds(4, complete_tower(red,puzzle_room_table), false, 13).
holds(4, complete_tower(yellow,puzzle_room_table), false, 13).
holds(4, in((block,1)), puzzle_room, 13).
holds(4, in((block,2)), puzzle_room, 13).
holds(4, in((block,3)), puzzle_room, 13).
holds(4, in((block,4)), store_room, 13).
holds(4, in((block,5)), puzzle_room, 13).
holds(4, in((block,6)), puzzle_room, 13).
holds(4, in((block,7)), puzzle_room, 13).
holds(4, in((block,8)), store_room, 13).
holds(4, in((block,9)), puzzle_room, 13).
holds(4, in(puzzle_room_table), puzzle_room, 13).
holds(4, in(talos), puzzle_room, 13).
holds(4, in_tower((block,1),(block,1)), true, 13).
holds(4, in_tower((block,1),(block,2)), false, 13).
holds(4, in_tower((block,1),(block,3)), false, 13).
holds(4, in_tower((block,1),(block,4)), false, 13).
holds(4, in_tower((block,1),(block,5)), false, 13).
holds(4, in_tower((block,1),(block,6)), false, 13).
holds(4, in_tower((block,1),(block,7)), false, 13).
holds(4, in_tower((block,1),(block,8)), false, 13).
holds(4, in_tower((block,1),(block,9)), false, 13).
holds(4, in_tower((block,2),(block,1)), false, 13).
holds(4, in_tower((block,2),(block,2)), true, 13).
holds(4, in_tower((block,2),(block,3)), false, 13).
holds(4, in_tower((block,2),(block,4)), false, 13).
holds(4, in_tower((block,2),(block,5)), false, 13).
holds(4, in_tower((block,2),(block,6)), false, 13).
holds(4, in_tower((block,2),(block,7)), false, 13).
holds(4, in_tower((block,2),(block,8)), false, 13).
holds(4, in_tower((block,2),(block,9)), false, 13).
holds(4, in_tower((block,3),(block,1)), false, 13).
holds(4, in_tower((block,3),(block,2)), false, 13).
holds(4, in_tower((block,3),(block,3)), true, 13).
holds(4, in_tower((block,3),(block,4)), false, 13).
holds(4, in_tower((block,3),(block,5)), false, 13).
holds(4, in_tower((block,3),(block,6)), false, 13).
holds(4, in_tower((block,3),(block,7)), false, 13).
holds(4, in_tower((block,3),(block,8)), false, 13).
holds(4, in_tower((block,3),(block,9)), false, 13).
holds(4, in_tower((block,4),(block,1)), false, 13).
holds(4, in_tower((block,4),(block,2)), false, 13).
holds(4, in_tower((block,4),(block,3)), false, 13).
holds(4, in_tower((block,4),(block,4)), false, 13).
holds(4, in_tower((block,4),(block,5)), false, 13).
holds(4, in_tower((block,4),(block,6)), false, 13).
holds(4, in_tower((block,4),(block,7)), false, 13).
holds(4, in_tower((block,4),(block,8)), false, 13).
holds(4, in_tower((block,4),(block,9)), false, 13).
holds(4, in_tower((block,5),(block,1)), false, 13).
holds(4, in_tower((block,5),(block,2)), false, 13).
holds(4, in_tower((block,5),(block,3)), false, 13).
holds(4, in_tower((block,5),(block,4)), false, 13).
holds(4, in_tower((block,5),(block,5)), false, 13).
holds(4, in_tower((block,5),(block,6)), false, 13).
holds(4, in_tower((block,5),(block,7)), false, 13).
holds(4, in_tower((block,5),(block,8)), false, 13).
holds(4, in_tower((block,5),(block,9)), false, 13).
holds(4, in_tower((block,6),(block,1)), false, 13).
holds(4, in_tower((block,6),(block,2)), false, 13).
holds(4, in_tower((block,6),(block,3)), false, 13).
holds(4, in_tower((block,6),(block,4)), false, 13).
holds(4, in_tower((block,6),(block,5)), true, 13).
holds(4, in_tower((block,6),(block,6)), true, 13).
holds(4, in_tower((block,6),(block,7)), false, 13).
holds(4, in_tower((block,6),(block,8)), false, 13).
holds(4, in_tower((block,6),(block,9)), false, 13).
holds(4, in_tower((block,7),(block,1)), false, 13).
holds(4, in_tower((block,7),(block,2)), false, 13).
holds(4, in_tower((block,7),(block,3)), false, 13).
holds(4, in_tower((block,7),(block,4)), false, 13).
holds(4, in_tower((block,7),(block,5)), false, 13).
holds(4, in_tower((block,7),(block,6)), false, 13).
holds(4, in_tower((block,7),(block,7)), true, 13).
holds(4, in_tower((block,7),(block,8)), false, 13).
holds(4, in_tower((block,7),(block,9)), false, 13).
holds(4, in_tower((block,8),(block,1)), false, 13).
holds(4, in_tower((block,8),(block,2)), false, 13).
holds(4, in_tower((block,8),(block,3)), false, 13).
holds(4, in_tower((block,8),(block,4)), false, 13).
holds(4, in_tower((block,8),(block,5)), false, 13).
holds(4, in_tower((block,8),(block,6)), false, 13).
holds(4, in_tower((block,8),(block,7)), false, 13).
holds(4, in_tower((block,8),(block,8)), false, 13).
holds(4, in_tower((block,8),(block,9)), false, 13).
holds(4, in_tower((block,9),(block,1)), false, 13).
holds(4, in_tower((block,9),(block,2)), false, 13).
holds(4, in_tower((block,9),(block,3)), false, 13).
holds(4, in_tower((block,9),(block,4)), false, 13).
holds(4, in_tower((block,9),(block,5)), false, 13).
holds(4, in_tower((block,9),(block,6)), false, 13).
holds(4, in_tower((block,9),(block,7)), false, 13).
holds(4, in_tower((block,9),(block,8)), false, 13).
holds(4, in_tower((block,9),(block,9)), true, 13).
holds(4, on((block,1)), puzzle_room_table, 13).
holds(4, on((block,2)), puzzle_room_table, 13).
holds(4, on((block,3)), puzzle_room_table, 13).
holds(4, on((block,4)), nothing, 13).
holds(4, on((block,5)), (block,6), 13).
holds(4, on((block,6)), puzzle_room_table, 13).
holds(4, on((block,7)), puzzle_room_table, 13).
holds(4, on((block,8)), nothing, 13).
holds(4, on((block,9)), puzzle_room_table, 13).
holds(4, tower_base((block,1),puzzle_room_table), true, 13).
holds(4, tower_base((block,2),puzzle_room_table), true, 13).
holds(4, tower_base((block,3),puzzle_room_table), true, 13).
holds(4, tower_base((block,4),puzzle_room_table), false, 13).
holds(4, tower_base((block,5),puzzle_room_table), false, 13).
holds(4, tower_base((block,6),puzzle_room_table), true, 13).
holds(4, tower_base((block,7),puzzle_room_table), true, 13).
holds(4, tower_base((block,8),puzzle_room_table), false, 13).
holds(4, tower_base((block,9),puzzle_room_table), true, 13).
holds(4, transporting(talos,(block,1)), false, 13).
holds(4, transporting(talos,(block,2)), false, 13).
holds(4, transporting(talos,(block,3)), false, 13).
holds(4, transporting(talos,(block,4)), false, 13).
holds(4, transporting(talos,(block,5)), false, 13).
holds(4, transporting(talos,(block,6)), false, 13).
holds(4, transporting(talos,(block,7)), false, 13).
holds(4, transporting(talos,(block,8)), false, 13).
holds(4, transporting(talos,(block,9)), true, 13).
holds(4, unordered_tower((block,1),puzzle_room_table), false, 13).
holds(4, unordered_tower((block,2),puzzle_room_table), false, 13).
holds(4, unordered_tower((block,3),puzzle_room_table), false, 13).
holds(4, unordered_tower((block,4),puzzle_room_table), false, 13).
holds(4, unordered_tower((block,5),puzzle_room_table), false, 13).
holds(4, unordered_tower((block,6),puzzle_room_table), false, 13).
holds(4, unordered_tower((block,7),puzzle_room_table), false, 13).
holds(4, unordered_tower((block,8),puzzle_room_table), false, 13).
holds(4, unordered_tower((block,9),puzzle_room_table), false, 13).

[18-04-2022_15-46-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[18-04-2022_15-46-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_15-46-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 588 rules into program part ash_goal_state:

final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(3, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,1),(block,7)), false, true).
final_goal(3, in_tower((block,1),(block,7)), true, false).
final_goal(3, in_tower((block,1),(block,8)), false, true).
final_goal(3, in_tower((block,1),(block,8)), true, false).
final_goal(3, in_tower((block,1),(block,9)), false, true).
final_goal(3, in_tower((block,1),(block,9)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,7)), false, true).
final_goal(3, in_tower((block,2),(block,7)), true, false).
final_goal(3, in_tower((block,2),(block,8)), false, true).
final_goal(3, in_tower((block,2),(block,8)), true, false).
final_goal(3, in_tower((block,2),(block,9)), false, true).
final_goal(3, in_tower((block,2),(block,9)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,7)), false, true).
final_goal(3, in_tower((block,3),(block,7)), true, false).
final_goal(3, in_tower((block,3),(block,8)), false, true).
final_goal(3, in_tower((block,3),(block,8)), true, false).
final_goal(3, in_tower((block,3),(block,9)), false, true).
final_goal(3, in_tower((block,3),(block,9)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,7)), false, true).
final_goal(3, in_tower((block,4),(block,7)), true, false).
final_goal(3, in_tower((block,4),(block,8)), false, true).
final_goal(3, in_tower((block,4),(block,8)), true, false).
final_goal(3, in_tower((block,4),(block,9)), false, true).
final_goal(3, in_tower((block,4),(block,9)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,7)), false, true).
final_goal(3, in_tower((block,5),(block,7)), true, false).
final_goal(3, in_tower((block,5),(block,8)), false, true).
final_goal(3, in_tower((block,5),(block,8)), true, false).
final_goal(3, in_tower((block,5),(block,9)), false, true).
final_goal(3, in_tower((block,5),(block,9)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, in_tower((block,6),(block,7)), false, true).
final_goal(3, in_tower((block,6),(block,7)), true, false).
final_goal(3, in_tower((block,6),(block,8)), false, true).
final_goal(3, in_tower((block,6),(block,8)), true, false).
final_goal(3, in_tower((block,6),(block,9)), false, true).
final_goal(3, in_tower((block,6),(block,9)), true, false).
final_goal(3, in_tower((block,7),(block,1)), false, true).
final_goal(3, in_tower((block,7),(block,1)), true, false).
final_goal(3, in_tower((block,7),(block,2)), false, true).
final_goal(3, in_tower((block,7),(block,2)), true, false).
final_goal(3, in_tower((block,7),(block,3)), false, true).
final_goal(3, in_tower((block,7),(block,3)), true, false).
final_goal(3, in_tower((block,7),(block,4)), false, true).
final_goal(3, in_tower((block,7),(block,4)), true, false).
final_goal(3, in_tower((block,7),(block,5)), false, true).
final_goal(3, in_tower((block,7),(block,5)), true, false).
final_goal(3, in_tower((block,7),(block,6)), false, true).
final_goal(3, in_tower((block,7),(block,6)), true, false).
final_goal(3, in_tower((block,7),(block,7)), false, true).
final_goal(3, in_tower((block,7),(block,7)), true, false).
final_goal(3, in_tower((block,7),(block,8)), false, true).
final_goal(3, in_tower((block,7),(block,8)), true, false).
final_goal(3, in_tower((block,7),(block,9)), false, true).
final_goal(3, in_tower((block,7),(block,9)), true, false).
final_goal(3, in_tower((block,8),(block,1)), false, true).
final_goal(3, in_tower((block,8),(block,1)), true, false).
final_goal(3, in_tower((block,8),(block,2)), false, true).
final_goal(3, in_tower((block,8),(block,2)), true, false).
final_goal(3, in_tower((block,8),(block,3)), false, true).
final_goal(3, in_tower((block,8),(block,3)), true, false).
final_goal(3, in_tower((block,8),(block,4)), false, true).
final_goal(3, in_tower((block,8),(block,4)), true, false).
final_goal(3, in_tower((block,8),(block,5)), false, true).
final_goal(3, in_tower((block,8),(block,5)), true, false).
final_goal(3, in_tower((block,8),(block,6)), false, true).
final_goal(3, in_tower((block,8),(block,6)), true, false).
final_goal(3, in_tower((block,8),(block,7)), false, true).
final_goal(3, in_tower((block,8),(block,7)), true, false).
final_goal(3, in_tower((block,8),(block,8)), false, true).
final_goal(3, in_tower((block,8),(block,8)), true, false).
final_goal(3, in_tower((block,8),(block,9)), false, true).
final_goal(3, in_tower((block,8),(block,9)), true, false).
final_goal(3, in_tower((block,9),(block,1)), false, true).
final_goal(3, in_tower((block,9),(block,1)), true, false).
final_goal(3, in_tower((block,9),(block,2)), false, true).
final_goal(3, in_tower((block,9),(block,2)), true, false).
final_goal(3, in_tower((block,9),(block,3)), false, true).
final_goal(3, in_tower((block,9),(block,3)), true, false).
final_goal(3, in_tower((block,9),(block,4)), false, true).
final_goal(3, in_tower((block,9),(block,4)), true, false).
final_goal(3, in_tower((block,9),(block,5)), false, true).
final_goal(3, in_tower((block,9),(block,5)), true, false).
final_goal(3, in_tower((block,9),(block,6)), false, true).
final_goal(3, in_tower((block,9),(block,6)), true, false).
final_goal(3, in_tower((block,9),(block,7)), false, false).
final_goal(3, in_tower((block,9),(block,7)), true, true).
final_goal(3, in_tower((block,9),(block,8)), false, false).
final_goal(3, in_tower((block,9),(block,8)), true, true).
final_goal(3, in_tower((block,9),(block,9)), false, false).
final_goal(3, in_tower((block,9),(block,9)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), (block,7), false).
final_goal(3, on((block,1)), (block,8), false).
final_goal(3, on((block,1)), (block,9), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), (block,7), false).
final_goal(3, on((block,2)), (block,8), false).
final_goal(3, on((block,2)), (block,9), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), (block,7), false).
final_goal(3, on((block,3)), (block,8), false).
final_goal(3, on((block,3)), (block,9), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), (block,7), false).
final_goal(3, on((block,4)), (block,8), false).
final_goal(3, on((block,4)), (block,9), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), (block,7), false).
final_goal(3, on((block,5)), (block,8), false).
final_goal(3, on((block,5)), (block,9), false).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), (block,7), false).
final_goal(3, on((block,6)), (block,8), false).
final_goal(3, on((block,6)), (block,9), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, on((block,7)), (block,1), false).
final_goal(3, on((block,7)), (block,2), false).
final_goal(3, on((block,7)), (block,3), false).
final_goal(3, on((block,7)), (block,4), false).
final_goal(3, on((block,7)), (block,5), false).
final_goal(3, on((block,7)), (block,6), false).
final_goal(3, on((block,7)), (block,8), true).
final_goal(3, on((block,7)), (block,9), false).
final_goal(3, on((block,7)), nothing, false).
final_goal(3, on((block,7)), puzzle_room_table, false).
final_goal(3, on((block,8)), (block,1), false).
final_goal(3, on((block,8)), (block,2), false).
final_goal(3, on((block,8)), (block,3), false).
final_goal(3, on((block,8)), (block,4), false).
final_goal(3, on((block,8)), (block,5), false).
final_goal(3, on((block,8)), (block,6), false).
final_goal(3, on((block,8)), (block,7), false).
final_goal(3, on((block,8)), (block,9), true).
final_goal(3, on((block,8)), nothing, false).
final_goal(3, on((block,8)), puzzle_room_table, false).
final_goal(3, on((block,9)), (block,1), false).
final_goal(3, on((block,9)), (block,2), false).
final_goal(3, on((block,9)), (block,3), false).
final_goal(3, on((block,9)), (block,4), false).
final_goal(3, on((block,9)), (block,5), false).
final_goal(3, on((block,9)), (block,6), false).
final_goal(3, on((block,9)), (block,7), false).
final_goal(3, on((block,9)), (block,8), false).
final_goal(3, on((block,9)), nothing, false).
final_goal(3, on((block,9)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, tower_base((block,7),puzzle_room_table), false, true).
final_goal(3, tower_base((block,7),puzzle_room_table), true, false).
final_goal(3, tower_base((block,8),puzzle_room_table), false, true).
final_goal(3, tower_base((block,8),puzzle_room_table), true, false).
final_goal(3, tower_base((block,9),puzzle_room_table), false, false).
final_goal(3, tower_base((block,9),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(4, complete_tower(blue,puzzle_room_table), false, false).
final_goal(4, complete_tower(blue,puzzle_room_table), true, true).
final_goal(4, complete_tower(red,puzzle_room_table), false, false).
final_goal(4, complete_tower(red,puzzle_room_table), true, true).
final_goal(4, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(4, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(4, in_tower((block,1),(block,1)), false, true).
final_goal(4, in_tower((block,1),(block,1)), true, false).
final_goal(4, in_tower((block,1),(block,2)), false, true).
final_goal(4, in_tower((block,1),(block,2)), true, false).
final_goal(4, in_tower((block,1),(block,3)), false, true).
final_goal(4, in_tower((block,1),(block,3)), true, false).
final_goal(4, in_tower((block,1),(block,4)), false, true).
final_goal(4, in_tower((block,1),(block,4)), true, false).
final_goal(4, in_tower((block,1),(block,5)), false, true).
final_goal(4, in_tower((block,1),(block,5)), true, false).
final_goal(4, in_tower((block,1),(block,6)), false, true).
final_goal(4, in_tower((block,1),(block,6)), true, false).
final_goal(4, in_tower((block,1),(block,7)), false, true).
final_goal(4, in_tower((block,1),(block,7)), true, false).
final_goal(4, in_tower((block,1),(block,8)), false, true).
final_goal(4, in_tower((block,1),(block,8)), true, false).
final_goal(4, in_tower((block,1),(block,9)), false, true).
final_goal(4, in_tower((block,1),(block,9)), true, false).
final_goal(4, in_tower((block,2),(block,1)), false, true).
final_goal(4, in_tower((block,2),(block,1)), true, false).
final_goal(4, in_tower((block,2),(block,2)), false, true).
final_goal(4, in_tower((block,2),(block,2)), true, false).
final_goal(4, in_tower((block,2),(block,3)), false, true).
final_goal(4, in_tower((block,2),(block,3)), true, false).
final_goal(4, in_tower((block,2),(block,4)), false, true).
final_goal(4, in_tower((block,2),(block,4)), true, false).
final_goal(4, in_tower((block,2),(block,5)), false, true).
final_goal(4, in_tower((block,2),(block,5)), true, false).
final_goal(4, in_tower((block,2),(block,6)), false, true).
final_goal(4, in_tower((block,2),(block,6)), true, false).
final_goal(4, in_tower((block,2),(block,7)), false, true).
final_goal(4, in_tower((block,2),(block,7)), true, false).
final_goal(4, in_tower((block,2),(block,8)), false, true).
final_goal(4, in_tower((block,2),(block,8)), true, false).
final_goal(4, in_tower((block,2),(block,9)), false, true).
final_goal(4, in_tower((block,2),(block,9)), true, false).
final_goal(4, in_tower((block,3),(block,1)), false, false).
final_goal(4, in_tower((block,3),(block,1)), true, true).
final_goal(4, in_tower((block,3),(block,2)), false, false).
final_goal(4, in_tower((block,3),(block,2)), true, true).
final_goal(4, in_tower((block,3),(block,3)), false, false).
final_goal(4, in_tower((block,3),(block,3)), true, true).
final_goal(4, in_tower((block,3),(block,4)), false, true).
final_goal(4, in_tower((block,3),(block,4)), true, false).
final_goal(4, in_tower((block,3),(block,5)), false, true).
final_goal(4, in_tower((block,3),(block,5)), true, false).
final_goal(4, in_tower((block,3),(block,6)), false, true).
final_goal(4, in_tower((block,3),(block,6)), true, false).
final_goal(4, in_tower((block,3),(block,7)), false, true).
final_goal(4, in_tower((block,3),(block,7)), true, false).
final_goal(4, in_tower((block,3),(block,8)), false, true).
final_goal(4, in_tower((block,3),(block,8)), true, false).
final_goal(4, in_tower((block,3),(block,9)), false, true).
final_goal(4, in_tower((block,3),(block,9)), true, false).
final_goal(4, in_tower((block,4),(block,1)), false, true).
final_goal(4, in_tower((block,4),(block,1)), true, false).
final_goal(4, in_tower((block,4),(block,2)), false, true).
final_goal(4, in_tower((block,4),(block,2)), true, false).
final_goal(4, in_tower((block,4),(block,3)), false, true).
final_goal(4, in_tower((block,4),(block,3)), true, false).
final_goal(4, in_tower((block,4),(block,4)), false, true).
final_goal(4, in_tower((block,4),(block,4)), true, false).
final_goal(4, in_tower((block,4),(block,5)), false, true).
final_goal(4, in_tower((block,4),(block,5)), true, false).
final_goal(4, in_tower((block,4),(block,6)), false, true).
final_goal(4, in_tower((block,4),(block,6)), true, false).
final_goal(4, in_tower((block,4),(block,7)), false, true).
final_goal(4, in_tower((block,4),(block,7)), true, false).
final_goal(4, in_tower((block,4),(block,8)), false, true).
final_goal(4, in_tower((block,4),(block,8)), true, false).
final_goal(4, in_tower((block,4),(block,9)), false, true).
final_goal(4, in_tower((block,4),(block,9)), true, false).
final_goal(4, in_tower((block,5),(block,1)), false, true).
final_goal(4, in_tower((block,5),(block,1)), true, false).
final_goal(4, in_tower((block,5),(block,2)), false, true).
final_goal(4, in_tower((block,5),(block,2)), true, false).
final_goal(4, in_tower((block,5),(block,3)), false, true).
final_goal(4, in_tower((block,5),(block,3)), true, false).
final_goal(4, in_tower((block,5),(block,4)), false, true).
final_goal(4, in_tower((block,5),(block,4)), true, false).
final_goal(4, in_tower((block,5),(block,5)), false, true).
final_goal(4, in_tower((block,5),(block,5)), true, false).
final_goal(4, in_tower((block,5),(block,6)), false, true).
final_goal(4, in_tower((block,5),(block,6)), true, false).
final_goal(4, in_tower((block,5),(block,7)), false, true).
final_goal(4, in_tower((block,5),(block,7)), true, false).
final_goal(4, in_tower((block,5),(block,8)), false, true).
final_goal(4, in_tower((block,5),(block,8)), true, false).
final_goal(4, in_tower((block,5),(block,9)), false, true).
final_goal(4, in_tower((block,5),(block,9)), true, false).
final_goal(4, in_tower((block,6),(block,1)), false, true).
final_goal(4, in_tower((block,6),(block,1)), true, false).
final_goal(4, in_tower((block,6),(block,2)), false, true).
final_goal(4, in_tower((block,6),(block,2)), true, false).
final_goal(4, in_tower((block,6),(block,3)), false, true).
final_goal(4, in_tower((block,6),(block,3)), true, false).
final_goal(4, in_tower((block,6),(block,4)), false, false).
final_goal(4, in_tower((block,6),(block,4)), true, true).
final_goal(4, in_tower((block,6),(block,5)), false, false).
final_goal(4, in_tower((block,6),(block,5)), true, true).
final_goal(4, in_tower((block,6),(block,6)), false, false).
final_goal(4, in_tower((block,6),(block,6)), true, true).
final_goal(4, in_tower((block,6),(block,7)), false, true).
final_goal(4, in_tower((block,6),(block,7)), true, false).
final_goal(4, in_tower((block,6),(block,8)), false, true).
final_goal(4, in_tower((block,6),(block,8)), true, false).
final_goal(4, in_tower((block,6),(block,9)), false, true).
final_goal(4, in_tower((block,6),(block,9)), true, false).
final_goal(4, in_tower((block,7),(block,1)), false, true).
final_goal(4, in_tower((block,7),(block,1)), true, false).
final_goal(4, in_tower((block,7),(block,2)), false, true).
final_goal(4, in_tower((block,7),(block,2)), true, false).
final_goal(4, in_tower((block,7),(block,3)), false, true).
final_goal(4, in_tower((block,7),(block,3)), true, false).
final_goal(4, in_tower((block,7),(block,4)), false, true).
final_goal(4, in_tower((block,7),(block,4)), true, false).
final_goal(4, in_tower((block,7),(block,5)), false, true).
final_goal(4, in_tower((block,7),(block,5)), true, false).
final_goal(4, in_tower((block,7),(block,6)), false, true).
final_goal(4, in_tower((block,7),(block,6)), true, false).
final_goal(4, in_tower((block,7),(block,7)), false, true).
final_goal(4, in_tower((block,7),(block,7)), true, false).
final_goal(4, in_tower((block,7),(block,8)), false, true).
final_goal(4, in_tower((block,7),(block,8)), true, false).
final_goal(4, in_tower((block,7),(block,9)), false, true).
final_goal(4, in_tower((block,7),(block,9)), true, false).
final_goal(4, in_tower((block,8),(block,1)), false, true).
final_goal(4, in_tower((block,8),(block,1)), true, false).
final_goal(4, in_tower((block,8),(block,2)), false, true).
final_goal(4, in_tower((block,8),(block,2)), true, false).
final_goal(4, in_tower((block,8),(block,3)), false, true).
final_goal(4, in_tower((block,8),(block,3)), true, false).
final_goal(4, in_tower((block,8),(block,4)), false, true).
final_goal(4, in_tower((block,8),(block,4)), true, false).
final_goal(4, in_tower((block,8),(block,5)), false, true).
final_goal(4, in_tower((block,8),(block,5)), true, false).
final_goal(4, in_tower((block,8),(block,6)), false, true).
final_goal(4, in_tower((block,8),(block,6)), true, false).
final_goal(4, in_tower((block,8),(block,7)), false, true).
final_goal(4, in_tower((block,8),(block,7)), true, false).
final_goal(4, in_tower((block,8),(block,8)), false, true).
final_goal(4, in_tower((block,8),(block,8)), true, false).
final_goal(4, in_tower((block,8),(block,9)), false, true).
final_goal(4, in_tower((block,8),(block,9)), true, false).
final_goal(4, in_tower((block,9),(block,1)), false, true).
final_goal(4, in_tower((block,9),(block,1)), true, false).
final_goal(4, in_tower((block,9),(block,2)), false, true).
final_goal(4, in_tower((block,9),(block,2)), true, false).
final_goal(4, in_tower((block,9),(block,3)), false, true).
final_goal(4, in_tower((block,9),(block,3)), true, false).
final_goal(4, in_tower((block,9),(block,4)), false, true).
final_goal(4, in_tower((block,9),(block,4)), true, false).
final_goal(4, in_tower((block,9),(block,5)), false, true).
final_goal(4, in_tower((block,9),(block,5)), true, false).
final_goal(4, in_tower((block,9),(block,6)), false, true).
final_goal(4, in_tower((block,9),(block,6)), true, false).
final_goal(4, in_tower((block,9),(block,7)), false, false).
final_goal(4, in_tower((block,9),(block,7)), true, true).
final_goal(4, in_tower((block,9),(block,8)), false, false).
final_goal(4, in_tower((block,9),(block,8)), true, true).
final_goal(4, in_tower((block,9),(block,9)), false, false).
final_goal(4, in_tower((block,9),(block,9)), true, true).
final_goal(4, on((block,1)), (block,2), true).
final_goal(4, on((block,1)), (block,3), false).
final_goal(4, on((block,1)), (block,4), false).
final_goal(4, on((block,1)), (block,5), false).
final_goal(4, on((block,1)), (block,6), false).
final_goal(4, on((block,1)), (block,7), false).
final_goal(4, on((block,1)), (block,8), false).
final_goal(4, on((block,1)), (block,9), false).
final_goal(4, on((block,1)), nothing, false).
final_goal(4, on((block,1)), puzzle_room_table, false).
final_goal(4, on((block,2)), (block,1), false).
final_goal(4, on((block,2)), (block,3), true).
final_goal(4, on((block,2)), (block,4), false).
final_goal(4, on((block,2)), (block,5), false).
final_goal(4, on((block,2)), (block,6), false).
final_goal(4, on((block,2)), (block,7), false).
final_goal(4, on((block,2)), (block,8), false).
final_goal(4, on((block,2)), (block,9), false).
final_goal(4, on((block,2)), nothing, false).
final_goal(4, on((block,2)), puzzle_room_table, false).
final_goal(4, on((block,3)), (block,1), false).
final_goal(4, on((block,3)), (block,2), false).
final_goal(4, on((block,3)), (block,4), false).
final_goal(4, on((block,3)), (block,5), false).
final_goal(4, on((block,3)), (block,6), false).
final_goal(4, on((block,3)), (block,7), false).
final_goal(4, on((block,3)), (block,8), false).
final_goal(4, on((block,3)), (block,9), false).
final_goal(4, on((block,3)), nothing, false).
final_goal(4, on((block,3)), puzzle_room_table, true).
final_goal(4, on((block,4)), (block,1), false).
final_goal(4, on((block,4)), (block,2), false).
final_goal(4, on((block,4)), (block,3), false).
final_goal(4, on((block,4)), (block,5), true).
final_goal(4, on((block,4)), (block,6), false).
final_goal(4, on((block,4)), (block,7), false).
final_goal(4, on((block,4)), (block,8), false).
final_goal(4, on((block,4)), (block,9), false).
final_goal(4, on((block,4)), nothing, false).
final_goal(4, on((block,4)), puzzle_room_table, false).
final_goal(4, on((block,5)), (block,1), false).
final_goal(4, on((block,5)), (block,2), false).
final_goal(4, on((block,5)), (block,3), false).
final_goal(4, on((block,5)), (block,4), false).
final_goal(4, on((block,5)), (block,6), true).
final_goal(4, on((block,5)), (block,7), false).
final_goal(4, on((block,5)), (block,8), false).
final_goal(4, on((block,5)), (block,9), false).
final_goal(4, on((block,5)), nothing, false).
final_goal(4, on((block,5)), puzzle_room_table, false).
final_goal(4, on((block,6)), (block,1), false).
final_goal(4, on((block,6)), (block,2), false).
final_goal(4, on((block,6)), (block,3), false).
final_goal(4, on((block,6)), (block,4), false).
final_goal(4, on((block,6)), (block,5), false).
final_goal(4, on((block,6)), (block,7), false).
final_goal(4, on((block,6)), (block,8), false).
final_goal(4, on((block,6)), (block,9), false).
final_goal(4, on((block,6)), nothing, false).
final_goal(4, on((block,6)), puzzle_room_table, true).
final_goal(4, on((block,7)), (block,1), false).
final_goal(4, on((block,7)), (block,2), false).
final_goal(4, on((block,7)), (block,3), false).
final_goal(4, on((block,7)), (block,4), false).
final_goal(4, on((block,7)), (block,5), false).
final_goal(4, on((block,7)), (block,6), false).
final_goal(4, on((block,7)), (block,8), true).
final_goal(4, on((block,7)), (block,9), false).
final_goal(4, on((block,7)), nothing, false).
final_goal(4, on((block,7)), puzzle_room_table, false).
final_goal(4, on((block,8)), (block,1), false).
final_goal(4, on((block,8)), (block,2), false).
final_goal(4, on((block,8)), (block,3), false).
final_goal(4, on((block,8)), (block,4), false).
final_goal(4, on((block,8)), (block,5), false).
final_goal(4, on((block,8)), (block,6), false).
final_goal(4, on((block,8)), (block,7), false).
final_goal(4, on((block,8)), (block,9), true).
final_goal(4, on((block,8)), nothing, false).
final_goal(4, on((block,8)), puzzle_room_table, false).
final_goal(4, on((block,9)), (block,1), false).
final_goal(4, on((block,9)), (block,2), false).
final_goal(4, on((block,9)), (block,3), false).
final_goal(4, on((block,9)), (block,4), false).
final_goal(4, on((block,9)), (block,5), false).
final_goal(4, on((block,9)), (block,6), false).
final_goal(4, on((block,9)), (block,7), false).
final_goal(4, on((block,9)), (block,8), false).
final_goal(4, on((block,9)), nothing, false).
final_goal(4, on((block,9)), puzzle_room_table, true).
final_goal(4, tower_base((block,1),puzzle_room_table), false, true).
final_goal(4, tower_base((block,1),puzzle_room_table), true, false).
final_goal(4, tower_base((block,2),puzzle_room_table), false, true).
final_goal(4, tower_base((block,2),puzzle_room_table), true, false).
final_goal(4, tower_base((block,3),puzzle_room_table), false, false).
final_goal(4, tower_base((block,3),puzzle_room_table), true, true).
final_goal(4, tower_base((block,4),puzzle_room_table), false, true).
final_goal(4, tower_base((block,4),puzzle_room_table), true, false).
final_goal(4, tower_base((block,5),puzzle_room_table), false, true).
final_goal(4, tower_base((block,5),puzzle_room_table), true, false).
final_goal(4, tower_base((block,6),puzzle_room_table), false, false).
final_goal(4, tower_base((block,6),puzzle_room_table), true, true).
final_goal(4, tower_base((block,7),puzzle_room_table), false, true).
final_goal(4, tower_base((block,7),puzzle_room_table), true, false).
final_goal(4, tower_base((block,8),puzzle_room_table), false, true).
final_goal(4, tower_base((block,8),puzzle_room_table), true, false).
final_goal(4, tower_base((block,9),puzzle_room_table), false, false).
final_goal(4, tower_base((block,9),puzzle_room_table), true, true).
final_goal(4, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,9),puzzle_room_table), true, false).

[18-04-2022_15-46-45] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=21']

[18-04-2022_15-46-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 9})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,2),(block,3))', 'F': 'transporting(talos,(block,2))', 'V': 'false', 'I': 9})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 10})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,1),(block,2))', 'F': 'transporting(talos,(block,1))', 'V': 'false', 'I': 10})
SubGoal({'L': 4, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 11})
SubGoal({'L': 4, 'R': 'talos', 'A': 'collect((block,8))', 'F': 'on((block,8))', 'V': 'nothing', 'I': 12})
SubGoal({'L': 4, 'R': 'talos', 'A': 'collect((block,8))', 'F': 'transporting(talos,(block,8))', 'V': 'true', 'I': 12})
SubGoal({'L': 4, 'R': 'talos', 'A': 'collect((block,4))', 'F': 'on((block,4))', 'V': 'nothing', 'I': 13})
SubGoal({'L': 4, 'R': 'talos', 'A': 'collect((block,4))', 'F': 'transporting(talos,(block,4))', 'V': 'true', 'I': 13})
SubGoal({'L': 4, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 14})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 15})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,4),(block,5))', 'F': 'transporting(talos,(block,4))', 'V': 'false', 'I': 15})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,8),(block,9))', 'F': 'on((block,8))', 'V': '(block,9)', 'I': 16})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,8),(block,9))', 'F': 'transporting(talos,(block,8))', 'V': 'false', 'I': 16})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,7),(block,8))', 'F': 'on((block,7))', 'V': '(block,8)', 'I': 17})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,7),(block,8))', 'F': 'transporting(talos,(block,7))', 'V': 'false', 'I': 17})

[18-04-2022_15-46-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_15-46-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 16 rules into program part base:

sub_goal(4, talos, place_upon((block,2),(block,3)), on((block,2)), (block,3), 9).
sub_goal(4, talos, place_upon((block,2),(block,3)), transporting(talos,(block,2)), false, 9).
sub_goal(4, talos, place_upon((block,1),(block,2)), on((block,1)), (block,2), 10).
sub_goal(4, talos, place_upon((block,1),(block,2)), transporting(talos,(block,1)), false, 10).
sub_goal(4, talos, move(store_room), in(talos), store_room, 11).
sub_goal(4, talos, collect((block,8)), on((block,8)), nothing, 12).
sub_goal(4, talos, collect((block,8)), transporting(talos,(block,8)), true, 12).
sub_goal(4, talos, collect((block,4)), on((block,4)), nothing, 13).
sub_goal(4, talos, collect((block,4)), transporting(talos,(block,4)), true, 13).
sub_goal(4, talos, move(puzzle_room), in(talos), puzzle_room, 14).
sub_goal(4, talos, place_upon((block,4),(block,5)), on((block,4)), (block,5), 15).
sub_goal(4, talos, place_upon((block,4),(block,5)), transporting(talos,(block,4)), false, 15).
sub_goal(4, talos, place_upon((block,8),(block,9)), on((block,8)), (block,9), 16).
sub_goal(4, talos, place_upon((block,8),(block,9)), transporting(talos,(block,8)), false, 16).
sub_goal(4, talos, place_upon((block,7),(block,8)), on((block,7)), (block,8), 17).
sub_goal(4, talos, place_upon((block,7),(block,8)), transporting(talos,(block,7)), false, 17).

[18-04-2022_15-46-45] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_15-46-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[18-04-2022_15-46-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=21']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001D5FEAF9EE0>]
	incrementor = SolveIncrementor(step_start=13, step_increase=1, step_increase_initial=9, step_end_min=22, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1795.4828632000003, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(3, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 13), range_=None), IncPart(name='plan_module', args=('#inc', 13, 'false', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 13, 'false', 'false', 'false', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 13, 9, 17, 'sequential', 'false'), range_=None)]

[18-04-2022_15-46-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_15-46-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_15-46-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_15-46-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1251 rules

[18-04-2022_15-46-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006582800000160205s

[18-04-2022_15-46-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(3, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[18-04-2022_15-46-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(3), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[18-04-2022_15-46-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.032765s.

[18-04-2022_15-46-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006028s with result Satisfiable.

[18-04-2022_15-46-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[18-04-2022_15-46-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001D613BD8F40>

[18-04-2022_15-46-45] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 3)
	('start_step', 13)
	('last_sgoals', 17)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001D5FEA66D00>)
	('first_sgoals', 9)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001D613BD8F40>)

[18-04-2022_15-46-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 13). %* None *%
#program plan_module(#inc, 13, false, true). %* None *%
#program optimisation_module(#inc, 13, false, false, false, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 13, 9, 17, sequential, false). %* None *%

[18-04-2022_15-46-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     12 : Current =     21
Incrementor step ends | Minimum  =     22 : Maximum =    300

[18-04-2022_15-46-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('state_module', [Number(13), Number(13)]), ('plan_module', [Number(13), Number(13), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(13), Number(13), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('conformance_module', [Number(13), Number(13), Number(9), Number(17), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(14), Number(13)]), ('plan_module', [Number(14), Number(13), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(14), Number(13), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('conformance_module', [Number(14), Number(13), Number(9), Number(17), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(15), Number(13)]), ('plan_module', [Number(15), Number(13), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(15), Number(13), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('conformance_module', [Number(15), Number(13), Number(9), Number(17), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(16), Number(13)]), ('plan_module', [Number(16), Number(13), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(16), Number(13), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(13), Number(9), Number(17), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(17), Number(13)]), ('plan_module', [Number(17), Number(13), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(17), Number(13), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(13), Number(9), Number(17), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(18), Number(13)]), ('plan_module', [Number(18), Number(13), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(18), Number(13), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('conformance_module', [Number(18), Number(13), Number(9), Number(17), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(19), Number(13)]), ('plan_module', [Number(19), Number(13), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(19), Number(13), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('conformance_module', [Number(19), Number(13), Number(9), Number(17), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(20), Number(13)]), ('plan_module', [Number(20), Number(13), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(20), Number(13), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(13), Number(9), Number(17), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(21), Number(13)]), ('plan_module', [Number(21), Number(13), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(21), Number(13), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(13), Number(9), Number(17), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.618338s.

[18-04-2022_15-46-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.256126s with result Unsatisfiable.

[18-04-2022_15-46-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.8744642999999996, Incremental time limit = None
Running cumulative time = 0.8744642999999996, Cumulative time limit = 1795.4828632000003
Used memory = (RSS = 2220.406250Mb, VMS = 2234.511719Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     21 : Current =     22
Incrementor step ends | Minimum  =     22 : Maximum =    300

[18-04-2022_15-46-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(22)]), ('state_module', [Number(22), Number(13)]), ('plan_module', [Number(22), Number(13), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(22), Number(13), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(13), Number(9), Number(17), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.130741s.

[18-04-2022_15-46-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.025973s with result Unsatisfiable.

[18-04-2022_15-46-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1567138000000341, Incremental time limit = None
Running cumulative time = 1.0311781000000337, Cumulative time limit = 1795.4828632000003
Used memory = (RSS = 2221.875000Mb, VMS = 2237.964844Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     22 : Current =     23
Incrementor step ends | Minimum  =     22 : Maximum =    300

[18-04-2022_15-46-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(23)]), ('state_module', [Number(23), Number(13)]), ('plan_module', [Number(23), Number(13), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(23), Number(13), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('conformance_module', [Number(23), Number(13), Number(9), Number(17), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.133181s.

[18-04-2022_15-46-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.025954s with result Unsatisfiable.

[18-04-2022_15-46-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.15913499999987835, Incremental time limit = None
Running cumulative time = 1.190313099999912, Cumulative time limit = 1795.4828632000003
Used memory = (RSS = 2223.089844Mb, VMS = 2238.316406Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     23 : Current =     24
Incrementor step ends | Minimum  =     22 : Maximum =    300

[18-04-2022_15-46-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(24)]), ('state_module', [Number(24), Number(13)]), ('plan_module', [Number(24), Number(13), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(24), Number(13), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(13), Number(9), Number(17), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.136185s.

[18-04-2022_15-46-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.032593s with result Unsatisfiable.

[18-04-2022_15-46-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.16877860000022338, Incremental time limit = None
Running cumulative time = 1.3590917000001355, Cumulative time limit = 1795.4828632000003
Used memory = (RSS = 2224.464844Mb, VMS = 2238.679688Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     24 : Current =     25
Incrementor step ends | Minimum  =     22 : Maximum =    300

[18-04-2022_15-46-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(25)]), ('state_module', [Number(25), Number(13)]), ('plan_module', [Number(25), Number(13), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(25), Number(13), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(13), Number(9), Number(17), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.138249s.

[18-04-2022_15-46-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.033589s with result Unsatisfiable.

[18-04-2022_15-46-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.17183839999961492, Incremental time limit = None
Running cumulative time = 1.5309300999997504, Cumulative time limit = 1795.4828632000003
Used memory = (RSS = 2225.585938Mb, VMS = 2239.039062Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     25 : Current =     26
Incrementor step ends | Minimum  =     22 : Maximum =    300

[18-04-2022_15-46-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(26)]), ('state_module', [Number(26), Number(13)]), ('plan_module', [Number(26), Number(13), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(26), Number(13), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(13), Number(9), Number(17), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.141508s.

[18-04-2022_15-46-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.050986s with result Unsatisfiable.

[18-04-2022_15-46-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.192493800000193, Incremental time limit = None
Running cumulative time = 1.7234238999999434, Cumulative time limit = 1795.4828632000003
Used memory = (RSS = 2227.054688Mb, VMS = 2244.992188Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     26 : Current =     27
Incrementor step ends | Minimum  =     22 : Maximum =    300

[18-04-2022_15-46-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(27)]), ('state_module', [Number(27), Number(13)]), ('plan_module', [Number(27), Number(13), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(27), Number(13), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('conformance_module', [Number(27), Number(13), Number(9), Number(17), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.143936s.

[18-04-2022_15-46-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.039860s with result Unsatisfiable.

[18-04-2022_15-46-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.18379670000012993, Incremental time limit = None
Running cumulative time = 1.9072206000000733, Cumulative time limit = 1795.4828632000003
Used memory = (RSS = 2228.328125Mb, VMS = 2245.347656Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     27 : Current =     28
Incrementor step ends | Minimum  =     22 : Maximum =    300

[18-04-2022_15-46-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(28)]), ('state_module', [Number(28), Number(13)]), ('plan_module', [Number(28), Number(13), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(28), Number(13), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('conformance_module', [Number(28), Number(13), Number(9), Number(17), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.146515s.

[18-04-2022_15-46-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.074809s with result Unsatisfiable.

[18-04-2022_15-46-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2213235999997778, Incremental time limit = None
Running cumulative time = 2.128544199999851, Cumulative time limit = 1795.4828632000003
Used memory = (RSS = 2230.371094Mb, VMS = 2246.644531Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     28 : Current =     29
Incrementor step ends | Minimum  =     22 : Maximum =    300

[18-04-2022_15-46-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(29)]), ('state_module', [Number(29), Number(13)]), ('plan_module', [Number(29), Number(13), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(29), Number(13), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(13), Number(9), Number(17), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.148066s.

[18-04-2022_15-46-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.106003s with result Unsatisfiable.

[18-04-2022_15-46-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.25406909999946947, Incremental time limit = None
Running cumulative time = 2.3826132999993206, Cumulative time limit = 1795.4828632000003
Used memory = (RSS = 2231.652344Mb, VMS = 2247.003906Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     29 : Current =     30
Incrementor step ends | Minimum  =     22 : Maximum =    300

[18-04-2022_15-46-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(30)]), ('state_module', [Number(30), Number(13)]), ('plan_module', [Number(30), Number(13), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(30), Number(13), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(13), Number(9), Number(17), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.150984s.

[18-04-2022_15-46-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.292330s with result Unsatisfiable.

[18-04-2022_15-46-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4433134999999311, Incremental time limit = None
Running cumulative time = 2.8259267999992517, Cumulative time limit = 1795.4828632000003
Used memory = (RSS = 2232.992188Mb, VMS = 2247.359375Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     30 : Current =     31
Incrementor step ends | Minimum  =     22 : Maximum =    300

[18-04-2022_15-46-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(31)]), ('state_module', [Number(31), Number(13)]), ('plan_module', [Number(31), Number(13), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(31), Number(13), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('conformance_module', [Number(31), Number(13), Number(9), Number(17), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.156012s.

[18-04-2022_15-46-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.564102s with result Satisfiable.

[18-04-2022_15-46-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.720114399999602, Incremental time limit = None
Running cumulative time = 3.5460411999988537, Cumulative time limit = 1795.4828632000003
Used memory = (RSS = 2236.527344Mb, VMS = 2249.980469Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.043715s, Solving = 1.502326s, Total = 3.546041s, Memory = (RSS = 2236.527344Mb, VMS = 2249.980469Mb), Step range = [13-31]), Calls = 11
Final Model :: Total atoms = 22129, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[18-04-2022_15-46-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.618338s, Solving = 0.256126s, Total = 0.874464s, Memory = (RSS = 2220.406250Mb, VMS = 2234.511719Mb), Step range = [13-21]
2 : Statistics :: Grounding = 0.130741s, Solving = 0.025973s, Total = 0.156714s, Memory = (RSS = 2221.875000Mb, VMS = 2237.964844Mb), Step range = [22-22]
3 : Statistics :: Grounding = 0.133181s, Solving = 0.025954s, Total = 0.159135s, Memory = (RSS = 2223.089844Mb, VMS = 2238.316406Mb), Step range = [23-23]
4 : Statistics :: Grounding = 0.136185s, Solving = 0.032593s, Total = 0.168779s, Memory = (RSS = 2224.464844Mb, VMS = 2238.679688Mb), Step range = [24-24]
5 : Statistics :: Grounding = 0.138249s, Solving = 0.033589s, Total = 0.171838s, Memory = (RSS = 2225.585938Mb, VMS = 2239.039062Mb), Step range = [25-25]
6 : Statistics :: Grounding = 0.141508s, Solving = 0.050986s, Total = 0.192494s, Memory = (RSS = 2227.054688Mb, VMS = 2244.992188Mb), Step range = [26-26]
7 : Statistics :: Grounding = 0.143936s, Solving = 0.039860s, Total = 0.183797s, Memory = (RSS = 2228.328125Mb, VMS = 2245.347656Mb), Step range = [27-27]
8 : Statistics :: Grounding = 0.146515s, Solving = 0.074809s, Total = 0.221324s, Memory = (RSS = 2230.371094Mb, VMS = 2246.644531Mb), Step range = [28-28]
9 : Statistics :: Grounding = 0.148066s, Solving = 0.106003s, Total = 0.254069s, Memory = (RSS = 2231.652344Mb, VMS = 2247.003906Mb), Step range = [29-29]
10 : Statistics :: Grounding = 0.150984s, Solving = 0.292330s, Total = 0.443313s, Memory = (RSS = 2232.992188Mb, VMS = 2247.359375Mb), Step range = [30-30]
11 : Statistics :: Grounding = 0.156012s, Solving = 0.564102s, Total = 0.720114s, Memory = (RSS = 2236.527344Mb, VMS = 2249.980469Mb), Step range = [31-31]

[18-04-2022_15-46-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 3.546041s due to: Stop condition reached.

[18-04-2022_15-46-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[18-04-2022_15-46-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[18-04-2022_15-46-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_15-46-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_15-46-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[18-04-2022_15-46-49] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 13, 27: 14, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 22, 42: 23, 43: 24, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 26, 14: 28, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 46, 28: 47, 29: 48}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 8, 25: 9, 26: 10, 27: 11, 28: 12, 29: 13}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 23, 8: 24, 9: 25, 10: 26, 11: 27, 12: 28, 13: 29}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 6, 9: 7, 10: 7, 11: 7, 12: 7, 13: 8}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 6, 6: 8, 7: 12, 8: 13}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_15-46-49] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 13, 27: 14, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 22, 42: 23, 43: 24, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 26, 14: 28, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 46, 28: 47, 29: 48}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 8, 25: 9, 26: 10, 27: 11, 28: 12, 29: 13}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 23, 8: 24, 9: 25, 10: 26, 11: 27, 12: 28, 13: 29}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 6, 9: 7, 10: 7, 11: 7, 12: 7, 13: 8, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 12, 23: 12, 24: 13, 25: 14, 26: 15, 27: 15, 28: 15, 29: 15, 30: 16, 31: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 6, 6: 8, 7: 12, 8: 13, 9: 17, 10: 20, 11: 21, 12: 23, 13: 24, 14: 25, 15: 29, 16: 30, 17: 31}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_15-46-49] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 17, Last requested goal index = 17, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[18-04-2022_15-46-49] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.043715s, Solving = 1.502326s, Total = 3.546041s, Memory = (RSS = 2236.527344Mb, VMS = 2249.980469Mb), Step range = [13-31]), Calls = 11
Model :: Total atoms = 22129, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[18-04-2022_15-46-49] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
                 Steps = 18 :: Actions = 18                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 2:
    Current Sub-goals:
        [Index = 2] talos : collect((block,5)) -> on((block,5)) = nothing
        [Index = 2] talos : collect((block,5)) -> transporting(talos,(block,5)) = true
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : collect((block,5)) -> on((block,5)) = nothing
        [Index = 2] talos : collect((block,5)) -> transporting(talos,(block,5)) = true
    Achieved Sub-goals:
        [Index = 2] talos : collect((block,5)) -> on((block,5)) = nothing
        [Index = 2] talos : collect((block,5)) -> transporting(talos,(block,5)) = true
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,5))
Step 4:
    Current Sub-goals:
        [Index = 3] talos : collect((block,6)) -> on((block,6)) = nothing
        [Index = 3] talos : collect((block,6)) -> transporting(talos,(block,6)) = true
    Achieved Sub-goals:
        [Index = 3] talos : collect((block,6)) -> on((block,6)) = nothing
        [Index = 3] talos : collect((block,6)) -> transporting(talos,(block,6)) = true
    Planned actions:
        talos : move(puzzle_room)
Step 5:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 6:
    Current Sub-goals:
        [Index = 5] talos : place_upon((block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
        [Index = 5] talos : place_upon((block,6),puzzle_room_table) -> transporting(talos,(block,6)) = false
    Achieved Sub-goals:
        [Index = 5] talos : place_upon((block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
        [Index = 5] talos : place_upon((block,6),puzzle_room_table) -> transporting(talos,(block,6)) = false
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 7:
    Current Sub-goals:
        [Index = 6] talos : place_upon((block,5),(block,6)) -> on((block,5)) = (block,6)
        [Index = 6] talos : place_upon((block,5),(block,6)) -> transporting(talos,(block,5)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : put(manipulator_arm_2,(block,5),(block,6))
Step 8:
    Current Sub-goals:
        [Index = 6] talos : place_upon((block,5),(block,6)) -> on((block,5)) = (block,6)
        [Index = 6] talos : place_upon((block,5),(block,6)) -> transporting(talos,(block,5)) = false
    Achieved Sub-goals:
        [Index = 6] talos : place_upon((block,5),(block,6)) -> on((block,5)) = (block,6)
        [Index = 6] talos : place_upon((block,5),(block,6)) -> transporting(talos,(block,5)) = false
    Planned actions:
        talos : release(manipulator_arm_2,(block,5))
Step 9:
    Current Sub-goals:
        [Index = 7] talos : place_upon((block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
        [Index = 7] talos : place_upon((block,9),puzzle_room_table) -> transporting(talos,(block,9)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
Step 10:
    Current Sub-goals:
        [Index = 7] talos : place_upon((block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
        [Index = 7] talos : place_upon((block,9),puzzle_room_table) -> transporting(talos,(block,9)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,9))
Step 11:
    Current Sub-goals:
        [Index = 7] talos : place_upon((block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
        [Index = 7] talos : place_upon((block,9),puzzle_room_table) -> transporting(talos,(block,9)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
Step 12:
    Current Sub-goals:
        [Index = 7] talos : place_upon((block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
        [Index = 7] talos : place_upon((block,9),puzzle_room_table) -> transporting(talos,(block,9)) = false
    Achieved Sub-goals:
        [Index = 7] talos : place_upon((block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
        [Index = 7] talos : place_upon((block,9),puzzle_room_table) -> transporting(talos,(block,9)) = false
    Planned actions:
        talos : put(manipulator_arm_2,(block,9),puzzle_room_table)
Step 13:
    Current Sub-goals:
        [Index = 8] talos : place_upon((block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 8] talos : place_upon((block,3),puzzle_room_table) -> transporting(talos,(block,3)) = false
    Achieved Sub-goals:
        [Index = 8] talos : place_upon((block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 8] talos : place_upon((block,3),puzzle_room_table) -> transporting(talos,(block,3)) = false
    Planned actions:
        talos : release(manipulator_arm_1,(block,3))
Step 14:
    Current Sub-goals:
        [Index = 9] talos : place_upon((block,2),(block,3)) -> on((block,2)) = (block,3)
        [Index = 9] talos : place_upon((block,2),(block,3)) -> transporting(talos,(block,2)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,(block,9))
Step 15:
    Current Sub-goals:
        [Index = 9] talos : place_upon((block,2),(block,3)) -> on((block,2)) = (block,3)
        [Index = 9] talos : place_upon((block,2),(block,3)) -> transporting(talos,(block,2)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,2))
Step 16:
    Current Sub-goals:
        [Index = 9] talos : place_upon((block,2),(block,3)) -> on((block,2)) = (block,3)
        [Index = 9] talos : place_upon((block,2),(block,3)) -> transporting(talos,(block,2)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,1))
Step 17:
    Current Sub-goals:
        [Index = 9] talos : place_upon((block,2),(block,3)) -> on((block,2)) = (block,3)
        [Index = 9] talos : place_upon((block,2),(block,3)) -> transporting(talos,(block,2)) = false
    Achieved Sub-goals:
        [Index = 9] talos : place_upon((block,2),(block,3)) -> on((block,2)) = (block,3)
        [Index = 9] talos : place_upon((block,2),(block,3)) -> transporting(talos,(block,2)) = false
    Planned actions:
        talos : put(manipulator_arm_2,(block,2),(block,3))
Step 18:
    Current Sub-goals:
        [Index = 10] talos : place_upon((block,1),(block,2)) -> on((block,1)) = (block,2)
        [Index = 10] talos : place_upon((block,1),(block,2)) -> transporting(talos,(block,1)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,(block,2))
Step 19:
    Current Sub-goals:
        [Index = 10] talos : place_upon((block,1),(block,2)) -> on((block,1)) = (block,2)
        [Index = 10] talos : place_upon((block,1),(block,2)) -> transporting(talos,(block,1)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : put(manipulator_arm_1,(block,1),(block,2))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : place_upon((block,1),(block,2)) -> on((block,1)) = (block,2)
        [Index = 10] talos : place_upon((block,1),(block,2)) -> transporting(talos,(block,1)) = false
    Achieved Sub-goals:
        [Index = 10] talos : place_upon((block,1),(block,2)) -> on((block,1)) = (block,2)
        [Index = 10] talos : place_upon((block,1),(block,2)) -> transporting(talos,(block,1)) = false
    Planned actions:
        talos : release(manipulator_arm_1,(block,1))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 11] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 22:
    Current Sub-goals:
        [Index = 12] talos : collect((block,8)) -> on((block,8)) = nothing
        [Index = 12] talos : collect((block,8)) -> transporting(talos,(block,8)) = true
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,4))
Step 23:
    Current Sub-goals:
        [Index = 12] talos : collect((block,8)) -> on((block,8)) = nothing
        [Index = 12] talos : collect((block,8)) -> transporting(talos,(block,8)) = true
    Achieved Sub-goals:
        [Index = 12] talos : collect((block,8)) -> on((block,8)) = nothing
        [Index = 12] talos : collect((block,8)) -> transporting(talos,(block,8)) = true
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,8))
Step 24:
    Current Sub-goals:
        [Index = 13] talos : collect((block,4)) -> on((block,4)) = nothing
        [Index = 13] talos : collect((block,4)) -> transporting(talos,(block,4)) = true
    Achieved Sub-goals:
        [Index = 13] talos : collect((block,4)) -> on((block,4)) = nothing
        [Index = 13] talos : collect((block,4)) -> transporting(talos,(block,4)) = true
    Planned actions:
        talos : move(puzzle_room)
Step 25:
    Current Sub-goals:
        [Index = 14] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 14] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : put(manipulator_arm_2,(block,8),(block,9))
Step 26:
    Current Sub-goals:
        [Index = 15] talos : place_upon((block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 15] talos : place_upon((block,4),(block,5)) -> transporting(talos,(block,4)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,(block,8))
Step 27:
    Current Sub-goals:
        [Index = 15] talos : place_upon((block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 15] talos : place_upon((block,4),(block,5)) -> transporting(talos,(block,4)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,7))
Step 28:
    Current Sub-goals:
        [Index = 15] talos : place_upon((block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 15] talos : place_upon((block,4),(block,5)) -> transporting(talos,(block,4)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : put(manipulator_arm_1,(block,4),(block,5))
Step 29:
    Current Sub-goals:
        [Index = 15] talos : place_upon((block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 15] talos : place_upon((block,4),(block,5)) -> transporting(talos,(block,4)) = false
    Achieved Sub-goals:
        [Index = 15] talos : place_upon((block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 15] talos : place_upon((block,4),(block,5)) -> transporting(talos,(block,4)) = false
    Planned actions:
        talos : release(manipulator_arm_1,(block,4))
Step 30:
    Current Sub-goals:
        [Index = 16] talos : place_upon((block,8),(block,9)) -> on((block,8)) = (block,9)
        [Index = 16] talos : place_upon((block,8),(block,9)) -> transporting(talos,(block,8)) = false
    Achieved Sub-goals:
        [Index = 16] talos : place_upon((block,8),(block,9)) -> on((block,8)) = (block,9)
        [Index = 16] talos : place_upon((block,8),(block,9)) -> transporting(talos,(block,8)) = false
    Planned actions:
        talos : put(manipulator_arm_2,(block,7),(block,8))
Step 31:
    Current Sub-goals:
        [Index = 17] talos : place_upon((block,7),(block,8)) -> on((block,7)) = (block,8)
        [Index = 17] talos : place_upon((block,7),(block,8)) -> transporting(talos,(block,7)) = false
    Achieved Sub-goals:
        [Index = 17] talos : place_upon((block,7),(block,8)) -> on((block,7)) = (block,8)
        [Index = 17] talos : place_upon((block,7),(block,8)) -> transporting(talos,(block,7)) = false
    Planned actions:
        talos : release(manipulator_arm_2,(block,7))

[18-04-2022_15-46-49] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=13, end_step=None

[18-04-2022_15-46-49] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for parts of the existing plan at the current level that have already been divided: start_step=13

[18-04-2022_15-46-49] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=13

[18-04-2022_15-46-49] DEBUG :: ASH Planner Main #1 >> Preparing to invoke division strategy...

[18-04-2022_15-46-49] DEBUG :: ASH Planner Main #1 >> Online method OnlineMethod.GroundFirst chose to invoke the division strategy before a downwards level change:Current increment = 3, Current planning level is complete = True

[18-04-2022_15-46-49] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 31, chosen step range to extract = range(13, 32)

[18-04-2022_15-46-49] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 29, Total actions = 29, Produced sub-goal stages = 29, Produced sub-goal literals = 29
Level [1]: Length = 48, Total actions = 48, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-49] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 3 (par-ref), LE =  18, AC =  18, CF = 1.0, GT =   3.41s, ST =   2.31s, OT = 0.00s, TT =   5.71s, EF = (LE = 2.0, AC = 2.0), ED = (LE = 1.3, AC = 0.6), EB = (LE = 0.7, AC = 0.5)

[18-04-2022_15-46-49] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=18, start_step=13, blend=Blend(left=0, right=0)

[18-04-2022_15-46-49] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=0, small_group_size=9, large_group_size=10

[18-04-2022_15-46-49] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=22, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[18-04-2022_15-46-49] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 2, Problem Range = [3-4], Size = 18, Sub-goal Stage Range = [14-31]
Division points [total=1] : [(Index = 22, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[18-04-2022_15-46-49] DEBUG :: ASH Planner Main #1 >> Monolevel problem 2 at level 3 solved.

[18-04-2022_15-46-49] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning problem 3 at level 2:
Total Templated Partial Problems = 2, Problem Range = [3-4], Size = 18, Sub-goal Stage Range = [14-31]
Division points [total=1] : [(Index = 22, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[18-04-2022_15-46-49] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [14-22]

[18-04-2022_15-46-49] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 29, chosen step range to extract = range(0, 30)

[18-04-2022_15-46-49] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 29, Total actions = 29, Produced sub-goal stages = 29, Produced sub-goal literals = 29
Level [1]: Length = 48, Total actions = 48, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-49] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 31, chosen step range to extract = range(0, 32)

[18-04-2022_15-46-49] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 29, Total actions = 29, Produced sub-goal stages = 29, Produced sub-goal literals = 29
Level [1]: Length = 48, Total actions = 48, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-49] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[18-04-2022_15-46-49] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 29, Total actions = 29, Produced sub-goal stages = 29, Produced sub-goal literals = 29
Level [1]: Length = 48, Total actions = 48, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-49] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [14-22], problem number = 3, increment number = 3

[18-04-2022_15-46-49] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 14)
	('last_sgoals', 22)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001D5FEA66D00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1785.9375230000028)
	('length_limit', 300)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[18-04-2022_15-46-49] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 2] partial conformance refinement (sequential) with sgoals range [14-22] : Concurrency disabled : Minimum search length bound enabled with value 37

[18-04-2022_15-46-49] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 14
last_sgoals = 22
start_step = 29
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 37

[18-04-2022_15-46-49] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[18-04-2022_15-46-49] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[18-04-2022_15-46-49] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[18-04-2022_15-46-49] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[18-04-2022_15-46-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[18-04-2022_15-46-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[18-04-2022_15-46-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_15-46-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_15-46-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_15-46-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_15-46-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[18-04-2022_15-46-49] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_15-46-49] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 29 as problem start state.

[18-04-2022_15-46-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 29})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 29})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 29})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 29})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 29})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 29})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,9)', 'S': 29})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 29})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'store_room', 'S': 29})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 29})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 29})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 29})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 29})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 29})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 29})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 29})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 29})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 29})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 29})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,9)', 'S': 29})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 29})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 3, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 3, 'F': 'in((block,8))', 'V': 'store_room', 'S': 29})
Fluent({'L': 3, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 29})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 29})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 29})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 29})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 29})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 29})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 29})
Fluent({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 29})
Fluent({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'S': 29})
Fluent({'L': 3, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 29})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 29})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 29})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 29})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 29})
Fluent({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 29})
Fluent({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 29})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 29})

[18-04-2022_15-46-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_15-46-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 257 rules into program part ash_initial_state:

holds(2, complete_tower(blue,puzzle_room_table), false, 29).
holds(2, complete_tower(red,puzzle_room_table), false, 29).
holds(2, complete_tower(yellow,puzzle_room_table), false, 29).
holds(2, configuration(manipulator_arm_1), extended, 29).
holds(2, configuration(manipulator_arm_2), extended, 29).
holds(2, configuration(puzzle_room_door), open, 29).
holds(2, configuration(starting_room_door), closed, 29).
holds(2, configuration(store_room_door), open, 29).
holds(2, grasping(manipulator_arm_1), nothing, 29).
holds(2, grasping(manipulator_arm_2), (block,9), 29).
holds(2, in((block,1)), puzzle_room, 29).
holds(2, in((block,2)), puzzle_room, 29).
holds(2, in((block,3)), puzzle_room, 29).
holds(2, in((block,4)), store_room, 29).
holds(2, in((block,5)), puzzle_room, 29).
holds(2, in((block,6)), puzzle_room, 29).
holds(2, in((block,7)), puzzle_room, 29).
holds(2, in((block,8)), store_room, 29).
holds(2, in((block,9)), puzzle_room, 29).
holds(2, in(manipulator_arm_1), puzzle_room, 29).
holds(2, in(manipulator_arm_2), puzzle_room, 29).
holds(2, in(puzzle_room_table), puzzle_room, 29).
holds(2, in(talos), puzzle_room, 29).
holds(2, in_tower((block,1),(block,1)), true, 29).
holds(2, in_tower((block,1),(block,2)), false, 29).
holds(2, in_tower((block,1),(block,3)), false, 29).
holds(2, in_tower((block,1),(block,4)), false, 29).
holds(2, in_tower((block,1),(block,5)), false, 29).
holds(2, in_tower((block,1),(block,6)), false, 29).
holds(2, in_tower((block,1),(block,7)), false, 29).
holds(2, in_tower((block,1),(block,8)), false, 29).
holds(2, in_tower((block,1),(block,9)), false, 29).
holds(2, in_tower((block,2),(block,1)), false, 29).
holds(2, in_tower((block,2),(block,2)), true, 29).
holds(2, in_tower((block,2),(block,3)), false, 29).
holds(2, in_tower((block,2),(block,4)), false, 29).
holds(2, in_tower((block,2),(block,5)), false, 29).
holds(2, in_tower((block,2),(block,6)), false, 29).
holds(2, in_tower((block,2),(block,7)), false, 29).
holds(2, in_tower((block,2),(block,8)), false, 29).
holds(2, in_tower((block,2),(block,9)), false, 29).
holds(2, in_tower((block,3),(block,1)), false, 29).
holds(2, in_tower((block,3),(block,2)), false, 29).
holds(2, in_tower((block,3),(block,3)), true, 29).
holds(2, in_tower((block,3),(block,4)), false, 29).
holds(2, in_tower((block,3),(block,5)), false, 29).
holds(2, in_tower((block,3),(block,6)), false, 29).
holds(2, in_tower((block,3),(block,7)), false, 29).
holds(2, in_tower((block,3),(block,8)), false, 29).
holds(2, in_tower((block,3),(block,9)), false, 29).
holds(2, in_tower((block,4),(block,1)), false, 29).
holds(2, in_tower((block,4),(block,2)), false, 29).
holds(2, in_tower((block,4),(block,3)), false, 29).
holds(2, in_tower((block,4),(block,4)), false, 29).
holds(2, in_tower((block,4),(block,5)), false, 29).
holds(2, in_tower((block,4),(block,6)), false, 29).
holds(2, in_tower((block,4),(block,7)), false, 29).
holds(2, in_tower((block,4),(block,8)), false, 29).
holds(2, in_tower((block,4),(block,9)), false, 29).
holds(2, in_tower((block,5),(block,1)), false, 29).
holds(2, in_tower((block,5),(block,2)), false, 29).
holds(2, in_tower((block,5),(block,3)), false, 29).
holds(2, in_tower((block,5),(block,4)), false, 29).
holds(2, in_tower((block,5),(block,5)), false, 29).
holds(2, in_tower((block,5),(block,6)), false, 29).
holds(2, in_tower((block,5),(block,7)), false, 29).
holds(2, in_tower((block,5),(block,8)), false, 29).
holds(2, in_tower((block,5),(block,9)), false, 29).
holds(2, in_tower((block,6),(block,1)), false, 29).
holds(2, in_tower((block,6),(block,2)), false, 29).
holds(2, in_tower((block,6),(block,3)), false, 29).
holds(2, in_tower((block,6),(block,4)), false, 29).
holds(2, in_tower((block,6),(block,5)), true, 29).
holds(2, in_tower((block,6),(block,6)), true, 29).
holds(2, in_tower((block,6),(block,7)), false, 29).
holds(2, in_tower((block,6),(block,8)), false, 29).
holds(2, in_tower((block,6),(block,9)), false, 29).
holds(2, in_tower((block,7),(block,1)), false, 29).
holds(2, in_tower((block,7),(block,2)), false, 29).
holds(2, in_tower((block,7),(block,3)), false, 29).
holds(2, in_tower((block,7),(block,4)), false, 29).
holds(2, in_tower((block,7),(block,5)), false, 29).
holds(2, in_tower((block,7),(block,6)), false, 29).
holds(2, in_tower((block,7),(block,7)), true, 29).
holds(2, in_tower((block,7),(block,8)), false, 29).
holds(2, in_tower((block,7),(block,9)), false, 29).
holds(2, in_tower((block,8),(block,1)), false, 29).
holds(2, in_tower((block,8),(block,2)), false, 29).
holds(2, in_tower((block,8),(block,3)), false, 29).
holds(2, in_tower((block,8),(block,4)), false, 29).
holds(2, in_tower((block,8),(block,5)), false, 29).
holds(2, in_tower((block,8),(block,6)), false, 29).
holds(2, in_tower((block,8),(block,7)), false, 29).
holds(2, in_tower((block,8),(block,8)), false, 29).
holds(2, in_tower((block,8),(block,9)), false, 29).
holds(2, in_tower((block,9),(block,1)), false, 29).
holds(2, in_tower((block,9),(block,2)), false, 29).
holds(2, in_tower((block,9),(block,3)), false, 29).
holds(2, in_tower((block,9),(block,4)), false, 29).
holds(2, in_tower((block,9),(block,5)), false, 29).
holds(2, in_tower((block,9),(block,6)), false, 29).
holds(2, in_tower((block,9),(block,7)), false, 29).
holds(2, in_tower((block,9),(block,8)), false, 29).
holds(2, in_tower((block,9),(block,9)), true, 29).
holds(2, on((block,1)), puzzle_room_table, 29).
holds(2, on((block,2)), puzzle_room_table, 29).
holds(2, on((block,3)), puzzle_room_table, 29).
holds(2, on((block,4)), nothing, 29).
holds(2, on((block,5)), (block,6), 29).
holds(2, on((block,6)), puzzle_room_table, 29).
holds(2, on((block,7)), puzzle_room_table, 29).
holds(2, on((block,8)), nothing, 29).
holds(2, on((block,9)), puzzle_room_table, 29).
holds(2, tower_base((block,1),puzzle_room_table), true, 29).
holds(2, tower_base((block,2),puzzle_room_table), true, 29).
holds(2, tower_base((block,3),puzzle_room_table), true, 29).
holds(2, tower_base((block,4),puzzle_room_table), false, 29).
holds(2, tower_base((block,5),puzzle_room_table), false, 29).
holds(2, tower_base((block,6),puzzle_room_table), true, 29).
holds(2, tower_base((block,7),puzzle_room_table), true, 29).
holds(2, tower_base((block,8),puzzle_room_table), false, 29).
holds(2, tower_base((block,9),puzzle_room_table), true, 29).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 29).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 29).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 29).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 29).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 29).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 29).
holds(2, unordered_tower((block,7),puzzle_room_table), false, 29).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 29).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 29).
holds(3, complete_tower(blue,puzzle_room_table), false, 29).
holds(3, complete_tower(red,puzzle_room_table), false, 29).
holds(3, complete_tower(yellow,puzzle_room_table), false, 29).
holds(3, grasping(manipulator_arm_1), nothing, 29).
holds(3, grasping(manipulator_arm_2), (block,9), 29).
holds(3, in((block,1)), puzzle_room, 29).
holds(3, in((block,2)), puzzle_room, 29).
holds(3, in((block,3)), puzzle_room, 29).
holds(3, in((block,4)), store_room, 29).
holds(3, in((block,5)), puzzle_room, 29).
holds(3, in((block,6)), puzzle_room, 29).
holds(3, in((block,7)), puzzle_room, 29).
holds(3, in((block,8)), store_room, 29).
holds(3, in((block,9)), puzzle_room, 29).
holds(3, in(manipulator_arm_1), puzzle_room, 29).
holds(3, in(manipulator_arm_2), puzzle_room, 29).
holds(3, in(puzzle_room_table), puzzle_room, 29).
holds(3, in(talos), puzzle_room, 29).
holds(3, in_tower((block,1),(block,1)), true, 29).
holds(3, in_tower((block,1),(block,2)), false, 29).
holds(3, in_tower((block,1),(block,3)), false, 29).
holds(3, in_tower((block,1),(block,4)), false, 29).
holds(3, in_tower((block,1),(block,5)), false, 29).
holds(3, in_tower((block,1),(block,6)), false, 29).
holds(3, in_tower((block,1),(block,7)), false, 29).
holds(3, in_tower((block,1),(block,8)), false, 29).
holds(3, in_tower((block,1),(block,9)), false, 29).
holds(3, in_tower((block,2),(block,1)), false, 29).
holds(3, in_tower((block,2),(block,2)), true, 29).
holds(3, in_tower((block,2),(block,3)), false, 29).
holds(3, in_tower((block,2),(block,4)), false, 29).
holds(3, in_tower((block,2),(block,5)), false, 29).
holds(3, in_tower((block,2),(block,6)), false, 29).
holds(3, in_tower((block,2),(block,7)), false, 29).
holds(3, in_tower((block,2),(block,8)), false, 29).
holds(3, in_tower((block,2),(block,9)), false, 29).
holds(3, in_tower((block,3),(block,1)), false, 29).
holds(3, in_tower((block,3),(block,2)), false, 29).
holds(3, in_tower((block,3),(block,3)), true, 29).
holds(3, in_tower((block,3),(block,4)), false, 29).
holds(3, in_tower((block,3),(block,5)), false, 29).
holds(3, in_tower((block,3),(block,6)), false, 29).
holds(3, in_tower((block,3),(block,7)), false, 29).
holds(3, in_tower((block,3),(block,8)), false, 29).
holds(3, in_tower((block,3),(block,9)), false, 29).
holds(3, in_tower((block,4),(block,1)), false, 29).
holds(3, in_tower((block,4),(block,2)), false, 29).
holds(3, in_tower((block,4),(block,3)), false, 29).
holds(3, in_tower((block,4),(block,4)), false, 29).
holds(3, in_tower((block,4),(block,5)), false, 29).
holds(3, in_tower((block,4),(block,6)), false, 29).
holds(3, in_tower((block,4),(block,7)), false, 29).
holds(3, in_tower((block,4),(block,8)), false, 29).
holds(3, in_tower((block,4),(block,9)), false, 29).
holds(3, in_tower((block,5),(block,1)), false, 29).
holds(3, in_tower((block,5),(block,2)), false, 29).
holds(3, in_tower((block,5),(block,3)), false, 29).
holds(3, in_tower((block,5),(block,4)), false, 29).
holds(3, in_tower((block,5),(block,5)), false, 29).
holds(3, in_tower((block,5),(block,6)), false, 29).
holds(3, in_tower((block,5),(block,7)), false, 29).
holds(3, in_tower((block,5),(block,8)), false, 29).
holds(3, in_tower((block,5),(block,9)), false, 29).
holds(3, in_tower((block,6),(block,1)), false, 29).
holds(3, in_tower((block,6),(block,2)), false, 29).
holds(3, in_tower((block,6),(block,3)), false, 29).
holds(3, in_tower((block,6),(block,4)), false, 29).
holds(3, in_tower((block,6),(block,5)), true, 29).
holds(3, in_tower((block,6),(block,6)), true, 29).
holds(3, in_tower((block,6),(block,7)), false, 29).
holds(3, in_tower((block,6),(block,8)), false, 29).
holds(3, in_tower((block,6),(block,9)), false, 29).
holds(3, in_tower((block,7),(block,1)), false, 29).
holds(3, in_tower((block,7),(block,2)), false, 29).
holds(3, in_tower((block,7),(block,3)), false, 29).
holds(3, in_tower((block,7),(block,4)), false, 29).
holds(3, in_tower((block,7),(block,5)), false, 29).
holds(3, in_tower((block,7),(block,6)), false, 29).
holds(3, in_tower((block,7),(block,7)), true, 29).
holds(3, in_tower((block,7),(block,8)), false, 29).
holds(3, in_tower((block,7),(block,9)), false, 29).
holds(3, in_tower((block,8),(block,1)), false, 29).
holds(3, in_tower((block,8),(block,2)), false, 29).
holds(3, in_tower((block,8),(block,3)), false, 29).
holds(3, in_tower((block,8),(block,4)), false, 29).
holds(3, in_tower((block,8),(block,5)), false, 29).
holds(3, in_tower((block,8),(block,6)), false, 29).
holds(3, in_tower((block,8),(block,7)), false, 29).
holds(3, in_tower((block,8),(block,8)), false, 29).
holds(3, in_tower((block,8),(block,9)), false, 29).
holds(3, in_tower((block,9),(block,1)), false, 29).
holds(3, in_tower((block,9),(block,2)), false, 29).
holds(3, in_tower((block,9),(block,3)), false, 29).
holds(3, in_tower((block,9),(block,4)), false, 29).
holds(3, in_tower((block,9),(block,5)), false, 29).
holds(3, in_tower((block,9),(block,6)), false, 29).
holds(3, in_tower((block,9),(block,7)), false, 29).
holds(3, in_tower((block,9),(block,8)), false, 29).
holds(3, in_tower((block,9),(block,9)), true, 29).
holds(3, on((block,1)), puzzle_room_table, 29).
holds(3, on((block,2)), puzzle_room_table, 29).
holds(3, on((block,3)), puzzle_room_table, 29).
holds(3, on((block,4)), nothing, 29).
holds(3, on((block,5)), (block,6), 29).
holds(3, on((block,6)), puzzle_room_table, 29).
holds(3, on((block,7)), puzzle_room_table, 29).
holds(3, on((block,8)), nothing, 29).
holds(3, on((block,9)), puzzle_room_table, 29).
holds(3, tower_base((block,1),puzzle_room_table), true, 29).
holds(3, tower_base((block,2),puzzle_room_table), true, 29).
holds(3, tower_base((block,3),puzzle_room_table), true, 29).
holds(3, tower_base((block,4),puzzle_room_table), false, 29).
holds(3, tower_base((block,5),puzzle_room_table), false, 29).
holds(3, tower_base((block,6),puzzle_room_table), true, 29).
holds(3, tower_base((block,7),puzzle_room_table), true, 29).
holds(3, tower_base((block,8),puzzle_room_table), false, 29).
holds(3, tower_base((block,9),puzzle_room_table), true, 29).
holds(3, unordered_tower((block,1),puzzle_room_table), false, 29).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 29).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 29).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 29).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 29).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 29).
holds(3, unordered_tower((block,7),puzzle_room_table), false, 29).
holds(3, unordered_tower((block,8),puzzle_room_table), false, 29).
holds(3, unordered_tower((block,9),puzzle_room_table), false, 29).

[18-04-2022_15-46-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[18-04-2022_15-46-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_15-46-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 588 rules into program part ash_goal_state:

final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(3, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,1),(block,7)), false, true).
final_goal(3, in_tower((block,1),(block,7)), true, false).
final_goal(3, in_tower((block,1),(block,8)), false, true).
final_goal(3, in_tower((block,1),(block,8)), true, false).
final_goal(3, in_tower((block,1),(block,9)), false, true).
final_goal(3, in_tower((block,1),(block,9)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,7)), false, true).
final_goal(3, in_tower((block,2),(block,7)), true, false).
final_goal(3, in_tower((block,2),(block,8)), false, true).
final_goal(3, in_tower((block,2),(block,8)), true, false).
final_goal(3, in_tower((block,2),(block,9)), false, true).
final_goal(3, in_tower((block,2),(block,9)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,7)), false, true).
final_goal(3, in_tower((block,3),(block,7)), true, false).
final_goal(3, in_tower((block,3),(block,8)), false, true).
final_goal(3, in_tower((block,3),(block,8)), true, false).
final_goal(3, in_tower((block,3),(block,9)), false, true).
final_goal(3, in_tower((block,3),(block,9)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,7)), false, true).
final_goal(3, in_tower((block,4),(block,7)), true, false).
final_goal(3, in_tower((block,4),(block,8)), false, true).
final_goal(3, in_tower((block,4),(block,8)), true, false).
final_goal(3, in_tower((block,4),(block,9)), false, true).
final_goal(3, in_tower((block,4),(block,9)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,7)), false, true).
final_goal(3, in_tower((block,5),(block,7)), true, false).
final_goal(3, in_tower((block,5),(block,8)), false, true).
final_goal(3, in_tower((block,5),(block,8)), true, false).
final_goal(3, in_tower((block,5),(block,9)), false, true).
final_goal(3, in_tower((block,5),(block,9)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, in_tower((block,6),(block,7)), false, true).
final_goal(3, in_tower((block,6),(block,7)), true, false).
final_goal(3, in_tower((block,6),(block,8)), false, true).
final_goal(3, in_tower((block,6),(block,8)), true, false).
final_goal(3, in_tower((block,6),(block,9)), false, true).
final_goal(3, in_tower((block,6),(block,9)), true, false).
final_goal(3, in_tower((block,7),(block,1)), false, true).
final_goal(3, in_tower((block,7),(block,1)), true, false).
final_goal(3, in_tower((block,7),(block,2)), false, true).
final_goal(3, in_tower((block,7),(block,2)), true, false).
final_goal(3, in_tower((block,7),(block,3)), false, true).
final_goal(3, in_tower((block,7),(block,3)), true, false).
final_goal(3, in_tower((block,7),(block,4)), false, true).
final_goal(3, in_tower((block,7),(block,4)), true, false).
final_goal(3, in_tower((block,7),(block,5)), false, true).
final_goal(3, in_tower((block,7),(block,5)), true, false).
final_goal(3, in_tower((block,7),(block,6)), false, true).
final_goal(3, in_tower((block,7),(block,6)), true, false).
final_goal(3, in_tower((block,7),(block,7)), false, true).
final_goal(3, in_tower((block,7),(block,7)), true, false).
final_goal(3, in_tower((block,7),(block,8)), false, true).
final_goal(3, in_tower((block,7),(block,8)), true, false).
final_goal(3, in_tower((block,7),(block,9)), false, true).
final_goal(3, in_tower((block,7),(block,9)), true, false).
final_goal(3, in_tower((block,8),(block,1)), false, true).
final_goal(3, in_tower((block,8),(block,1)), true, false).
final_goal(3, in_tower((block,8),(block,2)), false, true).
final_goal(3, in_tower((block,8),(block,2)), true, false).
final_goal(3, in_tower((block,8),(block,3)), false, true).
final_goal(3, in_tower((block,8),(block,3)), true, false).
final_goal(3, in_tower((block,8),(block,4)), false, true).
final_goal(3, in_tower((block,8),(block,4)), true, false).
final_goal(3, in_tower((block,8),(block,5)), false, true).
final_goal(3, in_tower((block,8),(block,5)), true, false).
final_goal(3, in_tower((block,8),(block,6)), false, true).
final_goal(3, in_tower((block,8),(block,6)), true, false).
final_goal(3, in_tower((block,8),(block,7)), false, true).
final_goal(3, in_tower((block,8),(block,7)), true, false).
final_goal(3, in_tower((block,8),(block,8)), false, true).
final_goal(3, in_tower((block,8),(block,8)), true, false).
final_goal(3, in_tower((block,8),(block,9)), false, true).
final_goal(3, in_tower((block,8),(block,9)), true, false).
final_goal(3, in_tower((block,9),(block,1)), false, true).
final_goal(3, in_tower((block,9),(block,1)), true, false).
final_goal(3, in_tower((block,9),(block,2)), false, true).
final_goal(3, in_tower((block,9),(block,2)), true, false).
final_goal(3, in_tower((block,9),(block,3)), false, true).
final_goal(3, in_tower((block,9),(block,3)), true, false).
final_goal(3, in_tower((block,9),(block,4)), false, true).
final_goal(3, in_tower((block,9),(block,4)), true, false).
final_goal(3, in_tower((block,9),(block,5)), false, true).
final_goal(3, in_tower((block,9),(block,5)), true, false).
final_goal(3, in_tower((block,9),(block,6)), false, true).
final_goal(3, in_tower((block,9),(block,6)), true, false).
final_goal(3, in_tower((block,9),(block,7)), false, false).
final_goal(3, in_tower((block,9),(block,7)), true, true).
final_goal(3, in_tower((block,9),(block,8)), false, false).
final_goal(3, in_tower((block,9),(block,8)), true, true).
final_goal(3, in_tower((block,9),(block,9)), false, false).
final_goal(3, in_tower((block,9),(block,9)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), (block,7), false).
final_goal(3, on((block,1)), (block,8), false).
final_goal(3, on((block,1)), (block,9), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), (block,7), false).
final_goal(3, on((block,2)), (block,8), false).
final_goal(3, on((block,2)), (block,9), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), (block,7), false).
final_goal(3, on((block,3)), (block,8), false).
final_goal(3, on((block,3)), (block,9), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), (block,7), false).
final_goal(3, on((block,4)), (block,8), false).
final_goal(3, on((block,4)), (block,9), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), (block,7), false).
final_goal(3, on((block,5)), (block,8), false).
final_goal(3, on((block,5)), (block,9), false).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), (block,7), false).
final_goal(3, on((block,6)), (block,8), false).
final_goal(3, on((block,6)), (block,9), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, on((block,7)), (block,1), false).
final_goal(3, on((block,7)), (block,2), false).
final_goal(3, on((block,7)), (block,3), false).
final_goal(3, on((block,7)), (block,4), false).
final_goal(3, on((block,7)), (block,5), false).
final_goal(3, on((block,7)), (block,6), false).
final_goal(3, on((block,7)), (block,8), true).
final_goal(3, on((block,7)), (block,9), false).
final_goal(3, on((block,7)), nothing, false).
final_goal(3, on((block,7)), puzzle_room_table, false).
final_goal(3, on((block,8)), (block,1), false).
final_goal(3, on((block,8)), (block,2), false).
final_goal(3, on((block,8)), (block,3), false).
final_goal(3, on((block,8)), (block,4), false).
final_goal(3, on((block,8)), (block,5), false).
final_goal(3, on((block,8)), (block,6), false).
final_goal(3, on((block,8)), (block,7), false).
final_goal(3, on((block,8)), (block,9), true).
final_goal(3, on((block,8)), nothing, false).
final_goal(3, on((block,8)), puzzle_room_table, false).
final_goal(3, on((block,9)), (block,1), false).
final_goal(3, on((block,9)), (block,2), false).
final_goal(3, on((block,9)), (block,3), false).
final_goal(3, on((block,9)), (block,4), false).
final_goal(3, on((block,9)), (block,5), false).
final_goal(3, on((block,9)), (block,6), false).
final_goal(3, on((block,9)), (block,7), false).
final_goal(3, on((block,9)), (block,8), false).
final_goal(3, on((block,9)), nothing, false).
final_goal(3, on((block,9)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, tower_base((block,7),puzzle_room_table), false, true).
final_goal(3, tower_base((block,7),puzzle_room_table), true, false).
final_goal(3, tower_base((block,8),puzzle_room_table), false, true).
final_goal(3, tower_base((block,8),puzzle_room_table), true, false).
final_goal(3, tower_base((block,9),puzzle_room_table), false, false).
final_goal(3, tower_base((block,9),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,9),puzzle_room_table), true, false).

[18-04-2022_15-46-49] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=37']

[18-04-2022_15-46-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,9))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 14})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,2)', 'I': 15})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,1))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,1)', 'I': 16})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 17})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 18})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 19})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,1))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 20})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 21})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,4))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'I': 22})

[18-04-2022_15-46-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_15-46-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 9 rules into program part base:

sub_goal(3, talos, release(manipulator_arm_2,(block,9)), grasping(manipulator_arm_2), nothing, 14).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), (block,2), 15).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,1)), grasping(manipulator_arm_1), (block,1), 16).
sub_goal(3, talos, put(manipulator_arm_2,(block,2),(block,3)), on((block,2)), (block,3), 17).
sub_goal(3, talos, release(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), nothing, 18).
sub_goal(3, talos, put(manipulator_arm_1,(block,1),(block,2)), on((block,1)), (block,2), 19).
sub_goal(3, talos, release(manipulator_arm_1,(block,1)), grasping(manipulator_arm_1), nothing, 20).
sub_goal(3, talos, move(store_room), in(talos), store_room, 21).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,4)), grasping(manipulator_arm_1), (block,4), 22).

[18-04-2022_15-46-49] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_15-46-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[18-04-2022_15-46-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=37']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001D5FEAF9280>]
	incrementor = SolveIncrementor(step_start=29, step_increase=1, step_increase_initial=9, step_end_min=38, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1785.9375230000028, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 29), range_=None), IncPart(name='plan_module', args=('#inc', 29, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 29, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 29, 14, 22, 'sequential', 'false'), range_=None)]

[18-04-2022_15-46-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_15-46-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_15-46-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_15-46-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1244 rules

[18-04-2022_15-46-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006689000000278611s

[18-04-2022_15-46-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[18-04-2022_15-46-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[18-04-2022_15-46-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.034678s.

[18-04-2022_15-46-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006234s with result Satisfiable.

[18-04-2022_15-46-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[18-04-2022_15-46-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001D6143779F0>

[18-04-2022_15-46-50] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 2)
	('start_step', 29)
	('last_sgoals', 22)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001D5FEA66D00>)
	('first_sgoals', 14)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001D6143779F0>)

[18-04-2022_15-46-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 29). %* None *%
#program plan_module(#inc, 29, false, false). %* None *%
#program optimisation_module(#inc, 29, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 29, 14, 22, sequential, false). %* None *%

[18-04-2022_15-46-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     28 : Current =     37
Incrementor step ends | Minimum  =     38 : Maximum =    300

[18-04-2022_15-46-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(37)]), ('state_module', [Number(29), Number(29)]), ('plan_module', [Number(29), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(29), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(29), Number(14), Number(22), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(30), Number(29)]), ('plan_module', [Number(30), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(29), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(29), Number(14), Number(22), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(31), Number(29)]), ('plan_module', [Number(31), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(31), Number(29), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('conformance_module', [Number(31), Number(29), Number(14), Number(22), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(32), Number(29)]), ('plan_module', [Number(32), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(32), Number(29), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('conformance_module', [Number(32), Number(29), Number(14), Number(22), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(33), Number(29)]), ('plan_module', [Number(33), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(33), Number(29), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('conformance_module', [Number(33), Number(29), Number(14), Number(22), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(34), Number(29)]), ('plan_module', [Number(34), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(34), Number(29), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(34)]), ('action_preconditions', [Number(34)]), ('variable_relations', [Number(34)]), ('abstraction_mappings', [Number(34)]), ('conformance_module', [Number(34), Number(29), Number(14), Number(22), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(35), Number(29)]), ('plan_module', [Number(35), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(35), Number(29), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(35)]), ('action_preconditions', [Number(35)]), ('variable_relations', [Number(35)]), ('abstraction_mappings', [Number(35)]), ('conformance_module', [Number(35), Number(29), Number(14), Number(22), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(36), Number(29)]), ('plan_module', [Number(36), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(36), Number(29), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('conformance_module', [Number(36), Number(29), Number(14), Number(22), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(37), Number(29)]), ('plan_module', [Number(37), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(37), Number(29), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(37)]), ('action_preconditions', [Number(37)]), ('variable_relations', [Number(37)]), ('abstraction_mappings', [Number(37)]), ('conformance_module', [Number(37), Number(29), Number(14), Number(22), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.731559s.

[18-04-2022_15-46-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.346374s with result Unsatisfiable.

[18-04-2022_15-46-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.0779331000003367, Incremental time limit = None
Running cumulative time = 1.0779331000003367, Cumulative time limit = 1785.9375230000028
Used memory = (RSS = 2226.140625Mb, VMS = 2240.085938Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     37 : Current =     38
Incrementor step ends | Minimum  =     38 : Maximum =    300

[18-04-2022_15-46-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(38)]), ('state_module', [Number(38), Number(29)]), ('plan_module', [Number(38), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(38), Number(29), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('conformance_module', [Number(38), Number(29), Number(14), Number(22), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.146621s.

[18-04-2022_15-46-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.035180s with result Unsatisfiable.

[18-04-2022_15-46-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.181800999999723, Incremental time limit = None
Running cumulative time = 1.2597341000000597, Cumulative time limit = 1785.9375230000028
Used memory = (RSS = 2228.015625Mb, VMS = 2244.234375Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     38 : Current =     39
Incrementor step ends | Minimum  =     38 : Maximum =    300

[18-04-2022_15-46-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(39)]), ('state_module', [Number(39), Number(29)]), ('plan_module', [Number(39), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(39), Number(29), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(39)]), ('action_preconditions', [Number(39)]), ('variable_relations', [Number(39)]), ('abstraction_mappings', [Number(39)]), ('conformance_module', [Number(39), Number(29), Number(14), Number(22), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.149911s.

[18-04-2022_15-46-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.043449s with result Unsatisfiable.

[18-04-2022_15-46-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.19336040000007415, Incremental time limit = None
Running cumulative time = 1.4530945000001338, Cumulative time limit = 1785.9375230000028
Used memory = (RSS = 2229.570312Mb, VMS = 2244.660156Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     39 : Current =     40
Incrementor step ends | Minimum  =     38 : Maximum =    300

[18-04-2022_15-46-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(40)]), ('state_module', [Number(40), Number(29)]), ('plan_module', [Number(40), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(40), Number(29), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(40)]), ('action_preconditions', [Number(40)]), ('variable_relations', [Number(40)]), ('abstraction_mappings', [Number(40)]), ('conformance_module', [Number(40), Number(29), Number(14), Number(22), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.152715s.

[18-04-2022_15-46-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.053187s with result Unsatisfiable.

[18-04-2022_15-46-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2059027000000242, Incremental time limit = None
Running cumulative time = 1.658997200000158, Cumulative time limit = 1785.9375230000028
Used memory = (RSS = 2231.128906Mb, VMS = 2245.093750Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     40 : Current =     41
Incrementor step ends | Minimum  =     38 : Maximum =    300

[18-04-2022_15-46-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(41)]), ('state_module', [Number(41), Number(29)]), ('plan_module', [Number(41), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(41), Number(29), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(41)]), ('action_preconditions', [Number(41)]), ('variable_relations', [Number(41)]), ('abstraction_mappings', [Number(41)]), ('conformance_module', [Number(41), Number(29), Number(14), Number(22), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.153762s.

[18-04-2022_15-46-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.080605s with result Unsatisfiable.

[18-04-2022_15-46-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.23436759999958667, Incremental time limit = None
Running cumulative time = 1.8933647999997447, Cumulative time limit = 1785.9375230000028
Used memory = (RSS = 2232.500000Mb, VMS = 2245.519531Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     41 : Current =     42
Incrementor step ends | Minimum  =     38 : Maximum =    300

[18-04-2022_15-46-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(42)]), ('state_module', [Number(42), Number(29)]), ('plan_module', [Number(42), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(42), Number(29), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('conformance_module', [Number(42), Number(29), Number(14), Number(22), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.157331s.

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.142965s with result Satisfiable.

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.300296200000048, Incremental time limit = None
Running cumulative time = 2.1936609999997927, Cumulative time limit = 1785.9375230000028
Used memory = (RSS = 2239.203125Mb, VMS = 2259.308594Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.491899s, Solving = 0.701762s, Total = 2.193661s, Memory = (RSS = 2239.203125Mb, VMS = 2259.308594Mb), Step range = [29-42]), Calls = 6
Final Model :: Total atoms = 14370, Cost = (-2,), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.731559s, Solving = 0.346374s, Total = 1.077933s, Memory = (RSS = 2226.140625Mb, VMS = 2240.085938Mb), Step range = [29-37]
2 : Statistics :: Grounding = 0.146621s, Solving = 0.035180s, Total = 0.181801s, Memory = (RSS = 2228.015625Mb, VMS = 2244.234375Mb), Step range = [38-38]
3 : Statistics :: Grounding = 0.149911s, Solving = 0.043449s, Total = 0.193360s, Memory = (RSS = 2229.570312Mb, VMS = 2244.660156Mb), Step range = [39-39]
4 : Statistics :: Grounding = 0.152715s, Solving = 0.053187s, Total = 0.205903s, Memory = (RSS = 2231.128906Mb, VMS = 2245.093750Mb), Step range = [40-40]
5 : Statistics :: Grounding = 0.153762s, Solving = 0.080605s, Total = 0.234368s, Memory = (RSS = 2232.500000Mb, VMS = 2245.519531Mb), Step range = [41-41]
6 : Statistics :: Grounding = 0.157331s, Solving = 0.142965s, Total = 0.300296s, Memory = (RSS = 2239.203125Mb, VMS = 2259.308594Mb), Step range = [42-42]

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 2.193661s due to: Stop condition reached.

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 13, 27: 14, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 22, 42: 23, 43: 24, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 26, 14: 28, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 46, 28: 47, 29: 48}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 8, 25: 9, 26: 10, 27: 11, 28: 12, 29: 13}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 23, 8: 24, 9: 25, 10: 26, 11: 27, 12: 28, 13: 29}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 6, 9: 7, 10: 7, 11: 7, 12: 7, 13: 8, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 12, 23: 12, 24: 13, 25: 14, 26: 15, 27: 15, 28: 15, 29: 15, 30: 16, 31: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 6, 6: 8, 7: 12, 8: 13, 9: 17, 10: 20, 11: 21, 12: 23, 13: 24, 14: 25, 15: 29, 16: 30, 17: 31}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 13, 27: 14, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 22, 42: 23, 43: 24, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 26, 14: 28, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 46, 28: 47, 29: 48}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 8, 25: 9, 26: 10, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 16, 33: 16, 34: 17, 35: 18, 36: 19, 37: 20, 38: 21, 39: 21, 40: 21, 41: 22, 42: 22}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 23, 8: 24, 9: 25, 10: 26, 11: 27, 12: 28, 13: 29, 14: 30, 15: 31, 16: 33, 17: 34, 18: 35, 19: 36, 20: 37, 21: 40, 22: 42}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 6, 9: 7, 10: 7, 11: 7, 12: 7, 13: 8, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 12, 23: 12, 24: 13, 25: 14, 26: 15, 27: 15, 28: 15, 29: 15, 30: 16, 31: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 6, 6: 8, 7: 12, 8: 13, 9: 17, 10: 20, 11: 21, 12: 23, 13: 24, 14: 25, 15: 29, 16: 30, 17: 31}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 22, Last requested goal index = 22, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.491899s, Solving = 0.701762s, Total = 2.193661s, Memory = (RSS = 2239.203125Mb, VMS = 2259.308594Mb), Step range = [29-42]), Calls = 6
Model :: Total atoms = 14370, Cost = (-2,), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 13 :: Actions = 13                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,store_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,store_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,store_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 11:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 12:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,5))
Step 15:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 17:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 18:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 19:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 20:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 21:
    Current Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 22:
    Current Sub-goals:
        [Index = 7] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 23:
    Current Sub-goals:
        [Index = 7] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 7] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_arm_2,(block,5),(block,6))
Step 24:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,5))
Step 25:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
Step 26:
    Current Sub-goals:
        [Index = 10] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
    Achieved Sub-goals:
        [Index = 10] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,9))
Step 27:
    Current Sub-goals:
        [Index = 11] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 11] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
Step 28:
    Current Sub-goals:
        [Index = 12] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 12] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_2,(block,9),puzzle_room_table)
Step 29:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,3))
Step 30:
    Current Sub-goals:
        [Index = 14] talos : release(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 14] talos : release(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,9))
Step 31:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,2))
Step 32:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : put(manipulator_arm_2,(block,2),(block,3))
Step 33:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,1))
Step 34:
    Current Sub-goals:
        [Index = 17] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 17] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : release(manipulator_arm_2,(block,2))
Step 35:
    Current Sub-goals:
        [Index = 18] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 18] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 36:
    Current Sub-goals:
        [Index = 19] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 19] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_arm_1,(block,1),(block,2))
Step 37:
    Current Sub-goals:
        [Index = 20] talos : release(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 20] talos : release(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,1))
Step 38:
    Current Sub-goals:
        [Index = 21] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 39:
    Current Sub-goals:
        [Index = 21] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 40:
    Current Sub-goals:
        [Index = 21] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 21] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 41:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 42:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,4))

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=29, end_step=None

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for parts of the existing plan at the current level that have already been divided: start_step=29

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> Value of end step of abstract plan to divide adjusted for right blend of current problem: end_step=42

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=29

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> Preparing to invoke division strategy...

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> Online method OnlineMethod.GroundFirst chose to invoke the division strategy before a downwards level change:Current increment = 3, Current planning level is complete = False

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 42, chosen step range to extract = range(29, 43)

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [1]: Length = 48, Total actions = 48, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =  13, AC =  13, CF = 1.0, GT =   5.31s, ST =   2.89s, OT = 0.00s, TT =   8.19s, EF = (LE = 1.4, AC = 1.4), ED = (LE = 0.7, AC = 0.7), EB = (LE = 0.5, AC = 0.5)

[18-04-2022_15-46-52] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=1, plan_length=13, start_step=29, blend=Blend(left=0, right=0)

[18-04-2022_15-46-52] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=0, small_group_size=13, large_group_size=14

[18-04-2022_15-46-52] DEBUG :: core.Strategies >> Division points generated:
[]

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 1, Problem Range = [3-3], Size = 13, Sub-goal Stage Range = [30-42]
Division points [total=0] : []

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> Monolevel problem 3 at level 2 solved.

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 3 at level 1:
Total Templated Partial Problems = 1, Problem Range = [3-3], Size = 13, Sub-goal Stage Range = [30-42]
Division points [total=0] : []

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [30-42]

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 48, chosen step range to extract = range(0, 49)

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [1]: Length = 48, Total actions = 48, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 42, chosen step range to extract = range(0, 43)

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [1]: Length = 48, Total actions = 48, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 31, chosen step range to extract = range(0, 32)

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [1]: Length = 48, Total actions = 48, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [1]: Length = 48, Total actions = 48, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [30-42], problem number = 3, increment number = 3

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 30)
	('last_sgoals', 42)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001D5FEA66D00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1763.2902706000036)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [30-42] : Concurrency disabled : Minimum search length bound enabled with value 60

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 30
last_sgoals = 42
start_step = 48
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 60

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[18-04-2022_15-46-52] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[18-04-2022_15-46-52] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 48 as problem start state.

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 48})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,9))', 'S': 48})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 48})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 48})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 48})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 48})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 48})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 48})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,9)', 'S': 48})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 48})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,9)', 'S': 48})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 48})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(store_room,0)', 'S': 48})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 48})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 48})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 48})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 48})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 48})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 48})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 48})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 48})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'S': 48})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'S': 48})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 48})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 48})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 48})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 48})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 48})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 48})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 48})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 48})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 48})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 48})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 48})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 48})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,9)', 'S': 48})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 48})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 48})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 48})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 48})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 48})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 48})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 48})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'store_room', 'S': 48})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 48})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 48})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 48})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 48})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 48})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 48})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 48})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 48})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 48})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 48})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 48})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 48})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 48})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 48})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 48})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 48})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 48})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 48})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 48})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 48})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 48})

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 48).
holds(1, complete_tower(red,puzzle_room_table), false, 48).
holds(1, complete_tower(yellow,puzzle_room_table), false, 48).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 48).
holds(1, configuration(manipulator_end_2), aligned_with((block,9)), 48).
holds(1, configuration(manipulator_limb_1), extended, 48).
holds(1, configuration(manipulator_limb_2), extended, 48).
holds(1, configuration(puzzle_room_door), open, 48).
holds(1, configuration(starting_room_door), closed, 48).
holds(1, configuration(store_room_door), open, 48).
holds(1, grasping(manipulator_arm_1), nothing, 48).
holds(1, grasping(manipulator_arm_2), (block,9), 48).
holds(1, grasping(manipulator_end_1), nothing, 48).
holds(1, grasping(manipulator_end_2), (block,9), 48).
holds(1, in((block,1)), (puzzle_room,1), 48).
holds(1, in((block,2)), (puzzle_room,1), 48).
holds(1, in((block,3)), (puzzle_room,1), 48).
holds(1, in((block,4)), (store_room,0), 48).
holds(1, in((block,5)), (puzzle_room,1), 48).
holds(1, in((block,6)), (puzzle_room,1), 48).
holds(1, in((block,7)), (puzzle_room,1), 48).
holds(1, in((block,8)), (store_room,0), 48).
holds(1, in((block,9)), (puzzle_room,1), 48).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 48).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 48).
holds(1, in(manipulator_end_1), (puzzle_room,1), 48).
holds(1, in(manipulator_end_2), (puzzle_room,1), 48).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 48).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 48).
holds(1, in(puzzle_room_table), (puzzle_room,1), 48).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 48).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 48).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 48).
holds(1, in(talos), (puzzle_room,1), 48).
holds(1, in_tower((block,1),(block,1)), true, 48).
holds(1, in_tower((block,1),(block,2)), false, 48).
holds(1, in_tower((block,1),(block,3)), false, 48).
holds(1, in_tower((block,1),(block,4)), false, 48).
holds(1, in_tower((block,1),(block,5)), false, 48).
holds(1, in_tower((block,1),(block,6)), false, 48).
holds(1, in_tower((block,1),(block,7)), false, 48).
holds(1, in_tower((block,1),(block,8)), false, 48).
holds(1, in_tower((block,1),(block,9)), false, 48).
holds(1, in_tower((block,2),(block,1)), false, 48).
holds(1, in_tower((block,2),(block,2)), true, 48).
holds(1, in_tower((block,2),(block,3)), false, 48).
holds(1, in_tower((block,2),(block,4)), false, 48).
holds(1, in_tower((block,2),(block,5)), false, 48).
holds(1, in_tower((block,2),(block,6)), false, 48).
holds(1, in_tower((block,2),(block,7)), false, 48).
holds(1, in_tower((block,2),(block,8)), false, 48).
holds(1, in_tower((block,2),(block,9)), false, 48).
holds(1, in_tower((block,3),(block,1)), false, 48).
holds(1, in_tower((block,3),(block,2)), false, 48).
holds(1, in_tower((block,3),(block,3)), true, 48).
holds(1, in_tower((block,3),(block,4)), false, 48).
holds(1, in_tower((block,3),(block,5)), false, 48).
holds(1, in_tower((block,3),(block,6)), false, 48).
holds(1, in_tower((block,3),(block,7)), false, 48).
holds(1, in_tower((block,3),(block,8)), false, 48).
holds(1, in_tower((block,3),(block,9)), false, 48).
holds(1, in_tower((block,4),(block,1)), false, 48).
holds(1, in_tower((block,4),(block,2)), false, 48).
holds(1, in_tower((block,4),(block,3)), false, 48).
holds(1, in_tower((block,4),(block,4)), false, 48).
holds(1, in_tower((block,4),(block,5)), false, 48).
holds(1, in_tower((block,4),(block,6)), false, 48).
holds(1, in_tower((block,4),(block,7)), false, 48).
holds(1, in_tower((block,4),(block,8)), false, 48).
holds(1, in_tower((block,4),(block,9)), false, 48).
holds(1, in_tower((block,5),(block,1)), false, 48).
holds(1, in_tower((block,5),(block,2)), false, 48).
holds(1, in_tower((block,5),(block,3)), false, 48).
holds(1, in_tower((block,5),(block,4)), false, 48).
holds(1, in_tower((block,5),(block,5)), false, 48).
holds(1, in_tower((block,5),(block,6)), false, 48).
holds(1, in_tower((block,5),(block,7)), false, 48).
holds(1, in_tower((block,5),(block,8)), false, 48).
holds(1, in_tower((block,5),(block,9)), false, 48).
holds(1, in_tower((block,6),(block,1)), false, 48).
holds(1, in_tower((block,6),(block,2)), false, 48).
holds(1, in_tower((block,6),(block,3)), false, 48).
holds(1, in_tower((block,6),(block,4)), false, 48).
holds(1, in_tower((block,6),(block,5)), true, 48).
holds(1, in_tower((block,6),(block,6)), true, 48).
holds(1, in_tower((block,6),(block,7)), false, 48).
holds(1, in_tower((block,6),(block,8)), false, 48).
holds(1, in_tower((block,6),(block,9)), false, 48).
holds(1, in_tower((block,7),(block,1)), false, 48).
holds(1, in_tower((block,7),(block,2)), false, 48).
holds(1, in_tower((block,7),(block,3)), false, 48).
holds(1, in_tower((block,7),(block,4)), false, 48).
holds(1, in_tower((block,7),(block,5)), false, 48).
holds(1, in_tower((block,7),(block,6)), false, 48).
holds(1, in_tower((block,7),(block,7)), true, 48).
holds(1, in_tower((block,7),(block,8)), false, 48).
holds(1, in_tower((block,7),(block,9)), false, 48).
holds(1, in_tower((block,8),(block,1)), false, 48).
holds(1, in_tower((block,8),(block,2)), false, 48).
holds(1, in_tower((block,8),(block,3)), false, 48).
holds(1, in_tower((block,8),(block,4)), false, 48).
holds(1, in_tower((block,8),(block,5)), false, 48).
holds(1, in_tower((block,8),(block,6)), false, 48).
holds(1, in_tower((block,8),(block,7)), false, 48).
holds(1, in_tower((block,8),(block,8)), false, 48).
holds(1, in_tower((block,8),(block,9)), false, 48).
holds(1, in_tower((block,9),(block,1)), false, 48).
holds(1, in_tower((block,9),(block,2)), false, 48).
holds(1, in_tower((block,9),(block,3)), false, 48).
holds(1, in_tower((block,9),(block,4)), false, 48).
holds(1, in_tower((block,9),(block,5)), false, 48).
holds(1, in_tower((block,9),(block,6)), false, 48).
holds(1, in_tower((block,9),(block,7)), false, 48).
holds(1, in_tower((block,9),(block,8)), false, 48).
holds(1, in_tower((block,9),(block,9)), true, 48).
holds(1, on((block,1)), puzzle_room_table_left, 48).
holds(1, on((block,2)), puzzle_room_table_right, 48).
holds(1, on((block,3)), puzzle_room_table_left, 48).
holds(1, on((block,4)), nothing, 48).
holds(1, on((block,5)), (block,6), 48).
holds(1, on((block,6)), puzzle_room_table_right, 48).
holds(1, on((block,7)), puzzle_room_table_middle, 48).
holds(1, on((block,8)), nothing, 48).
holds(1, on((block,9)), puzzle_room_table_middle, 48).
holds(1, tower_base((block,1),puzzle_room_table), true, 48).
holds(1, tower_base((block,2),puzzle_room_table), true, 48).
holds(1, tower_base((block,3),puzzle_room_table), true, 48).
holds(1, tower_base((block,4),puzzle_room_table), false, 48).
holds(1, tower_base((block,5),puzzle_room_table), false, 48).
holds(1, tower_base((block,6),puzzle_room_table), true, 48).
holds(1, tower_base((block,7),puzzle_room_table), true, 48).
holds(1, tower_base((block,8),puzzle_room_table), false, 48).
holds(1, tower_base((block,9),puzzle_room_table), true, 48).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 48).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 48).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 48).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 48).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 48).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 48).
holds(1, unordered_tower((block,7),puzzle_room_table), false, 48).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 48).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 48).
holds(2, complete_tower(blue,puzzle_room_table), false, 48).
holds(2, complete_tower(red,puzzle_room_table), false, 48).
holds(2, complete_tower(yellow,puzzle_room_table), false, 48).
holds(2, configuration(manipulator_arm_1), extended, 48).
holds(2, configuration(manipulator_arm_2), extended, 48).
holds(2, configuration(puzzle_room_door), open, 48).
holds(2, configuration(starting_room_door), closed, 48).
holds(2, configuration(store_room_door), open, 48).
holds(2, grasping(manipulator_arm_1), nothing, 48).
holds(2, grasping(manipulator_arm_2), (block,9), 48).
holds(2, in((block,1)), puzzle_room, 48).
holds(2, in((block,2)), puzzle_room, 48).
holds(2, in((block,3)), puzzle_room, 48).
holds(2, in((block,4)), store_room, 48).
holds(2, in((block,5)), puzzle_room, 48).
holds(2, in((block,6)), puzzle_room, 48).
holds(2, in((block,7)), puzzle_room, 48).
holds(2, in((block,8)), store_room, 48).
holds(2, in((block,9)), puzzle_room, 48).
holds(2, in(manipulator_arm_1), puzzle_room, 48).
holds(2, in(manipulator_arm_2), puzzle_room, 48).
holds(2, in(puzzle_room_table), puzzle_room, 48).
holds(2, in(talos), puzzle_room, 48).
holds(2, in_tower((block,1),(block,1)), true, 48).
holds(2, in_tower((block,1),(block,2)), false, 48).
holds(2, in_tower((block,1),(block,3)), false, 48).
holds(2, in_tower((block,1),(block,4)), false, 48).
holds(2, in_tower((block,1),(block,5)), false, 48).
holds(2, in_tower((block,1),(block,6)), false, 48).
holds(2, in_tower((block,1),(block,7)), false, 48).
holds(2, in_tower((block,1),(block,8)), false, 48).
holds(2, in_tower((block,1),(block,9)), false, 48).
holds(2, in_tower((block,2),(block,1)), false, 48).
holds(2, in_tower((block,2),(block,2)), true, 48).
holds(2, in_tower((block,2),(block,3)), false, 48).
holds(2, in_tower((block,2),(block,4)), false, 48).
holds(2, in_tower((block,2),(block,5)), false, 48).
holds(2, in_tower((block,2),(block,6)), false, 48).
holds(2, in_tower((block,2),(block,7)), false, 48).
holds(2, in_tower((block,2),(block,8)), false, 48).
holds(2, in_tower((block,2),(block,9)), false, 48).
holds(2, in_tower((block,3),(block,1)), false, 48).
holds(2, in_tower((block,3),(block,2)), false, 48).
holds(2, in_tower((block,3),(block,3)), true, 48).
holds(2, in_tower((block,3),(block,4)), false, 48).
holds(2, in_tower((block,3),(block,5)), false, 48).
holds(2, in_tower((block,3),(block,6)), false, 48).
holds(2, in_tower((block,3),(block,7)), false, 48).
holds(2, in_tower((block,3),(block,8)), false, 48).
holds(2, in_tower((block,3),(block,9)), false, 48).
holds(2, in_tower((block,4),(block,1)), false, 48).
holds(2, in_tower((block,4),(block,2)), false, 48).
holds(2, in_tower((block,4),(block,3)), false, 48).
holds(2, in_tower((block,4),(block,4)), false, 48).
holds(2, in_tower((block,4),(block,5)), false, 48).
holds(2, in_tower((block,4),(block,6)), false, 48).
holds(2, in_tower((block,4),(block,7)), false, 48).
holds(2, in_tower((block,4),(block,8)), false, 48).
holds(2, in_tower((block,4),(block,9)), false, 48).
holds(2, in_tower((block,5),(block,1)), false, 48).
holds(2, in_tower((block,5),(block,2)), false, 48).
holds(2, in_tower((block,5),(block,3)), false, 48).
holds(2, in_tower((block,5),(block,4)), false, 48).
holds(2, in_tower((block,5),(block,5)), false, 48).
holds(2, in_tower((block,5),(block,6)), false, 48).
holds(2, in_tower((block,5),(block,7)), false, 48).
holds(2, in_tower((block,5),(block,8)), false, 48).
holds(2, in_tower((block,5),(block,9)), false, 48).
holds(2, in_tower((block,6),(block,1)), false, 48).
holds(2, in_tower((block,6),(block,2)), false, 48).
holds(2, in_tower((block,6),(block,3)), false, 48).
holds(2, in_tower((block,6),(block,4)), false, 48).
holds(2, in_tower((block,6),(block,5)), true, 48).
holds(2, in_tower((block,6),(block,6)), true, 48).
holds(2, in_tower((block,6),(block,7)), false, 48).
holds(2, in_tower((block,6),(block,8)), false, 48).
holds(2, in_tower((block,6),(block,9)), false, 48).
holds(2, in_tower((block,7),(block,1)), false, 48).
holds(2, in_tower((block,7),(block,2)), false, 48).
holds(2, in_tower((block,7),(block,3)), false, 48).
holds(2, in_tower((block,7),(block,4)), false, 48).
holds(2, in_tower((block,7),(block,5)), false, 48).
holds(2, in_tower((block,7),(block,6)), false, 48).
holds(2, in_tower((block,7),(block,7)), true, 48).
holds(2, in_tower((block,7),(block,8)), false, 48).
holds(2, in_tower((block,7),(block,9)), false, 48).
holds(2, in_tower((block,8),(block,1)), false, 48).
holds(2, in_tower((block,8),(block,2)), false, 48).
holds(2, in_tower((block,8),(block,3)), false, 48).
holds(2, in_tower((block,8),(block,4)), false, 48).
holds(2, in_tower((block,8),(block,5)), false, 48).
holds(2, in_tower((block,8),(block,6)), false, 48).
holds(2, in_tower((block,8),(block,7)), false, 48).
holds(2, in_tower((block,8),(block,8)), false, 48).
holds(2, in_tower((block,8),(block,9)), false, 48).
holds(2, in_tower((block,9),(block,1)), false, 48).
holds(2, in_tower((block,9),(block,2)), false, 48).
holds(2, in_tower((block,9),(block,3)), false, 48).
holds(2, in_tower((block,9),(block,4)), false, 48).
holds(2, in_tower((block,9),(block,5)), false, 48).
holds(2, in_tower((block,9),(block,6)), false, 48).
holds(2, in_tower((block,9),(block,7)), false, 48).
holds(2, in_tower((block,9),(block,8)), false, 48).
holds(2, in_tower((block,9),(block,9)), true, 48).
holds(2, on((block,1)), puzzle_room_table, 48).
holds(2, on((block,2)), puzzle_room_table, 48).
holds(2, on((block,3)), puzzle_room_table, 48).
holds(2, on((block,4)), nothing, 48).
holds(2, on((block,5)), (block,6), 48).
holds(2, on((block,6)), puzzle_room_table, 48).
holds(2, on((block,7)), puzzle_room_table, 48).
holds(2, on((block,8)), nothing, 48).
holds(2, on((block,9)), puzzle_room_table, 48).
holds(2, tower_base((block,1),puzzle_room_table), true, 48).
holds(2, tower_base((block,2),puzzle_room_table), true, 48).
holds(2, tower_base((block,3),puzzle_room_table), true, 48).
holds(2, tower_base((block,4),puzzle_room_table), false, 48).
holds(2, tower_base((block,5),puzzle_room_table), false, 48).
holds(2, tower_base((block,6),puzzle_room_table), true, 48).
holds(2, tower_base((block,7),puzzle_room_table), true, 48).
holds(2, tower_base((block,8),puzzle_room_table), false, 48).
holds(2, tower_base((block,9),puzzle_room_table), true, 48).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 48).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 48).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 48).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 48).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 48).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 48).
holds(2, unordered_tower((block,7),puzzle_room_table), false, 48).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 48).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 48).

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=60']

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,9))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 30})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,2)', 'I': 31})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 32})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,1))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,1)', 'I': 33})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 34})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 35})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 36})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,1))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 37})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 38})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 39})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 40})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 41})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,4))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'I': 42})

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 13 rules into program part base:

sub_goal(2, talos, release(manipulator_arm_2,(block,9)), grasping(manipulator_arm_2), nothing, 30).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), (block,2), 31).
sub_goal(2, talos, put(manipulator_arm_2,(block,2),(block,3)), on((block,2)), (block,3), 32).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,1)), grasping(manipulator_arm_1), (block,1), 33).
sub_goal(2, talos, release(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), nothing, 34).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 35).
sub_goal(2, talos, put(manipulator_arm_1,(block,1),(block,2)), on((block,1)), (block,2), 36).
sub_goal(2, talos, release(manipulator_arm_1,(block,1)), grasping(manipulator_arm_1), nothing, 37).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 38).
sub_goal(2, talos, move(hallway), in(talos), hallway, 39).
sub_goal(2, talos, move(store_room), in(talos), store_room, 40).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 41).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,4)), grasping(manipulator_arm_1), (block,4), 42).

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=60']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001D5FEAF9670>]
	incrementor = SolveIncrementor(step_start=48, step_increase=1, step_increase_initial=13, step_end_min=61, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1763.2902706000036, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 48), range_=None), IncPart(name='plan_module', args=('#inc', 48, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 48, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 48, 30, 42, 'sequential', 'false'), range_=None)]

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1282 rules

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006779599999845232s

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.041493s.

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007987s with result Satisfiable.

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001D6149F9860>

[18-04-2022_15-46-52] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 48)
	('last_sgoals', 42)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001D5FEA66D00>)
	('first_sgoals', 30)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001D6149F9860>)

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 48). %* None *%
#program plan_module(#inc, 48, false, false). %* None *%
#program optimisation_module(#inc, 48, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 48, 30, 42, sequential, false). %* None *%

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     47 : Current =     60
Incrementor step ends | Minimum  =     61 : Maximum =    300

[18-04-2022_15-46-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(60)]), ('state_module', [Number(48), Number(48)]), ('plan_module', [Number(48), Number(48), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(48), Number(48), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(48)]), ('action_preconditions', [Number(48)]), ('variable_relations', [Number(48)]), ('abstraction_mappings', [Number(48)]), ('conformance_module', [Number(48), Number(48), Number(30), Number(42), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(49), Number(48)]), ('plan_module', [Number(49), Number(48), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(49), Number(48), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(49)]), ('action_preconditions', [Number(49)]), ('variable_relations', [Number(49)]), ('abstraction_mappings', [Number(49)]), ('conformance_module', [Number(49), Number(48), Number(30), Number(42), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(50), Number(48)]), ('plan_module', [Number(50), Number(48), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(50), Number(48), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(50)]), ('action_preconditions', [Number(50)]), ('variable_relations', [Number(50)]), ('abstraction_mappings', [Number(50)]), ('conformance_module', [Number(50), Number(48), Number(30), Number(42), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(51), Number(48)]), ('plan_module', [Number(51), Number(48), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(51), Number(48), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(51)]), ('action_preconditions', [Number(51)]), ('variable_relations', [Number(51)]), ('abstraction_mappings', [Number(51)]), ('conformance_module', [Number(51), Number(48), Number(30), Number(42), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(52), Number(48)]), ('plan_module', [Number(52), Number(48), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(52), Number(48), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(52)]), ('action_preconditions', [Number(52)]), ('variable_relations', [Number(52)]), ('abstraction_mappings', [Number(52)]), ('conformance_module', [Number(52), Number(48), Number(30), Number(42), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(53), Number(48)]), ('plan_module', [Number(53), Number(48), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(53), Number(48), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(53)]), ('action_preconditions', [Number(53)]), ('variable_relations', [Number(53)]), ('abstraction_mappings', [Number(53)]), ('conformance_module', [Number(53), Number(48), Number(30), Number(42), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(54), Number(48)]), ('plan_module', [Number(54), Number(48), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(54), Number(48), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(54)]), ('action_preconditions', [Number(54)]), ('variable_relations', [Number(54)]), ('abstraction_mappings', [Number(54)]), ('conformance_module', [Number(54), Number(48), Number(30), Number(42), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(55), Number(48)]), ('plan_module', [Number(55), Number(48), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(55), Number(48), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(55)]), ('action_preconditions', [Number(55)]), ('variable_relations', [Number(55)]), ('abstraction_mappings', [Number(55)]), ('conformance_module', [Number(55), Number(48), Number(30), Number(42), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(56), Number(48)]), ('plan_module', [Number(56), Number(48), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(56), Number(48), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(56)]), ('action_preconditions', [Number(56)]), ('variable_relations', [Number(56)]), ('abstraction_mappings', [Number(56)]), ('conformance_module', [Number(56), Number(48), Number(30), Number(42), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(57), Number(48)]), ('plan_module', [Number(57), Number(48), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(57), Number(48), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(57)]), ('action_preconditions', [Number(57)]), ('variable_relations', [Number(57)]), ('abstraction_mappings', [Number(57)]), ('conformance_module', [Number(57), Number(48), Number(30), Number(42), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(58), Number(48)]), ('plan_module', [Number(58), Number(48), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(58), Number(48), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(58)]), ('action_preconditions', [Number(58)]), ('variable_relations', [Number(58)]), ('abstraction_mappings', [Number(58)]), ('conformance_module', [Number(58), Number(48), Number(30), Number(42), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(59), Number(48)]), ('plan_module', [Number(59), Number(48), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(59), Number(48), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(59)]), ('action_preconditions', [Number(59)]), ('variable_relations', [Number(59)]), ('abstraction_mappings', [Number(59)]), ('conformance_module', [Number(59), Number(48), Number(30), Number(42), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(60), Number(48)]), ('plan_module', [Number(60), Number(48), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(60), Number(48), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(60)]), ('action_preconditions', [Number(60)]), ('variable_relations', [Number(60)]), ('abstraction_mappings', [Number(60)]), ('conformance_module', [Number(60), Number(48), Number(30), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.831884s.

[18-04-2022_15-46-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.964017s with result Unsatisfiable.

[18-04-2022_15-46-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.795901699999831, Incremental time limit = None
Running cumulative time = 2.795901699999831, Cumulative time limit = 1763.2902706000036
Used memory = (RSS = 2250.812500Mb, VMS = 2266.531250Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     60 : Current =     61
Incrementor step ends | Minimum  =     61 : Maximum =    300

[18-04-2022_15-46-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(61)]), ('state_module', [Number(61), Number(48)]), ('plan_module', [Number(61), Number(48), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(61), Number(48), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(61)]), ('action_preconditions', [Number(61)]), ('variable_relations', [Number(61)]), ('abstraction_mappings', [Number(61)]), ('conformance_module', [Number(61), Number(48), Number(30), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.236921s.

[18-04-2022_15-46-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.050699s with result Unsatisfiable.

[18-04-2022_15-46-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2876202000002195, Incremental time limit = None
Running cumulative time = 3.0835219000000507, Cumulative time limit = 1763.2902706000036
Used memory = (RSS = 2258.160156Mb, VMS = 2280.933594Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     61 : Current =     62
Incrementor step ends | Minimum  =     61 : Maximum =    300

[18-04-2022_15-46-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(62)]), ('state_module', [Number(62), Number(48)]), ('plan_module', [Number(62), Number(48), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(62), Number(48), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(62)]), ('action_preconditions', [Number(62)]), ('variable_relations', [Number(62)]), ('abstraction_mappings', [Number(62)]), ('conformance_module', [Number(62), Number(48), Number(30), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.239990s.

[18-04-2022_15-46-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.054382s with result Unsatisfiable.

[18-04-2022_15-46-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.294372100000146, Incremental time limit = None
Running cumulative time = 3.3778940000001967, Cumulative time limit = 1763.2902706000036
Used memory = (RSS = 2260.601562Mb, VMS = 2281.464844Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     62 : Current =     63
Incrementor step ends | Minimum  =     61 : Maximum =    300

[18-04-2022_15-46-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(63)]), ('state_module', [Number(63), Number(48)]), ('plan_module', [Number(63), Number(48), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(63), Number(48), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(63)]), ('action_preconditions', [Number(63)]), ('variable_relations', [Number(63)]), ('abstraction_mappings', [Number(63)]), ('conformance_module', [Number(63), Number(48), Number(30), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.245492s.

[18-04-2022_15-46-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.074483s with result Unsatisfiable.

[18-04-2022_15-46-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.31997450000017125, Incremental time limit = None
Running cumulative time = 3.697868500000368, Cumulative time limit = 1763.2902706000036
Used memory = (RSS = 2263.042969Mb, VMS = 2281.992188Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     63 : Current =     64
Incrementor step ends | Minimum  =     61 : Maximum =    300

[18-04-2022_15-46-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(64)]), ('state_module', [Number(64), Number(48)]), ('plan_module', [Number(64), Number(48), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(64), Number(48), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(64)]), ('action_preconditions', [Number(64)]), ('variable_relations', [Number(64)]), ('abstraction_mappings', [Number(64)]), ('conformance_module', [Number(64), Number(48), Number(30), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.252178s.

[18-04-2022_15-46-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.118517s with result Unsatisfiable.

[18-04-2022_15-46-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3706945000003543, Incremental time limit = None
Running cumulative time = 4.068563000000722, Cumulative time limit = 1763.2902706000036
Used memory = (RSS = 2265.589844Mb, VMS = 2282.519531Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     64 : Current =     65
Incrementor step ends | Minimum  =     61 : Maximum =    300

[18-04-2022_15-46-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(65)]), ('state_module', [Number(65), Number(48)]), ('plan_module', [Number(65), Number(48), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(65), Number(48), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(65)]), ('action_preconditions', [Number(65)]), ('variable_relations', [Number(65)]), ('abstraction_mappings', [Number(65)]), ('conformance_module', [Number(65), Number(48), Number(30), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.252529s.

[18-04-2022_15-46-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.195031s with result Unsatisfiable.

[18-04-2022_15-46-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.44755940000004557, Incremental time limit = None
Running cumulative time = 4.516122400000768, Cumulative time limit = 1763.2902706000036
Used memory = (RSS = 2268.050781Mb, VMS = 2283.750000Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     65 : Current =     66
Incrementor step ends | Minimum  =     61 : Maximum =    300

[18-04-2022_15-46-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(66)]), ('state_module', [Number(66), Number(48)]), ('plan_module', [Number(66), Number(48), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(66), Number(48), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(66)]), ('action_preconditions', [Number(66)]), ('variable_relations', [Number(66)]), ('abstraction_mappings', [Number(66)]), ('conformance_module', [Number(66), Number(48), Number(30), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.256722s.

[18-04-2022_15-46-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.275054s with result Unsatisfiable.

[18-04-2022_15-46-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5317758999999569, Incremental time limit = None
Running cumulative time = 5.047898300000725, Cumulative time limit = 1763.2902706000036
Used memory = (RSS = 2270.238281Mb, VMS = 2284.808594Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     66 : Current =     67
Incrementor step ends | Minimum  =     61 : Maximum =    300

[18-04-2022_15-46-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(67)]), ('state_module', [Number(67), Number(48)]), ('plan_module', [Number(67), Number(48), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(67), Number(48), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(67)]), ('action_preconditions', [Number(67)]), ('variable_relations', [Number(67)]), ('abstraction_mappings', [Number(67)]), ('conformance_module', [Number(67), Number(48), Number(30), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.262001s.

[18-04-2022_15-46-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-46-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.561607s with result Unsatisfiable.

[18-04-2022_15-46-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.8236080000001493, Incremental time limit = None
Running cumulative time = 5.871506300000874, Cumulative time limit = 1763.2902706000036
Used memory = (RSS = 2278.367188Mb, VMS = 2309.316406Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-46-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     67 : Current =     68
Incrementor step ends | Minimum  =     61 : Maximum =    300

[18-04-2022_15-46-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(68)]), ('state_module', [Number(68), Number(48)]), ('plan_module', [Number(68), Number(48), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(68), Number(48), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(68)]), ('action_preconditions', [Number(68)]), ('variable_relations', [Number(68)]), ('abstraction_mappings', [Number(68)]), ('conformance_module', [Number(68), Number(48), Number(30), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-46-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.267584s.

[18-04-2022_15-46-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-47-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 1.004886s with result Satisfiable.

[18-04-2022_15-47-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.2724697000003289, Incremental time limit = None
Running cumulative time = 7.143976000001203, Cumulative time limit = 1763.2902706000036
Used memory = (RSS = 2283.800781Mb, VMS = 2312.601562Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-47-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.845300s, Solving = 3.298677s, Total = 7.143976s, Memory = (RSS = 2283.800781Mb, VMS = 2312.601562Mb), Step range = [48-68]), Calls = 9
Final Model :: Total atoms = 21446, Cost = (-2,), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[18-04-2022_15-47-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 1.831884s, Solving = 0.964017s, Total = 2.795902s, Memory = (RSS = 2250.812500Mb, VMS = 2266.531250Mb), Step range = [48-60]
2 : Statistics :: Grounding = 0.236921s, Solving = 0.050699s, Total = 0.287620s, Memory = (RSS = 2258.160156Mb, VMS = 2280.933594Mb), Step range = [61-61]
3 : Statistics :: Grounding = 0.239990s, Solving = 0.054382s, Total = 0.294372s, Memory = (RSS = 2260.601562Mb, VMS = 2281.464844Mb), Step range = [62-62]
4 : Statistics :: Grounding = 0.245492s, Solving = 0.074483s, Total = 0.319975s, Memory = (RSS = 2263.042969Mb, VMS = 2281.992188Mb), Step range = [63-63]
5 : Statistics :: Grounding = 0.252178s, Solving = 0.118517s, Total = 0.370695s, Memory = (RSS = 2265.589844Mb, VMS = 2282.519531Mb), Step range = [64-64]
6 : Statistics :: Grounding = 0.252529s, Solving = 0.195031s, Total = 0.447559s, Memory = (RSS = 2268.050781Mb, VMS = 2283.750000Mb), Step range = [65-65]
7 : Statistics :: Grounding = 0.256722s, Solving = 0.275054s, Total = 0.531776s, Memory = (RSS = 2270.238281Mb, VMS = 2284.808594Mb), Step range = [66-66]
8 : Statistics :: Grounding = 0.262001s, Solving = 0.561607s, Total = 0.823608s, Memory = (RSS = 2278.367188Mb, VMS = 2309.316406Mb), Step range = [67-67]
9 : Statistics :: Grounding = 0.267584s, Solving = 1.004886s, Total = 1.272470s, Memory = (RSS = 2283.800781Mb, VMS = 2312.601562Mb), Step range = [68-68]

[18-04-2022_15-47-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 7.143976s due to: Stop condition reached.

[18-04-2022_15-47-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[18-04-2022_15-47-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[18-04-2022_15-47-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_15-47-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_15-47-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[18-04-2022_15-47-01] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 13, 27: 14, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 22, 42: 23, 43: 24, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 26, 14: 28, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 46, 28: 47, 29: 48}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 8, 25: 9, 26: 10, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 16, 33: 16, 34: 17, 35: 18, 36: 19, 37: 20, 38: 21, 39: 21, 40: 21, 41: 22, 42: 22}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 23, 8: 24, 9: 25, 10: 26, 11: 27, 12: 28, 13: 29, 14: 30, 15: 31, 16: 33, 17: 34, 18: 35, 19: 36, 20: 37, 21: 40, 22: 42}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 6, 9: 7, 10: 7, 11: 7, 12: 7, 13: 8, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 12, 23: 12, 24: 13, 25: 14, 26: 15, 27: 15, 28: 15, 29: 15, 30: 16, 31: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 6, 6: 8, 7: 12, 8: 13, 9: 17, 10: 20, 11: 21, 12: 23, 13: 24, 14: 25, 15: 29, 16: 30, 17: 31}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_15-47-01] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 13, 27: 14, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 22, 42: 23, 43: 24, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29, 49: 30, 50: 30, 51: 30, 52: 31, 53: 31, 54: 32, 55: 33, 56: 34, 57: 35, 58: 35, 59: 36, 60: 37, 61: 38, 62: 39, 63: 40, 64: 40, 65: 41, 66: 41, 67: 42, 68: 42}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 26, 14: 28, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 46, 28: 47, 29: 48, 30: 51, 31: 53, 32: 54, 33: 55, 34: 56, 35: 58, 36: 59, 37: 60, 38: 61, 39: 62, 40: 64, 41: 66, 42: 68}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 8, 25: 9, 26: 10, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 16, 33: 16, 34: 17, 35: 18, 36: 19, 37: 20, 38: 21, 39: 21, 40: 21, 41: 22, 42: 22}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 23, 8: 24, 9: 25, 10: 26, 11: 27, 12: 28, 13: 29, 14: 30, 15: 31, 16: 33, 17: 34, 18: 35, 19: 36, 20: 37, 21: 40, 22: 42}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 6, 9: 7, 10: 7, 11: 7, 12: 7, 13: 8, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 12, 23: 12, 24: 13, 25: 14, 26: 15, 27: 15, 28: 15, 29: 15, 30: 16, 31: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 6, 6: 8, 7: 12, 8: 13, 9: 17, 10: 20, 11: 21, 12: 23, 13: 24, 14: 25, 15: 29, 16: 30, 17: 31}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_15-47-01] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 42, Last requested goal index = 42, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[18-04-2022_15-47-01] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.845300s, Solving = 3.298677s, Total = 7.143976s, Memory = (RSS = 2283.800781Mb, VMS = 2312.601562Mb), Step range = [48-68]), Calls = 9
Model :: Total atoms = 21446, Cost = (-2,), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[18-04-2022_15-47-01] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 20 :: Actions = 20                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 25:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 26:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 27:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 28:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 29:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 30:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : move((store_room,1))
Step 31:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 37:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 38:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 39:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 40:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 41:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 42:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 43:
    Current Sub-goals:
        [Index = 24] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 24] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,5))
Step 44:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,9)))
Step 45:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
    Achieved Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,9))
Step 46:
    Current Sub-goals:
        [Index = 27] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 27] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 47:
    Current Sub-goals:
        [Index = 28] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 28] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,9),puzzle_room_table_middle)
Step 48:
    Current Sub-goals:
        [Index = 29] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 29] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 49:
    Current Sub-goals:
        [Index = 30] talos : release(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,1)))
Step 50:
    Current Sub-goals:
        [Index = 30] talos : release(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_1,(block,1))
Step 51:
    Current Sub-goals:
        [Index = 30] talos : release(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 30] talos : release(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,9))
Step 52:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,2)))
Step 53:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,2))
Step 54:
    Current Sub-goals:
        [Index = 32] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 32] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_2,(block,2),(block,3))
Step 55:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Planned actions:
        talos : release(manipulator_end_2,(block,2))
Step 56:
    Current Sub-goals:
        [Index = 34] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 34] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_end_1,(block,1),(block,2))
Step 57:
    Current Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_1,(block,1))
Step 58:
    Current Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 59:
    Current Sub-goals:
        [Index = 36] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 36] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 60:
    Current Sub-goals:
        [Index = 37] talos : release(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 37] talos : release(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : move((puzzle_room,0))
Step 61:
    Current Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : move((hallway,2))
Step 62:
    Current Sub-goals:
        [Index = 39] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 39] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 63:
    Current Sub-goals:
        [Index = 40] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 64:
    Current Sub-goals:
        [Index = 40] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 40] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 65:
    Current Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 66:
    Current Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 67:
    Current Sub-goals:
        [Index = 42] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
Step 68:
    Current Sub-goals:
        [Index = 42] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
        [Index = 42] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))

[18-04-2022_15-47-01] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[18-04-2022_15-47-01] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[18-04-2022_15-47-01] DEBUG :: ASH Planner Main #1 >> Monolevel problem 3 at level 1 solved.

[18-04-2022_15-47-01] DEBUG :: ASH Planner Main #1 >> Online planning increment 3 finished.

[18-04-2022_15-47-01] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 2 : Total constraining sub-goal stages = 17 : Goals achieved = 17 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 3 : Total constraining sub-goal stages = 31 : Goals achieved = 22 : Goals unachieved = 9 : Complete = False
Level = 1 : Solved problems = 3 : Total constraining sub-goal stages = 42 : Goals achieved = 42 : Goals unachieved = 0 : Complete = False

[18-04-2022_15-47-01] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 2, Highest = 2.

[18-04-2022_15-47-01] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 4 by method ground-first is [1-2].

[18-04-2022_15-47-01] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning problem 4 at level 2:
Total Templated Partial Problems = 2, Problem Range = [3-4], Size = 18, Sub-goal Stage Range = [14-31]
Division points [total=1] : [(Index = 22, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[18-04-2022_15-47-01] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [23-31]

[18-04-2022_15-47-01] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 42, chosen step range to extract = range(0, 43)

[18-04-2022_15-47-01] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [1]: Length = 68, Total actions = 68, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-47-01] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 31, chosen step range to extract = range(0, 32)

[18-04-2022_15-47-01] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [1]: Length = 68, Total actions = 68, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-47-01] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[18-04-2022_15-47-01] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 42, Total actions = 42, Produced sub-goal stages = 42, Produced sub-goal literals = 42
Level [1]: Length = 68, Total actions = 68, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-47-01] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [23-31], problem number = 4, increment number = 4

[18-04-2022_15-47-01] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 23)
	('last_sgoals', 31)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001D5FEA66D00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1783.743862000003)
	('length_limit', 300)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[18-04-2022_15-47-01] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 2] partial conformance refinement (sequential) with sgoals range [23-31] : Concurrency disabled : Minimum search length bound enabled with value 50

[18-04-2022_15-47-01] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 23
last_sgoals = 31
start_step = 42
is_initial = False
is_final = True
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 50

[18-04-2022_15-47-01] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[18-04-2022_15-47-01] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[18-04-2022_15-47-01] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[18-04-2022_15-47-01] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[18-04-2022_15-47-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[18-04-2022_15-47-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[18-04-2022_15-47-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_15-47-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_15-47-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_15-47-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_15-47-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[18-04-2022_15-47-01] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_15-47-01] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 42 as problem start state.

[18-04-2022_15-47-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 42})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 42})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 42})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 42})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 42})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'S': 42})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'store_room', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 42})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 42})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'store_room', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'S': 42})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 42})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 42})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 3, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 3, 'F': 'in((block,8))', 'V': 'store_room', 'S': 42})
Fluent({'L': 3, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 42})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 42})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'store_room', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 42})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'S': 42})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 42})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 42})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 42})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 42})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 42})
Fluent({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 42})
Fluent({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'S': 42})
Fluent({'L': 3, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 42})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 42})

[18-04-2022_15-47-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_15-47-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 257 rules into program part ash_initial_state:

holds(2, complete_tower(blue,puzzle_room_table), false, 42).
holds(2, complete_tower(red,puzzle_room_table), true, 42).
holds(2, complete_tower(yellow,puzzle_room_table), false, 42).
holds(2, configuration(manipulator_arm_1), extended, 42).
holds(2, configuration(manipulator_arm_2), retracted, 42).
holds(2, configuration(puzzle_room_door), open, 42).
holds(2, configuration(starting_room_door), closed, 42).
holds(2, configuration(store_room_door), open, 42).
holds(2, grasping(manipulator_arm_1), (block,4), 42).
holds(2, grasping(manipulator_arm_2), nothing, 42).
holds(2, in((block,1)), puzzle_room, 42).
holds(2, in((block,2)), puzzle_room, 42).
holds(2, in((block,3)), puzzle_room, 42).
holds(2, in((block,4)), store_room, 42).
holds(2, in((block,5)), puzzle_room, 42).
holds(2, in((block,6)), puzzle_room, 42).
holds(2, in((block,7)), puzzle_room, 42).
holds(2, in((block,8)), store_room, 42).
holds(2, in((block,9)), puzzle_room, 42).
holds(2, in(manipulator_arm_1), store_room, 42).
holds(2, in(manipulator_arm_2), store_room, 42).
holds(2, in(puzzle_room_table), puzzle_room, 42).
holds(2, in(talos), store_room, 42).
holds(2, in_tower((block,1),(block,1)), false, 42).
holds(2, in_tower((block,1),(block,2)), false, 42).
holds(2, in_tower((block,1),(block,3)), false, 42).
holds(2, in_tower((block,1),(block,4)), false, 42).
holds(2, in_tower((block,1),(block,5)), false, 42).
holds(2, in_tower((block,1),(block,6)), false, 42).
holds(2, in_tower((block,1),(block,7)), false, 42).
holds(2, in_tower((block,1),(block,8)), false, 42).
holds(2, in_tower((block,1),(block,9)), false, 42).
holds(2, in_tower((block,2),(block,1)), false, 42).
holds(2, in_tower((block,2),(block,2)), false, 42).
holds(2, in_tower((block,2),(block,3)), false, 42).
holds(2, in_tower((block,2),(block,4)), false, 42).
holds(2, in_tower((block,2),(block,5)), false, 42).
holds(2, in_tower((block,2),(block,6)), false, 42).
holds(2, in_tower((block,2),(block,7)), false, 42).
holds(2, in_tower((block,2),(block,8)), false, 42).
holds(2, in_tower((block,2),(block,9)), false, 42).
holds(2, in_tower((block,3),(block,1)), true, 42).
holds(2, in_tower((block,3),(block,2)), true, 42).
holds(2, in_tower((block,3),(block,3)), true, 42).
holds(2, in_tower((block,3),(block,4)), false, 42).
holds(2, in_tower((block,3),(block,5)), false, 42).
holds(2, in_tower((block,3),(block,6)), false, 42).
holds(2, in_tower((block,3),(block,7)), false, 42).
holds(2, in_tower((block,3),(block,8)), false, 42).
holds(2, in_tower((block,3),(block,9)), false, 42).
holds(2, in_tower((block,4),(block,1)), false, 42).
holds(2, in_tower((block,4),(block,2)), false, 42).
holds(2, in_tower((block,4),(block,3)), false, 42).
holds(2, in_tower((block,4),(block,4)), false, 42).
holds(2, in_tower((block,4),(block,5)), false, 42).
holds(2, in_tower((block,4),(block,6)), false, 42).
holds(2, in_tower((block,4),(block,7)), false, 42).
holds(2, in_tower((block,4),(block,8)), false, 42).
holds(2, in_tower((block,4),(block,9)), false, 42).
holds(2, in_tower((block,5),(block,1)), false, 42).
holds(2, in_tower((block,5),(block,2)), false, 42).
holds(2, in_tower((block,5),(block,3)), false, 42).
holds(2, in_tower((block,5),(block,4)), false, 42).
holds(2, in_tower((block,5),(block,5)), false, 42).
holds(2, in_tower((block,5),(block,6)), false, 42).
holds(2, in_tower((block,5),(block,7)), false, 42).
holds(2, in_tower((block,5),(block,8)), false, 42).
holds(2, in_tower((block,5),(block,9)), false, 42).
holds(2, in_tower((block,6),(block,1)), false, 42).
holds(2, in_tower((block,6),(block,2)), false, 42).
holds(2, in_tower((block,6),(block,3)), false, 42).
holds(2, in_tower((block,6),(block,4)), false, 42).
holds(2, in_tower((block,6),(block,5)), true, 42).
holds(2, in_tower((block,6),(block,6)), true, 42).
holds(2, in_tower((block,6),(block,7)), false, 42).
holds(2, in_tower((block,6),(block,8)), false, 42).
holds(2, in_tower((block,6),(block,9)), false, 42).
holds(2, in_tower((block,7),(block,1)), false, 42).
holds(2, in_tower((block,7),(block,2)), false, 42).
holds(2, in_tower((block,7),(block,3)), false, 42).
holds(2, in_tower((block,7),(block,4)), false, 42).
holds(2, in_tower((block,7),(block,5)), false, 42).
holds(2, in_tower((block,7),(block,6)), false, 42).
holds(2, in_tower((block,7),(block,7)), true, 42).
holds(2, in_tower((block,7),(block,8)), false, 42).
holds(2, in_tower((block,7),(block,9)), false, 42).
holds(2, in_tower((block,8),(block,1)), false, 42).
holds(2, in_tower((block,8),(block,2)), false, 42).
holds(2, in_tower((block,8),(block,3)), false, 42).
holds(2, in_tower((block,8),(block,4)), false, 42).
holds(2, in_tower((block,8),(block,5)), false, 42).
holds(2, in_tower((block,8),(block,6)), false, 42).
holds(2, in_tower((block,8),(block,7)), false, 42).
holds(2, in_tower((block,8),(block,8)), false, 42).
holds(2, in_tower((block,8),(block,9)), false, 42).
holds(2, in_tower((block,9),(block,1)), false, 42).
holds(2, in_tower((block,9),(block,2)), false, 42).
holds(2, in_tower((block,9),(block,3)), false, 42).
holds(2, in_tower((block,9),(block,4)), false, 42).
holds(2, in_tower((block,9),(block,5)), false, 42).
holds(2, in_tower((block,9),(block,6)), false, 42).
holds(2, in_tower((block,9),(block,7)), false, 42).
holds(2, in_tower((block,9),(block,8)), false, 42).
holds(2, in_tower((block,9),(block,9)), true, 42).
holds(2, on((block,1)), (block,2), 42).
holds(2, on((block,2)), (block,3), 42).
holds(2, on((block,3)), puzzle_room_table, 42).
holds(2, on((block,4)), nothing, 42).
holds(2, on((block,5)), (block,6), 42).
holds(2, on((block,6)), puzzle_room_table, 42).
holds(2, on((block,7)), puzzle_room_table, 42).
holds(2, on((block,8)), nothing, 42).
holds(2, on((block,9)), puzzle_room_table, 42).
holds(2, tower_base((block,1),puzzle_room_table), false, 42).
holds(2, tower_base((block,2),puzzle_room_table), false, 42).
holds(2, tower_base((block,3),puzzle_room_table), true, 42).
holds(2, tower_base((block,4),puzzle_room_table), false, 42).
holds(2, tower_base((block,5),puzzle_room_table), false, 42).
holds(2, tower_base((block,6),puzzle_room_table), true, 42).
holds(2, tower_base((block,7),puzzle_room_table), true, 42).
holds(2, tower_base((block,8),puzzle_room_table), false, 42).
holds(2, tower_base((block,9),puzzle_room_table), true, 42).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 42).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 42).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 42).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 42).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 42).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 42).
holds(2, unordered_tower((block,7),puzzle_room_table), false, 42).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 42).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 42).
holds(3, complete_tower(blue,puzzle_room_table), false, 42).
holds(3, complete_tower(red,puzzle_room_table), true, 42).
holds(3, complete_tower(yellow,puzzle_room_table), false, 42).
holds(3, grasping(manipulator_arm_1), (block,4), 42).
holds(3, grasping(manipulator_arm_2), nothing, 42).
holds(3, in((block,1)), puzzle_room, 42).
holds(3, in((block,2)), puzzle_room, 42).
holds(3, in((block,3)), puzzle_room, 42).
holds(3, in((block,4)), store_room, 42).
holds(3, in((block,5)), puzzle_room, 42).
holds(3, in((block,6)), puzzle_room, 42).
holds(3, in((block,7)), puzzle_room, 42).
holds(3, in((block,8)), store_room, 42).
holds(3, in((block,9)), puzzle_room, 42).
holds(3, in(manipulator_arm_1), store_room, 42).
holds(3, in(manipulator_arm_2), store_room, 42).
holds(3, in(puzzle_room_table), puzzle_room, 42).
holds(3, in(talos), store_room, 42).
holds(3, in_tower((block,1),(block,1)), false, 42).
holds(3, in_tower((block,1),(block,2)), false, 42).
holds(3, in_tower((block,1),(block,3)), false, 42).
holds(3, in_tower((block,1),(block,4)), false, 42).
holds(3, in_tower((block,1),(block,5)), false, 42).
holds(3, in_tower((block,1),(block,6)), false, 42).
holds(3, in_tower((block,1),(block,7)), false, 42).
holds(3, in_tower((block,1),(block,8)), false, 42).
holds(3, in_tower((block,1),(block,9)), false, 42).
holds(3, in_tower((block,2),(block,1)), false, 42).
holds(3, in_tower((block,2),(block,2)), false, 42).
holds(3, in_tower((block,2),(block,3)), false, 42).
holds(3, in_tower((block,2),(block,4)), false, 42).
holds(3, in_tower((block,2),(block,5)), false, 42).
holds(3, in_tower((block,2),(block,6)), false, 42).
holds(3, in_tower((block,2),(block,7)), false, 42).
holds(3, in_tower((block,2),(block,8)), false, 42).
holds(3, in_tower((block,2),(block,9)), false, 42).
holds(3, in_tower((block,3),(block,1)), true, 42).
holds(3, in_tower((block,3),(block,2)), true, 42).
holds(3, in_tower((block,3),(block,3)), true, 42).
holds(3, in_tower((block,3),(block,4)), false, 42).
holds(3, in_tower((block,3),(block,5)), false, 42).
holds(3, in_tower((block,3),(block,6)), false, 42).
holds(3, in_tower((block,3),(block,7)), false, 42).
holds(3, in_tower((block,3),(block,8)), false, 42).
holds(3, in_tower((block,3),(block,9)), false, 42).
holds(3, in_tower((block,4),(block,1)), false, 42).
holds(3, in_tower((block,4),(block,2)), false, 42).
holds(3, in_tower((block,4),(block,3)), false, 42).
holds(3, in_tower((block,4),(block,4)), false, 42).
holds(3, in_tower((block,4),(block,5)), false, 42).
holds(3, in_tower((block,4),(block,6)), false, 42).
holds(3, in_tower((block,4),(block,7)), false, 42).
holds(3, in_tower((block,4),(block,8)), false, 42).
holds(3, in_tower((block,4),(block,9)), false, 42).
holds(3, in_tower((block,5),(block,1)), false, 42).
holds(3, in_tower((block,5),(block,2)), false, 42).
holds(3, in_tower((block,5),(block,3)), false, 42).
holds(3, in_tower((block,5),(block,4)), false, 42).
holds(3, in_tower((block,5),(block,5)), false, 42).
holds(3, in_tower((block,5),(block,6)), false, 42).
holds(3, in_tower((block,5),(block,7)), false, 42).
holds(3, in_tower((block,5),(block,8)), false, 42).
holds(3, in_tower((block,5),(block,9)), false, 42).
holds(3, in_tower((block,6),(block,1)), false, 42).
holds(3, in_tower((block,6),(block,2)), false, 42).
holds(3, in_tower((block,6),(block,3)), false, 42).
holds(3, in_tower((block,6),(block,4)), false, 42).
holds(3, in_tower((block,6),(block,5)), true, 42).
holds(3, in_tower((block,6),(block,6)), true, 42).
holds(3, in_tower((block,6),(block,7)), false, 42).
holds(3, in_tower((block,6),(block,8)), false, 42).
holds(3, in_tower((block,6),(block,9)), false, 42).
holds(3, in_tower((block,7),(block,1)), false, 42).
holds(3, in_tower((block,7),(block,2)), false, 42).
holds(3, in_tower((block,7),(block,3)), false, 42).
holds(3, in_tower((block,7),(block,4)), false, 42).
holds(3, in_tower((block,7),(block,5)), false, 42).
holds(3, in_tower((block,7),(block,6)), false, 42).
holds(3, in_tower((block,7),(block,7)), true, 42).
holds(3, in_tower((block,7),(block,8)), false, 42).
holds(3, in_tower((block,7),(block,9)), false, 42).
holds(3, in_tower((block,8),(block,1)), false, 42).
holds(3, in_tower((block,8),(block,2)), false, 42).
holds(3, in_tower((block,8),(block,3)), false, 42).
holds(3, in_tower((block,8),(block,4)), false, 42).
holds(3, in_tower((block,8),(block,5)), false, 42).
holds(3, in_tower((block,8),(block,6)), false, 42).
holds(3, in_tower((block,8),(block,7)), false, 42).
holds(3, in_tower((block,8),(block,8)), false, 42).
holds(3, in_tower((block,8),(block,9)), false, 42).
holds(3, in_tower((block,9),(block,1)), false, 42).
holds(3, in_tower((block,9),(block,2)), false, 42).
holds(3, in_tower((block,9),(block,3)), false, 42).
holds(3, in_tower((block,9),(block,4)), false, 42).
holds(3, in_tower((block,9),(block,5)), false, 42).
holds(3, in_tower((block,9),(block,6)), false, 42).
holds(3, in_tower((block,9),(block,7)), false, 42).
holds(3, in_tower((block,9),(block,8)), false, 42).
holds(3, in_tower((block,9),(block,9)), true, 42).
holds(3, on((block,1)), (block,2), 42).
holds(3, on((block,2)), (block,3), 42).
holds(3, on((block,3)), puzzle_room_table, 42).
holds(3, on((block,4)), nothing, 42).
holds(3, on((block,5)), (block,6), 42).
holds(3, on((block,6)), puzzle_room_table, 42).
holds(3, on((block,7)), puzzle_room_table, 42).
holds(3, on((block,8)), nothing, 42).
holds(3, on((block,9)), puzzle_room_table, 42).
holds(3, tower_base((block,1),puzzle_room_table), false, 42).
holds(3, tower_base((block,2),puzzle_room_table), false, 42).
holds(3, tower_base((block,3),puzzle_room_table), true, 42).
holds(3, tower_base((block,4),puzzle_room_table), false, 42).
holds(3, tower_base((block,5),puzzle_room_table), false, 42).
holds(3, tower_base((block,6),puzzle_room_table), true, 42).
holds(3, tower_base((block,7),puzzle_room_table), true, 42).
holds(3, tower_base((block,8),puzzle_room_table), false, 42).
holds(3, tower_base((block,9),puzzle_room_table), true, 42).
holds(3, unordered_tower((block,1),puzzle_room_table), false, 42).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 42).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 42).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 42).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 42).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 42).
holds(3, unordered_tower((block,7),puzzle_room_table), false, 42).
holds(3, unordered_tower((block,8),puzzle_room_table), false, 42).
holds(3, unordered_tower((block,9),puzzle_room_table), false, 42).

[18-04-2022_15-47-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[18-04-2022_15-47-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_15-47-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 588 rules into program part ash_goal_state:

final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(3, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,1),(block,7)), false, true).
final_goal(3, in_tower((block,1),(block,7)), true, false).
final_goal(3, in_tower((block,1),(block,8)), false, true).
final_goal(3, in_tower((block,1),(block,8)), true, false).
final_goal(3, in_tower((block,1),(block,9)), false, true).
final_goal(3, in_tower((block,1),(block,9)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,7)), false, true).
final_goal(3, in_tower((block,2),(block,7)), true, false).
final_goal(3, in_tower((block,2),(block,8)), false, true).
final_goal(3, in_tower((block,2),(block,8)), true, false).
final_goal(3, in_tower((block,2),(block,9)), false, true).
final_goal(3, in_tower((block,2),(block,9)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,7)), false, true).
final_goal(3, in_tower((block,3),(block,7)), true, false).
final_goal(3, in_tower((block,3),(block,8)), false, true).
final_goal(3, in_tower((block,3),(block,8)), true, false).
final_goal(3, in_tower((block,3),(block,9)), false, true).
final_goal(3, in_tower((block,3),(block,9)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,7)), false, true).
final_goal(3, in_tower((block,4),(block,7)), true, false).
final_goal(3, in_tower((block,4),(block,8)), false, true).
final_goal(3, in_tower((block,4),(block,8)), true, false).
final_goal(3, in_tower((block,4),(block,9)), false, true).
final_goal(3, in_tower((block,4),(block,9)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,7)), false, true).
final_goal(3, in_tower((block,5),(block,7)), true, false).
final_goal(3, in_tower((block,5),(block,8)), false, true).
final_goal(3, in_tower((block,5),(block,8)), true, false).
final_goal(3, in_tower((block,5),(block,9)), false, true).
final_goal(3, in_tower((block,5),(block,9)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, in_tower((block,6),(block,7)), false, true).
final_goal(3, in_tower((block,6),(block,7)), true, false).
final_goal(3, in_tower((block,6),(block,8)), false, true).
final_goal(3, in_tower((block,6),(block,8)), true, false).
final_goal(3, in_tower((block,6),(block,9)), false, true).
final_goal(3, in_tower((block,6),(block,9)), true, false).
final_goal(3, in_tower((block,7),(block,1)), false, true).
final_goal(3, in_tower((block,7),(block,1)), true, false).
final_goal(3, in_tower((block,7),(block,2)), false, true).
final_goal(3, in_tower((block,7),(block,2)), true, false).
final_goal(3, in_tower((block,7),(block,3)), false, true).
final_goal(3, in_tower((block,7),(block,3)), true, false).
final_goal(3, in_tower((block,7),(block,4)), false, true).
final_goal(3, in_tower((block,7),(block,4)), true, false).
final_goal(3, in_tower((block,7),(block,5)), false, true).
final_goal(3, in_tower((block,7),(block,5)), true, false).
final_goal(3, in_tower((block,7),(block,6)), false, true).
final_goal(3, in_tower((block,7),(block,6)), true, false).
final_goal(3, in_tower((block,7),(block,7)), false, true).
final_goal(3, in_tower((block,7),(block,7)), true, false).
final_goal(3, in_tower((block,7),(block,8)), false, true).
final_goal(3, in_tower((block,7),(block,8)), true, false).
final_goal(3, in_tower((block,7),(block,9)), false, true).
final_goal(3, in_tower((block,7),(block,9)), true, false).
final_goal(3, in_tower((block,8),(block,1)), false, true).
final_goal(3, in_tower((block,8),(block,1)), true, false).
final_goal(3, in_tower((block,8),(block,2)), false, true).
final_goal(3, in_tower((block,8),(block,2)), true, false).
final_goal(3, in_tower((block,8),(block,3)), false, true).
final_goal(3, in_tower((block,8),(block,3)), true, false).
final_goal(3, in_tower((block,8),(block,4)), false, true).
final_goal(3, in_tower((block,8),(block,4)), true, false).
final_goal(3, in_tower((block,8),(block,5)), false, true).
final_goal(3, in_tower((block,8),(block,5)), true, false).
final_goal(3, in_tower((block,8),(block,6)), false, true).
final_goal(3, in_tower((block,8),(block,6)), true, false).
final_goal(3, in_tower((block,8),(block,7)), false, true).
final_goal(3, in_tower((block,8),(block,7)), true, false).
final_goal(3, in_tower((block,8),(block,8)), false, true).
final_goal(3, in_tower((block,8),(block,8)), true, false).
final_goal(3, in_tower((block,8),(block,9)), false, true).
final_goal(3, in_tower((block,8),(block,9)), true, false).
final_goal(3, in_tower((block,9),(block,1)), false, true).
final_goal(3, in_tower((block,9),(block,1)), true, false).
final_goal(3, in_tower((block,9),(block,2)), false, true).
final_goal(3, in_tower((block,9),(block,2)), true, false).
final_goal(3, in_tower((block,9),(block,3)), false, true).
final_goal(3, in_tower((block,9),(block,3)), true, false).
final_goal(3, in_tower((block,9),(block,4)), false, true).
final_goal(3, in_tower((block,9),(block,4)), true, false).
final_goal(3, in_tower((block,9),(block,5)), false, true).
final_goal(3, in_tower((block,9),(block,5)), true, false).
final_goal(3, in_tower((block,9),(block,6)), false, true).
final_goal(3, in_tower((block,9),(block,6)), true, false).
final_goal(3, in_tower((block,9),(block,7)), false, false).
final_goal(3, in_tower((block,9),(block,7)), true, true).
final_goal(3, in_tower((block,9),(block,8)), false, false).
final_goal(3, in_tower((block,9),(block,8)), true, true).
final_goal(3, in_tower((block,9),(block,9)), false, false).
final_goal(3, in_tower((block,9),(block,9)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), (block,7), false).
final_goal(3, on((block,1)), (block,8), false).
final_goal(3, on((block,1)), (block,9), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), (block,7), false).
final_goal(3, on((block,2)), (block,8), false).
final_goal(3, on((block,2)), (block,9), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), (block,7), false).
final_goal(3, on((block,3)), (block,8), false).
final_goal(3, on((block,3)), (block,9), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), (block,7), false).
final_goal(3, on((block,4)), (block,8), false).
final_goal(3, on((block,4)), (block,9), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), (block,7), false).
final_goal(3, on((block,5)), (block,8), false).
final_goal(3, on((block,5)), (block,9), false).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), (block,7), false).
final_goal(3, on((block,6)), (block,8), false).
final_goal(3, on((block,6)), (block,9), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, on((block,7)), (block,1), false).
final_goal(3, on((block,7)), (block,2), false).
final_goal(3, on((block,7)), (block,3), false).
final_goal(3, on((block,7)), (block,4), false).
final_goal(3, on((block,7)), (block,5), false).
final_goal(3, on((block,7)), (block,6), false).
final_goal(3, on((block,7)), (block,8), true).
final_goal(3, on((block,7)), (block,9), false).
final_goal(3, on((block,7)), nothing, false).
final_goal(3, on((block,7)), puzzle_room_table, false).
final_goal(3, on((block,8)), (block,1), false).
final_goal(3, on((block,8)), (block,2), false).
final_goal(3, on((block,8)), (block,3), false).
final_goal(3, on((block,8)), (block,4), false).
final_goal(3, on((block,8)), (block,5), false).
final_goal(3, on((block,8)), (block,6), false).
final_goal(3, on((block,8)), (block,7), false).
final_goal(3, on((block,8)), (block,9), true).
final_goal(3, on((block,8)), nothing, false).
final_goal(3, on((block,8)), puzzle_room_table, false).
final_goal(3, on((block,9)), (block,1), false).
final_goal(3, on((block,9)), (block,2), false).
final_goal(3, on((block,9)), (block,3), false).
final_goal(3, on((block,9)), (block,4), false).
final_goal(3, on((block,9)), (block,5), false).
final_goal(3, on((block,9)), (block,6), false).
final_goal(3, on((block,9)), (block,7), false).
final_goal(3, on((block,9)), (block,8), false).
final_goal(3, on((block,9)), nothing, false).
final_goal(3, on((block,9)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, tower_base((block,7),puzzle_room_table), false, true).
final_goal(3, tower_base((block,7),puzzle_room_table), true, false).
final_goal(3, tower_base((block,8),puzzle_room_table), false, true).
final_goal(3, tower_base((block,8),puzzle_room_table), true, false).
final_goal(3, tower_base((block,9),puzzle_room_table), false, false).
final_goal(3, tower_base((block,9),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,9),puzzle_room_table), true, false).

[18-04-2022_15-47-01] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=50']

[18-04-2022_15-47-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,8))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,8)', 'I': 23})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 24})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,8),(block,9))', 'F': 'on((block,8))', 'V': '(block,9)', 'I': 25})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,8))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 26})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,7))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,7)', 'I': 27})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 28})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,4))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 29})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,7),(block,8))', 'F': 'on((block,7))', 'V': '(block,8)', 'I': 30})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,7))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 31})

[18-04-2022_15-47-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_15-47-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 9 rules into program part base:

sub_goal(3, talos, grasp(manipulator_arm_2,(block,8)), grasping(manipulator_arm_2), (block,8), 23).
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 24).
sub_goal(3, talos, put(manipulator_arm_2,(block,8),(block,9)), on((block,8)), (block,9), 25).
sub_goal(3, talos, release(manipulator_arm_2,(block,8)), grasping(manipulator_arm_2), nothing, 26).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,7)), grasping(manipulator_arm_2), (block,7), 27).
sub_goal(3, talos, put(manipulator_arm_1,(block,4),(block,5)), on((block,4)), (block,5), 28).
sub_goal(3, talos, release(manipulator_arm_1,(block,4)), grasping(manipulator_arm_1), nothing, 29).
sub_goal(3, talos, put(manipulator_arm_2,(block,7),(block,8)), on((block,7)), (block,8), 30).
sub_goal(3, talos, release(manipulator_arm_2,(block,7)), grasping(manipulator_arm_2), nothing, 31).

[18-04-2022_15-47-01] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_15-47-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[18-04-2022_15-47-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=50']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001D60AA83670>]
	incrementor = SolveIncrementor(step_start=42, step_increase=1, step_increase_initial=9, step_end_min=51, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1783.743862000003, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 42), range_=None), IncPart(name='plan_module', args=('#inc', 42, 'false', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 42, 'false', 'false', 'false', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 42, 23, 31, 'sequential', 'false'), range_=None)]

[18-04-2022_15-47-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_15-47-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_15-47-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_15-47-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1244 rules

[18-04-2022_15-47-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006784799999877578s

[18-04-2022_15-47-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[18-04-2022_15-47-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[18-04-2022_15-47-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.034791s.

[18-04-2022_15-47-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-47-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006769s with result Satisfiable.

[18-04-2022_15-47-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[18-04-2022_15-47-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001D6149DC9F0>

[18-04-2022_15-47-01] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 2)
	('start_step', 42)
	('last_sgoals', 31)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001D5FEA66D00>)
	('first_sgoals', 23)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001D6149DC9F0>)

[18-04-2022_15-47-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 42). %* None *%
#program plan_module(#inc, 42, false, true). %* None *%
#program optimisation_module(#inc, 42, false, false, false, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 42, 23, 31, sequential, false). %* None *%

[18-04-2022_15-47-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     41 : Current =     50
Incrementor step ends | Minimum  =     51 : Maximum =    300

[18-04-2022_15-47-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(50)]), ('state_module', [Number(42), Number(42)]), ('plan_module', [Number(42), Number(42), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(42), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('conformance_module', [Number(42), Number(42), Number(23), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(43), Number(42)]), ('plan_module', [Number(43), Number(42), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(43), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(43)]), ('action_preconditions', [Number(43)]), ('variable_relations', [Number(43)]), ('abstraction_mappings', [Number(43)]), ('conformance_module', [Number(43), Number(42), Number(23), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(44), Number(42)]), ('plan_module', [Number(44), Number(42), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(44), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(44)]), ('action_preconditions', [Number(44)]), ('variable_relations', [Number(44)]), ('abstraction_mappings', [Number(44)]), ('conformance_module', [Number(44), Number(42), Number(23), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(45), Number(42)]), ('plan_module', [Number(45), Number(42), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(45), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(45)]), ('action_preconditions', [Number(45)]), ('variable_relations', [Number(45)]), ('abstraction_mappings', [Number(45)]), ('conformance_module', [Number(45), Number(42), Number(23), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(46), Number(42)]), ('plan_module', [Number(46), Number(42), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(46), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(46)]), ('action_preconditions', [Number(46)]), ('variable_relations', [Number(46)]), ('abstraction_mappings', [Number(46)]), ('conformance_module', [Number(46), Number(42), Number(23), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(47), Number(42)]), ('plan_module', [Number(47), Number(42), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(47), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(47)]), ('action_preconditions', [Number(47)]), ('variable_relations', [Number(47)]), ('abstraction_mappings', [Number(47)]), ('conformance_module', [Number(47), Number(42), Number(23), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(48), Number(42)]), ('plan_module', [Number(48), Number(42), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(48), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(48)]), ('action_preconditions', [Number(48)]), ('variable_relations', [Number(48)]), ('abstraction_mappings', [Number(48)]), ('conformance_module', [Number(48), Number(42), Number(23), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(49), Number(42)]), ('plan_module', [Number(49), Number(42), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(49), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(49)]), ('action_preconditions', [Number(49)]), ('variable_relations', [Number(49)]), ('abstraction_mappings', [Number(49)]), ('conformance_module', [Number(49), Number(42), Number(23), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(50), Number(42)]), ('plan_module', [Number(50), Number(42), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(50), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(50)]), ('action_preconditions', [Number(50)]), ('variable_relations', [Number(50)]), ('abstraction_mappings', [Number(50)]), ('conformance_module', [Number(50), Number(42), Number(23), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-47-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.732236s.

[18-04-2022_15-47-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-47-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.257246s with result Unsatisfiable.

[18-04-2022_15-47-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.9894812000002275, Incremental time limit = None
Running cumulative time = 0.9894812000002275, Cumulative time limit = 1783.743862000003
Used memory = (RSS = 2230.031250Mb, VMS = 2243.464844Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-47-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     50 : Current =     51
Incrementor step ends | Minimum  =     51 : Maximum =    300

[18-04-2022_15-47-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(51)]), ('state_module', [Number(51), Number(42)]), ('plan_module', [Number(51), Number(42), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(51), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(51)]), ('action_preconditions', [Number(51)]), ('variable_relations', [Number(51)]), ('abstraction_mappings', [Number(51)]), ('conformance_module', [Number(51), Number(42), Number(23), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-47-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.140428s.

[18-04-2022_15-47-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-47-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.027203s with result Unsatisfiable.

[18-04-2022_15-47-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1676311999999598, Incremental time limit = None
Running cumulative time = 1.1571124000001873, Cumulative time limit = 1783.743862000003
Used memory = (RSS = 2231.531250Mb, VMS = 2246.925781Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-47-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     51 : Current =     52
Incrementor step ends | Minimum  =     51 : Maximum =    300

[18-04-2022_15-47-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(52)]), ('state_module', [Number(52), Number(42)]), ('plan_module', [Number(52), Number(42), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(52), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(52)]), ('action_preconditions', [Number(52)]), ('variable_relations', [Number(52)]), ('abstraction_mappings', [Number(52)]), ('conformance_module', [Number(52), Number(42), Number(23), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-47-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.145902s.

[18-04-2022_15-47-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-47-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.030367s with result Unsatisfiable.

[18-04-2022_15-47-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.17626870000003692, Incremental time limit = None
Running cumulative time = 1.3333811000002243, Cumulative time limit = 1783.743862000003
Used memory = (RSS = 2232.875000Mb, VMS = 2247.300781Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-47-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     52 : Current =     53
Incrementor step ends | Minimum  =     51 : Maximum =    300

[18-04-2022_15-47-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(53)]), ('state_module', [Number(53), Number(42)]), ('plan_module', [Number(53), Number(42), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(53), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(53)]), ('action_preconditions', [Number(53)]), ('variable_relations', [Number(53)]), ('abstraction_mappings', [Number(53)]), ('conformance_module', [Number(53), Number(42), Number(23), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-47-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.147286s.

[18-04-2022_15-47-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-47-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.030888s with result Unsatisfiable.

[18-04-2022_15-47-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.17817390000027444, Incremental time limit = None
Running cumulative time = 1.5115550000004987, Cumulative time limit = 1783.743862000003
Used memory = (RSS = 2234.195312Mb, VMS = 2247.667969Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-47-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     53 : Current =     54
Incrementor step ends | Minimum  =     51 : Maximum =    300

[18-04-2022_15-47-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(54)]), ('state_module', [Number(54), Number(42)]), ('plan_module', [Number(54), Number(42), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(54), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(54)]), ('action_preconditions', [Number(54)]), ('variable_relations', [Number(54)]), ('abstraction_mappings', [Number(54)]), ('conformance_module', [Number(54), Number(42), Number(23), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-47-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.150789s.

[18-04-2022_15-47-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-47-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.035488s with result Unsatisfiable.

[18-04-2022_15-47-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.18627719999994952, Incremental time limit = None
Running cumulative time = 1.6978322000004482, Cumulative time limit = 1783.743862000003
Used memory = (RSS = 2235.535156Mb, VMS = 2253.640625Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-47-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     54 : Current =     55
Incrementor step ends | Minimum  =     51 : Maximum =    300

[18-04-2022_15-47-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(55)]), ('state_module', [Number(55), Number(42)]), ('plan_module', [Number(55), Number(42), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(55), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(55)]), ('action_preconditions', [Number(55)]), ('variable_relations', [Number(55)]), ('abstraction_mappings', [Number(55)]), ('conformance_module', [Number(55), Number(42), Number(23), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-47-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.154244s.

[18-04-2022_15-47-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-47-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.035686s with result Unsatisfiable.

[18-04-2022_15-47-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.18993000000000393, Incremental time limit = None
Running cumulative time = 1.8877622000004521, Cumulative time limit = 1783.743862000003
Used memory = (RSS = 2236.988281Mb, VMS = 2254.011719Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-47-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     55 : Current =     56
Incrementor step ends | Minimum  =     51 : Maximum =    300

[18-04-2022_15-47-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(56)]), ('state_module', [Number(56), Number(42)]), ('plan_module', [Number(56), Number(42), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(56), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(56)]), ('action_preconditions', [Number(56)]), ('variable_relations', [Number(56)]), ('abstraction_mappings', [Number(56)]), ('conformance_module', [Number(56), Number(42), Number(23), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-47-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.155617s.

[18-04-2022_15-47-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-47-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.040061s with result Unsatisfiable.

[18-04-2022_15-47-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.19567739999956757, Incremental time limit = None
Running cumulative time = 2.0834396000000197, Cumulative time limit = 1783.743862000003
Used memory = (RSS = 2238.234375Mb, VMS = 2254.390625Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-47-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     56 : Current =     57
Incrementor step ends | Minimum  =     51 : Maximum =    300

[18-04-2022_15-47-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(57)]), ('state_module', [Number(57), Number(42)]), ('plan_module', [Number(57), Number(42), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(57), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(57)]), ('action_preconditions', [Number(57)]), ('variable_relations', [Number(57)]), ('abstraction_mappings', [Number(57)]), ('conformance_module', [Number(57), Number(42), Number(23), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-47-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.159064s.

[18-04-2022_15-47-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-47-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.067073s with result Satisfiable.

[18-04-2022_15-47-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2261370999999599, Incremental time limit = None
Running cumulative time = 2.3095766999999796, Cumulative time limit = 1783.743862000003
Used memory = (RSS = 2241.765625Mb, VMS = 2257.015625Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-47-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.785565s, Solving = 0.524012s, Total = 2.309577s, Memory = (RSS = 2241.765625Mb, VMS = 2257.015625Mb), Step range = [42-57]), Calls = 8
Final Model :: Total atoms = 20141, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[18-04-2022_15-47-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.732236s, Solving = 0.257246s, Total = 0.989481s, Memory = (RSS = 2230.031250Mb, VMS = 2243.464844Mb), Step range = [42-50]
2 : Statistics :: Grounding = 0.140428s, Solving = 0.027203s, Total = 0.167631s, Memory = (RSS = 2231.531250Mb, VMS = 2246.925781Mb), Step range = [51-51]
3 : Statistics :: Grounding = 0.145902s, Solving = 0.030367s, Total = 0.176269s, Memory = (RSS = 2232.875000Mb, VMS = 2247.300781Mb), Step range = [52-52]
4 : Statistics :: Grounding = 0.147286s, Solving = 0.030888s, Total = 0.178174s, Memory = (RSS = 2234.195312Mb, VMS = 2247.667969Mb), Step range = [53-53]
5 : Statistics :: Grounding = 0.150789s, Solving = 0.035488s, Total = 0.186277s, Memory = (RSS = 2235.535156Mb, VMS = 2253.640625Mb), Step range = [54-54]
6 : Statistics :: Grounding = 0.154244s, Solving = 0.035686s, Total = 0.189930s, Memory = (RSS = 2236.988281Mb, VMS = 2254.011719Mb), Step range = [55-55]
7 : Statistics :: Grounding = 0.155617s, Solving = 0.040061s, Total = 0.195677s, Memory = (RSS = 2238.234375Mb, VMS = 2254.390625Mb), Step range = [56-56]
8 : Statistics :: Grounding = 0.159064s, Solving = 0.067073s, Total = 0.226137s, Memory = (RSS = 2241.765625Mb, VMS = 2257.015625Mb), Step range = [57-57]

[18-04-2022_15-47-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 2.309577s due to: Stop condition reached.

[18-04-2022_15-47-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[18-04-2022_15-47-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[18-04-2022_15-47-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_15-47-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_15-47-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[18-04-2022_15-47-04] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 13, 27: 14, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 22, 42: 23, 43: 24, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29, 49: 30, 50: 30, 51: 30, 52: 31, 53: 31, 54: 32, 55: 33, 56: 34, 57: 35, 58: 35, 59: 36, 60: 37, 61: 38, 62: 39, 63: 40, 64: 40, 65: 41, 66: 41, 67: 42, 68: 42}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 26, 14: 28, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 46, 28: 47, 29: 48, 30: 51, 31: 53, 32: 54, 33: 55, 34: 56, 35: 58, 36: 59, 37: 60, 38: 61, 39: 62, 40: 64, 41: 66, 42: 68}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 8, 25: 9, 26: 10, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 16, 33: 16, 34: 17, 35: 18, 36: 19, 37: 20, 38: 21, 39: 21, 40: 21, 41: 22, 42: 22}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 23, 8: 24, 9: 25, 10: 26, 11: 27, 12: 28, 13: 29, 14: 30, 15: 31, 16: 33, 17: 34, 18: 35, 19: 36, 20: 37, 21: 40, 22: 42}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 6, 9: 7, 10: 7, 11: 7, 12: 7, 13: 8, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 12, 23: 12, 24: 13, 25: 14, 26: 15, 27: 15, 28: 15, 29: 15, 30: 16, 31: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 6, 6: 8, 7: 12, 8: 13, 9: 17, 10: 20, 11: 21, 12: 23, 13: 24, 14: 25, 15: 29, 16: 30, 17: 31}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_15-47-04] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 13, 27: 14, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 22, 42: 23, 43: 24, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29, 49: 30, 50: 30, 51: 30, 52: 31, 53: 31, 54: 32, 55: 33, 56: 34, 57: 35, 58: 35, 59: 36, 60: 37, 61: 38, 62: 39, 63: 40, 64: 40, 65: 41, 66: 41, 67: 42, 68: 42}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 26, 14: 28, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 46, 28: 47, 29: 48, 30: 51, 31: 53, 32: 54, 33: 55, 34: 56, 35: 58, 36: 59, 37: 60, 38: 61, 39: 62, 40: 64, 41: 66, 42: 68}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 8, 25: 9, 26: 10, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 16, 33: 16, 34: 17, 35: 18, 36: 19, 37: 20, 38: 21, 39: 21, 40: 21, 41: 22, 42: 22, 43: 23, 44: 23, 45: 24, 46: 24, 47: 24, 48: 24, 49: 25, 50: 25, 51: 26, 52: 27, 53: 28, 54: 28, 55: 29, 56: 30, 57: 31}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 23, 8: 24, 9: 25, 10: 26, 11: 27, 12: 28, 13: 29, 14: 30, 15: 31, 16: 33, 17: 34, 18: 35, 19: 36, 20: 37, 21: 40, 22: 42, 23: 44, 24: 48, 25: 50, 26: 51, 27: 52, 28: 54, 29: 55, 30: 56, 31: 57}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 6, 9: 7, 10: 7, 11: 7, 12: 7, 13: 8, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 12, 23: 12, 24: 13, 25: 14, 26: 15, 27: 15, 28: 15, 29: 15, 30: 16, 31: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 6, 6: 8, 7: 12, 8: 13, 9: 17, 10: 20, 11: 21, 12: 23, 13: 24, 14: 25, 15: 29, 16: 30, 17: 31}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_15-47-04] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 31, Last requested goal index = 31, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[18-04-2022_15-47-04] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.785565s, Solving = 0.524012s, Total = 2.309577s, Memory = (RSS = 2241.765625Mb, VMS = 2257.015625Mb), Step range = [42-57]), Calls = 8
Model :: Total atoms = 20141, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[18-04-2022_15-47-04] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 15 :: Actions = 15                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,store_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,store_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,store_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 11:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 12:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,5))
Step 15:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 17:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 18:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 19:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 20:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 21:
    Current Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 22:
    Current Sub-goals:
        [Index = 7] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 23:
    Current Sub-goals:
        [Index = 7] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 7] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_arm_2,(block,5),(block,6))
Step 24:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,5))
Step 25:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
Step 26:
    Current Sub-goals:
        [Index = 10] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
    Achieved Sub-goals:
        [Index = 10] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,9))
Step 27:
    Current Sub-goals:
        [Index = 11] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 11] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
Step 28:
    Current Sub-goals:
        [Index = 12] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 12] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_2,(block,9),puzzle_room_table)
Step 29:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,3))
Step 30:
    Current Sub-goals:
        [Index = 14] talos : release(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 14] talos : release(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,9))
Step 31:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,2))
Step 32:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : put(manipulator_arm_2,(block,2),(block,3))
Step 33:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,1))
Step 34:
    Current Sub-goals:
        [Index = 17] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 17] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : release(manipulator_arm_2,(block,2))
Step 35:
    Current Sub-goals:
        [Index = 18] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 18] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 36:
    Current Sub-goals:
        [Index = 19] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 19] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_arm_1,(block,1),(block,2))
Step 37:
    Current Sub-goals:
        [Index = 20] talos : release(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 20] talos : release(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,1))
Step 38:
    Current Sub-goals:
        [Index = 21] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 39:
    Current Sub-goals:
        [Index = 21] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 40:
    Current Sub-goals:
        [Index = 21] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 21] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 41:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 42:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,4))
Step 43:
    Current Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 44:
    Current Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,8))
Step 45:
    Current Sub-goals:
        [Index = 24] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 46:
    Current Sub-goals:
        [Index = 24] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 47:
    Current Sub-goals:
        [Index = 24] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 48:
    Current Sub-goals:
        [Index = 24] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 24] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 49:
    Current Sub-goals:
        [Index = 25] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 50:
    Current Sub-goals:
        [Index = 25] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Achieved Sub-goals:
        [Index = 25] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Planned actions:
        talos : put(manipulator_arm_2,(block,8),(block,9))
Step 51:
    Current Sub-goals:
        [Index = 26] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 26] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,8))
Step 52:
    Current Sub-goals:
        [Index = 27] talos : grasp(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = (block,7)
    Achieved Sub-goals:
        [Index = 27] talos : grasp(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = (block,7)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,7))
Step 53:
    Current Sub-goals:
        [Index = 28] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 54:
    Current Sub-goals:
        [Index = 28] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 28] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_arm_1,(block,4),(block,5))
Step 55:
    Current Sub-goals:
        [Index = 29] talos : release(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 29] talos : release(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,4))
Step 56:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_2,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_2,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Planned actions:
        talos : put(manipulator_arm_2,(block,7),(block,8))
Step 57:
    Current Sub-goals:
        [Index = 31] talos : release(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 31] talos : release(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,7))

[18-04-2022_15-47-04] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=42, end_step=None

[18-04-2022_15-47-04] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for parts of the existing plan at the current level that have already been divided: start_step=42

[18-04-2022_15-47-04] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=42

[18-04-2022_15-47-04] DEBUG :: ASH Planner Main #1 >> Preparing to invoke division strategy...

[18-04-2022_15-47-04] DEBUG :: ASH Planner Main #1 >> Online method OnlineMethod.GroundFirst chose to invoke the division strategy before a downwards level change:Current increment = 4, Current planning level is complete = True

[18-04-2022_15-47-04] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 57, chosen step range to extract = range(42, 58)

[18-04-2022_15-47-04] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 68, Total actions = 68, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-47-04] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =  15, AC =  15, CF = 1.0, GT =   7.09s, ST =   3.41s, OT = 0.00s, TT =  10.50s, EF = (LE = 1.7, AC = 1.7), ED = (LE = 1.0, AC = 1.0), EB = (LE = 0.6, AC = 0.6)

[18-04-2022_15-47-04] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=1, plan_length=15, start_step=42, blend=Blend(left=0, right=0)

[18-04-2022_15-47-04] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=0, small_group_size=15, large_group_size=16

[18-04-2022_15-47-04] DEBUG :: core.Strategies >> Division points generated:
[]

[18-04-2022_15-47-04] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 1, Problem Range = [4-4], Size = 15, Sub-goal Stage Range = [43-57]
Division points [total=0] : []

[18-04-2022_15-47-04] DEBUG :: ASH Planner Main #1 >> Monolevel problem 4 at level 2 solved.

[18-04-2022_15-47-04] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 4 at level 1:
Total Templated Partial Problems = 1, Problem Range = [4-4], Size = 15, Sub-goal Stage Range = [43-57]
Division points [total=0] : []

[18-04-2022_15-47-04] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [43-57]

[18-04-2022_15-47-04] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 68, chosen step range to extract = range(0, 69)

[18-04-2022_15-47-04] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 68, Total actions = 68, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-47-04] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 57, chosen step range to extract = range(0, 58)

[18-04-2022_15-47-04] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 68, Total actions = 68, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-47-04] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 31, chosen step range to extract = range(0, 32)

[18-04-2022_15-47-04] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 68, Total actions = 68, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-47-04] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[18-04-2022_15-47-04] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 68, Total actions = 68, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-47-04] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [43-57], problem number = 4, increment number = 4

[18-04-2022_15-47-04] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 43)
	('last_sgoals', 57)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001D5FEA66D00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1753.8367179000024)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[18-04-2022_15-47-04] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [43-57] : Concurrency disabled : Minimum search length bound enabled with value 82

[18-04-2022_15-47-04] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 43
last_sgoals = 57
start_step = 68
is_initial = False
is_final = True
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 82

[18-04-2022_15-47-04] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[18-04-2022_15-47-04] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[18-04-2022_15-47-04] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[18-04-2022_15-47-04] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[18-04-2022_15-47-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[18-04-2022_15-47-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[18-04-2022_15-47-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_15-47-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_15-47-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_15-47-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_15-47-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[18-04-2022_15-47-04] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_15-47-04] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 68 as problem start state.

[18-04-2022_15-47-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,4))', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 68})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'S': 68})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 68})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,4)', 'S': 68})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(store_room,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(store_room,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(store_room,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(store_room,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(store_room,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(store_room,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(store_room,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(store_room,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 68})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'S': 68})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'store_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 68})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 68})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'store_room', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 68})

[18-04-2022_15-47-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_15-47-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 68).
holds(1, complete_tower(red,puzzle_room_table), true, 68).
holds(1, complete_tower(yellow,puzzle_room_table), false, 68).
holds(1, configuration(manipulator_end_1), aligned_with((block,4)), 68).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 68).
holds(1, configuration(manipulator_limb_1), extended, 68).
holds(1, configuration(manipulator_limb_2), retracted, 68).
holds(1, configuration(puzzle_room_door), open, 68).
holds(1, configuration(starting_room_door), closed, 68).
holds(1, configuration(store_room_door), open, 68).
holds(1, grasping(manipulator_arm_1), (block,4), 68).
holds(1, grasping(manipulator_arm_2), nothing, 68).
holds(1, grasping(manipulator_end_1), (block,4), 68).
holds(1, grasping(manipulator_end_2), nothing, 68).
holds(1, in((block,1)), (puzzle_room,1), 68).
holds(1, in((block,2)), (puzzle_room,1), 68).
holds(1, in((block,3)), (puzzle_room,1), 68).
holds(1, in((block,4)), (store_room,0), 68).
holds(1, in((block,5)), (puzzle_room,1), 68).
holds(1, in((block,6)), (puzzle_room,1), 68).
holds(1, in((block,7)), (puzzle_room,1), 68).
holds(1, in((block,8)), (store_room,0), 68).
holds(1, in((block,9)), (puzzle_room,1), 68).
holds(1, in(manipulator_arm_1), (store_room,0), 68).
holds(1, in(manipulator_arm_2), (store_room,0), 68).
holds(1, in(manipulator_end_1), (store_room,0), 68).
holds(1, in(manipulator_end_2), (store_room,0), 68).
holds(1, in(manipulator_limb_1), (store_room,0), 68).
holds(1, in(manipulator_limb_2), (store_room,0), 68).
holds(1, in(puzzle_room_table), (puzzle_room,1), 68).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 68).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 68).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 68).
holds(1, in(talos), (store_room,0), 68).
holds(1, in_tower((block,1),(block,1)), false, 68).
holds(1, in_tower((block,1),(block,2)), false, 68).
holds(1, in_tower((block,1),(block,3)), false, 68).
holds(1, in_tower((block,1),(block,4)), false, 68).
holds(1, in_tower((block,1),(block,5)), false, 68).
holds(1, in_tower((block,1),(block,6)), false, 68).
holds(1, in_tower((block,1),(block,7)), false, 68).
holds(1, in_tower((block,1),(block,8)), false, 68).
holds(1, in_tower((block,1),(block,9)), false, 68).
holds(1, in_tower((block,2),(block,1)), false, 68).
holds(1, in_tower((block,2),(block,2)), false, 68).
holds(1, in_tower((block,2),(block,3)), false, 68).
holds(1, in_tower((block,2),(block,4)), false, 68).
holds(1, in_tower((block,2),(block,5)), false, 68).
holds(1, in_tower((block,2),(block,6)), false, 68).
holds(1, in_tower((block,2),(block,7)), false, 68).
holds(1, in_tower((block,2),(block,8)), false, 68).
holds(1, in_tower((block,2),(block,9)), false, 68).
holds(1, in_tower((block,3),(block,1)), true, 68).
holds(1, in_tower((block,3),(block,2)), true, 68).
holds(1, in_tower((block,3),(block,3)), true, 68).
holds(1, in_tower((block,3),(block,4)), false, 68).
holds(1, in_tower((block,3),(block,5)), false, 68).
holds(1, in_tower((block,3),(block,6)), false, 68).
holds(1, in_tower((block,3),(block,7)), false, 68).
holds(1, in_tower((block,3),(block,8)), false, 68).
holds(1, in_tower((block,3),(block,9)), false, 68).
holds(1, in_tower((block,4),(block,1)), false, 68).
holds(1, in_tower((block,4),(block,2)), false, 68).
holds(1, in_tower((block,4),(block,3)), false, 68).
holds(1, in_tower((block,4),(block,4)), false, 68).
holds(1, in_tower((block,4),(block,5)), false, 68).
holds(1, in_tower((block,4),(block,6)), false, 68).
holds(1, in_tower((block,4),(block,7)), false, 68).
holds(1, in_tower((block,4),(block,8)), false, 68).
holds(1, in_tower((block,4),(block,9)), false, 68).
holds(1, in_tower((block,5),(block,1)), false, 68).
holds(1, in_tower((block,5),(block,2)), false, 68).
holds(1, in_tower((block,5),(block,3)), false, 68).
holds(1, in_tower((block,5),(block,4)), false, 68).
holds(1, in_tower((block,5),(block,5)), false, 68).
holds(1, in_tower((block,5),(block,6)), false, 68).
holds(1, in_tower((block,5),(block,7)), false, 68).
holds(1, in_tower((block,5),(block,8)), false, 68).
holds(1, in_tower((block,5),(block,9)), false, 68).
holds(1, in_tower((block,6),(block,1)), false, 68).
holds(1, in_tower((block,6),(block,2)), false, 68).
holds(1, in_tower((block,6),(block,3)), false, 68).
holds(1, in_tower((block,6),(block,4)), false, 68).
holds(1, in_tower((block,6),(block,5)), true, 68).
holds(1, in_tower((block,6),(block,6)), true, 68).
holds(1, in_tower((block,6),(block,7)), false, 68).
holds(1, in_tower((block,6),(block,8)), false, 68).
holds(1, in_tower((block,6),(block,9)), false, 68).
holds(1, in_tower((block,7),(block,1)), false, 68).
holds(1, in_tower((block,7),(block,2)), false, 68).
holds(1, in_tower((block,7),(block,3)), false, 68).
holds(1, in_tower((block,7),(block,4)), false, 68).
holds(1, in_tower((block,7),(block,5)), false, 68).
holds(1, in_tower((block,7),(block,6)), false, 68).
holds(1, in_tower((block,7),(block,7)), true, 68).
holds(1, in_tower((block,7),(block,8)), false, 68).
holds(1, in_tower((block,7),(block,9)), false, 68).
holds(1, in_tower((block,8),(block,1)), false, 68).
holds(1, in_tower((block,8),(block,2)), false, 68).
holds(1, in_tower((block,8),(block,3)), false, 68).
holds(1, in_tower((block,8),(block,4)), false, 68).
holds(1, in_tower((block,8),(block,5)), false, 68).
holds(1, in_tower((block,8),(block,6)), false, 68).
holds(1, in_tower((block,8),(block,7)), false, 68).
holds(1, in_tower((block,8),(block,8)), false, 68).
holds(1, in_tower((block,8),(block,9)), false, 68).
holds(1, in_tower((block,9),(block,1)), false, 68).
holds(1, in_tower((block,9),(block,2)), false, 68).
holds(1, in_tower((block,9),(block,3)), false, 68).
holds(1, in_tower((block,9),(block,4)), false, 68).
holds(1, in_tower((block,9),(block,5)), false, 68).
holds(1, in_tower((block,9),(block,6)), false, 68).
holds(1, in_tower((block,9),(block,7)), false, 68).
holds(1, in_tower((block,9),(block,8)), false, 68).
holds(1, in_tower((block,9),(block,9)), true, 68).
holds(1, on((block,1)), (block,2), 68).
holds(1, on((block,2)), (block,3), 68).
holds(1, on((block,3)), puzzle_room_table_left, 68).
holds(1, on((block,4)), nothing, 68).
holds(1, on((block,5)), (block,6), 68).
holds(1, on((block,6)), puzzle_room_table_right, 68).
holds(1, on((block,7)), puzzle_room_table_middle, 68).
holds(1, on((block,8)), nothing, 68).
holds(1, on((block,9)), puzzle_room_table_middle, 68).
holds(1, tower_base((block,1),puzzle_room_table), false, 68).
holds(1, tower_base((block,2),puzzle_room_table), false, 68).
holds(1, tower_base((block,3),puzzle_room_table), true, 68).
holds(1, tower_base((block,4),puzzle_room_table), false, 68).
holds(1, tower_base((block,5),puzzle_room_table), false, 68).
holds(1, tower_base((block,6),puzzle_room_table), true, 68).
holds(1, tower_base((block,7),puzzle_room_table), true, 68).
holds(1, tower_base((block,8),puzzle_room_table), false, 68).
holds(1, tower_base((block,9),puzzle_room_table), true, 68).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,7),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 68).
holds(2, complete_tower(blue,puzzle_room_table), false, 68).
holds(2, complete_tower(red,puzzle_room_table), true, 68).
holds(2, complete_tower(yellow,puzzle_room_table), false, 68).
holds(2, configuration(manipulator_arm_1), extended, 68).
holds(2, configuration(manipulator_arm_2), retracted, 68).
holds(2, configuration(puzzle_room_door), open, 68).
holds(2, configuration(starting_room_door), closed, 68).
holds(2, configuration(store_room_door), open, 68).
holds(2, grasping(manipulator_arm_1), (block,4), 68).
holds(2, grasping(manipulator_arm_2), nothing, 68).
holds(2, in((block,1)), puzzle_room, 68).
holds(2, in((block,2)), puzzle_room, 68).
holds(2, in((block,3)), puzzle_room, 68).
holds(2, in((block,4)), store_room, 68).
holds(2, in((block,5)), puzzle_room, 68).
holds(2, in((block,6)), puzzle_room, 68).
holds(2, in((block,7)), puzzle_room, 68).
holds(2, in((block,8)), store_room, 68).
holds(2, in((block,9)), puzzle_room, 68).
holds(2, in(manipulator_arm_1), store_room, 68).
holds(2, in(manipulator_arm_2), store_room, 68).
holds(2, in(puzzle_room_table), puzzle_room, 68).
holds(2, in(talos), store_room, 68).
holds(2, in_tower((block,1),(block,1)), false, 68).
holds(2, in_tower((block,1),(block,2)), false, 68).
holds(2, in_tower((block,1),(block,3)), false, 68).
holds(2, in_tower((block,1),(block,4)), false, 68).
holds(2, in_tower((block,1),(block,5)), false, 68).
holds(2, in_tower((block,1),(block,6)), false, 68).
holds(2, in_tower((block,1),(block,7)), false, 68).
holds(2, in_tower((block,1),(block,8)), false, 68).
holds(2, in_tower((block,1),(block,9)), false, 68).
holds(2, in_tower((block,2),(block,1)), false, 68).
holds(2, in_tower((block,2),(block,2)), false, 68).
holds(2, in_tower((block,2),(block,3)), false, 68).
holds(2, in_tower((block,2),(block,4)), false, 68).
holds(2, in_tower((block,2),(block,5)), false, 68).
holds(2, in_tower((block,2),(block,6)), false, 68).
holds(2, in_tower((block,2),(block,7)), false, 68).
holds(2, in_tower((block,2),(block,8)), false, 68).
holds(2, in_tower((block,2),(block,9)), false, 68).
holds(2, in_tower((block,3),(block,1)), true, 68).
holds(2, in_tower((block,3),(block,2)), true, 68).
holds(2, in_tower((block,3),(block,3)), true, 68).
holds(2, in_tower((block,3),(block,4)), false, 68).
holds(2, in_tower((block,3),(block,5)), false, 68).
holds(2, in_tower((block,3),(block,6)), false, 68).
holds(2, in_tower((block,3),(block,7)), false, 68).
holds(2, in_tower((block,3),(block,8)), false, 68).
holds(2, in_tower((block,3),(block,9)), false, 68).
holds(2, in_tower((block,4),(block,1)), false, 68).
holds(2, in_tower((block,4),(block,2)), false, 68).
holds(2, in_tower((block,4),(block,3)), false, 68).
holds(2, in_tower((block,4),(block,4)), false, 68).
holds(2, in_tower((block,4),(block,5)), false, 68).
holds(2, in_tower((block,4),(block,6)), false, 68).
holds(2, in_tower((block,4),(block,7)), false, 68).
holds(2, in_tower((block,4),(block,8)), false, 68).
holds(2, in_tower((block,4),(block,9)), false, 68).
holds(2, in_tower((block,5),(block,1)), false, 68).
holds(2, in_tower((block,5),(block,2)), false, 68).
holds(2, in_tower((block,5),(block,3)), false, 68).
holds(2, in_tower((block,5),(block,4)), false, 68).
holds(2, in_tower((block,5),(block,5)), false, 68).
holds(2, in_tower((block,5),(block,6)), false, 68).
holds(2, in_tower((block,5),(block,7)), false, 68).
holds(2, in_tower((block,5),(block,8)), false, 68).
holds(2, in_tower((block,5),(block,9)), false, 68).
holds(2, in_tower((block,6),(block,1)), false, 68).
holds(2, in_tower((block,6),(block,2)), false, 68).
holds(2, in_tower((block,6),(block,3)), false, 68).
holds(2, in_tower((block,6),(block,4)), false, 68).
holds(2, in_tower((block,6),(block,5)), true, 68).
holds(2, in_tower((block,6),(block,6)), true, 68).
holds(2, in_tower((block,6),(block,7)), false, 68).
holds(2, in_tower((block,6),(block,8)), false, 68).
holds(2, in_tower((block,6),(block,9)), false, 68).
holds(2, in_tower((block,7),(block,1)), false, 68).
holds(2, in_tower((block,7),(block,2)), false, 68).
holds(2, in_tower((block,7),(block,3)), false, 68).
holds(2, in_tower((block,7),(block,4)), false, 68).
holds(2, in_tower((block,7),(block,5)), false, 68).
holds(2, in_tower((block,7),(block,6)), false, 68).
holds(2, in_tower((block,7),(block,7)), true, 68).
holds(2, in_tower((block,7),(block,8)), false, 68).
holds(2, in_tower((block,7),(block,9)), false, 68).
holds(2, in_tower((block,8),(block,1)), false, 68).
holds(2, in_tower((block,8),(block,2)), false, 68).
holds(2, in_tower((block,8),(block,3)), false, 68).
holds(2, in_tower((block,8),(block,4)), false, 68).
holds(2, in_tower((block,8),(block,5)), false, 68).
holds(2, in_tower((block,8),(block,6)), false, 68).
holds(2, in_tower((block,8),(block,7)), false, 68).
holds(2, in_tower((block,8),(block,8)), false, 68).
holds(2, in_tower((block,8),(block,9)), false, 68).
holds(2, in_tower((block,9),(block,1)), false, 68).
holds(2, in_tower((block,9),(block,2)), false, 68).
holds(2, in_tower((block,9),(block,3)), false, 68).
holds(2, in_tower((block,9),(block,4)), false, 68).
holds(2, in_tower((block,9),(block,5)), false, 68).
holds(2, in_tower((block,9),(block,6)), false, 68).
holds(2, in_tower((block,9),(block,7)), false, 68).
holds(2, in_tower((block,9),(block,8)), false, 68).
holds(2, in_tower((block,9),(block,9)), true, 68).
holds(2, on((block,1)), (block,2), 68).
holds(2, on((block,2)), (block,3), 68).
holds(2, on((block,3)), puzzle_room_table, 68).
holds(2, on((block,4)), nothing, 68).
holds(2, on((block,5)), (block,6), 68).
holds(2, on((block,6)), puzzle_room_table, 68).
holds(2, on((block,7)), puzzle_room_table, 68).
holds(2, on((block,8)), nothing, 68).
holds(2, on((block,9)), puzzle_room_table, 68).
holds(2, tower_base((block,1),puzzle_room_table), false, 68).
holds(2, tower_base((block,2),puzzle_room_table), false, 68).
holds(2, tower_base((block,3),puzzle_room_table), true, 68).
holds(2, tower_base((block,4),puzzle_room_table), false, 68).
holds(2, tower_base((block,5),puzzle_room_table), false, 68).
holds(2, tower_base((block,6),puzzle_room_table), true, 68).
holds(2, tower_base((block,7),puzzle_room_table), true, 68).
holds(2, tower_base((block,8),puzzle_room_table), false, 68).
holds(2, tower_base((block,9),puzzle_room_table), true, 68).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,7),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 68).

[18-04-2022_15-47-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[18-04-2022_15-47-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_15-47-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[18-04-2022_15-47-04] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=82']

[18-04-2022_15-47-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 43})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,8))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,8)', 'I': 44})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 45})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 46})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 47})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 48})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 49})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,8),(block,9))', 'F': 'on((block,8))', 'V': '(block,9)', 'I': 50})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,8))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 51})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,7))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,7)', 'I': 52})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 53})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 54})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,4))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 55})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,7),(block,8))', 'F': 'on((block,7))', 'V': '(block,8)', 'I': 56})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,7))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 57})

[18-04-2022_15-47-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-04-2022_15-47-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 15 rules into program part base:

sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 43).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,8)), grasping(manipulator_arm_2), (block,8), 44).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 45).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 46).
sub_goal(2, talos, move(hallway), in(talos), hallway, 47).
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 48).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 49).
sub_goal(2, talos, put(manipulator_arm_2,(block,8),(block,9)), on((block,8)), (block,9), 50).
sub_goal(2, talos, release(manipulator_arm_2,(block,8)), grasping(manipulator_arm_2), nothing, 51).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,7)), grasping(manipulator_arm_2), (block,7), 52).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 53).
sub_goal(2, talos, put(manipulator_arm_1,(block,4),(block,5)), on((block,4)), (block,5), 54).
sub_goal(2, talos, release(manipulator_arm_1,(block,4)), grasping(manipulator_arm_1), nothing, 55).
sub_goal(2, talos, put(manipulator_arm_2,(block,7),(block,8)), on((block,7)), (block,8), 56).
sub_goal(2, talos, release(manipulator_arm_2,(block,7)), grasping(manipulator_arm_2), nothing, 57).

[18-04-2022_15-47-04] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-04-2022_15-47-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[18-04-2022_15-47-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=82']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001D60AA83550>]
	incrementor = SolveIncrementor(step_start=68, step_increase=1, step_increase_initial=15, step_end_min=83, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1753.8367179000024, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 68), range_=None), IncPart(name='plan_module', args=('#inc', 68, 'false', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 68, 'false', 'false', 'false', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 68, 43, 57, 'sequential', 'false'), range_=None)]

[18-04-2022_15-47-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_15-47-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-04-2022_15-47-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-04-2022_15-47-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1284 rules

[18-04-2022_15-47-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0068278999997346546s

[18-04-2022_15-47-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[18-04-2022_15-47-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[18-04-2022_15-47-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.041347s.

[18-04-2022_15-47-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-47-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007399s with result Satisfiable.

[18-04-2022_15-47-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[18-04-2022_15-47-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001D614A198B0>

[18-04-2022_15-47-04] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 68)
	('last_sgoals', 57)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001D5FEA66D00>)
	('first_sgoals', 43)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001D614A198B0>)

[18-04-2022_15-47-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 68). %* None *%
#program plan_module(#inc, 68, false, true). %* None *%
#program optimisation_module(#inc, 68, false, false, false, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 68, 43, 57, sequential, false). %* None *%

[18-04-2022_15-47-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     67 : Current =     82
Incrementor step ends | Minimum  =     83 : Maximum =    300

[18-04-2022_15-47-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(82)]), ('state_module', [Number(68), Number(68)]), ('plan_module', [Number(68), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(68), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(68)]), ('action_preconditions', [Number(68)]), ('variable_relations', [Number(68)]), ('abstraction_mappings', [Number(68)]), ('conformance_module', [Number(68), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(69), Number(68)]), ('plan_module', [Number(69), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(69), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(69)]), ('action_preconditions', [Number(69)]), ('variable_relations', [Number(69)]), ('abstraction_mappings', [Number(69)]), ('conformance_module', [Number(69), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(70), Number(68)]), ('plan_module', [Number(70), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(70), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(70)]), ('action_preconditions', [Number(70)]), ('variable_relations', [Number(70)]), ('abstraction_mappings', [Number(70)]), ('conformance_module', [Number(70), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(71), Number(68)]), ('plan_module', [Number(71), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(71), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(71)]), ('action_preconditions', [Number(71)]), ('variable_relations', [Number(71)]), ('abstraction_mappings', [Number(71)]), ('conformance_module', [Number(71), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(72), Number(68)]), ('plan_module', [Number(72), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(72), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(72)]), ('action_preconditions', [Number(72)]), ('variable_relations', [Number(72)]), ('abstraction_mappings', [Number(72)]), ('conformance_module', [Number(72), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(73), Number(68)]), ('plan_module', [Number(73), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(73), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(73)]), ('action_preconditions', [Number(73)]), ('variable_relations', [Number(73)]), ('abstraction_mappings', [Number(73)]), ('conformance_module', [Number(73), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(74), Number(68)]), ('plan_module', [Number(74), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(74), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(74)]), ('action_preconditions', [Number(74)]), ('variable_relations', [Number(74)]), ('abstraction_mappings', [Number(74)]), ('conformance_module', [Number(74), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(75), Number(68)]), ('plan_module', [Number(75), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(75), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(75)]), ('action_preconditions', [Number(75)]), ('variable_relations', [Number(75)]), ('abstraction_mappings', [Number(75)]), ('conformance_module', [Number(75), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(76), Number(68)]), ('plan_module', [Number(76), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(76), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(76)]), ('action_preconditions', [Number(76)]), ('variable_relations', [Number(76)]), ('abstraction_mappings', [Number(76)]), ('conformance_module', [Number(76), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(77), Number(68)]), ('plan_module', [Number(77), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(77), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(77)]), ('action_preconditions', [Number(77)]), ('variable_relations', [Number(77)]), ('abstraction_mappings', [Number(77)]), ('conformance_module', [Number(77), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(78), Number(68)]), ('plan_module', [Number(78), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(78), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(78)]), ('action_preconditions', [Number(78)]), ('variable_relations', [Number(78)]), ('abstraction_mappings', [Number(78)]), ('conformance_module', [Number(78), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(79), Number(68)]), ('plan_module', [Number(79), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(79), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(79)]), ('action_preconditions', [Number(79)]), ('variable_relations', [Number(79)]), ('abstraction_mappings', [Number(79)]), ('conformance_module', [Number(79), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(80), Number(68)]), ('plan_module', [Number(80), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(80), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(80)]), ('action_preconditions', [Number(80)]), ('variable_relations', [Number(80)]), ('abstraction_mappings', [Number(80)]), ('conformance_module', [Number(80), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(81), Number(68)]), ('plan_module', [Number(81), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(81), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(81)]), ('action_preconditions', [Number(81)]), ('variable_relations', [Number(81)]), ('abstraction_mappings', [Number(81)]), ('conformance_module', [Number(81), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(82), Number(68)]), ('plan_module', [Number(82), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(82), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(82)]), ('action_preconditions', [Number(82)]), ('variable_relations', [Number(82)]), ('abstraction_mappings', [Number(82)]), ('conformance_module', [Number(82), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-47-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 2.133256s.

[18-04-2022_15-47-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-47-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.858250s with result Unsatisfiable.

[18-04-2022_15-47-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.991506500000469, Incremental time limit = None
Running cumulative time = 2.991506500000469, Cumulative time limit = 1753.8367179000024
Used memory = (RSS = 2257.761719Mb, VMS = 2272.976562Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-47-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     82 : Current =     83
Incrementor step ends | Minimum  =     83 : Maximum =    300

[18-04-2022_15-47-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(83)]), ('state_module', [Number(83), Number(68)]), ('plan_module', [Number(83), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(83), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(83)]), ('action_preconditions', [Number(83)]), ('variable_relations', [Number(83)]), ('abstraction_mappings', [Number(83)]), ('conformance_module', [Number(83), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-47-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.244722s.

[18-04-2022_15-47-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-47-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.050903s with result Unsatisfiable.

[18-04-2022_15-47-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.29562499999974534, Incremental time limit = None
Running cumulative time = 3.287131500000214, Cumulative time limit = 1753.8367179000024
Used memory = (RSS = 2264.765625Mb, VMS = 2287.421875Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-47-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     83 : Current =     84
Incrementor step ends | Minimum  =     83 : Maximum =    300

[18-04-2022_15-47-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(84)]), ('state_module', [Number(84), Number(68)]), ('plan_module', [Number(84), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(84), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(84)]), ('action_preconditions', [Number(84)]), ('variable_relations', [Number(84)]), ('abstraction_mappings', [Number(84)]), ('conformance_module', [Number(84), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-47-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.247204s.

[18-04-2022_15-47-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-47-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.058088s with result Unsatisfiable.

[18-04-2022_15-47-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3052920999998605, Incremental time limit = None
Running cumulative time = 3.5924236000000747, Cumulative time limit = 1753.8367179000024
Used memory = (RSS = 2267.031250Mb, VMS = 2287.886719Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-47-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     84 : Current =     85
Incrementor step ends | Minimum  =     83 : Maximum =    300

[18-04-2022_15-47-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(85)]), ('state_module', [Number(85), Number(68)]), ('plan_module', [Number(85), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(85), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(85)]), ('action_preconditions', [Number(85)]), ('variable_relations', [Number(85)]), ('abstraction_mappings', [Number(85)]), ('conformance_module', [Number(85), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-47-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.251058s.

[18-04-2022_15-47-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-47-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.068595s with result Unsatisfiable.

[18-04-2022_15-47-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.31965299999956187, Incremental time limit = None
Running cumulative time = 3.9120765999996365, Cumulative time limit = 1753.8367179000024
Used memory = (RSS = 2269.175781Mb, VMS = 2289.066406Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-47-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     85 : Current =     86
Incrementor step ends | Minimum  =     83 : Maximum =    300

[18-04-2022_15-47-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(86)]), ('state_module', [Number(86), Number(68)]), ('plan_module', [Number(86), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(86), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(86)]), ('action_preconditions', [Number(86)]), ('variable_relations', [Number(86)]), ('abstraction_mappings', [Number(86)]), ('conformance_module', [Number(86), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-47-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.256851s.

[18-04-2022_15-47-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-47-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.100522s with result Unsatisfiable.

[18-04-2022_15-47-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.35737289999951827, Incremental time limit = None
Running cumulative time = 4.269449499999155, Cumulative time limit = 1753.8367179000024
Used memory = (RSS = 2271.316406Mb, VMS = 2290.062500Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-47-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     86 : Current =     87
Incrementor step ends | Minimum  =     83 : Maximum =    300

[18-04-2022_15-47-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(87)]), ('state_module', [Number(87), Number(68)]), ('plan_module', [Number(87), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(87), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(87)]), ('action_preconditions', [Number(87)]), ('variable_relations', [Number(87)]), ('abstraction_mappings', [Number(87)]), ('conformance_module', [Number(87), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-47-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.260414s.

[18-04-2022_15-47-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-47-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.082235s with result Unsatisfiable.

[18-04-2022_15-47-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.34264870000015435, Incremental time limit = None
Running cumulative time = 4.612098199999309, Cumulative time limit = 1753.8367179000024
Used memory = (RSS = 2273.582031Mb, VMS = 2290.527344Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-47-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     87 : Current =     88
Incrementor step ends | Minimum  =     83 : Maximum =    300

[18-04-2022_15-47-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(88)]), ('state_module', [Number(88), Number(68)]), ('plan_module', [Number(88), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(88), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(88)]), ('action_preconditions', [Number(88)]), ('variable_relations', [Number(88)]), ('abstraction_mappings', [Number(88)]), ('conformance_module', [Number(88), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-47-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.262485s.

[18-04-2022_15-47-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-47-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.092507s with result Unsatisfiable.

[18-04-2022_15-47-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3549927000003663, Incremental time limit = None
Running cumulative time = 4.9670908999996755, Cumulative time limit = 1753.8367179000024
Used memory = (RSS = 2275.894531Mb, VMS = 2290.992188Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-47-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     88 : Current =     89
Incrementor step ends | Minimum  =     83 : Maximum =    300

[18-04-2022_15-47-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(89)]), ('state_module', [Number(89), Number(68)]), ('plan_module', [Number(89), Number(68), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(89), Number(68), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(89)]), ('action_preconditions', [Number(89)]), ('variable_relations', [Number(89)]), ('abstraction_mappings', [Number(89)]), ('conformance_module', [Number(89), Number(68), Number(43), Number(57), Function('sequential', [], True), Function('false', [], True)])]

[18-04-2022_15-47-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.266671s.

[18-04-2022_15-47-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-04-2022_15-47-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.147267s with result Satisfiable.

[18-04-2022_15-47-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4139378999998371, Incremental time limit = None
Running cumulative time = 5.381028799999513, Cumulative time limit = 1753.8367179000024
Used memory = (RSS = 2286.003906Mb, VMS = 2318.328125Mb), Total system virtual memory = 16324.0078125Mb

[18-04-2022_15-47-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.922661s, Solving = 1.458368s, Total = 5.381029s, Memory = (RSS = 2286.003906Mb, VMS = 2318.328125Mb), Step range = [68-89]), Calls = 8
Final Model :: Total atoms = 28739, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[18-04-2022_15-47-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 2.133256s, Solving = 0.858250s, Total = 2.991507s, Memory = (RSS = 2257.761719Mb, VMS = 2272.976562Mb), Step range = [68-82]
2 : Statistics :: Grounding = 0.244722s, Solving = 0.050903s, Total = 0.295625s, Memory = (RSS = 2264.765625Mb, VMS = 2287.421875Mb), Step range = [83-83]
3 : Statistics :: Grounding = 0.247204s, Solving = 0.058088s, Total = 0.305292s, Memory = (RSS = 2267.031250Mb, VMS = 2287.886719Mb), Step range = [84-84]
4 : Statistics :: Grounding = 0.251058s, Solving = 0.068595s, Total = 0.319653s, Memory = (RSS = 2269.175781Mb, VMS = 2289.066406Mb), Step range = [85-85]
5 : Statistics :: Grounding = 0.256851s, Solving = 0.100522s, Total = 0.357373s, Memory = (RSS = 2271.316406Mb, VMS = 2290.062500Mb), Step range = [86-86]
6 : Statistics :: Grounding = 0.260414s, Solving = 0.082235s, Total = 0.342649s, Memory = (RSS = 2273.582031Mb, VMS = 2290.527344Mb), Step range = [87-87]
7 : Statistics :: Grounding = 0.262485s, Solving = 0.092507s, Total = 0.354993s, Memory = (RSS = 2275.894531Mb, VMS = 2290.992188Mb), Step range = [88-88]
8 : Statistics :: Grounding = 0.266671s, Solving = 0.147267s, Total = 0.413938s, Memory = (RSS = 2286.003906Mb, VMS = 2318.328125Mb), Step range = [89-89]

[18-04-2022_15-47-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 5.381029s due to: Stop condition reached.

[18-04-2022_15-47-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[18-04-2022_15-47-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[18-04-2022_15-47-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-04-2022_15-47-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-04-2022_15-47-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[18-04-2022_15-47-10] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 13, 27: 14, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 22, 42: 23, 43: 24, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29, 49: 30, 50: 30, 51: 30, 52: 31, 53: 31, 54: 32, 55: 33, 56: 34, 57: 35, 58: 35, 59: 36, 60: 37, 61: 38, 62: 39, 63: 40, 64: 40, 65: 41, 66: 41, 67: 42, 68: 42}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 26, 14: 28, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 46, 28: 47, 29: 48, 30: 51, 31: 53, 32: 54, 33: 55, 34: 56, 35: 58, 36: 59, 37: 60, 38: 61, 39: 62, 40: 64, 41: 66, 42: 68}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 8, 25: 9, 26: 10, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 16, 33: 16, 34: 17, 35: 18, 36: 19, 37: 20, 38: 21, 39: 21, 40: 21, 41: 22, 42: 22, 43: 23, 44: 23, 45: 24, 46: 24, 47: 24, 48: 24, 49: 25, 50: 25, 51: 26, 52: 27, 53: 28, 54: 28, 55: 29, 56: 30, 57: 31}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 23, 8: 24, 9: 25, 10: 26, 11: 27, 12: 28, 13: 29, 14: 30, 15: 31, 16: 33, 17: 34, 18: 35, 19: 36, 20: 37, 21: 40, 22: 42, 23: 44, 24: 48, 25: 50, 26: 51, 27: 52, 28: 54, 29: 55, 30: 56, 31: 57}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 6, 9: 7, 10: 7, 11: 7, 12: 7, 13: 8, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 12, 23: 12, 24: 13, 25: 14, 26: 15, 27: 15, 28: 15, 29: 15, 30: 16, 31: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 6, 6: 8, 7: 12, 8: 13, 9: 17, 10: 20, 11: 21, 12: 23, 13: 24, 14: 25, 15: 29, 16: 30, 17: 31}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_15-47-11] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 13, 27: 14, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 22, 42: 23, 43: 24, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29, 49: 30, 50: 30, 51: 30, 52: 31, 53: 31, 54: 32, 55: 33, 56: 34, 57: 35, 58: 35, 59: 36, 60: 37, 61: 38, 62: 39, 63: 40, 64: 40, 65: 41, 66: 41, 67: 42, 68: 42, 69: 43, 70: 44, 71: 44, 72: 45, 73: 45, 74: 46, 75: 47, 76: 48, 77: 48, 78: 48, 79: 49, 80: 49, 81: 50, 82: 51, 83: 52, 84: 52, 85: 53, 86: 54, 87: 55, 88: 56, 89: 57}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 26, 14: 28, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 46, 28: 47, 29: 48, 30: 51, 31: 53, 32: 54, 33: 55, 34: 56, 35: 58, 36: 59, 37: 60, 38: 61, 39: 62, 40: 64, 41: 66, 42: 68, 43: 69, 44: 71, 45: 73, 46: 74, 47: 75, 48: 78, 49: 80, 50: 81, 51: 82, 52: 84, 53: 85, 54: 86, 55: 87, 56: 88, 57: 89}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 8, 25: 9, 26: 10, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 16, 33: 16, 34: 17, 35: 18, 36: 19, 37: 20, 38: 21, 39: 21, 40: 21, 41: 22, 42: 22, 43: 23, 44: 23, 45: 24, 46: 24, 47: 24, 48: 24, 49: 25, 50: 25, 51: 26, 52: 27, 53: 28, 54: 28, 55: 29, 56: 30, 57: 31}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 23, 8: 24, 9: 25, 10: 26, 11: 27, 12: 28, 13: 29, 14: 30, 15: 31, 16: 33, 17: 34, 18: 35, 19: 36, 20: 37, 21: 40, 22: 42, 23: 44, 24: 48, 25: 50, 26: 51, 27: 52, 28: 54, 29: 55, 30: 56, 31: 57}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 6, 9: 7, 10: 7, 11: 7, 12: 7, 13: 8, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 12, 23: 12, 24: 13, 25: 14, 26: 15, 27: 15, 28: 15, 29: 15, 30: 16, 31: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 6, 6: 8, 7: 12, 8: 13, 9: 17, 10: 20, 11: 21, 12: 23, 13: 24, 14: 25, 15: 29, 16: 30, 17: 31}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[18-04-2022_15-47-11] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 57, Last requested goal index = 57, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[18-04-2022_15-47-11] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.922661s, Solving = 1.458368s, Total = 5.381029s, Memory = (RSS = 2286.003906Mb, VMS = 2318.328125Mb), Step range = [68-89]), Calls = 8
Model :: Total atoms = 28739, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[18-04-2022_15-47-11] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 21 :: Actions = 21                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 25:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 26:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 27:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 28:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 29:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 30:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : move((store_room,1))
Step 31:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 37:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 38:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 39:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 40:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 41:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 42:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 43:
    Current Sub-goals:
        [Index = 24] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 24] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,5))
Step 44:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,9)))
Step 45:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
    Achieved Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,9))
Step 46:
    Current Sub-goals:
        [Index = 27] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 27] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 47:
    Current Sub-goals:
        [Index = 28] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 28] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,9),puzzle_room_table_middle)
Step 48:
    Current Sub-goals:
        [Index = 29] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 29] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 49:
    Current Sub-goals:
        [Index = 30] talos : release(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,1)))
Step 50:
    Current Sub-goals:
        [Index = 30] talos : release(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_1,(block,1))
Step 51:
    Current Sub-goals:
        [Index = 30] talos : release(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 30] talos : release(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,9))
Step 52:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,2)))
Step 53:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,2))
Step 54:
    Current Sub-goals:
        [Index = 32] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 32] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_2,(block,2),(block,3))
Step 55:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Planned actions:
        talos : release(manipulator_end_2,(block,2))
Step 56:
    Current Sub-goals:
        [Index = 34] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 34] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_end_1,(block,1),(block,2))
Step 57:
    Current Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_1,(block,1))
Step 58:
    Current Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 59:
    Current Sub-goals:
        [Index = 36] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 36] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 60:
    Current Sub-goals:
        [Index = 37] talos : release(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 37] talos : release(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : move((puzzle_room,0))
Step 61:
    Current Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : move((hallway,2))
Step 62:
    Current Sub-goals:
        [Index = 39] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 39] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 63:
    Current Sub-goals:
        [Index = 40] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 64:
    Current Sub-goals:
        [Index = 40] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 40] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 65:
    Current Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 66:
    Current Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 67:
    Current Sub-goals:
        [Index = 42] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
Step 68:
    Current Sub-goals:
        [Index = 42] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
        [Index = 42] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
Step 69:
    Current Sub-goals:
        [Index = 43] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 43] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 70:
    Current Sub-goals:
        [Index = 44] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,8)))
Step 71:
    Current Sub-goals:
        [Index = 44] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
        [Index = 44] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,8))
Step 72:
    Current Sub-goals:
        [Index = 45] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 73:
    Current Sub-goals:
        [Index = 45] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 45] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 74:
    Current Sub-goals:
        [Index = 46] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 46] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : move((store_room,1))
Step 75:
    Current Sub-goals:
        [Index = 47] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 47] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 76:
    Current Sub-goals:
        [Index = 48] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 77:
    Current Sub-goals:
        [Index = 48] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 78:
    Current Sub-goals:
        [Index = 48] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 48] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 79:
    Current Sub-goals:
        [Index = 49] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 80:
    Current Sub-goals:
        [Index = 49] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 49] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 81:
    Current Sub-goals:
        [Index = 50] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Achieved Sub-goals:
        [Index = 50] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Planned actions:
        talos : put(manipulator_end_2,(block,8),(block,9))
Step 82:
    Current Sub-goals:
        [Index = 51] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 51] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,8))
Step 83:
    Current Sub-goals:
        [Index = 52] talos : grasp(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = (block,7)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,7)))
Step 84:
    Current Sub-goals:
        [Index = 52] talos : grasp(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = (block,7)
    Achieved Sub-goals:
        [Index = 52] talos : grasp(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = (block,7)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,7))
Step 85:
    Current Sub-goals:
        [Index = 53] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 53] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 86:
    Current Sub-goals:
        [Index = 54] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 54] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_1,(block,4),(block,5))
Step 87:
    Current Sub-goals:
        [Index = 55] talos : release(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 55] talos : release(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,4))
Step 88:
    Current Sub-goals:
        [Index = 56] talos : put(manipulator_arm_2,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Achieved Sub-goals:
        [Index = 56] talos : put(manipulator_arm_2,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Planned actions:
        talos : put(manipulator_end_2,(block,7),(block,8))
Step 89:
    Current Sub-goals:
        [Index = 57] talos : release(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 57] talos : release(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,7))

[18-04-2022_15-47-11] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[18-04-2022_15-47-11] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[18-04-2022_15-47-11] DEBUG :: ASH Planner Main #1 >> Monolevel problem 4 at level 1 solved.

[18-04-2022_15-47-11] DEBUG :: ASH Planner Main #1 >> Online planning increment 4 finished.

[18-04-2022_15-47-11] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 89, chosen step range to extract = range(0, 90)

[18-04-2022_15-47-11] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 89, Total actions = 89, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-47-11] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 57, chosen step range to extract = range(0, 58)

[18-04-2022_15-47-11] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 89, Total actions = 89, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-47-11] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 31, chosen step range to extract = range(0, 32)

[18-04-2022_15-47-11] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 89, Total actions = 89, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-47-11] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[18-04-2022_15-47-11] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 89, Total actions = 89, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-47-11] DEBUG :: ASH Planner Main #1 >> Hierarchical plan generated successfully :: Ground Plan Quality >> Length = 89, Actions = 89

[18-04-2022_15-47-11] DEBUG :: ASH Planner Main #1 >> Hierarchical planning summary: (Execution latency = 27.429166599998098, Average ground wait time = 12.963646374999485, Absolution time = 51.54431089999707)

     ========================================================================================================================================================================================================     
     |        Lvl = 4 (classic), LE =  17, AC =  17, CF = 1.0, GT =   1.39s, ST =   0.96s, OT = 0.00s, TT =   2.35s, EF = (LE = 1.0, AC = 1.0), ED = (LE = 0.0, AC = 0.0), EB = (LE = 0.0, AC = 0.0)        |     
     |        Lvl = 3 (com-ref), LE =  31, AC =  31, CF = 1.0, GT =   3.41s, ST =   2.31s, OT = 0.00s, TT =   5.71s, EF = (LE = 1.8, AC = 1.8), ED = (LE = 1.2, AC = 0.5), EB = (LE = 0.6, AC = 0.5)        |     
     |        Lvl = 2 (com-ref), LE =  57, AC =  57, CF = 1.0, GT =   7.09s, ST =   3.41s, OT = 0.00s, TT =  10.50s, EF = (LE = 1.8, AC = 1.8), ED = (LE = 1.7, AC = 1.7), EB = (LE = 0.9, AC = 0.9)        |     
     |        Lvl = 1 (com-ref), LE =  89, AC =  89, CF = 1.0, GT =  18.33s, ST =  14.65s, OT = 0.00s, TT =  32.98s, EF = (LE = 1.6, AC = 1.6), ED = (LE = 0.9, AC = 0.9), EB = (LE = 0.6, AC = 0.6)        |     
     ========================================================================================================================================================================================================     

[18-04-2022_15-47-11] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 89, chosen step range to extract = range(0, 90)

[18-04-2022_15-47-11] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 89, Total actions = 89, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-47-11] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 57, chosen step range to extract = range(0, 58)

[18-04-2022_15-47-11] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 89, Total actions = 89, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-47-11] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 31, chosen step range to extract = range(0, 32)

[18-04-2022_15-47-11] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 89, Total actions = 89, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-47-11] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[18-04-2022_15-47-11] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 89, Total actions = 89, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[18-04-2022_15-47-11] DEBUG :: Experiment >> 

   ======================================================   
     Experimental run 50 : SUCCESSFUL : Time 62.397203s     
   ======================================================   

[18-04-2022_15-47-11] INFO :: Experiment >> 

  ################################################################################################  
        Completed 50 experimental runs : Real time 3265.975108s, Proccess time 6693.687500s         
  ################################################################################################  

[18-04-2022_15-47-11] DEBUG :: Experiment >> Refinement spread at run=0, level=3:
Root Mean Squared Errors: rmse_mchild=2.102066868847722, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.7320508075688772
Mean Absolute Errors: mae_mchild=1.7612456747404845, mae_div_indices=0.16666666666666666, mae_div_steps=1.0

[18-04-2022_15-47-11] DEBUG :: Experiment >> Refinement spread at run=0, level=2:
Root Mean Squared Errors: rmse_mchild=8.815432595843033, rmse_div_indices=1.6431676725154984, rmse_div_steps=3.847076812334269
Mean Absolute Errors: mae_mchild=8.099999999999998, mae_div_indices=1.2, mae_div_steps=2.8

[18-04-2022_15-47-11] DEBUG :: Experiment >> Refinement spread at run=0, level=1:
Root Mean Squared Errors: rmse_mchild=3.580791298935278, rmse_div_indices=3.847076812334269, rmse_div_steps=8.360621986431392
Mean Absolute Errors: mae_mchild=3.3035714285714275, mae_div_indices=2.8, mae_div_steps=6.2

[18-04-2022_15-47-11] DEBUG :: Experiment >> Refinement spread at run=1, level=3:
Root Mean Squared Errors: rmse_mchild=1.6967300119830535, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=1.4463667820069204, mae_div_indices=0.16666666666666666, mae_div_steps=0.6666666666666666

[18-04-2022_15-47-11] DEBUG :: Experiment >> Refinement spread at run=1, level=2:
Root Mean Squared Errors: rmse_mchild=7.23791457585729, rmse_div_indices=1.3038404810405297, rmse_div_steps=3.63318042491699
Mean Absolute Errors: mae_mchild=6.633333333333331, mae_div_indices=1.0, mae_div_steps=2.4

[18-04-2022_15-47-11] DEBUG :: Experiment >> Refinement spread at run=1, level=1:
Root Mean Squared Errors: rmse_mchild=3.817588190446522, rmse_div_indices=3.63318042491699, rmse_div_steps=8.62554346113913
Mean Absolute Errors: mae_mchild=3.517857142857145, mae_div_indices=2.4, mae_div_steps=6.0

[18-04-2022_15-47-11] DEBUG :: Experiment >> Refinement spread at run=2, level=3:
Root Mean Squared Errors: rmse_mchild=2.5484916496981724, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.7320508075688772
Mean Absolute Errors: mae_mchild=2.1764705882352935, mae_div_indices=0.16666666666666666, mae_div_steps=1.0

[18-04-2022_15-47-11] DEBUG :: Experiment >> Refinement spread at run=2, level=2:
Root Mean Squared Errors: rmse_mchild=8.907591435690412, rmse_div_indices=1.6431676725154984, rmse_div_steps=4.0743097574926725
Mean Absolute Errors: mae_mchild=8.199999999999998, mae_div_indices=1.2, mae_div_steps=3.0

[18-04-2022_15-47-11] DEBUG :: Experiment >> Refinement spread at run=2, level=1:
Root Mean Squared Errors: rmse_mchild=4.501700359025354, rmse_div_indices=4.0743097574926725, rmse_div_steps=9.391485505499118
Mean Absolute Errors: mae_mchild=3.964285714285716, mae_div_indices=3.0, mae_div_steps=7.0

[18-04-2022_15-47-11] DEBUG :: Experiment >> Refinement spread at run=3, level=3:
Root Mean Squared Errors: rmse_mchild=2.0155107881190375, rmse_div_indices=0.28867513459481287, rmse_div_steps=0.28867513459481287
Mean Absolute Errors: mae_mchild=1.771626297577855, mae_div_indices=0.16666666666666666, mae_div_steps=0.16666666666666666

[18-04-2022_15-47-11] DEBUG :: Experiment >> Refinement spread at run=3, level=2:
Root Mean Squared Errors: rmse_mchild=6.09856604492978, rmse_div_indices=0.4183300132670378, rmse_div_steps=4.107919181288746
Mean Absolute Errors: mae_mchild=5.161290322580646, mae_div_indices=0.3, mae_div_steps=2.5

[18-04-2022_15-47-11] DEBUG :: Experiment >> Refinement spread at run=3, level=1:
Root Mean Squared Errors: rmse_mchild=2.750136402224487, rmse_div_indices=4.107919181288746, rmse_div_steps=7.853343237118826
Mean Absolute Errors: mae_mchild=2.4035087719298214, mae_div_indices=2.5, mae_div_steps=5.1

[18-04-2022_15-47-11] DEBUG :: Experiment >> Refinement spread at run=4, level=3:
Root Mean Squared Errors: rmse_mchild=2.589571847418252, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.4433756729740645
Mean Absolute Errors: mae_mchild=2.339100346020762, mae_div_indices=0.16666666666666666, mae_div_steps=0.8333333333333334

[18-04-2022_15-47-11] DEBUG :: Experiment >> Refinement spread at run=4, level=2:
Root Mean Squared Errors: rmse_mchild=6.373849428331945, rmse_div_indices=1.4747881203752624, rmse_div_steps=3.830796261875591
Mean Absolute Errors: mae_mchild=5.181818181818181, mae_div_indices=1.1, mae_div_steps=2.2

[18-04-2022_15-47-12] DEBUG :: Experiment >> Refinement spread at run=4, level=1:
Root Mean Squared Errors: rmse_mchild=3.60491381584214, rmse_div_indices=3.830796261875591, rmse_div_steps=7.148426400264607
Mean Absolute Errors: mae_mchild=3.271186440677968, mae_div_indices=2.2, mae_div_steps=4.2

[18-04-2022_15-47-12] DEBUG :: Experiment >> Refinement spread at run=5, level=3:
Root Mean Squared Errors: rmse_mchild=1.8377058060956832, rmse_div_indices=0.28867513459481287, rmse_div_steps=0.5773502691896257
Mean Absolute Errors: mae_mchild=1.4186851211072666, mae_div_indices=0.16666666666666666, mae_div_steps=0.3333333333333333

[18-04-2022_15-47-12] DEBUG :: Experiment >> Refinement spread at run=5, level=2:
Root Mean Squared Errors: rmse_mchild=6.148772837518671, rmse_div_indices=0.5477225575051661, rmse_div_steps=3.687817782917155
Mean Absolute Errors: mae_mchild=5.066666666666665, mae_div_indices=0.4, mae_div_steps=2.0

[18-04-2022_15-47-12] DEBUG :: Experiment >> Refinement spread at run=5, level=1:
Root Mean Squared Errors: rmse_mchild=3.0667530858867504, rmse_div_indices=3.687817782917155, rmse_div_steps=7.622335600063802
Mean Absolute Errors: mae_mchild=2.5535714285714275, mae_div_indices=2.0, mae_div_steps=4.4

[18-04-2022_15-47-12] DEBUG :: Experiment >> Refinement spread at run=6, level=3:
Root Mean Squared Errors: rmse_mchild=2.974516912887183, rmse_div_indices=0.28867513459481287, rmse_div_steps=3.1754264805429417
Mean Absolute Errors: mae_mchild=2.2871972318339098, mae_div_indices=0.16666666666666666, mae_div_steps=1.8333333333333333

[18-04-2022_15-47-12] DEBUG :: Experiment >> Refinement spread at run=6, level=2:
Root Mean Squared Errors: rmse_mchild=9.443572491085186, rmse_div_indices=3.110466202999158, rmse_div_steps=3.029026246172192
Mean Absolute Errors: mae_mchild=8.612903225806456, mae_div_indices=2.3, mae_div_steps=2.1

[18-04-2022_15-47-12] DEBUG :: Experiment >> Refinement spread at run=6, level=1:
Root Mean Squared Errors: rmse_mchild=4.71191187001747, rmse_div_indices=3.029026246172192, rmse_div_steps=8.268917704270613
Mean Absolute Errors: mae_mchild=4.2105263157894735, mae_div_indices=2.1, mae_div_steps=6.1

[18-04-2022_15-47-12] DEBUG :: Experiment >> Refinement spread at run=7, level=3:
Root Mean Squared Errors: rmse_mchild=2.23684156962724, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=1.972318339100346, mae_div_indices=0.16666666666666666, mae_div_steps=0.6666666666666666

[18-04-2022_15-47-12] DEBUG :: Experiment >> Refinement spread at run=7, level=2:
Root Mean Squared Errors: rmse_mchild=6.6395771232059655, rmse_div_indices=1.0954451150103321, rmse_div_steps=4.135214625627067
Mean Absolute Errors: mae_mchild=5.90625, mae_div_indices=0.8, mae_div_steps=2.6

[18-04-2022_15-47-12] DEBUG :: Experiment >> Refinement spread at run=7, level=1:
Root Mean Squared Errors: rmse_mchild=2.975049835212448, rmse_div_indices=4.135214625627067, rmse_div_steps=8.104011352410607
Mean Absolute Errors: mae_mchild=2.5716409036860868, mae_div_indices=2.6, mae_div_steps=5.5

[18-04-2022_15-47-12] DEBUG :: Experiment >> Refinement spread at run=8, level=3:
Root Mean Squared Errors: rmse_mchild=2.691136290281853, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=2.384083044982699, mae_div_indices=0.16666666666666666, mae_div_steps=0.6666666666666666

[18-04-2022_15-47-12] DEBUG :: Experiment >> Refinement spread at run=8, level=2:
Root Mean Squared Errors: rmse_mchild=6.217257986845969, rmse_div_indices=1.0954451150103321, rmse_div_steps=3.391164991562634
Mean Absolute Errors: mae_mchild=5.06640625, mae_div_indices=0.8, mae_div_steps=1.8

[18-04-2022_15-47-12] DEBUG :: Experiment >> Refinement spread at run=8, level=1:
Root Mean Squared Errors: rmse_mchild=3.851046462781485, rmse_div_indices=3.391164991562634, rmse_div_steps=8.056053624449133
Mean Absolute Errors: mae_mchild=3.226516052318667, mae_div_indices=1.8, mae_div_steps=4.6

[18-04-2022_15-47-13] DEBUG :: Experiment >> Refinement spread at run=9, level=3:
Root Mean Squared Errors: rmse_mchild=1.7099343357351333, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.4433756729740645
Mean Absolute Errors: mae_mchild=1.394463667820069, mae_div_indices=0.16666666666666666, mae_div_steps=0.8333333333333334

[18-04-2022_15-47-13] DEBUG :: Experiment >> Refinement spread at run=9, level=2:
Root Mean Squared Errors: rmse_mchild=6.1515714598465285, rmse_div_indices=1.4747881203752624, rmse_div_steps=3.0454884665682123
Mean Absolute Errors: mae_mchild=5.225806451612904, mae_div_indices=1.1, mae_div_steps=1.6

[18-04-2022_15-47-13] DEBUG :: Experiment >> Refinement spread at run=9, level=1:
Root Mean Squared Errors: rmse_mchild=3.814838222493058, rmse_div_indices=3.0454884665682123, rmse_div_steps=7.237057413065064
Mean Absolute Errors: mae_mchild=3.263157894736842, mae_div_indices=1.6, mae_div_steps=4.1

[18-04-2022_15-47-13] DEBUG :: Experiment >> Refinement spread at run=10, level=3:
Root Mean Squared Errors: rmse_mchild=1.5112038327841328, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=1.2595155709342563, mae_div_indices=0.16666666666666666, mae_div_steps=0.6666666666666666

[18-04-2022_15-47-13] DEBUG :: Experiment >> Refinement spread at run=10, level=2:
Root Mean Squared Errors: rmse_mchild=6.578978869320297, rmse_div_indices=1.3038404810405297, rmse_div_steps=3.4351128074635335
Mean Absolute Errors: mae_mchild=5.799999999999998, mae_div_indices=1.0, mae_div_steps=2.2

[18-04-2022_15-47-13] DEBUG :: Experiment >> Refinement spread at run=10, level=1:
Root Mean Squared Errors: rmse_mchild=3.758324094593229, rmse_div_indices=3.4351128074635335, rmse_div_steps=8.19756061276768
Mean Absolute Errors: mae_mchild=3.232142857142859, mae_div_indices=2.2, mae_div_steps=5.6

[18-04-2022_15-47-13] DEBUG :: Experiment >> Refinement spread at run=11, level=3:
Root Mean Squared Errors: rmse_mchild=1.5066174676312587, rmse_div_indices=0.28867513459481287, rmse_div_steps=0.5773502691896257
Mean Absolute Errors: mae_mchild=1.2456747404844295, mae_div_indices=0.16666666666666666, mae_div_steps=0.3333333333333333

[18-04-2022_15-47-13] DEBUG :: Experiment >> Refinement spread at run=11, level=2:
Root Mean Squared Errors: rmse_mchild=6.632802882196491, rmse_div_indices=0.5477225575051661, rmse_div_steps=4.69041575982343
Mean Absolute Errors: mae_mchild=5.799999999999998, mae_div_indices=0.4, mae_div_steps=3.2

[18-04-2022_15-47-13] DEBUG :: Experiment >> Refinement spread at run=11, level=1:
Root Mean Squared Errors: rmse_mchild=3.109297282640681, rmse_div_indices=4.69041575982343, rmse_div_steps=8.927485648266257
Mean Absolute Errors: mae_mchild=2.705357142857142, mae_div_indices=3.2, mae_div_steps=6.2

[18-04-2022_15-47-13] DEBUG :: Experiment >> Refinement spread at run=12, level=3:
Root Mean Squared Errors: rmse_mchild=1.697749375254331, rmse_div_indices=0.28867513459481287, rmse_div_steps=0.8660254037844386
Mean Absolute Errors: mae_mchild=1.3806228373702423, mae_div_indices=0.16666666666666666, mae_div_steps=0.5

[18-04-2022_15-47-13] DEBUG :: Experiment >> Refinement spread at run=12, level=2:
Root Mean Squared Errors: rmse_mchild=6.778176688196208, rmse_div_indices=0.9354143466934853, rmse_div_steps=4.107919181288746
Mean Absolute Errors: mae_mchild=5.939393939393939, mae_div_indices=0.7, mae_div_steps=2.7

[18-04-2022_15-47-13] DEBUG :: Experiment >> Refinement spread at run=12, level=1:
Root Mean Squared Errors: rmse_mchild=3.610368419760018, rmse_div_indices=4.107919181288746, rmse_div_steps=9.273618495495704
Mean Absolute Errors: mae_mchild=3.0933639758690017, mae_div_indices=2.7, mae_div_steps=6.4

[18-04-2022_15-47-13] DEBUG :: Experiment >> Refinement spread at run=13, level=3:
Root Mean Squared Errors: rmse_mchild=1.8301587277769467, rmse_div_indices=0.28867513459481287, rmse_div_steps=0.8660254037844386
Mean Absolute Errors: mae_mchild=1.467128027681661, mae_div_indices=0.16666666666666666, mae_div_steps=0.5

[18-04-2022_15-47-13] DEBUG :: Experiment >> Refinement spread at run=13, level=2:
Root Mean Squared Errors: rmse_mchild=6.027512364729907, rmse_div_indices=0.9354143466934853, rmse_div_steps=3.546124645299429
Mean Absolute Errors: mae_mchild=5.161290322580646, mae_div_indices=0.7, mae_div_steps=2.0

[18-04-2022_15-47-13] DEBUG :: Experiment >> Refinement spread at run=13, level=1:
Root Mean Squared Errors: rmse_mchild=3.159940857587901, rmse_div_indices=3.546124645299429, rmse_div_steps=7.441438033068608
Mean Absolute Errors: mae_mchild=2.5964912280701724, mae_div_indices=2.0, mae_div_steps=4.1

[18-04-2022_15-47-14] DEBUG :: Experiment >> Refinement spread at run=14, level=3:
Root Mean Squared Errors: rmse_mchild=2.0232215908140985, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.4433756729740645
Mean Absolute Errors: mae_mchild=1.6505190311418683, mae_div_indices=0.16666666666666666, mae_div_steps=0.8333333333333334

[18-04-2022_15-47-14] DEBUG :: Experiment >> Refinement spread at run=14, level=2:
Root Mean Squared Errors: rmse_mchild=8.58537342441367, rmse_div_indices=1.4747881203752624, rmse_div_steps=3.63318042491699
Mean Absolute Errors: mae_mchild=7.870967741935486, mae_div_indices=1.1, mae_div_steps=2.8

[18-04-2022_15-47-14] DEBUG :: Experiment >> Refinement spread at run=14, level=1:
Root Mean Squared Errors: rmse_mchild=4.389381125701737, rmse_div_indices=3.63318042491699, rmse_div_steps=9.2951600308978
Mean Absolute Errors: mae_mchild=4.033333333333333, mae_div_indices=2.8, mae_div_steps=7.2

[18-04-2022_15-47-14] DEBUG :: Experiment >> Refinement spread at run=15, level=3:
Root Mean Squared Errors: rmse_mchild=2.5822122432527026, rmse_div_indices=0.28867513459481287, rmse_div_steps=0.8660254037844386
Mean Absolute Errors: mae_mchild=1.9826989619377162, mae_div_indices=0.16666666666666666, mae_div_steps=0.5

[18-04-2022_15-47-14] DEBUG :: Experiment >> Refinement spread at run=15, level=2:
Root Mean Squared Errors: rmse_mchild=5.015464301027588, rmse_div_indices=0.9354143466934853, rmse_div_steps=2.602883016964074
Mean Absolute Errors: mae_mchild=3.6685032139577602, mae_div_indices=0.7, mae_div_steps=1.6

[18-04-2022_15-47-14] DEBUG :: Experiment >> Refinement spread at run=15, level=1:
Root Mean Squared Errors: rmse_mchild=2.4704986901685073, rmse_div_indices=2.602883016964074, rmse_div_steps=5.449770637375485
Mean Absolute Errors: mae_mchild=2.059701492537315, mae_div_indices=1.6, mae_div_steps=3.2

[18-04-2022_15-47-14] DEBUG :: Experiment >> Refinement spread at run=16, level=3:
Root Mean Squared Errors: rmse_mchild=1.6333462796370377, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=1.4152249134948098, mae_div_indices=0.16666666666666666, mae_div_steps=0.6666666666666666

[18-04-2022_15-47-14] DEBUG :: Experiment >> Refinement spread at run=16, level=2:
Root Mean Squared Errors: rmse_mchild=6.660886383012955, rmse_div_indices=1.3038404810405297, rmse_div_steps=3.4351128074635335
Mean Absolute Errors: mae_mchild=5.933333333333332, mae_div_indices=1.0, mae_div_steps=2.2

[18-04-2022_15-47-14] DEBUG :: Experiment >> Refinement spread at run=16, level=1:
Root Mean Squared Errors: rmse_mchild=3.8620999891937835, rmse_div_indices=3.4351128074635335, rmse_div_steps=8.19756061276768
Mean Absolute Errors: mae_mchild=3.339285714285716, mae_div_indices=2.2, mae_div_steps=5.6

[18-04-2022_15-47-14] DEBUG :: Experiment >> Refinement spread at run=17, level=3:
Root Mean Squared Errors: rmse_mchild=2.921108004220033, rmse_div_indices=0.28867513459481287, rmse_div_steps=0.8660254037844386
Mean Absolute Errors: mae_mchild=2.318339100346021, mae_div_indices=0.16666666666666666, mae_div_steps=0.5

[18-04-2022_15-47-14] DEBUG :: Experiment >> Refinement spread at run=17, level=2:
Root Mean Squared Errors: rmse_mchild=5.728929267140875, rmse_div_indices=0.9354143466934853, rmse_div_steps=3.8177218337642147
Mean Absolute Errors: mae_mchild=4.480257116620755, mae_div_indices=0.7, mae_div_steps=2.6

[18-04-2022_15-47-14] DEBUG :: Experiment >> Refinement spread at run=17, level=1:
Root Mean Squared Errors: rmse_mchild=3.305302035447426, rmse_div_indices=3.8177218337642147, rmse_div_steps=7.726577508832744
Mean Absolute Errors: mae_mchild=2.8066647515081877, mae_div_indices=2.6, mae_div_steps=5.2

[18-04-2022_15-47-15] DEBUG :: Experiment >> Refinement spread at run=18, level=3:
Root Mean Squared Errors: rmse_mchild=2.9576011976415373, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.886751345948129
Mean Absolute Errors: mae_mchild=2.429065743944637, mae_div_indices=0.16666666666666666, mae_div_steps=1.6666666666666667

[18-04-2022_15-47-15] DEBUG :: Experiment >> Refinement spread at run=18, level=2:
Root Mean Squared Errors: rmse_mchild=9.581154341649992, rmse_div_indices=2.7386127875258306, rmse_div_steps=3.3466401061363023
Mean Absolute Errors: mae_mchild=8.733333333333333, mae_div_indices=2.0, mae_div_steps=2.4

[18-04-2022_15-47-15] DEBUG :: Experiment >> Refinement spread at run=18, level=1:
Root Mean Squared Errors: rmse_mchild=4.630478002389413, rmse_div_indices=3.3466401061363023, rmse_div_steps=8.602325267042627
Mean Absolute Errors: mae_mchild=4.196428571428574, mae_div_indices=2.4, mae_div_steps=6.4

[18-04-2022_15-47-15] DEBUG :: Experiment >> Refinement spread at run=19, level=3:
Root Mean Squared Errors: rmse_mchild=2.566755791678992, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.886751345948129
Mean Absolute Errors: mae_mchild=1.972318339100346, mae_div_indices=0.16666666666666666, mae_div_steps=1.6666666666666667

[18-04-2022_15-47-15] DEBUG :: Experiment >> Refinement spread at run=19, level=2:
Root Mean Squared Errors: rmse_mchild=9.616921814446926, rmse_div_indices=2.7386127875258306, rmse_div_steps=3.3466401061363023
Mean Absolute Errors: mae_mchild=8.766666666666667, mae_div_indices=2.0, mae_div_steps=2.4

[18-04-2022_15-47-15] DEBUG :: Experiment >> Refinement spread at run=19, level=1:
Root Mean Squared Errors: rmse_mchild=4.25374984632407, rmse_div_indices=3.3466401061363023, rmse_div_steps=8.602325267042627
Mean Absolute Errors: mae_mchild=3.875000000000002, mae_div_indices=2.4, mae_div_steps=6.4

[18-04-2022_15-47-15] DEBUG :: Experiment >> Refinement spread at run=20, level=3:
Root Mean Squared Errors: rmse_mchild=2.313642404623192, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.7320508075688772
Mean Absolute Errors: mae_mchild=2.0588235294117645, mae_div_indices=0.16666666666666666, mae_div_steps=1.0

[18-04-2022_15-47-15] DEBUG :: Experiment >> Refinement spread at run=20, level=2:
Root Mean Squared Errors: rmse_mchild=8.637686590148407, rmse_div_indices=1.6431676725154984, rmse_div_steps=4.0743097574926725
Mean Absolute Errors: mae_mchild=7.966666666666665, mae_div_indices=1.2, mae_div_steps=3.0

[18-04-2022_15-47-15] DEBUG :: Experiment >> Refinement spread at run=20, level=1:
Root Mean Squared Errors: rmse_mchild=4.509061172024753, rmse_div_indices=4.0743097574926725, rmse_div_steps=9.16515138991168
Mean Absolute Errors: mae_mchild=4.071428571428574, mae_div_indices=3.0, mae_div_steps=6.8

[18-04-2022_15-47-15] DEBUG :: Experiment >> Refinement spread at run=21, level=3:
Root Mean Squared Errors: rmse_mchild=2.2189807192776496, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.4433756729740645
Mean Absolute Errors: mae_mchild=1.8373702422145337, mae_div_indices=0.16666666666666666, mae_div_steps=0.8333333333333334

[18-04-2022_15-47-15] DEBUG :: Experiment >> Refinement spread at run=21, level=2:
Root Mean Squared Errors: rmse_mchild=5.1038200979106545, rmse_div_indices=1.4747881203752624, rmse_div_steps=2.9111853256019273
Mean Absolute Errors: mae_mchild=3.8938775510204056, mae_div_indices=1.1, mae_div_steps=2.2

[18-04-2022_15-47-15] DEBUG :: Experiment >> Refinement spread at run=21, level=1:
Root Mean Squared Errors: rmse_mchild=2.353723136308611, rmse_div_indices=2.9111853256019273, rmse_div_steps=5.5677643628300215
Mean Absolute Errors: mae_mchild=2.015122873345934, mae_div_indices=2.2, mae_div_steps=3.8

[18-04-2022_15-47-15] DEBUG :: Experiment >> Refinement spread at run=22, level=3:
Root Mean Squared Errors: rmse_mchild=1.491614392130114, rmse_div_indices=0.28867513459481287, rmse_div_steps=0.28867513459481287
Mean Absolute Errors: mae_mchild=1.2283737024221457, mae_div_indices=0.16666666666666666, mae_div_steps=0.16666666666666666

[18-04-2022_15-47-15] DEBUG :: Experiment >> Refinement spread at run=22, level=2:
Root Mean Squared Errors: rmse_mchild=6.167451741047333, rmse_div_indices=0.4183300132670378, rmse_div_steps=4.239693385140015
Mean Absolute Errors: mae_mchild=5.419354838709678, mae_div_indices=0.3, mae_div_steps=2.9

[18-04-2022_15-47-16] DEBUG :: Experiment >> Refinement spread at run=22, level=1:
Root Mean Squared Errors: rmse_mchild=3.379914601684697, rmse_div_indices=4.239693385140015, rmse_div_steps=8.942874258313152
Mean Absolute Errors: mae_mchild=3.0526315789473633, mae_div_indices=2.9, mae_div_steps=6.3

[18-04-2022_15-47-16] DEBUG :: Experiment >> Refinement spread at run=23, level=3:
Root Mean Squared Errors: rmse_mchild=3.030411028797943, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.886751345948129
Mean Absolute Errors: mae_mchild=2.546712802768166, mae_div_indices=0.16666666666666666, mae_div_steps=1.6666666666666667

[18-04-2022_15-47-16] DEBUG :: Experiment >> Refinement spread at run=23, level=2:
Root Mean Squared Errors: rmse_mchild=9.553165075668009, rmse_div_indices=2.7386127875258306, rmse_div_steps=3.3466401061363023
Mean Absolute Errors: mae_mchild=8.7, mae_div_indices=2.0, mae_div_steps=2.4

[18-04-2022_15-47-16] DEBUG :: Experiment >> Refinement spread at run=23, level=1:
Root Mean Squared Errors: rmse_mchild=3.6555276846251905, rmse_div_indices=3.3466401061363023, rmse_div_steps=7.791020472312982
Mean Absolute Errors: mae_mchild=3.3035714285714275, mae_div_indices=2.4, mae_div_steps=5.8

[18-04-2022_15-47-16] DEBUG :: Experiment >> Refinement spread at run=24, level=3:
Root Mean Squared Errors: rmse_mchild=2.9068586119072566, rmse_div_indices=0.28867513459481287, rmse_div_steps=0.8660254037844386
Mean Absolute Errors: mae_mchild=2.2768166089965396, mae_div_indices=0.16666666666666666, mae_div_steps=0.5

[18-04-2022_15-47-16] DEBUG :: Experiment >> Refinement spread at run=24, level=2:
Root Mean Squared Errors: rmse_mchild=4.989520698865546, rmse_div_indices=0.9354143466934853, rmse_div_steps=2.659887215654077
Mean Absolute Errors: mae_mchild=3.7988980716253447, mae_div_indices=0.7, mae_div_steps=1.8

[18-04-2022_15-47-16] DEBUG :: Experiment >> Refinement spread at run=24, level=1:
Root Mean Squared Errors: rmse_mchild=2.9728402543769206, rmse_div_indices=2.659887215654077, rmse_div_steps=5.873670062235365
Mean Absolute Errors: mae_mchild=2.4793110691031317, mae_div_indices=1.8, mae_div_steps=3.4

[18-04-2022_15-47-16] DEBUG :: Experiment >> Refinement spread at run=25, level=3:
Root Mean Squared Errors: rmse_mchild=1.1299631007234434, rmse_div_indices=0.28867513459481287, rmse_div_steps=0.5773502691896257
Mean Absolute Errors: mae_mchild=0.9307958477508644, mae_div_indices=0.16666666666666666, mae_div_steps=0.3333333333333333

[18-04-2022_15-47-16] DEBUG :: Experiment >> Refinement spread at run=25, level=2:
Root Mean Squared Errors: rmse_mchild=6.143943918607982, rmse_div_indices=0.7745966692414834, rmse_div_steps=3.591656999213594
Mean Absolute Errors: mae_mchild=5.5, mae_div_indices=0.6, mae_div_steps=2.6

[18-04-2022_15-47-16] DEBUG :: Experiment >> Refinement spread at run=25, level=1:
Root Mean Squared Errors: rmse_mchild=2.8212959333968604, rmse_div_indices=3.591656999213594, rmse_div_steps=7.7508064096582885
Mean Absolute Errors: mae_mchild=2.3808539944903604, mae_div_indices=2.6, mae_div_steps=5.5

[18-04-2022_15-47-16] DEBUG :: Experiment >> Refinement spread at run=26, level=3:
Root Mean Squared Errors: rmse_mchild=2.9240678874438983, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.886751345948129
Mean Absolute Errors: mae_mchild=2.370242214532872, mae_div_indices=0.16666666666666666, mae_div_steps=1.6666666666666667

[18-04-2022_15-47-16] DEBUG :: Experiment >> Refinement spread at run=26, level=2:
Root Mean Squared Errors: rmse_mchild=9.580690456831887, rmse_div_indices=2.7386127875258306, rmse_div_steps=3.3466401061363023
Mean Absolute Errors: mae_mchild=8.733333333333333, mae_div_indices=2.0, mae_div_steps=2.4

[18-04-2022_15-47-16] DEBUG :: Experiment >> Refinement spread at run=26, level=1:
Root Mean Squared Errors: rmse_mchild=4.364162962968608, rmse_div_indices=3.3466401061363023, rmse_div_steps=8.602325267042627
Mean Absolute Errors: mae_mchild=4.000000000000002, mae_div_indices=2.4, mae_div_steps=6.4

[18-04-2022_15-47-17] DEBUG :: Experiment >> Refinement spread at run=27, level=3:
Root Mean Squared Errors: rmse_mchild=1.8395877377778693, rmse_div_indices=0.28867513459481287, rmse_div_steps=0.5773502691896257
Mean Absolute Errors: mae_mchild=1.4256055363321798, mae_div_indices=0.16666666666666666, mae_div_steps=0.3333333333333333

[18-04-2022_15-47-17] DEBUG :: Experiment >> Refinement spread at run=27, level=2:
Root Mean Squared Errors: rmse_mchild=5.594535559365049, rmse_div_indices=0.7745966692414834, rmse_div_steps=3.9370039370059056
Mean Absolute Errors: mae_mchild=4.2890625, mae_div_indices=0.6, mae_div_steps=2.6

[18-04-2022_15-47-17] DEBUG :: Experiment >> Refinement spread at run=27, level=1:
Root Mean Squared Errors: rmse_mchild=3.7291034903653344, rmse_div_indices=3.9370039370059056, rmse_div_steps=8.727829054237944
Mean Absolute Errors: mae_mchild=3.1441736028537433, mae_div_indices=2.6, mae_div_steps=5.8

[18-04-2022_15-47-17] DEBUG :: Experiment >> Refinement spread at run=28, level=3:
Root Mean Squared Errors: rmse_mchild=1.8006150429428198, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=1.4775086505190314, mae_div_indices=0.16666666666666666, mae_div_steps=0.6666666666666666

[18-04-2022_15-47-17] DEBUG :: Experiment >> Refinement spread at run=28, level=2:
Root Mean Squared Errors: rmse_mchild=5.790912533336176, rmse_div_indices=1.0954451150103321, rmse_div_steps=3.2672618505409083
Mean Absolute Errors: mae_mchild=4.716796875, mae_div_indices=0.8, mae_div_steps=2.4

[18-04-2022_15-47-17] DEBUG :: Experiment >> Refinement spread at run=28, level=1:
Root Mean Squared Errors: rmse_mchild=3.0592553453313984, rmse_div_indices=3.2672618505409083, rmse_div_steps=7.005355094497352
Mean Absolute Errors: mae_mchild=2.6302069336199962, mae_div_indices=2.4, mae_div_steps=5.0

[18-04-2022_15-47-17] DEBUG :: Experiment >> Refinement spread at run=29, level=3:
Root Mean Squared Errors: rmse_mchild=1.9331384382535275, rmse_div_indices=0.28867513459481287, rmse_div_steps=0.5773502691896257
Mean Absolute Errors: mae_mchild=1.494809688581315, mae_div_indices=0.16666666666666666, mae_div_steps=0.3333333333333333

[18-04-2022_15-47-17] DEBUG :: Experiment >> Refinement spread at run=29, level=2:
Root Mean Squared Errors: rmse_mchild=6.03100711946189, rmse_div_indices=0.7745966692414834, rmse_div_steps=3.391164991562634
Mean Absolute Errors: mae_mchild=5.03125, mae_div_indices=0.6, mae_div_steps=1.8

[18-04-2022_15-47-17] DEBUG :: Experiment >> Refinement spread at run=29, level=1:
Root Mean Squared Errors: rmse_mchild=3.1386888058134113, rmse_div_indices=3.391164991562634, rmse_div_steps=7.389181280764467
Mean Absolute Errors: mae_mchild=2.689655172413795, mae_div_indices=1.8, mae_div_steps=4.2

[18-04-2022_15-47-17] DEBUG :: Experiment >> Refinement spread at run=30, level=3:
Root Mean Squared Errors: rmse_mchild=3.083048866206743, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.886751345948129
Mean Absolute Errors: mae_mchild=2.474048442906574, mae_div_indices=0.16666666666666666, mae_div_steps=1.6666666666666667

[18-04-2022_15-47-17] DEBUG :: Experiment >> Refinement spread at run=30, level=2:
Root Mean Squared Errors: rmse_mchild=9.229220905283311, rmse_div_indices=2.7386127875258306, rmse_div_steps=3.1304951684997055
Mean Absolute Errors: mae_mchild=8.433333333333332, mae_div_indices=2.0, mae_div_steps=2.2

[18-04-2022_15-47-17] DEBUG :: Experiment >> Refinement spread at run=30, level=1:
Root Mean Squared Errors: rmse_mchild=4.436628615219868, rmse_div_indices=3.1304951684997055, rmse_div_steps=8.402380615040002
Mean Absolute Errors: mae_mchild=4.071428571428574, mae_div_indices=2.2, mae_div_steps=6.2

[18-04-2022_15-47-17] DEBUG :: Experiment >> Refinement spread at run=31, level=3:
Root Mean Squared Errors: rmse_mchild=1.947405336146688, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.7320508075688772
Mean Absolute Errors: mae_mchild=1.5709342560553632, mae_div_indices=0.16666666666666666, mae_div_steps=1.0

[18-04-2022_15-47-18] DEBUG :: Experiment >> Refinement spread at run=31, level=2:
Root Mean Squared Errors: rmse_mchild=8.881232813990199, rmse_div_indices=1.6431676725154984, rmse_div_steps=4.0743097574926725
Mean Absolute Errors: mae_mchild=8.166666666666664, mae_div_indices=1.2, mae_div_steps=3.0

[18-04-2022_15-47-18] DEBUG :: Experiment >> Refinement spread at run=31, level=1:
Root Mean Squared Errors: rmse_mchild=4.297008926484296, rmse_div_indices=4.0743097574926725, rmse_div_steps=9.16515138991168
Mean Absolute Errors: mae_mchild=3.857142857142859, mae_div_indices=3.0, mae_div_steps=6.8

[18-04-2022_15-47-18] DEBUG :: Experiment >> Refinement spread at run=32, level=3:
Root Mean Squared Errors: rmse_mchild=1.5462869915405784, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=1.152249134948097, mae_div_indices=0.16666666666666666, mae_div_steps=0.6666666666666666

[18-04-2022_15-47-18] DEBUG :: Experiment >> Refinement spread at run=32, level=2:
Root Mean Squared Errors: rmse_mchild=5.683162838046258, rmse_div_indices=1.0954451150103321, rmse_div_steps=3.2672618505409083
Mean Absolute Errors: mae_mchild=4.654296875, mae_div_indices=0.8, mae_div_steps=2.4

[18-04-2022_15-47-18] DEBUG :: Experiment >> Refinement spread at run=32, level=1:
Root Mean Squared Errors: rmse_mchild=3.9117516014234486, rmse_div_indices=3.2672618505409083, rmse_div_steps=7.699025912412557
Mean Absolute Errors: mae_mchild=3.4146734748723437, mae_div_indices=2.4, mae_div_steps=5.4

[18-04-2022_15-47-18] DEBUG :: Experiment >> Refinement spread at run=33, level=3:
Root Mean Squared Errors: rmse_mchild=1.3745084053585792, rmse_div_indices=0.28867513459481287, rmse_div_steps=0.8660254037844386
Mean Absolute Errors: mae_mchild=1.1141868512110726, mae_div_indices=0.16666666666666666, mae_div_steps=0.5

[18-04-2022_15-47-18] DEBUG :: Experiment >> Refinement spread at run=33, level=2:
Root Mean Squared Errors: rmse_mchild=5.887163057514615, rmse_div_indices=0.9354143466934853, rmse_div_steps=4.120072814890533
Mean Absolute Errors: mae_mchild=4.4880332986472435, mae_div_indices=0.7, mae_div_steps=2.8

[18-04-2022_15-47-18] DEBUG :: Experiment >> Refinement spread at run=33, level=1:
Root Mean Squared Errors: rmse_mchild=2.8835509554453918, rmse_div_indices=4.120072814890533, rmse_div_steps=8.110178789644529
Mean Absolute Errors: mae_mchild=2.4829178208679568, mae_div_indices=2.8, mae_div_steps=5.4

[18-04-2022_15-47-18] DEBUG :: Experiment >> Refinement spread at run=34, level=3:
Root Mean Squared Errors: rmse_mchild=1.7489492643904125, rmse_div_indices=0.28867513459481287, rmse_div_steps=0.28867513459481287
Mean Absolute Errors: mae_mchild=1.4048442906574394, mae_div_indices=0.16666666666666666, mae_div_steps=0.16666666666666666

[18-04-2022_15-47-18] DEBUG :: Experiment >> Refinement spread at run=34, level=2:
Root Mean Squared Errors: rmse_mchild=5.626063141377663, rmse_div_indices=0.4183300132670378, rmse_div_steps=3.751666296460814
Mean Absolute Errors: mae_mchild=4.432506887052342, mae_div_indices=0.3, mae_div_steps=2.0

[18-04-2022_15-47-18] DEBUG :: Experiment >> Refinement spread at run=34, level=1:
Root Mean Squared Errors: rmse_mchild=2.75323319376462, rmse_div_indices=3.751666296460814, rmse_div_steps=7.548178588242332
Mean Absolute Errors: mae_mchild=2.3249066360241275, mae_div_indices=2.0, mae_div_steps=4.3

[18-04-2022_15-47-18] DEBUG :: Experiment >> Refinement spread at run=35, level=3:
Root Mean Squared Errors: rmse_mchild=1.5077653668207405, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.4433756729740645
Mean Absolute Errors: mae_mchild=1.3044982698961936, mae_div_indices=0.16666666666666666, mae_div_steps=0.8333333333333334

[18-04-2022_15-47-18] DEBUG :: Experiment >> Refinement spread at run=35, level=2:
Root Mean Squared Errors: rmse_mchild=6.506380443259108, rmse_div_indices=1.4747881203752624, rmse_div_steps=3.5742132001323035
Mean Absolute Errors: mae_mchild=5.935483870967743, mae_div_indices=1.1, mae_div_steps=2.3

[18-04-2022_15-47-18] DEBUG :: Experiment >> Refinement spread at run=35, level=1:
Root Mean Squared Errors: rmse_mchild=3.503329111875251, rmse_div_indices=3.5742132001323035, rmse_div_steps=7.802243267163617
Mean Absolute Errors: mae_mchild=3.087719298245609, mae_div_indices=2.3, mae_div_steps=5.3

[18-04-2022_15-47-19] DEBUG :: Experiment >> Refinement spread at run=36, level=3:
Root Mean Squared Errors: rmse_mchild=1.728050684890398, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.4433756729740645
Mean Absolute Errors: mae_mchild=1.325259515570934, mae_div_indices=0.16666666666666666, mae_div_steps=0.8333333333333334

[18-04-2022_15-47-19] DEBUG :: Experiment >> Refinement spread at run=36, level=2:
Root Mean Squared Errors: rmse_mchild=6.341807500431453, rmse_div_indices=1.4747881203752624, rmse_div_steps=3.0454884665682123
Mean Absolute Errors: mae_mchild=5.419354838709678, mae_div_indices=1.1, mae_div_steps=1.6

[18-04-2022_15-47-19] DEBUG :: Experiment >> Refinement spread at run=36, level=1:
Root Mean Squared Errors: rmse_mchild=3.197557932438742, rmse_div_indices=3.0454884665682123, rmse_div_steps=6.4788116194252785
Mean Absolute Errors: mae_mchild=2.824561403508768, mae_div_indices=1.6, mae_div_steps=3.5

[18-04-2022_15-47-19] DEBUG :: Experiment >> Refinement spread at run=37, level=3:
Root Mean Squared Errors: rmse_mchild=1.862022563687578, rmse_div_indices=0.28867513459481287, rmse_div_steps=0.28867513459481287
Mean Absolute Errors: mae_mchild=1.5294117647058822, mae_div_indices=0.16666666666666666, mae_div_steps=0.16666666666666666

[18-04-2022_15-47-19] DEBUG :: Experiment >> Refinement spread at run=37, level=2:
Root Mean Squared Errors: rmse_mchild=6.159601187138611, rmse_div_indices=0.4183300132670378, rmse_div_steps=3.684426685388108
Mean Absolute Errors: mae_mchild=5.193548387096775, mae_div_indices=0.3, mae_div_steps=2.3

[18-04-2022_15-47-19] DEBUG :: Experiment >> Refinement spread at run=37, level=1:
Root Mean Squared Errors: rmse_mchild=3.14881736289307, rmse_div_indices=3.684426685388108, rmse_div_steps=7.853343237118826
Mean Absolute Errors: mae_mchild=2.666666666666664, mae_div_indices=2.3, mae_div_steps=5.1

[18-04-2022_15-47-19] DEBUG :: Experiment >> Refinement spread at run=38, level=3:
Root Mean Squared Errors: rmse_mchild=1.727049206576847, rmse_div_indices=0.28867513459481287, rmse_div_steps=0.28867513459481287
Mean Absolute Errors: mae_mchild=1.342560553633218, mae_div_indices=0.16666666666666666, mae_div_steps=0.16666666666666666

[18-04-2022_15-47-19] DEBUG :: Experiment >> Refinement spread at run=38, level=2:
Root Mean Squared Errors: rmse_mchild=6.015588490807764, rmse_div_indices=0.4183300132670378, rmse_div_steps=3.684426685388108
Mean Absolute Errors: mae_mchild=5.03225806451613, mae_div_indices=0.3, mae_div_steps=2.3

[18-04-2022_15-47-19] DEBUG :: Experiment >> Refinement spread at run=38, level=1:
Root Mean Squared Errors: rmse_mchild=2.5049453498028926, rmse_div_indices=3.684426685388108, rmse_div_steps=7.615773105863909
Mean Absolute Errors: mae_mchild=2.108956602031396, mae_div_indices=2.3, mae_div_steps=4.8

[18-04-2022_15-47-19] DEBUG :: Experiment >> Refinement spread at run=39, level=3:
Root Mean Squared Errors: rmse_mchild=1.5020170982122008, rmse_div_indices=0.28867513459481287, rmse_div_steps=0.5773502691896257
Mean Absolute Errors: mae_mchild=1.2387543252595157, mae_div_indices=0.16666666666666666, mae_div_steps=0.3333333333333333

[18-04-2022_15-47-19] DEBUG :: Experiment >> Refinement spread at run=39, level=2:
Root Mean Squared Errors: rmse_mchild=6.455029620955074, rmse_div_indices=0.5477225575051661, rmse_div_steps=4.312771730569565
Mean Absolute Errors: mae_mchild=5.833333333333331, mae_div_indices=0.4, mae_div_steps=3.0

[18-04-2022_15-47-19] DEBUG :: Experiment >> Refinement spread at run=39, level=1:
Root Mean Squared Errors: rmse_mchild=3.9083897200869884, rmse_div_indices=4.312771730569565, rmse_div_steps=9.808159868191384
Mean Absolute Errors: mae_mchild=3.464285714285716, mae_div_indices=3.0, mae_div_steps=7.0

[18-04-2022_15-47-19] DEBUG :: Experiment >> Refinement spread at run=40, level=3:
Root Mean Squared Errors: rmse_mchild=2.0954721330066906, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.7320508075688772
Mean Absolute Errors: mae_mchild=1.6989619377162626, mae_div_indices=0.16666666666666666, mae_div_steps=1.0

[18-04-2022_15-47-19] DEBUG :: Experiment >> Refinement spread at run=40, level=2:
Root Mean Squared Errors: rmse_mchild=8.556392455459944, rmse_div_indices=1.6431676725154984, rmse_div_steps=3.847076812334269
Mean Absolute Errors: mae_mchild=7.8666666666666645, mae_div_indices=1.2, mae_div_steps=2.8

[18-04-2022_15-47-19] DEBUG :: Experiment >> Refinement spread at run=40, level=1:
Root Mean Squared Errors: rmse_mchild=3.6784847423905376, rmse_div_indices=3.847076812334269, rmse_div_steps=8.360621986431392
Mean Absolute Errors: mae_mchild=3.3392857142857144, mae_div_indices=2.8, mae_div_steps=6.2

[18-04-2022_15-47-20] DEBUG :: Experiment >> Refinement spread at run=41, level=3:
Root Mean Squared Errors: rmse_mchild=1.89791362410608, rmse_div_indices=0.28867513459481287, rmse_div_steps=0.28867513459481287
Mean Absolute Errors: mae_mchild=1.5328719723183393, mae_div_indices=0.16666666666666666, mae_div_steps=0.16666666666666666

[18-04-2022_15-47-20] DEBUG :: Experiment >> Refinement spread at run=41, level=2:
Root Mean Squared Errors: rmse_mchild=6.015588490807764, rmse_div_indices=0.4183300132670378, rmse_div_steps=3.684426685388108
Mean Absolute Errors: mae_mchild=5.03225806451613, mae_div_indices=0.3, mae_div_steps=2.3

[18-04-2022_15-47-20] DEBUG :: Experiment >> Refinement spread at run=41, level=1:
Root Mean Squared Errors: rmse_mchild=2.8266310386437383, rmse_div_indices=3.684426685388108, rmse_div_steps=7.853343237118826
Mean Absolute Errors: mae_mchild=2.4035087719298214, mae_div_indices=2.3, mae_div_steps=5.1

[18-04-2022_15-47-20] DEBUG :: Experiment >> Refinement spread at run=42, level=3:
Root Mean Squared Errors: rmse_mchild=1.8924362284876954, rmse_div_indices=0.28867513459481287, rmse_div_steps=0.5773502691896257
Mean Absolute Errors: mae_mchild=1.4775086505190314, mae_div_indices=0.16666666666666666, mae_div_steps=0.3333333333333333

[18-04-2022_15-47-20] DEBUG :: Experiment >> Refinement spread at run=42, level=2:
Root Mean Squared Errors: rmse_mchild=5.808678054492325, rmse_div_indices=0.5477225575051661, rmse_div_steps=3.687817782917155
Mean Absolute Errors: mae_mchild=4.799999999999998, mae_div_indices=0.4, mae_div_steps=2.0

[18-04-2022_15-47-20] DEBUG :: Experiment >> Refinement spread at run=42, level=1:
Root Mean Squared Errors: rmse_mchild=3.3975531411500812, rmse_div_indices=3.687817782917155, rmse_div_steps=8.402380615040002
Mean Absolute Errors: mae_mchild=2.8852040816326547, mae_div_indices=2.0, mae_div_steps=5.0

[18-04-2022_15-47-20] DEBUG :: Experiment >> Refinement spread at run=43, level=3:
Root Mean Squared Errors: rmse_mchild=1.9999999999999998, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.7320508075688772
Mean Absolute Errors: mae_mchild=1.7993079584775085, mae_div_indices=0.16666666666666666, mae_div_steps=1.0

[18-04-2022_15-47-20] DEBUG :: Experiment >> Refinement spread at run=43, level=2:
Root Mean Squared Errors: rmse_mchild=8.209795414061226, rmse_div_indices=1.6431676725154984, rmse_div_steps=3.847076812334269
Mean Absolute Errors: mae_mchild=7.566666666666665, mae_div_indices=1.2, mae_div_steps=2.8

[18-04-2022_15-47-20] DEBUG :: Experiment >> Refinement spread at run=43, level=1:
Root Mean Squared Errors: rmse_mchild=4.079565803226755, rmse_div_indices=3.847076812334269, rmse_div_steps=9.16515138991168
Mean Absolute Errors: mae_mchild=3.607142857142859, mae_div_indices=2.8, mae_div_steps=6.8

[18-04-2022_15-47-20] DEBUG :: Experiment >> Refinement spread at run=44, level=3:
Root Mean Squared Errors: rmse_mchild=2.3418857926346335, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.4433756729740645
Mean Absolute Errors: mae_mchild=1.9550173010380623, mae_div_indices=0.16666666666666666, mae_div_steps=0.8333333333333334

[18-04-2022_15-47-20] DEBUG :: Experiment >> Refinement spread at run=44, level=2:
Root Mean Squared Errors: rmse_mchild=6.299362763599648, rmse_div_indices=1.4747881203752624, rmse_div_steps=3.830796261875591
Mean Absolute Errors: mae_mchild=5.141414141414141, mae_div_indices=1.1, mae_div_steps=2.2

[18-04-2022_15-47-20] DEBUG :: Experiment >> Refinement spread at run=44, level=1:
Root Mean Squared Errors: rmse_mchild=3.755681323078022, rmse_div_indices=3.830796261875591, rmse_div_steps=7.861297602813418
Mean Absolute Errors: mae_mchild=3.322033898305084, mae_div_indices=2.2, mae_div_steps=4.6

[18-04-2022_15-47-20] DEBUG :: Experiment >> Refinement spread at run=45, level=3:
Root Mean Squared Errors: rmse_mchild=1.5827792996557308, rmse_div_indices=0.28867513459481287, rmse_div_steps=0.5773502691896257
Mean Absolute Errors: mae_mchild=1.3564013840830451, mae_div_indices=0.16666666666666666, mae_div_steps=0.3333333333333333

[18-04-2022_15-47-20] DEBUG :: Experiment >> Refinement spread at run=45, level=2:
Root Mean Squared Errors: rmse_mchild=6.480626398622167, rmse_div_indices=0.5477225575051661, rmse_div_steps=4.312771730569565
Mean Absolute Errors: mae_mchild=5.733333333333332, mae_div_indices=0.4, mae_div_steps=3.0

[18-04-2022_15-47-21] DEBUG :: Experiment >> Refinement spread at run=45, level=1:
Root Mean Squared Errors: rmse_mchild=3.0971720148864685, rmse_div_indices=4.312771730569565, rmse_div_steps=9.027735042633894
Mean Absolute Errors: mae_mchild=2.839285714285713, mae_div_indices=3.0, mae_div_steps=6.4

[18-04-2022_15-47-21] DEBUG :: Experiment >> Refinement spread at run=46, level=3:
Root Mean Squared Errors: rmse_mchild=2.264514888814136, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.4433756729740645
Mean Absolute Errors: mae_mchild=1.986159169550173, mae_div_indices=0.16666666666666666, mae_div_steps=0.8333333333333334

[18-04-2022_15-47-21] DEBUG :: Experiment >> Refinement spread at run=46, level=2:
Root Mean Squared Errors: rmse_mchild=6.030658331749069, rmse_div_indices=1.4747881203752624, rmse_div_steps=3.4022051672408
Mean Absolute Errors: mae_mchild=4.932047750229569, mae_div_indices=1.1, mae_div_steps=2.0

[18-04-2022_15-47-21] DEBUG :: Experiment >> Refinement spread at run=46, level=1:
Root Mean Squared Errors: rmse_mchild=4.0410846115480314, rmse_div_indices=3.4022051672408, rmse_div_steps=7.861297602813418
Mean Absolute Errors: mae_mchild=3.4915254237288127, mae_div_indices=2.0, mae_div_steps=4.6

[18-04-2022_15-47-21] DEBUG :: Experiment >> Refinement spread at run=47, level=3:
Root Mean Squared Errors: rmse_mchild=1.5871455956743579, rmse_div_indices=0.28867513459481287, rmse_div_steps=0.5773502691896257
Mean Absolute Errors: mae_mchild=1.1695501730103806, mae_div_indices=0.16666666666666666, mae_div_steps=0.3333333333333333

[18-04-2022_15-47-21] DEBUG :: Experiment >> Refinement spread at run=47, level=2:
Root Mean Squared Errors: rmse_mchild=6.029711591361564, rmse_div_indices=0.7745966692414834, rmse_div_steps=3.391164991562634
Mean Absolute Errors: mae_mchild=5.0, mae_div_indices=0.6, mae_div_steps=1.8

[18-04-2022_15-47-21] DEBUG :: Experiment >> Refinement spread at run=47, level=1:
Root Mean Squared Errors: rmse_mchild=3.043579624754962, rmse_div_indices=3.391164991562634, rmse_div_steps=7.389181280764467
Mean Absolute Errors: mae_mchild=2.5951248513674217, mae_div_indices=1.8, mae_div_steps=4.2

[18-04-2022_15-47-21] DEBUG :: Experiment >> Refinement spread at run=48, level=3:
Root Mean Squared Errors: rmse_mchild=1.8225803982152549, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.4433756729740645
Mean Absolute Errors: mae_mchild=1.4463667820069204, mae_div_indices=0.16666666666666666, mae_div_steps=0.8333333333333334

[18-04-2022_15-47-21] DEBUG :: Experiment >> Refinement spread at run=48, level=2:
Root Mean Squared Errors: rmse_mchild=6.384245046009138, rmse_div_indices=1.4747881203752624, rmse_div_steps=3.0454884665682123
Mean Absolute Errors: mae_mchild=5.387096774193549, mae_div_indices=1.1, mae_div_steps=1.6

[18-04-2022_15-47-21] DEBUG :: Experiment >> Refinement spread at run=48, level=1:
Root Mean Squared Errors: rmse_mchild=3.697247887430608, rmse_div_indices=3.0454884665682123, rmse_div_steps=7.237057413065064
Mean Absolute Errors: mae_mchild=3.2982456140350878, mae_div_indices=1.6, mae_div_steps=4.1

[18-04-2022_15-47-21] DEBUG :: Experiment >> Refinement spread at run=49, level=3:
Root Mean Squared Errors: rmse_mchild=1.5214726066326545, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.4433756729740645
Mean Absolute Errors: mae_mchild=1.2560553633217992, mae_div_indices=0.16666666666666666, mae_div_steps=0.8333333333333334

[18-04-2022_15-47-21] DEBUG :: Experiment >> Refinement spread at run=49, level=2:
Root Mean Squared Errors: rmse_mchild=5.907190630463945, rmse_div_indices=1.4747881203752624, rmse_div_steps=3.0454884665682123
Mean Absolute Errors: mae_mchild=4.838709677419356, mae_div_indices=1.1, mae_div_steps=1.6

[18-04-2022_15-47-21] DEBUG :: Experiment >> Refinement spread at run=49, level=1:
Root Mean Squared Errors: rmse_mchild=3.7346038378095976, rmse_div_indices=3.0454884665682123, rmse_div_steps=7.237057413065064
Mean Absolute Errors: mae_mchild=3.2982456140350878, mae_div_indices=1.6, mae_div_steps=4.1

[18-04-2022_15-47-22] INFO :: Experiment >> 

   ======================================================   
                    Experimental Results                    
   ======================================================   

     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~     
             Concatenated Plan Level-Wise Means             

      LE     AC  QL_SCORE         GT         ST   OT         TT         LT         CT         WT    MET_PA  TI_SCORE          RSS          VMS     GRADE
0  17.00  17.00  1.000000   1.389520   0.835135  0.0   2.224656   2.224656   2.224656   2.224656  0.000000  1.000000  1371.673438  1382.908281  1.000000
1  31.18  31.18  0.931446   3.425687   3.211260  0.0   6.636947   4.649102   8.861603   4.450130  0.333408  0.986543  1418.300781  1433.142500  0.918878
2  58.04  58.04  0.950151   7.279319   3.525528  0.0  10.804847   9.549308  19.666450   4.963320  0.242356  0.924497  1425.990234  1442.815156  0.878588
3  90.16  90.16  0.945959  18.680334  15.753223  0.0  34.433558  29.006577  54.100008  13.617861  0.493388  0.791556  1565.947969  1602.305391  0.749187

     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~     
      Concatenated Plan Level-Wise Standard Deviation       

         LE        AC  QL_SCORE        GT        ST   OT        TT        LT        CT        WT    MET_PA  TI_SCORE         RSS         VMS     GRADE
0  0.000000  0.000000  0.000000  0.004672  0.127142  0.0  0.127229  0.127229  0.127229  0.127229  0.000000  0.000000  497.881611  501.084888  0.000000
1  1.223745  1.223745  0.035468  0.177676  1.001779  0.0  1.010726  0.709596  1.043602  0.521769  0.153443  0.016443  496.345065  498.814438  0.037258
2  3.206880  3.206880  0.046786  0.488342  0.629559  0.0  0.987678  0.996160  1.367383  0.342251  0.025096  0.008033  497.511381  501.076117  0.047137
3  5.650935  5.650935  0.052051  1.441025  2.668088  0.0  3.444183  2.910568  4.262694  1.071856  0.093010  0.010815  490.885665  493.330151  0.048351

[18-04-2022_15-47-22] INFO :: __main__ >> Saving results to excel file: ./experiments/results/ASH_Excel_2022-04-18_14-50-10_PL1_TS_hcr_online_2_2_1_min_bound_preach_opt.xlsx

[18-04-2022_15-47-27] INFO :: __main__ >> Saving results to data file: ./experiments/results/ASH_Data_2022-04-18_14-50-10_PL1_TS_hcr_online_2_2_1_min_bound_preach_opt.dat

[18-04-2022_15-47-28] INFO :: __main__ >> Saving results to figure file: ./experiments/results/ASH_Figure_2022-04-18_14-50-10_PL1_TS_hcr_online_2_2_1_min_bound_preach_opt.png

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=5.789999999999999.

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[18-04-2022_15-47-28] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=5.789999999999999 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[18-04-2022_15-47-31] INFO :: __main__ >> Overall time: Real = 3440.8747451, Process = 7023.09375

[18-04-2022_15-47-31] INFO :: __main__ >> Exiting with code 0

