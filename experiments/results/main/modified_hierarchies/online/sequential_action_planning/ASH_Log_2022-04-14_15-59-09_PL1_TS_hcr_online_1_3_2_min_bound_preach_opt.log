[14-04-2022_17-51-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('conformance_module', [Number(14), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.148454s.

[14-04-2022_17-51-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.034364s with result Unsatisfiable.

[14-04-2022_17-51-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.18281780000143044, Incremental time limit = None
Running cumulative time = 2.0440462000024127, Cumulative time limit = 1758.1654534000027
Used memory = (RSS = 2006.371094Mb, VMS = 2026.359375Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =     10 : Maximum =    300

[14-04-2022_17-51-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('conformance_module', [Number(15), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.151845s.

[14-04-2022_17-51-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.039202s with result Unsatisfiable.

[14-04-2022_17-51-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.19104709999919578, Incremental time limit = None
Running cumulative time = 2.2350933000016084, Cumulative time limit = 1758.1654534000027
Used memory = (RSS = 2010.847656Mb, VMS = 2028.375000Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =     10 : Maximum =    300

[14-04-2022_17-51-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.154800s.

[14-04-2022_17-51-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.041208s with result Unsatisfiable.

[14-04-2022_17-51-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.19600720000107685, Incremental time limit = None
Running cumulative time = 2.4311005000026853, Cumulative time limit = 1758.1654534000027
Used memory = (RSS = 2014.507812Mb, VMS = 2030.554688Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =     10 : Maximum =    300

[14-04-2022_17-51-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.158923s.

[14-04-2022_17-51-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.054816s with result Unsatisfiable.

[14-04-2022_17-51-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2137393000011798, Incremental time limit = None
Running cumulative time = 2.644839800003865, Cumulative time limit = 1758.1654534000027
Used memory = (RSS = 2018.554688Mb, VMS = 2032.738281Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =     10 : Maximum =    300

[14-04-2022_17-51-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('conformance_module', [Number(18), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.161461s.

[14-04-2022_17-51-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.053239s with result Unsatisfiable.

[14-04-2022_17-51-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.21470029999909457, Incremental time limit = None
Running cumulative time = 2.8595401000029597, Cumulative time limit = 1758.1654534000027
Used memory = (RSS = 2021.855469Mb, VMS = 2034.378906Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =     10 : Maximum =    300

[14-04-2022_17-51-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('state_module', [Number(19), Number(0)]), ('plan_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('conformance_module', [Number(19), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.163749s.

[14-04-2022_17-51-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.068000s with result Unsatisfiable.

[14-04-2022_17-51-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2317495000006602, Incremental time limit = None
Running cumulative time = 3.09128960000362, Cumulative time limit = 1758.1654534000027
Used memory = (RSS = 2025.085938Mb, VMS = 2035.898438Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =     10 : Maximum =    300

[14-04-2022_17-51-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('state_module', [Number(20), Number(0)]), ('plan_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.165250s.

[14-04-2022_17-51-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.064940s with result Unsatisfiable.

[14-04-2022_17-51-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.23019040000053792, Incremental time limit = None
Running cumulative time = 3.3214800000041578, Cumulative time limit = 1758.1654534000027
Used memory = (RSS = 2028.582031Mb, VMS = 2037.769531Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     20 : Current =     21
Incrementor step ends | Minimum  =     10 : Maximum =    300

[14-04-2022_17-51-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('state_module', [Number(21), Number(0)]), ('plan_module', [Number(21), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.169118s.

[14-04-2022_17-51-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.085517s with result Unsatisfiable.

[14-04-2022_17-51-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.25463440000021365, Incremental time limit = None
Running cumulative time = 3.5761144000043714, Cumulative time limit = 1758.1654534000027
Used memory = (RSS = 2034.992188Mb, VMS = 2058.414062Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     21 : Current =     22
Incrementor step ends | Minimum  =     10 : Maximum =    300

[14-04-2022_17-51-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(22)]), ('state_module', [Number(22), Number(0)]), ('plan_module', [Number(22), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.169269s.

[14-04-2022_17-51-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.079594s with result Unsatisfiable.

[14-04-2022_17-51-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2488629999998011, Incremental time limit = None
Running cumulative time = 3.8249774000041725, Cumulative time limit = 1758.1654534000027
Used memory = (RSS = 2037.988281Mb, VMS = 2059.683594Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     22 : Current =     23
Incrementor step ends | Minimum  =     10 : Maximum =    300

[14-04-2022_17-51-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(23)]), ('state_module', [Number(23), Number(0)]), ('plan_module', [Number(23), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('conformance_module', [Number(23), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.172809s.

[14-04-2022_17-51-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.120267s with result Unsatisfiable.

[14-04-2022_17-51-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.29307580000022426, Incremental time limit = None
Running cumulative time = 4.118053200004397, Cumulative time limit = 1758.1654534000027
Used memory = (RSS = 2043.343750Mb, VMS = 2063.585938Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     23 : Current =     24
Incrementor step ends | Minimum  =     10 : Maximum =    300

[14-04-2022_17-51-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(24)]), ('state_module', [Number(24), Number(0)]), ('plan_module', [Number(24), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.176726s.

[14-04-2022_17-51-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.194336s with result Unsatisfiable.

[14-04-2022_17-51-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.37106259999927715, Incremental time limit = None
Running cumulative time = 4.489115800003674, Cumulative time limit = 1758.1654534000027
Used memory = (RSS = 2046.531250Mb, VMS = 2065.300781Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     24 : Current =     25
Incrementor step ends | Minimum  =     10 : Maximum =    300

[14-04-2022_17-51-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(25)]), ('state_module', [Number(25), Number(0)]), ('plan_module', [Number(25), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.180369s.

[14-04-2022_17-51-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.216868s with result Unsatisfiable.

[14-04-2022_17-51-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.39723719999983587, Incremental time limit = None
Running cumulative time = 4.88635300000351, Cumulative time limit = 1758.1654534000027
Used memory = (RSS = 2049.558594Mb, VMS = 2066.792969Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =     25 : Current =     26
Incrementor step ends | Minimum  =     10 : Maximum =    300

[14-04-2022_17-51-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(26)]), ('state_module', [Number(26), Number(0)]), ('plan_module', [Number(26), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.181993s.

[14-04-2022_17-51-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.318605s with result Satisfiable.

[14-04-2022_17-51-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5005978999997751, Incremental time limit = None
Running cumulative time = 5.386950900003285, Cumulative time limit = 1758.1654534000027
Used memory = (RSS = 2057.382812Mb, VMS = 2072.691406Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.527794s, Solving = 1.859157s, Total = 5.386951s, Memory = (RSS = 2057.382812Mb, VMS = 2072.691406Mb), Step range = [0-26]), Calls = 18
Final Model :: Total atoms = 22819, Cost = (-3,), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[14-04-2022_17-51-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.800974s, Solving = 0.377892s, Total = 1.178865s, Memory = (RSS = 1982.523438Mb, VMS = 1996.753906Mb), Step range = [0-9]
2 : Statistics :: Grounding = 0.144945s, Solving = 0.026801s, Total = 0.171745s, Memory = (RSS = 1988.011719Mb, VMS = 2003.820312Mb), Step range = [10-10]
3 : Statistics :: Grounding = 0.138464s, Solving = 0.026366s, Total = 0.164830s, Memory = (RSS = 1990.972656Mb, VMS = 2004.699219Mb), Step range = [11-11]
4 : Statistics :: Grounding = 0.142597s, Solving = 0.027357s, Total = 0.169953s, Memory = (RSS = 1993.792969Mb, VMS = 2005.832031Mb), Step range = [12-12]
5 : Statistics :: Grounding = 0.146048s, Solving = 0.029787s, Total = 0.175835s, Memory = (RSS = 1996.363281Mb, VMS = 2006.769531Mb), Step range = [13-13]
6 : Statistics :: Grounding = 0.148454s, Solving = 0.034364s, Total = 0.182818s, Memory = (RSS = 2006.371094Mb, VMS = 2026.359375Mb), Step range = [14-14]
7 : Statistics :: Grounding = 0.151845s, Solving = 0.039202s, Total = 0.191047s, Memory = (RSS = 2010.847656Mb, VMS = 2028.375000Mb), Step range = [15-15]
8 : Statistics :: Grounding = 0.154800s, Solving = 0.041208s, Total = 0.196007s, Memory = (RSS = 2014.507812Mb, VMS = 2030.554688Mb), Step range = [16-16]
9 : Statistics :: Grounding = 0.158923s, Solving = 0.054816s, Total = 0.213739s, Memory = (RSS = 2018.554688Mb, VMS = 2032.738281Mb), Step range = [17-17]
10 : Statistics :: Grounding = 0.161461s, Solving = 0.053239s, Total = 0.214700s, Memory = (RSS = 2021.855469Mb, VMS = 2034.378906Mb), Step range = [18-18]
11 : Statistics :: Grounding = 0.163749s, Solving = 0.068000s, Total = 0.231750s, Memory = (RSS = 2025.085938Mb, VMS = 2035.898438Mb), Step range = [19-19]
12 : Statistics :: Grounding = 0.165250s, Solving = 0.064940s, Total = 0.230190s, Memory = (RSS = 2028.582031Mb, VMS = 2037.769531Mb), Step range = [20-20]
13 : Statistics :: Grounding = 0.169118s, Solving = 0.085517s, Total = 0.254634s, Memory = (RSS = 2034.992188Mb, VMS = 2058.414062Mb), Step range = [21-21]
14 : Statistics :: Grounding = 0.169269s, Solving = 0.079594s, Total = 0.248863s, Memory = (RSS = 2037.988281Mb, VMS = 2059.683594Mb), Step range = [22-22]
15 : Statistics :: Grounding = 0.172809s, Solving = 0.120267s, Total = 0.293076s, Memory = (RSS = 2043.343750Mb, VMS = 2063.585938Mb), Step range = [23-23]
16 : Statistics :: Grounding = 0.176726s, Solving = 0.194336s, Total = 0.371063s, Memory = (RSS = 2046.531250Mb, VMS = 2065.300781Mb), Step range = [24-24]
17 : Statistics :: Grounding = 0.180369s, Solving = 0.216868s, Total = 0.397237s, Memory = (RSS = 2049.558594Mb, VMS = 2066.792969Mb), Step range = [25-25]
18 : Statistics :: Grounding = 0.181993s, Solving = 0.318605s, Total = 0.500598s, Memory = (RSS = 2057.382812Mb, VMS = 2072.691406Mb), Step range = [26-26]

[14-04-2022_17-51-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 5.386951s due to: Stop condition reached.

[14-04-2022_17-51-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[14-04-2022_17-51-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[14-04-2022_17-51-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-51-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-51-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[14-04-2022_17-51-41] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 2 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 7, 16: 8, 17: 9, 18: 9, 19: 10, 20: 10, 21: 11, 22: 12, 23: 13, 24: 14, 25: 15, 26: 15, 27: 16, 28: 16, 29: 16, 30: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 15, 8: 16, 9: 18, 10: 20, 11: 21, 12: 22, 13: 23, 14: 24, 15: 26, 16: 29, 17: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-51-41] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 6, 23: 7, 24: 8, 25: 9, 26: 10}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 22, 7: 23, 8: 24, 9: 25, 10: 26}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 7, 16: 8, 17: 9, 18: 9, 19: 10, 20: 10, 21: 11, 22: 12, 23: 13, 24: 14, 25: 15, 26: 15, 27: 16, 28: 16, 29: 16, 30: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 15, 8: 16, 9: 18, 10: 20, 11: 21, 12: 22, 13: 23, 14: 24, 15: 26, 16: 29, 17: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-51-41] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 10, Last requested goal index = 10, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[14-04-2022_17-51-41] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.527794s, Solving = 1.859157s, Total = 5.386951s, Memory = (RSS = 2057.382812Mb, VMS = 2072.691406Mb), Step range = [0-26]), Calls = 18
Model :: Total atoms = 22819, Cost = (-3,), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[14-04-2022_17-51-41] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 26 :: Actions = 26                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_2,store_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,store_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_2,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 11:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 12:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,8))
Step 15:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 17:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 18:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 19:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 20:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 21:
    Current Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 22:
    Current Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 23:
    Current Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Achieved Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,9))
Step 24:
    Current Sub-goals:
        [Index = 8] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 8] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,9),puzzle_room_table)
Step 25:
    Current Sub-goals:
        [Index = 9] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 9] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,9))
Step 26:
    Current Sub-goals:
        [Index = 10] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Achieved Sub-goals:
        [Index = 10] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Planned actions:
        talos : put(manipulator_arm_2,(block,8),(block,9))

[14-04-2022_17-51-41] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[14-04-2022_17-51-41] DEBUG :: ASH Planner Main #1 >> Value of end step of abstract plan to divide adjusted for right blend of current problem: end_step=26

[14-04-2022_17-51-41] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[14-04-2022_17-51-41] DEBUG :: ASH Planner Main #1 >> Preparing to invoke division strategy...

[14-04-2022_17-51-41] DEBUG :: ASH Planner Main #1 >> Online method OnlineMethod.GroundFirst chose to invoke the division strategy before a downwards level change:Current increment = 1, Current planning level is complete = False

[14-04-2022_17-51-41] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 26, chosen step range to extract = range(0, 27)

[14-04-2022_17-51-41] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 26, Total actions = 26, Produced sub-goal stages = 26, Produced sub-goal literals = 26
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-51-41] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =  26, AC =  26, CF = 1.0, GT =   3.56s, ST =   1.87s, OT = 0.00s, TT =   5.43s, EF = (LE = 2.6, AC = 2.6), ED = (LE = 2.8, AC = 2.8), EB = (LE = 1.1, AC = 1.1)

[14-04-2022_17-51-41] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=26, start_step=0, blend=Blend(left=0, right=0)

[14-04-2022_17-51-41] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=0, small_group_size=13, large_group_size=14

[14-04-2022_17-51-41] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=13, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[14-04-2022_17-51-41] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 26, Sub-goal Stage Range = [1-26]
Division points [total=1] : [(Index = 13, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[14-04-2022_17-51-41] DEBUG :: ASH Planner Main #1 >> Monolevel problem 1 at level 2 solved.

[14-04-2022_17-51-41] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 1 at level 1:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 26, Sub-goal Stage Range = [1-26]
Division points [total=1] : [(Index = 13, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[14-04-2022_17-51-41] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-13]

[14-04-2022_17-51-41] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 26, chosen step range to extract = range(0, 27)

[14-04-2022_17-51-41] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 26, Total actions = 26, Produced sub-goal stages = 26, Produced sub-goal literals = 26
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-51-41] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 30, chosen step range to extract = range(0, 31)

[14-04-2022_17-51-41] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 26, Total actions = 26, Produced sub-goal stages = 26, Produced sub-goal literals = 26
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-51-41] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[14-04-2022_17-51-41] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 26, Total actions = 26, Produced sub-goal stages = 26, Produced sub-goal literals = 26
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-51-41] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [1-13], problem number = 1, increment number = 1

[14-04-2022_17-51-41] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 13)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1752.7370629999996)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[14-04-2022_17-51-41] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [1-13] : Concurrency disabled : Minimum search length bound enabled with value 12

[14-04-2022_17-51-41] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 13
start_step = 0
is_initial = True
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 12

[14-04-2022_17-51-41] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[14-04-2022_17-51-41] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[14-04-2022_17-51-41] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[14-04-2022_17-51-41] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[14-04-2022_17-51-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[14-04-2022_17-51-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[14-04-2022_17-51-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-51-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-51-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-51-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-51-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[14-04-2022_17-51-41] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-51-41] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[14-04-2022_17-51-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})

[14-04-2022_17-51-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-51-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 0).
holds(1, complete_tower(red,puzzle_room_table), false, 0).
holds(1, complete_tower(yellow,puzzle_room_table), false, 0).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0).
holds(1, configuration(manipulator_limb_1), retracted, 0).
holds(1, configuration(manipulator_limb_2), retracted, 0).
holds(1, configuration(puzzle_room_door), closed, 0).
holds(1, configuration(starting_room_door), closed, 0).
holds(1, configuration(store_room_door), closed, 0).
holds(1, grasping(manipulator_arm_1), nothing, 0).
holds(1, grasping(manipulator_arm_2), nothing, 0).
holds(1, grasping(manipulator_end_1), nothing, 0).
holds(1, grasping(manipulator_end_2), nothing, 0).
holds(1, in((block,1)), (puzzle_room,1), 0).
holds(1, in((block,2)), (puzzle_room,1), 0).
holds(1, in((block,3)), (puzzle_room,1), 0).
holds(1, in((block,4)), (store_room,0), 0).
holds(1, in((block,5)), (store_room,0), 0).
holds(1, in((block,6)), (store_room,0), 0).
holds(1, in((block,7)), (puzzle_room,1), 0).
holds(1, in((block,8)), (store_room,0), 0).
holds(1, in((block,9)), (puzzle_room,1), 0).
holds(1, in(manipulator_arm_1), (starting_room,0), 0).
holds(1, in(manipulator_arm_2), (starting_room,0), 0).
holds(1, in(manipulator_end_1), (starting_room,0), 0).
holds(1, in(manipulator_end_2), (starting_room,0), 0).
holds(1, in(manipulator_limb_1), (starting_room,0), 0).
holds(1, in(manipulator_limb_2), (starting_room,0), 0).
holds(1, in(puzzle_room_table), (puzzle_room,1), 0).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 0).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0).
holds(1, in(talos), (starting_room,0), 0).
holds(1, in_tower((block,1),(block,1)), true, 0).
holds(1, in_tower((block,1),(block,2)), false, 0).
holds(1, in_tower((block,1),(block,3)), true, 0).
holds(1, in_tower((block,1),(block,4)), false, 0).
holds(1, in_tower((block,1),(block,5)), false, 0).
holds(1, in_tower((block,1),(block,6)), false, 0).
holds(1, in_tower((block,1),(block,7)), false, 0).
holds(1, in_tower((block,1),(block,8)), false, 0).
holds(1, in_tower((block,1),(block,9)), false, 0).
holds(1, in_tower((block,2),(block,1)), false, 0).
holds(1, in_tower((block,2),(block,2)), true, 0).
holds(1, in_tower((block,2),(block,3)), false, 0).
holds(1, in_tower((block,2),(block,4)), false, 0).
holds(1, in_tower((block,2),(block,5)), false, 0).
holds(1, in_tower((block,2),(block,6)), false, 0).
holds(1, in_tower((block,2),(block,7)), false, 0).
holds(1, in_tower((block,2),(block,8)), false, 0).
holds(1, in_tower((block,2),(block,9)), false, 0).
holds(1, in_tower((block,3),(block,1)), false, 0).
holds(1, in_tower((block,3),(block,2)), false, 0).
holds(1, in_tower((block,3),(block,3)), false, 0).
holds(1, in_tower((block,3),(block,4)), false, 0).
holds(1, in_tower((block,3),(block,5)), false, 0).
holds(1, in_tower((block,3),(block,6)), false, 0).
holds(1, in_tower((block,3),(block,7)), false, 0).
holds(1, in_tower((block,3),(block,8)), false, 0).
holds(1, in_tower((block,3),(block,9)), false, 0).
holds(1, in_tower((block,4),(block,1)), false, 0).
holds(1, in_tower((block,4),(block,2)), false, 0).
holds(1, in_tower((block,4),(block,3)), false, 0).
holds(1, in_tower((block,4),(block,4)), false, 0).
holds(1, in_tower((block,4),(block,5)), false, 0).
holds(1, in_tower((block,4),(block,6)), false, 0).
holds(1, in_tower((block,4),(block,7)), false, 0).
holds(1, in_tower((block,4),(block,8)), false, 0).
holds(1, in_tower((block,4),(block,9)), false, 0).
holds(1, in_tower((block,5),(block,1)), false, 0).
holds(1, in_tower((block,5),(block,2)), false, 0).
holds(1, in_tower((block,5),(block,3)), false, 0).
holds(1, in_tower((block,5),(block,4)), false, 0).
holds(1, in_tower((block,5),(block,5)), false, 0).
holds(1, in_tower((block,5),(block,6)), false, 0).
holds(1, in_tower((block,5),(block,7)), false, 0).
holds(1, in_tower((block,5),(block,8)), false, 0).
holds(1, in_tower((block,5),(block,9)), false, 0).
holds(1, in_tower((block,6),(block,1)), false, 0).
holds(1, in_tower((block,6),(block,2)), false, 0).
holds(1, in_tower((block,6),(block,3)), false, 0).
holds(1, in_tower((block,6),(block,4)), false, 0).
holds(1, in_tower((block,6),(block,5)), false, 0).
holds(1, in_tower((block,6),(block,6)), false, 0).
holds(1, in_tower((block,6),(block,7)), false, 0).
holds(1, in_tower((block,6),(block,8)), false, 0).
holds(1, in_tower((block,6),(block,9)), false, 0).
holds(1, in_tower((block,7),(block,1)), false, 0).
holds(1, in_tower((block,7),(block,2)), false, 0).
holds(1, in_tower((block,7),(block,3)), false, 0).
holds(1, in_tower((block,7),(block,4)), false, 0).
holds(1, in_tower((block,7),(block,5)), false, 0).
holds(1, in_tower((block,7),(block,6)), false, 0).
holds(1, in_tower((block,7),(block,7)), true, 0).
holds(1, in_tower((block,7),(block,8)), false, 0).
holds(1, in_tower((block,7),(block,9)), true, 0).
holds(1, in_tower((block,8),(block,1)), false, 0).
holds(1, in_tower((block,8),(block,2)), false, 0).
holds(1, in_tower((block,8),(block,3)), false, 0).
holds(1, in_tower((block,8),(block,4)), false, 0).
holds(1, in_tower((block,8),(block,5)), false, 0).
holds(1, in_tower((block,8),(block,6)), false, 0).
holds(1, in_tower((block,8),(block,7)), false, 0).
holds(1, in_tower((block,8),(block,8)), false, 0).
holds(1, in_tower((block,8),(block,9)), false, 0).
holds(1, in_tower((block,9),(block,1)), false, 0).
holds(1, in_tower((block,9),(block,2)), false, 0).
holds(1, in_tower((block,9),(block,3)), false, 0).
holds(1, in_tower((block,9),(block,4)), false, 0).
holds(1, in_tower((block,9),(block,5)), false, 0).
holds(1, in_tower((block,9),(block,6)), false, 0).
holds(1, in_tower((block,9),(block,7)), false, 0).
holds(1, in_tower((block,9),(block,8)), false, 0).
holds(1, in_tower((block,9),(block,9)), false, 0).
holds(1, on((block,1)), puzzle_room_table_left, 0).
holds(1, on((block,2)), puzzle_room_table_right, 0).
holds(1, on((block,3)), (block,1), 0).
holds(1, on((block,4)), nothing, 0).
holds(1, on((block,5)), nothing, 0).
holds(1, on((block,6)), nothing, 0).
holds(1, on((block,7)), puzzle_room_table_middle, 0).
holds(1, on((block,8)), nothing, 0).
holds(1, on((block,9)), (block,7), 0).
holds(1, tower_base((block,1),puzzle_room_table), true, 0).
holds(1, tower_base((block,2),puzzle_room_table), true, 0).
holds(1, tower_base((block,3),puzzle_room_table), false, 0).
holds(1, tower_base((block,4),puzzle_room_table), false, 0).
holds(1, tower_base((block,5),puzzle_room_table), false, 0).
holds(1, tower_base((block,6),puzzle_room_table), false, 0).
holds(1, tower_base((block,7),puzzle_room_table), true, 0).
holds(1, tower_base((block,8),puzzle_room_table), false, 0).
holds(1, tower_base((block,9),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,7),puzzle_room_table), true, 0).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 0).
holds(2, complete_tower(blue,puzzle_room_table), false, 0).
holds(2, complete_tower(red,puzzle_room_table), false, 0).
holds(2, complete_tower(yellow,puzzle_room_table), false, 0).
holds(2, configuration(manipulator_arm_1), retracted, 0).
holds(2, configuration(manipulator_arm_2), retracted, 0).
holds(2, configuration(puzzle_room_door), closed, 0).
holds(2, configuration(starting_room_door), closed, 0).
holds(2, configuration(store_room_door), closed, 0).
holds(2, grasping(manipulator_arm_1), nothing, 0).
holds(2, grasping(manipulator_arm_2), nothing, 0).
holds(2, in((block,1)), puzzle_room, 0).
holds(2, in((block,2)), puzzle_room, 0).
holds(2, in((block,3)), puzzle_room, 0).
holds(2, in((block,4)), store_room, 0).
holds(2, in((block,5)), store_room, 0).
holds(2, in((block,6)), store_room, 0).
holds(2, in((block,7)), puzzle_room, 0).
holds(2, in((block,8)), store_room, 0).
holds(2, in((block,9)), puzzle_room, 0).
holds(2, in(manipulator_arm_1), starting_room, 0).
holds(2, in(manipulator_arm_2), starting_room, 0).
holds(2, in(puzzle_room_table), puzzle_room, 0).
holds(2, in(talos), starting_room, 0).
holds(2, in_tower((block,1),(block,1)), true, 0).
holds(2, in_tower((block,1),(block,2)), false, 0).
holds(2, in_tower((block,1),(block,3)), true, 0).
holds(2, in_tower((block,1),(block,4)), false, 0).
holds(2, in_tower((block,1),(block,5)), false, 0).
holds(2, in_tower((block,1),(block,6)), false, 0).
holds(2, in_tower((block,1),(block,7)), false, 0).
holds(2, in_tower((block,1),(block,8)), false, 0).
holds(2, in_tower((block,1),(block,9)), false, 0).
holds(2, in_tower((block,2),(block,1)), false, 0).
holds(2, in_tower((block,2),(block,2)), true, 0).
holds(2, in_tower((block,2),(block,3)), false, 0).
holds(2, in_tower((block,2),(block,4)), false, 0).
holds(2, in_tower((block,2),(block,5)), false, 0).
holds(2, in_tower((block,2),(block,6)), false, 0).
holds(2, in_tower((block,2),(block,7)), false, 0).
holds(2, in_tower((block,2),(block,8)), false, 0).
holds(2, in_tower((block,2),(block,9)), false, 0).
holds(2, in_tower((block,3),(block,1)), false, 0).
holds(2, in_tower((block,3),(block,2)), false, 0).
holds(2, in_tower((block,3),(block,3)), false, 0).
holds(2, in_tower((block,3),(block,4)), false, 0).
holds(2, in_tower((block,3),(block,5)), false, 0).
holds(2, in_tower((block,3),(block,6)), false, 0).
holds(2, in_tower((block,3),(block,7)), false, 0).
holds(2, in_tower((block,3),(block,8)), false, 0).
holds(2, in_tower((block,3),(block,9)), false, 0).
holds(2, in_tower((block,4),(block,1)), false, 0).
holds(2, in_tower((block,4),(block,2)), false, 0).
holds(2, in_tower((block,4),(block,3)), false, 0).
holds(2, in_tower((block,4),(block,4)), false, 0).
holds(2, in_tower((block,4),(block,5)), false, 0).
holds(2, in_tower((block,4),(block,6)), false, 0).
holds(2, in_tower((block,4),(block,7)), false, 0).
holds(2, in_tower((block,4),(block,8)), false, 0).
holds(2, in_tower((block,4),(block,9)), false, 0).
holds(2, in_tower((block,5),(block,1)), false, 0).
holds(2, in_tower((block,5),(block,2)), false, 0).
holds(2, in_tower((block,5),(block,3)), false, 0).
holds(2, in_tower((block,5),(block,4)), false, 0).
holds(2, in_tower((block,5),(block,5)), false, 0).
holds(2, in_tower((block,5),(block,6)), false, 0).
holds(2, in_tower((block,5),(block,7)), false, 0).
holds(2, in_tower((block,5),(block,8)), false, 0).
holds(2, in_tower((block,5),(block,9)), false, 0).
holds(2, in_tower((block,6),(block,1)), false, 0).
holds(2, in_tower((block,6),(block,2)), false, 0).
holds(2, in_tower((block,6),(block,3)), false, 0).
holds(2, in_tower((block,6),(block,4)), false, 0).
holds(2, in_tower((block,6),(block,5)), false, 0).
holds(2, in_tower((block,6),(block,6)), false, 0).
holds(2, in_tower((block,6),(block,7)), false, 0).
holds(2, in_tower((block,6),(block,8)), false, 0).
holds(2, in_tower((block,6),(block,9)), false, 0).
holds(2, in_tower((block,7),(block,1)), false, 0).
holds(2, in_tower((block,7),(block,2)), false, 0).
holds(2, in_tower((block,7),(block,3)), false, 0).
holds(2, in_tower((block,7),(block,4)), false, 0).
holds(2, in_tower((block,7),(block,5)), false, 0).
holds(2, in_tower((block,7),(block,6)), false, 0).
holds(2, in_tower((block,7),(block,7)), true, 0).
holds(2, in_tower((block,7),(block,8)), false, 0).
holds(2, in_tower((block,7),(block,9)), true, 0).
holds(2, in_tower((block,8),(block,1)), false, 0).
holds(2, in_tower((block,8),(block,2)), false, 0).
holds(2, in_tower((block,8),(block,3)), false, 0).
holds(2, in_tower((block,8),(block,4)), false, 0).
holds(2, in_tower((block,8),(block,5)), false, 0).
holds(2, in_tower((block,8),(block,6)), false, 0).
holds(2, in_tower((block,8),(block,7)), false, 0).
holds(2, in_tower((block,8),(block,8)), false, 0).
holds(2, in_tower((block,8),(block,9)), false, 0).
holds(2, in_tower((block,9),(block,1)), false, 0).
holds(2, in_tower((block,9),(block,2)), false, 0).
holds(2, in_tower((block,9),(block,3)), false, 0).
holds(2, in_tower((block,9),(block,4)), false, 0).
holds(2, in_tower((block,9),(block,5)), false, 0).
holds(2, in_tower((block,9),(block,6)), false, 0).
holds(2, in_tower((block,9),(block,7)), false, 0).
holds(2, in_tower((block,9),(block,8)), false, 0).
holds(2, in_tower((block,9),(block,9)), false, 0).
holds(2, on((block,1)), puzzle_room_table, 0).
holds(2, on((block,2)), puzzle_room_table, 0).
holds(2, on((block,3)), (block,1), 0).
holds(2, on((block,4)), nothing, 0).
holds(2, on((block,5)), nothing, 0).
holds(2, on((block,6)), nothing, 0).
holds(2, on((block,7)), puzzle_room_table, 0).
holds(2, on((block,8)), nothing, 0).
holds(2, on((block,9)), (block,7), 0).
holds(2, tower_base((block,1),puzzle_room_table), true, 0).
holds(2, tower_base((block,2),puzzle_room_table), true, 0).
holds(2, tower_base((block,3),puzzle_room_table), false, 0).
holds(2, tower_base((block,4),puzzle_room_table), false, 0).
holds(2, tower_base((block,5),puzzle_room_table), false, 0).
holds(2, tower_base((block,6),puzzle_room_table), false, 0).
holds(2, tower_base((block,7),puzzle_room_table), true, 0).
holds(2, tower_base((block,8),puzzle_room_table), false, 0).
holds(2, tower_base((block,9),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,7),puzzle_room_table), true, 0).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 0).

[14-04-2022_17-51-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[14-04-2022_17-51-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-51-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[14-04-2022_17-51-41] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=12']

[14-04-2022_17-51-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 1})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 2})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,store_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_2)', 'V': 'store_room_door_handle_outer', 'I': 3})
SubGoal({'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_2,store_room_door)', 'F': 'configuration(store_room_door)', 'V': 'open', 'I': 4})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,store_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 5})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,puzzle_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_2)', 'V': 'puzzle_room_door_handle_outer', 'I': 6})
SubGoal({'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_2,puzzle_room_door)', 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'I': 7})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,puzzle_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 8})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 9})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 10})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 11})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'I': 12})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 13})

[14-04-2022_17-51-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-51-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 13 rules into program part base:

sub_goal(2, talos, move(hallway), in(talos), hallway, 1).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 2).
sub_goal(2, talos, grasp(manipulator_arm_2,store_room_door_handle_outer), grasping(manipulator_arm_2), store_room_door_handle_outer, 3).
sub_goal(2, talos, actuate(manipulator_arm_2,store_room_door), configuration(store_room_door), open, 4).
sub_goal(2, talos, release(manipulator_arm_2,store_room_door_handle_outer), grasping(manipulator_arm_2), nothing, 5).
sub_goal(2, talos, grasp(manipulator_arm_2,puzzle_room_door_handle_outer), grasping(manipulator_arm_2), puzzle_room_door_handle_outer, 6).
sub_goal(2, talos, actuate(manipulator_arm_2,puzzle_room_door), configuration(puzzle_room_door), open, 7).
sub_goal(2, talos, release(manipulator_arm_2,puzzle_room_door_handle_outer), grasping(manipulator_arm_2), nothing, 8).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 9).
sub_goal(2, talos, move(store_room), in(talos), store_room, 10).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 11).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), (block,6), 12).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 13).

[14-04-2022_17-51-41] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-51-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[14-04-2022_17-51-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=12']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A2584CFF70>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=13, step_end_min=13, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1752.7370629999996, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 13, 'sequential', 'false'), range_=None)]

[14-04-2022_17-51-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-51-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-51-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-51-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1282 rules

[14-04-2022_17-51-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006737300000168034s

[14-04-2022_17-51-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[14-04-2022_17-51-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[14-04-2022_17-51-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.041347s.

[14-04-2022_17-51-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008004s with result Satisfiable.

[14-04-2022_17-51-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[14-04-2022_17-51-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A285614360>

[14-04-2022_17-51-41] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 0)
	('last_sgoals', 13)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A285614360>)

[14-04-2022_17-51-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, false). %* None *%
#program optimisation_module(#inc, 0, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, 13, sequential, false). %* None *%

[14-04-2022_17-51-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =     12
Incrementor step ends | Minimum  =     13 : Maximum =    300

[14-04-2022_17-51-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('conformance_module', [Number(0), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('conformance_module', [Number(1), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('conformance_module', [Number(2), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('conformance_module', [Number(3), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('conformance_module', [Number(4), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('conformance_module', [Number(5), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('conformance_module', [Number(6), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('conformance_module', [Number(7), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('conformance_module', [Number(8), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('conformance_module', [Number(9), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('conformance_module', [Number(10), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('conformance_module', [Number(11), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('conformance_module', [Number(12), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.812235s.

[14-04-2022_17-51-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.896088s with result Satisfiable.

[14-04-2022_17-51-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.7083228999999847, Incremental time limit = None
Running cumulative time = 2.7083228999999847, Cumulative time limit = 1752.7370629999996
Used memory = (RSS = 2048.304688Mb, VMS = 2065.007812Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.812235s, Solving = 0.896088s, Total = 2.708323s, Memory = (RSS = 2048.304688Mb, VMS = 2065.007812Mb), Step range = [0-12]), Calls = 1
Final Model :: Total atoms = 15531, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[14-04-2022_17-51-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =     13 : Maximum =    300

[14-04-2022_17-51-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('conformance_module', [Number(13), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.230571s.

[14-04-2022_17-51-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.046088s with result Unsatisfiable.

[14-04-2022_17-51-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.27665970000089146, Incremental time limit = None
Running cumulative time = 2.984982600000876, Cumulative time limit = 1752.7370629999996
Used memory = (RSS = 2054.007812Mb, VMS = 2073.808594Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =     13 : Maximum =    300

[14-04-2022_17-51-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('conformance_module', [Number(14), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.221396s.

[14-04-2022_17-51-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.046705s with result Unsatisfiable.

[14-04-2022_17-51-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.26810070000010455, Incremental time limit = None
Running cumulative time = 3.2530833000009807, Cumulative time limit = 1752.7370629999996
Used memory = (RSS = 2056.523438Mb, VMS = 2074.339844Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =     13 : Maximum =    300

[14-04-2022_17-51-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('conformance_module', [Number(15), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.225052s.

[14-04-2022_17-51-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.054118s with result Unsatisfiable.

[14-04-2022_17-51-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2791698999999426, Incremental time limit = None
Running cumulative time = 3.5322532000009232, Cumulative time limit = 1752.7370629999996
Used memory = (RSS = 2058.765625Mb, VMS = 2074.867188Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =     13 : Maximum =    300

[14-04-2022_17-51-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.230088s.

[14-04-2022_17-51-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.056433s with result Unsatisfiable.

[14-04-2022_17-51-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2865214000003107, Incremental time limit = None
Running cumulative time = 3.818774600001234, Cumulative time limit = 1752.7370629999996
Used memory = (RSS = 2061.320312Mb, VMS = 2075.394531Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =     13 : Maximum =    300

[14-04-2022_17-51-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.235368s.

[14-04-2022_17-51-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.059927s with result Unsatisfiable.

[14-04-2022_17-51-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.29529509999974834, Incremental time limit = None
Running cumulative time = 4.114069700000982, Cumulative time limit = 1752.7370629999996
Used memory = (RSS = 2063.843750Mb, VMS = 2075.925781Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =     13 : Maximum =    300

[14-04-2022_17-51-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('conformance_module', [Number(18), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.241470s.

[14-04-2022_17-51-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.064411s with result Unsatisfiable.

[14-04-2022_17-51-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.30588110000007873, Incremental time limit = None
Running cumulative time = 4.419950800001061, Cumulative time limit = 1752.7370629999996
Used memory = (RSS = 2066.308594Mb, VMS = 2077.695312Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =     13 : Maximum =    300

[14-04-2022_17-51-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('state_module', [Number(19), Number(0)]), ('plan_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('conformance_module', [Number(19), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.244131s.

[14-04-2022_17-51-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.080224s with result Unsatisfiable.

[14-04-2022_17-51-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3243555999997625, Incremental time limit = None
Running cumulative time = 4.7443064000008235, Cumulative time limit = 1752.7370629999996
Used memory = (RSS = 2075.800781Mb, VMS = 2104.132812Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =     13 : Maximum =    300

[14-04-2022_17-51-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('state_module', [Number(20), Number(0)]), ('plan_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.248944s.

[14-04-2022_17-51-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.083742s with result Unsatisfiable.

[14-04-2022_17-51-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.33268609999959153, Incremental time limit = None
Running cumulative time = 5.076992500000415, Cumulative time limit = 1752.7370629999996
Used memory = (RSS = 2078.710938Mb, VMS = 2104.664062Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     20 : Current =     21
Incrementor step ends | Minimum  =     13 : Maximum =    300

[14-04-2022_17-51-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('state_module', [Number(21), Number(0)]), ('plan_module', [Number(21), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.254311s.

[14-04-2022_17-51-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.093344s with result Unsatisfiable.

[14-04-2022_17-51-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3476548000007824, Incremental time limit = None
Running cumulative time = 5.424647300001197, Cumulative time limit = 1752.7370629999996
Used memory = (RSS = 2081.632812Mb, VMS = 2105.199219Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     21 : Current =     22
Incrementor step ends | Minimum  =     13 : Maximum =    300

[14-04-2022_17-51-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(22)]), ('state_module', [Number(22), Number(0)]), ('plan_module', [Number(22), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.261392s.

[14-04-2022_17-51-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.130833s with result Unsatisfiable.

[14-04-2022_17-51-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3922253999990062, Incremental time limit = None
Running cumulative time = 5.816872700000204, Cumulative time limit = 1752.7370629999996
Used memory = (RSS = 2084.578125Mb, VMS = 2105.753906Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     22 : Current =     23
Incrementor step ends | Minimum  =     13 : Maximum =    300

[14-04-2022_17-51-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(23)]), ('state_module', [Number(23), Number(0)]), ('plan_module', [Number(23), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('conformance_module', [Number(23), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.261356s.

[14-04-2022_17-51-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.136270s with result Unsatisfiable.

[14-04-2022_17-51-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.39762599999994563, Incremental time limit = None
Running cumulative time = 6.214498700000149, Cumulative time limit = 1752.7370629999996
Used memory = (RSS = 2088.921875Mb, VMS = 2107.343750Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     23 : Current =     24
Incrementor step ends | Minimum  =     13 : Maximum =    300

[14-04-2022_17-51-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(24)]), ('state_module', [Number(24), Number(0)]), ('plan_module', [Number(24), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.267582s.

[14-04-2022_17-51-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.198819s with result Unsatisfiable.

[14-04-2022_17-51-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.46640039999965666, Incremental time limit = None
Running cumulative time = 6.680899099999806, Cumulative time limit = 1752.7370629999996
Used memory = (RSS = 2093.843750Mb, VMS = 2110.378906Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     24 : Current =     25
Incrementor step ends | Minimum  =     13 : Maximum =    300

[14-04-2022_17-51-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(25)]), ('state_module', [Number(25), Number(0)]), ('plan_module', [Number(25), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.274040s.

[14-04-2022_17-51-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.246236s with result Satisfiable.

[14-04-2022_17-51-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5202756999997291, Incremental time limit = None
Running cumulative time = 7.201174799999535, Cumulative time limit = 1752.7370629999996
Used memory = (RSS = 2101.871094Mb, VMS = 2117.062500Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 5.007937s, Solving = 2.193238s, Total = 7.201175s, Memory = (RSS = 2101.871094Mb, VMS = 2117.062500Mb), Step range = [0-25]), Calls = 14
Final Model :: Total atoms = 25160, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[14-04-2022_17-51-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 1.812235s, Solving = 0.896088s, Total = 2.708323s, Memory = (RSS = 2048.304688Mb, VMS = 2065.007812Mb), Step range = [0-12]
2 : Statistics :: Grounding = 0.230571s, Solving = 0.046088s, Total = 0.276660s, Memory = (RSS = 2054.007812Mb, VMS = 2073.808594Mb), Step range = [13-13]
3 : Statistics :: Grounding = 0.221396s, Solving = 0.046705s, Total = 0.268101s, Memory = (RSS = 2056.523438Mb, VMS = 2074.339844Mb), Step range = [14-14]
4 : Statistics :: Grounding = 0.225052s, Solving = 0.054118s, Total = 0.279170s, Memory = (RSS = 2058.765625Mb, VMS = 2074.867188Mb), Step range = [15-15]
5 : Statistics :: Grounding = 0.230088s, Solving = 0.056433s, Total = 0.286521s, Memory = (RSS = 2061.320312Mb, VMS = 2075.394531Mb), Step range = [16-16]
6 : Statistics :: Grounding = 0.235368s, Solving = 0.059927s, Total = 0.295295s, Memory = (RSS = 2063.843750Mb, VMS = 2075.925781Mb), Step range = [17-17]
7 : Statistics :: Grounding = 0.241470s, Solving = 0.064411s, Total = 0.305881s, Memory = (RSS = 2066.308594Mb, VMS = 2077.695312Mb), Step range = [18-18]
8 : Statistics :: Grounding = 0.244131s, Solving = 0.080224s, Total = 0.324356s, Memory = (RSS = 2075.800781Mb, VMS = 2104.132812Mb), Step range = [19-19]
9 : Statistics :: Grounding = 0.248944s, Solving = 0.083742s, Total = 0.332686s, Memory = (RSS = 2078.710938Mb, VMS = 2104.664062Mb), Step range = [20-20]
10 : Statistics :: Grounding = 0.254311s, Solving = 0.093344s, Total = 0.347655s, Memory = (RSS = 2081.632812Mb, VMS = 2105.199219Mb), Step range = [21-21]
11 : Statistics :: Grounding = 0.261392s, Solving = 0.130833s, Total = 0.392225s, Memory = (RSS = 2084.578125Mb, VMS = 2105.753906Mb), Step range = [22-22]
12 : Statistics :: Grounding = 0.261356s, Solving = 0.136270s, Total = 0.397626s, Memory = (RSS = 2088.921875Mb, VMS = 2107.343750Mb), Step range = [23-23]
13 : Statistics :: Grounding = 0.267582s, Solving = 0.198819s, Total = 0.466400s, Memory = (RSS = 2093.843750Mb, VMS = 2110.378906Mb), Step range = [24-24]
14 : Statistics :: Grounding = 0.274040s, Solving = 0.246236s, Total = 0.520276s, Memory = (RSS = 2101.871094Mb, VMS = 2117.062500Mb), Step range = [25-25]

[14-04-2022_17-51-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 7.201175s due to: Stop condition reached.

[14-04-2022_17-51-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[14-04-2022_17-51-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[14-04-2022_17-51-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-51-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-51-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[14-04-2022_17-51-49] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 6, 23: 7, 24: 8, 25: 9, 26: 10}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 22, 7: 23, 8: 24, 9: 25, 10: 26}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 7, 16: 8, 17: 9, 18: 9, 19: 10, 20: 10, 21: 11, 22: 12, 23: 13, 24: 14, 25: 15, 26: 15, 27: 16, 28: 16, 29: 16, 30: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 15, 8: 16, 9: 18, 10: 20, 11: 21, 12: 22, 13: 23, 14: 24, 15: 26, 16: 29, 17: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-51-49] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 6, 23: 7, 24: 8, 25: 9, 26: 10}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 22, 7: 23, 8: 24, 9: 25, 10: 26}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 7, 16: 8, 17: 9, 18: 9, 19: 10, 20: 10, 21: 11, 22: 12, 23: 13, 24: 14, 25: 15, 26: 15, 27: 16, 28: 16, 29: 16, 30: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 15, 8: 16, 9: 18, 10: 20, 11: 21, 12: 22, 13: 23, 14: 24, 15: 26, 16: 29, 17: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-51-49] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 13, Last requested goal index = 13, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[14-04-2022_17-51-49] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 5.007937s, Solving = 2.193238s, Total = 7.201175s, Memory = (RSS = 2101.871094Mb, VMS = 2117.062500Mb), Step range = [0-25]), Calls = 14
Model :: Total atoms = 25160, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[14-04-2022_17-51-49] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 25 :: Actions = 25                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 25:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)

[14-04-2022_17-51-49] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[14-04-2022_17-51-49] DEBUG :: ASH Planner Main #1 >> Value of end step of abstract plan to divide adjusted for right blend of current problem: end_step=25

[14-04-2022_17-51-49] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[14-04-2022_17-51-49] DEBUG :: ASH Planner Main #1 >> Monolevel problem 1 at level 1 solved.

[14-04-2022_17-51-49] DEBUG :: ASH Planner Main #1 >> Online planning increment 1 finished.

[14-04-2022_17-51-49] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 17 : Goals achieved = 17 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 1 : Total constraining sub-goal stages = 30 : Goals achieved = 10 : Goals unachieved = 20 : Complete = False
Level = 1 : Solved problems = 1 : Total constraining sub-goal stages = 26 : Goals achieved = 13 : Goals unachieved = 13 : Complete = False

[14-04-2022_17-51-49] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 2.

[14-04-2022_17-51-49] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 2 by method ground-first is [1-1].

[14-04-2022_17-51-49] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 2 at level 1:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 26, Sub-goal Stage Range = [1-26]
Division points [total=1] : [(Index = 13, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[14-04-2022_17-51-49] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [14-26]

[14-04-2022_17-51-49] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 25, chosen step range to extract = range(0, 26)

[14-04-2022_17-51-49] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 26, Total actions = 26, Produced sub-goal stages = 26, Produced sub-goal literals = 26
Level [1]: Length = 25, Total actions = 25, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-51-49] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 26, chosen step range to extract = range(0, 27)

[14-04-2022_17-51-49] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 26, Total actions = 26, Produced sub-goal stages = 26, Produced sub-goal literals = 26
Level [1]: Length = 25, Total actions = 25, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-51-49] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 30, chosen step range to extract = range(0, 31)

[14-04-2022_17-51-49] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 26, Total actions = 26, Produced sub-goal stages = 26, Produced sub-goal literals = 26
Level [1]: Length = 25, Total actions = 25, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-51-49] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[14-04-2022_17-51-49] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 26, Total actions = 26, Produced sub-goal stages = 26, Produced sub-goal literals = 26
Level [1]: Length = 25, Total actions = 25, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-51-49] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [14-26], problem number = 2, increment number = 2

[14-04-2022_17-51-49] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 14)
	('last_sgoals', 26)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1745.4865381)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[14-04-2022_17-51-49] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [14-26] : Concurrency disabled : Minimum search length bound enabled with value 37

[14-04-2022_17-51-49] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 14
last_sgoals = 26
start_step = 25
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 37

[14-04-2022_17-51-49] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[14-04-2022_17-51-49] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[14-04-2022_17-51-49] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[14-04-2022_17-51-49] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[14-04-2022_17-51-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[14-04-2022_17-51-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[14-04-2022_17-51-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-51-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-51-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-51-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-51-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[14-04-2022_17-51-49] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-51-49] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 25 as problem start state.

[14-04-2022_17-51-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,6))', 'S': 25})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 25})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 25})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 25})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 25})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 25})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 25})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'S': 25})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 25})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,6)', 'S': 25})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 25})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 25})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 25})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 25})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 25})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 25})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(store_room,0)', 'S': 25})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 25})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(store_room,0)', 'S': 25})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 25})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(store_room,0)', 'S': 25})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(store_room,0)', 'S': 25})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(store_room,0)', 'S': 25})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(store_room,0)', 'S': 25})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(store_room,0)', 'S': 25})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(store_room,0)', 'S': 25})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 25})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 25})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 25})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 25})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(store_room,0)', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 25})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 25})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 25})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 25})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 25})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 25})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 25})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'S': 25})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 25})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 25})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 25})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 25})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 25})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 25})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 25})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 25})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 25})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 25})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 25})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'S': 25})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 25})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 25})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 25})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 25})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 25})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 25})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 25})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 25})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'store_room', 'S': 25})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 25})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 25})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 25})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 25})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'store_room', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 25})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 25})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 25})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 25})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 25})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 25})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 25})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 25})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 25})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 25})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 25})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 25})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 25})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 25})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 25})

[14-04-2022_17-51-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-51-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 25).
holds(1, complete_tower(red,puzzle_room_table), false, 25).
holds(1, complete_tower(yellow,puzzle_room_table), false, 25).
holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 25).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 25).
holds(1, configuration(manipulator_limb_1), extended, 25).
holds(1, configuration(manipulator_limb_2), extended, 25).
holds(1, configuration(puzzle_room_door), open, 25).
holds(1, configuration(starting_room_door), closed, 25).
holds(1, configuration(store_room_door), open, 25).
holds(1, grasping(manipulator_arm_1), (block,6), 25).
holds(1, grasping(manipulator_arm_2), nothing, 25).
holds(1, grasping(manipulator_end_1), (block,6), 25).
holds(1, grasping(manipulator_end_2), nothing, 25).
holds(1, in((block,1)), (puzzle_room,1), 25).
holds(1, in((block,2)), (puzzle_room,1), 25).
holds(1, in((block,3)), (puzzle_room,1), 25).
holds(1, in((block,4)), (store_room,0), 25).
holds(1, in((block,5)), (store_room,0), 25).
holds(1, in((block,6)), (store_room,0), 25).
holds(1, in((block,7)), (puzzle_room,1), 25).
holds(1, in((block,8)), (store_room,0), 25).
holds(1, in((block,9)), (puzzle_room,1), 25).
holds(1, in(manipulator_arm_1), (store_room,0), 25).
holds(1, in(manipulator_arm_2), (store_room,0), 25).
holds(1, in(manipulator_end_1), (store_room,0), 25).
holds(1, in(manipulator_end_2), (store_room,0), 25).
holds(1, in(manipulator_limb_1), (store_room,0), 25).
holds(1, in(manipulator_limb_2), (store_room,0), 25).
holds(1, in(puzzle_room_table), (puzzle_room,1), 25).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 25).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 25).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 25).
holds(1, in(talos), (store_room,0), 25).
holds(1, in_tower((block,1),(block,1)), true, 25).
holds(1, in_tower((block,1),(block,2)), false, 25).
holds(1, in_tower((block,1),(block,3)), true, 25).
holds(1, in_tower((block,1),(block,4)), false, 25).
holds(1, in_tower((block,1),(block,5)), false, 25).
holds(1, in_tower((block,1),(block,6)), false, 25).
holds(1, in_tower((block,1),(block,7)), false, 25).
holds(1, in_tower((block,1),(block,8)), false, 25).
holds(1, in_tower((block,1),(block,9)), false, 25).
holds(1, in_tower((block,2),(block,1)), false, 25).
holds(1, in_tower((block,2),(block,2)), true, 25).
holds(1, in_tower((block,2),(block,3)), false, 25).
holds(1, in_tower((block,2),(block,4)), false, 25).
holds(1, in_tower((block,2),(block,5)), false, 25).
holds(1, in_tower((block,2),(block,6)), false, 25).
holds(1, in_tower((block,2),(block,7)), false, 25).
holds(1, in_tower((block,2),(block,8)), false, 25).
holds(1, in_tower((block,2),(block,9)), false, 25).
holds(1, in_tower((block,3),(block,1)), false, 25).
holds(1, in_tower((block,3),(block,2)), false, 25).
holds(1, in_tower((block,3),(block,3)), false, 25).
holds(1, in_tower((block,3),(block,4)), false, 25).
holds(1, in_tower((block,3),(block,5)), false, 25).
holds(1, in_tower((block,3),(block,6)), false, 25).
holds(1, in_tower((block,3),(block,7)), false, 25).
holds(1, in_tower((block,3),(block,8)), false, 25).
holds(1, in_tower((block,3),(block,9)), false, 25).
holds(1, in_tower((block,4),(block,1)), false, 25).
holds(1, in_tower((block,4),(block,2)), false, 25).
holds(1, in_tower((block,4),(block,3)), false, 25).
holds(1, in_tower((block,4),(block,4)), false, 25).
holds(1, in_tower((block,4),(block,5)), false, 25).
holds(1, in_tower((block,4),(block,6)), false, 25).
holds(1, in_tower((block,4),(block,7)), false, 25).
holds(1, in_tower((block,4),(block,8)), false, 25).
holds(1, in_tower((block,4),(block,9)), false, 25).
holds(1, in_tower((block,5),(block,1)), false, 25).
holds(1, in_tower((block,5),(block,2)), false, 25).
holds(1, in_tower((block,5),(block,3)), false, 25).
holds(1, in_tower((block,5),(block,4)), false, 25).
holds(1, in_tower((block,5),(block,5)), false, 25).
holds(1, in_tower((block,5),(block,6)), false, 25).
holds(1, in_tower((block,5),(block,7)), false, 25).
holds(1, in_tower((block,5),(block,8)), false, 25).
holds(1, in_tower((block,5),(block,9)), false, 25).
holds(1, in_tower((block,6),(block,1)), false, 25).
holds(1, in_tower((block,6),(block,2)), false, 25).
holds(1, in_tower((block,6),(block,3)), false, 25).
holds(1, in_tower((block,6),(block,4)), false, 25).
holds(1, in_tower((block,6),(block,5)), false, 25).
holds(1, in_tower((block,6),(block,6)), false, 25).
holds(1, in_tower((block,6),(block,7)), false, 25).
holds(1, in_tower((block,6),(block,8)), false, 25).
holds(1, in_tower((block,6),(block,9)), false, 25).
holds(1, in_tower((block,7),(block,1)), false, 25).
holds(1, in_tower((block,7),(block,2)), false, 25).
holds(1, in_tower((block,7),(block,3)), false, 25).
holds(1, in_tower((block,7),(block,4)), false, 25).
holds(1, in_tower((block,7),(block,5)), false, 25).
holds(1, in_tower((block,7),(block,6)), false, 25).
holds(1, in_tower((block,7),(block,7)), true, 25).
holds(1, in_tower((block,7),(block,8)), false, 25).
holds(1, in_tower((block,7),(block,9)), true, 25).
holds(1, in_tower((block,8),(block,1)), false, 25).
holds(1, in_tower((block,8),(block,2)), false, 25).
holds(1, in_tower((block,8),(block,3)), false, 25).
holds(1, in_tower((block,8),(block,4)), false, 25).
holds(1, in_tower((block,8),(block,5)), false, 25).
holds(1, in_tower((block,8),(block,6)), false, 25).
holds(1, in_tower((block,8),(block,7)), false, 25).
holds(1, in_tower((block,8),(block,8)), false, 25).
holds(1, in_tower((block,8),(block,9)), false, 25).
holds(1, in_tower((block,9),(block,1)), false, 25).
holds(1, in_tower((block,9),(block,2)), false, 25).
holds(1, in_tower((block,9),(block,3)), false, 25).
holds(1, in_tower((block,9),(block,4)), false, 25).
holds(1, in_tower((block,9),(block,5)), false, 25).
holds(1, in_tower((block,9),(block,6)), false, 25).
holds(1, in_tower((block,9),(block,7)), false, 25).
holds(1, in_tower((block,9),(block,8)), false, 25).
holds(1, in_tower((block,9),(block,9)), false, 25).
holds(1, on((block,1)), puzzle_room_table_left, 25).
holds(1, on((block,2)), puzzle_room_table_right, 25).
holds(1, on((block,3)), (block,1), 25).
holds(1, on((block,4)), nothing, 25).
holds(1, on((block,5)), nothing, 25).
holds(1, on((block,6)), nothing, 25).
holds(1, on((block,7)), puzzle_room_table_middle, 25).
holds(1, on((block,8)), nothing, 25).
holds(1, on((block,9)), (block,7), 25).
holds(1, tower_base((block,1),puzzle_room_table), true, 25).
holds(1, tower_base((block,2),puzzle_room_table), true, 25).
holds(1, tower_base((block,3),puzzle_room_table), false, 25).
holds(1, tower_base((block,4),puzzle_room_table), false, 25).
holds(1, tower_base((block,5),puzzle_room_table), false, 25).
holds(1, tower_base((block,6),puzzle_room_table), false, 25).
holds(1, tower_base((block,7),puzzle_room_table), true, 25).
holds(1, tower_base((block,8),puzzle_room_table), false, 25).
holds(1, tower_base((block,9),puzzle_room_table), false, 25).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 25).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 25).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 25).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 25).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 25).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 25).
holds(1, unordered_tower((block,7),puzzle_room_table), true, 25).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 25).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 25).
holds(2, complete_tower(blue,puzzle_room_table), false, 25).
holds(2, complete_tower(red,puzzle_room_table), false, 25).
holds(2, complete_tower(yellow,puzzle_room_table), false, 25).
holds(2, configuration(manipulator_arm_1), extended, 25).
holds(2, configuration(manipulator_arm_2), extended, 25).
holds(2, configuration(puzzle_room_door), open, 25).
holds(2, configuration(starting_room_door), closed, 25).
holds(2, configuration(store_room_door), open, 25).
holds(2, grasping(manipulator_arm_1), (block,6), 25).
holds(2, grasping(manipulator_arm_2), nothing, 25).
holds(2, in((block,1)), puzzle_room, 25).
holds(2, in((block,2)), puzzle_room, 25).
holds(2, in((block,3)), puzzle_room, 25).
holds(2, in((block,4)), store_room, 25).
holds(2, in((block,5)), store_room, 25).
holds(2, in((block,6)), store_room, 25).
holds(2, in((block,7)), puzzle_room, 25).
holds(2, in((block,8)), store_room, 25).
holds(2, in((block,9)), puzzle_room, 25).
holds(2, in(manipulator_arm_1), store_room, 25).
holds(2, in(manipulator_arm_2), store_room, 25).
holds(2, in(puzzle_room_table), puzzle_room, 25).
holds(2, in(talos), store_room, 25).
holds(2, in_tower((block,1),(block,1)), true, 25).
holds(2, in_tower((block,1),(block,2)), false, 25).
holds(2, in_tower((block,1),(block,3)), true, 25).
holds(2, in_tower((block,1),(block,4)), false, 25).
holds(2, in_tower((block,1),(block,5)), false, 25).
holds(2, in_tower((block,1),(block,6)), false, 25).
holds(2, in_tower((block,1),(block,7)), false, 25).
holds(2, in_tower((block,1),(block,8)), false, 25).
holds(2, in_tower((block,1),(block,9)), false, 25).
holds(2, in_tower((block,2),(block,1)), false, 25).
holds(2, in_tower((block,2),(block,2)), true, 25).
holds(2, in_tower((block,2),(block,3)), false, 25).
holds(2, in_tower((block,2),(block,4)), false, 25).
holds(2, in_tower((block,2),(block,5)), false, 25).
holds(2, in_tower((block,2),(block,6)), false, 25).
holds(2, in_tower((block,2),(block,7)), false, 25).
holds(2, in_tower((block,2),(block,8)), false, 25).
holds(2, in_tower((block,2),(block,9)), false, 25).
holds(2, in_tower((block,3),(block,1)), false, 25).
holds(2, in_tower((block,3),(block,2)), false, 25).
holds(2, in_tower((block,3),(block,3)), false, 25).
holds(2, in_tower((block,3),(block,4)), false, 25).
holds(2, in_tower((block,3),(block,5)), false, 25).
holds(2, in_tower((block,3),(block,6)), false, 25).
holds(2, in_tower((block,3),(block,7)), false, 25).
holds(2, in_tower((block,3),(block,8)), false, 25).
holds(2, in_tower((block,3),(block,9)), false, 25).
holds(2, in_tower((block,4),(block,1)), false, 25).
holds(2, in_tower((block,4),(block,2)), false, 25).
holds(2, in_tower((block,4),(block,3)), false, 25).
holds(2, in_tower((block,4),(block,4)), false, 25).
holds(2, in_tower((block,4),(block,5)), false, 25).
holds(2, in_tower((block,4),(block,6)), false, 25).
holds(2, in_tower((block,4),(block,7)), false, 25).
holds(2, in_tower((block,4),(block,8)), false, 25).
holds(2, in_tower((block,4),(block,9)), false, 25).
holds(2, in_tower((block,5),(block,1)), false, 25).
holds(2, in_tower((block,5),(block,2)), false, 25).
holds(2, in_tower((block,5),(block,3)), false, 25).
holds(2, in_tower((block,5),(block,4)), false, 25).
holds(2, in_tower((block,5),(block,5)), false, 25).
holds(2, in_tower((block,5),(block,6)), false, 25).
holds(2, in_tower((block,5),(block,7)), false, 25).
holds(2, in_tower((block,5),(block,8)), false, 25).
holds(2, in_tower((block,5),(block,9)), false, 25).
holds(2, in_tower((block,6),(block,1)), false, 25).
holds(2, in_tower((block,6),(block,2)), false, 25).
holds(2, in_tower((block,6),(block,3)), false, 25).
holds(2, in_tower((block,6),(block,4)), false, 25).
holds(2, in_tower((block,6),(block,5)), false, 25).
holds(2, in_tower((block,6),(block,6)), false, 25).
holds(2, in_tower((block,6),(block,7)), false, 25).
holds(2, in_tower((block,6),(block,8)), false, 25).
holds(2, in_tower((block,6),(block,9)), false, 25).
holds(2, in_tower((block,7),(block,1)), false, 25).
holds(2, in_tower((block,7),(block,2)), false, 25).
holds(2, in_tower((block,7),(block,3)), false, 25).
holds(2, in_tower((block,7),(block,4)), false, 25).
holds(2, in_tower((block,7),(block,5)), false, 25).
holds(2, in_tower((block,7),(block,6)), false, 25).
holds(2, in_tower((block,7),(block,7)), true, 25).
holds(2, in_tower((block,7),(block,8)), false, 25).
holds(2, in_tower((block,7),(block,9)), true, 25).
holds(2, in_tower((block,8),(block,1)), false, 25).
holds(2, in_tower((block,8),(block,2)), false, 25).
holds(2, in_tower((block,8),(block,3)), false, 25).
holds(2, in_tower((block,8),(block,4)), false, 25).
holds(2, in_tower((block,8),(block,5)), false, 25).
holds(2, in_tower((block,8),(block,6)), false, 25).
holds(2, in_tower((block,8),(block,7)), false, 25).
holds(2, in_tower((block,8),(block,8)), false, 25).
holds(2, in_tower((block,8),(block,9)), false, 25).
holds(2, in_tower((block,9),(block,1)), false, 25).
holds(2, in_tower((block,9),(block,2)), false, 25).
holds(2, in_tower((block,9),(block,3)), false, 25).
holds(2, in_tower((block,9),(block,4)), false, 25).
holds(2, in_tower((block,9),(block,5)), false, 25).
holds(2, in_tower((block,9),(block,6)), false, 25).
holds(2, in_tower((block,9),(block,7)), false, 25).
holds(2, in_tower((block,9),(block,8)), false, 25).
holds(2, in_tower((block,9),(block,9)), false, 25).
holds(2, on((block,1)), puzzle_room_table, 25).
holds(2, on((block,2)), puzzle_room_table, 25).
holds(2, on((block,3)), (block,1), 25).
holds(2, on((block,4)), nothing, 25).
holds(2, on((block,5)), nothing, 25).
holds(2, on((block,6)), nothing, 25).
holds(2, on((block,7)), puzzle_room_table, 25).
holds(2, on((block,8)), nothing, 25).
holds(2, on((block,9)), (block,7), 25).
holds(2, tower_base((block,1),puzzle_room_table), true, 25).
holds(2, tower_base((block,2),puzzle_room_table), true, 25).
holds(2, tower_base((block,3),puzzle_room_table), false, 25).
holds(2, tower_base((block,4),puzzle_room_table), false, 25).
holds(2, tower_base((block,5),puzzle_room_table), false, 25).
holds(2, tower_base((block,6),puzzle_room_table), false, 25).
holds(2, tower_base((block,7),puzzle_room_table), true, 25).
holds(2, tower_base((block,8),puzzle_room_table), false, 25).
holds(2, tower_base((block,9),puzzle_room_table), false, 25).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 25).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 25).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 25).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 25).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 25).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 25).
holds(2, unordered_tower((block,7),puzzle_room_table), true, 25).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 25).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 25).

[14-04-2022_17-51-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[14-04-2022_17-51-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-51-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[14-04-2022_17-51-49] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=37']

[14-04-2022_17-51-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,8))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,8)', 'I': 14})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 15})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 16})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 17})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 18})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 19})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,6),puzzle_room_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'I': 20})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 21})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 22})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,9))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,9)', 'I': 23})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,9),puzzle_room_table)', 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'I': 24})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,9))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 25})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,8),(block,9))', 'F': 'on((block,8))', 'V': '(block,9)', 'I': 26})

[14-04-2022_17-51-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-51-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 13 rules into program part base:

sub_goal(2, talos, grasp(manipulator_arm_2,(block,8)), grasping(manipulator_arm_2), (block,8), 14).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 15).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 16).
sub_goal(2, talos, move(hallway), in(talos), hallway, 17).
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 18).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 19).
sub_goal(2, talos, put(manipulator_arm_1,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 20).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 21).
sub_goal(2, talos, release(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), nothing, 22).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,9)), grasping(manipulator_arm_1), (block,9), 23).
sub_goal(2, talos, put(manipulator_arm_1,(block,9),puzzle_room_table), on((block,9)), puzzle_room_table, 24).
sub_goal(2, talos, release(manipulator_arm_1,(block,9)), grasping(manipulator_arm_1), nothing, 25).
sub_goal(2, talos, put(manipulator_arm_2,(block,8),(block,9)), on((block,8)), (block,9), 26).

[14-04-2022_17-51-49] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-51-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[14-04-2022_17-51-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=37']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A2584D94C0>]
	incrementor = SolveIncrementor(step_start=25, step_increase=1, step_increase_initial=13, step_end_min=38, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1745.4865381, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 25), range_=None), IncPart(name='plan_module', args=('#inc', 25, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 25, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 25, 14, 26, 'sequential', 'false'), range_=None)]

[14-04-2022_17-51-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-51-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-51-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-51-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1282 rules

[14-04-2022_17-51-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0067011000001002685s

[14-04-2022_17-51-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[14-04-2022_17-51-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[14-04-2022_17-51-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.040743s.

[14-04-2022_17-51-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007714s with result Satisfiable.

[14-04-2022_17-51-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[14-04-2022_17-51-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A285BDB2C0>

[14-04-2022_17-51-50] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 25)
	('last_sgoals', 26)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('first_sgoals', 14)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A285BDB2C0>)

[14-04-2022_17-51-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 25). %* None *%
#program plan_module(#inc, 25, false, false). %* None *%
#program optimisation_module(#inc, 25, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 25, 14, 26, sequential, false). %* None *%

[14-04-2022_17-51-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     24 : Current =     37
Incrementor step ends | Minimum  =     38 : Maximum =    300

[14-04-2022_17-51-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(37)]), ('state_module', [Number(25), Number(25)]), ('plan_module', [Number(25), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(25), Number(14), Number(26), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(26), Number(25)]), ('plan_module', [Number(26), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(25), Number(14), Number(26), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(27), Number(25)]), ('plan_module', [Number(27), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('conformance_module', [Number(27), Number(25), Number(14), Number(26), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(28), Number(25)]), ('plan_module', [Number(28), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('conformance_module', [Number(28), Number(25), Number(14), Number(26), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(29), Number(25)]), ('plan_module', [Number(29), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(25), Number(14), Number(26), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(30), Number(25)]), ('plan_module', [Number(30), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(25), Number(14), Number(26), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(31), Number(25)]), ('plan_module', [Number(31), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(31), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('conformance_module', [Number(31), Number(25), Number(14), Number(26), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(32), Number(25)]), ('plan_module', [Number(32), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(32), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('conformance_module', [Number(32), Number(25), Number(14), Number(26), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(33), Number(25)]), ('plan_module', [Number(33), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(33), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('conformance_module', [Number(33), Number(25), Number(14), Number(26), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(34), Number(25)]), ('plan_module', [Number(34), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(34), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(34)]), ('action_preconditions', [Number(34)]), ('variable_relations', [Number(34)]), ('abstraction_mappings', [Number(34)]), ('conformance_module', [Number(34), Number(25), Number(14), Number(26), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(35), Number(25)]), ('plan_module', [Number(35), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(35), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(35)]), ('action_preconditions', [Number(35)]), ('variable_relations', [Number(35)]), ('abstraction_mappings', [Number(35)]), ('conformance_module', [Number(35), Number(25), Number(14), Number(26), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(36), Number(25)]), ('plan_module', [Number(36), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(36), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('conformance_module', [Number(36), Number(25), Number(14), Number(26), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(37), Number(25)]), ('plan_module', [Number(37), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(37), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(37)]), ('action_preconditions', [Number(37)]), ('variable_relations', [Number(37)]), ('abstraction_mappings', [Number(37)]), ('conformance_module', [Number(37), Number(25), Number(14), Number(26), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.818579s.

[14-04-2022_17-51-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.924981s with result Satisfiable.

[14-04-2022_17-51-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.74356010000065, Incremental time limit = None
Running cumulative time = 2.74356010000065, Cumulative time limit = 1745.4865381
Used memory = (RSS = 2057.660156Mb, VMS = 2072.753906Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.818579s, Solving = 0.924981s, Total = 2.743560s, Memory = (RSS = 2057.660156Mb, VMS = 2072.753906Mb), Step range = [25-37]), Calls = 1
Final Model :: Total atoms = 15522, Cost = (-3,), Optimality proven = False, Number = 2, Thread ID = 2, Model type = ModelType.StableModel

[14-04-2022_17-51-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     37 : Current =     38
Incrementor step ends | Minimum  =     38 : Maximum =    300

[14-04-2022_17-51-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(38)]), ('state_module', [Number(38), Number(25)]), ('plan_module', [Number(38), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(38), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('conformance_module', [Number(38), Number(25), Number(14), Number(26), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.230914s.

[14-04-2022_17-51-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.046765s with result Unsatisfiable.

[14-04-2022_17-51-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2776789999998073, Incremental time limit = None
Running cumulative time = 3.0212391000004573, Cumulative time limit = 1745.4865381
Used memory = (RSS = 2063.226562Mb, VMS = 2081.496094Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     38 : Current =     39
Incrementor step ends | Minimum  =     38 : Maximum =    300

[14-04-2022_17-51-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(39)]), ('state_module', [Number(39), Number(25)]), ('plan_module', [Number(39), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(39), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(39)]), ('action_preconditions', [Number(39)]), ('variable_relations', [Number(39)]), ('abstraction_mappings', [Number(39)]), ('conformance_module', [Number(39), Number(25), Number(14), Number(26), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.222502s.

[14-04-2022_17-51-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.045980s with result Unsatisfiable.

[14-04-2022_17-51-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.26848229999995965, Incremental time limit = None
Running cumulative time = 3.289721400000417, Cumulative time limit = 1745.4865381
Used memory = (RSS = 2065.503906Mb, VMS = 2082.023438Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     39 : Current =     40
Incrementor step ends | Minimum  =     38 : Maximum =    300

[14-04-2022_17-51-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(40)]), ('state_module', [Number(40), Number(25)]), ('plan_module', [Number(40), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(40), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(40)]), ('action_preconditions', [Number(40)]), ('variable_relations', [Number(40)]), ('abstraction_mappings', [Number(40)]), ('conformance_module', [Number(40), Number(25), Number(14), Number(26), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.228203s.

[14-04-2022_17-51-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.049530s with result Unsatisfiable.

[14-04-2022_17-51-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.27773359999901004, Incremental time limit = None
Running cumulative time = 3.567454999999427, Cumulative time limit = 1745.4865381
Used memory = (RSS = 2068.050781Mb, VMS = 2082.804688Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     40 : Current =     41
Incrementor step ends | Minimum  =     38 : Maximum =    300

[14-04-2022_17-51-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(41)]), ('state_module', [Number(41), Number(25)]), ('plan_module', [Number(41), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(41), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(41)]), ('action_preconditions', [Number(41)]), ('variable_relations', [Number(41)]), ('abstraction_mappings', [Number(41)]), ('conformance_module', [Number(41), Number(25), Number(14), Number(26), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.232483s.

[14-04-2022_17-51-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.051951s with result Unsatisfiable.

[14-04-2022_17-51-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2844342999997025, Incremental time limit = None
Running cumulative time = 3.8518892999991294, Cumulative time limit = 1745.4865381
Used memory = (RSS = 2070.472656Mb, VMS = 2083.335938Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     41 : Current =     42
Incrementor step ends | Minimum  =     38 : Maximum =    300

[14-04-2022_17-51-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(42)]), ('state_module', [Number(42), Number(25)]), ('plan_module', [Number(42), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(42), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('conformance_module', [Number(42), Number(25), Number(14), Number(26), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.239281s.

[14-04-2022_17-51-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.062186s with result Unsatisfiable.

[14-04-2022_17-51-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.30146719999993365, Incremental time limit = None
Running cumulative time = 4.153356499999063, Cumulative time limit = 1745.4865381
Used memory = (RSS = 2073.058594Mb, VMS = 2084.566406Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     42 : Current =     43
Incrementor step ends | Minimum  =     38 : Maximum =    300

[14-04-2022_17-51-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(43)]), ('state_module', [Number(43), Number(25)]), ('plan_module', [Number(43), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(43), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(43)]), ('action_preconditions', [Number(43)]), ('variable_relations', [Number(43)]), ('abstraction_mappings', [Number(43)]), ('conformance_module', [Number(43), Number(25), Number(14), Number(26), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.243935s.

[14-04-2022_17-51-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.079058s with result Unsatisfiable.

[14-04-2022_17-51-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3229929999997694, Incremental time limit = None
Running cumulative time = 4.4763494999988325, Cumulative time limit = 1745.4865381
Used memory = (RSS = 2075.164062Mb, VMS = 2085.617188Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     43 : Current =     44
Incrementor step ends | Minimum  =     38 : Maximum =    300

[14-04-2022_17-51-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(44)]), ('state_module', [Number(44), Number(25)]), ('plan_module', [Number(44), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(44), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(44)]), ('action_preconditions', [Number(44)]), ('variable_relations', [Number(44)]), ('abstraction_mappings', [Number(44)]), ('conformance_module', [Number(44), Number(25), Number(14), Number(26), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.247333s.

[14-04-2022_17-51-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.159812s with result Satisfiable.

[14-04-2022_17-51-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4071450999999797, Incremental time limit = None
Running cumulative time = 4.883494599998812, Cumulative time limit = 1745.4865381
Used memory = (RSS = 2091.964844Mb, VMS = 2119.023438Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.463231s, Solving = 1.420264s, Total = 4.883495s, Memory = (RSS = 2091.964844Mb, VMS = 2119.023438Mb), Step range = [25-44]), Calls = 8
Final Model :: Total atoms = 20687, Cost = (-3,), Optimality proven = False, Number = 2, Thread ID = 4, Model type = ModelType.StableModel

[14-04-2022_17-51-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 1.818579s, Solving = 0.924981s, Total = 2.743560s, Memory = (RSS = 2057.660156Mb, VMS = 2072.753906Mb), Step range = [25-37]
2 : Statistics :: Grounding = 0.230914s, Solving = 0.046765s, Total = 0.277679s, Memory = (RSS = 2063.226562Mb, VMS = 2081.496094Mb), Step range = [38-38]
3 : Statistics :: Grounding = 0.222502s, Solving = 0.045980s, Total = 0.268482s, Memory = (RSS = 2065.503906Mb, VMS = 2082.023438Mb), Step range = [39-39]
4 : Statistics :: Grounding = 0.228203s, Solving = 0.049530s, Total = 0.277734s, Memory = (RSS = 2068.050781Mb, VMS = 2082.804688Mb), Step range = [40-40]
5 : Statistics :: Grounding = 0.232483s, Solving = 0.051951s, Total = 0.284434s, Memory = (RSS = 2070.472656Mb, VMS = 2083.335938Mb), Step range = [41-41]
6 : Statistics :: Grounding = 0.239281s, Solving = 0.062186s, Total = 0.301467s, Memory = (RSS = 2073.058594Mb, VMS = 2084.566406Mb), Step range = [42-42]
7 : Statistics :: Grounding = 0.243935s, Solving = 0.079058s, Total = 0.322993s, Memory = (RSS = 2075.164062Mb, VMS = 2085.617188Mb), Step range = [43-43]
8 : Statistics :: Grounding = 0.247333s, Solving = 0.159812s, Total = 0.407145s, Memory = (RSS = 2091.964844Mb, VMS = 2119.023438Mb), Step range = [44-44]

[14-04-2022_17-51-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 4.883495s due to: Stop condition reached.

[14-04-2022_17-51-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[14-04-2022_17-51-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[14-04-2022_17-51-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-51-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-51-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[14-04-2022_17-51-55] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 6, 23: 7, 24: 8, 25: 9, 26: 10}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 22, 7: 23, 8: 24, 9: 25, 10: 26}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 7, 16: 8, 17: 9, 18: 9, 19: 10, 20: 10, 21: 11, 22: 12, 23: 13, 24: 14, 25: 15, 26: 15, 27: 16, 28: 16, 29: 16, 30: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 15, 8: 16, 9: 18, 10: 20, 11: 21, 12: 22, 13: 23, 14: 24, 15: 26, 16: 29, 17: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-51-55] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 14, 27: 14, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 20, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25, 14: 28, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 38, 21: 39, 22: 40, 23: 41, 24: 42, 25: 43, 26: 44}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 6, 23: 7, 24: 8, 25: 9, 26: 10}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 22, 7: 23, 8: 24, 9: 25, 10: 26}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 7, 16: 8, 17: 9, 18: 9, 19: 10, 20: 10, 21: 11, 22: 12, 23: 13, 24: 14, 25: 15, 26: 15, 27: 16, 28: 16, 29: 16, 30: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 15, 8: 16, 9: 18, 10: 20, 11: 21, 12: 22, 13: 23, 14: 24, 15: 26, 16: 29, 17: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-51-55] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 26, Last requested goal index = 26, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[14-04-2022_17-51-55] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.463231s, Solving = 1.420264s, Total = 4.883495s, Memory = (RSS = 2091.964844Mb, VMS = 2119.023438Mb), Step range = [25-44]), Calls = 8
Model :: Total atoms = 20687, Cost = (-3,), Optimality proven = False, Number = 2, Thread ID = 4, Model type = ModelType.StableModel

[14-04-2022_17-51-55] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 19 :: Actions = 19                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 25:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 26:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,8)))
Step 27:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 28:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,8))
Step 29:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 30:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : move((store_room,1))
Step 31:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 37:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 38:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 39:
    Current Sub-goals:
        [Index = 21] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 21] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 40:
    Current Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,9)))
Step 41:
    Current Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Achieved Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,9))
Step 42:
    Current Sub-goals:
        [Index = 24] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 24] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,9),puzzle_room_table_middle)
Step 43:
    Current Sub-goals:
        [Index = 25] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 25] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,9))
Step 44:
    Current Sub-goals:
        [Index = 26] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Achieved Sub-goals:
        [Index = 26] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Planned actions:
        talos : put(manipulator_end_2,(block,8),(block,9))

[14-04-2022_17-51-55] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[14-04-2022_17-51-55] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[14-04-2022_17-51-55] DEBUG :: ASH Planner Main #1 >> Monolevel problem 2 at level 1 solved.

[14-04-2022_17-51-55] DEBUG :: ASH Planner Main #1 >> Online planning increment 2 finished.

[14-04-2022_17-51-55] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 17 : Goals achieved = 17 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 1 : Total constraining sub-goal stages = 30 : Goals achieved = 10 : Goals unachieved = 20 : Complete = False
Level = 1 : Solved problems = 2 : Total constraining sub-goal stages = 26 : Goals achieved = 26 : Goals unachieved = 0 : Complete = False

[14-04-2022_17-51-55] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 2, Highest = 2.

[14-04-2022_17-51-55] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 3 by method ground-first is [1-2].

[14-04-2022_17-51-55] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning problem 2 at level 2:
Total Templated Partial Problems = 3, Problem Range = [1-3], Size = 30, Sub-goal Stage Range = [1-30]
Division points [total=2] : [(Index = 10, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 20, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[14-04-2022_17-51-55] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [11-20]

[14-04-2022_17-51-55] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 26, chosen step range to extract = range(0, 27)

[14-04-2022_17-51-55] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 26, Total actions = 26, Produced sub-goal stages = 26, Produced sub-goal literals = 26
Level [1]: Length = 44, Total actions = 44, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-51-55] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 30, chosen step range to extract = range(0, 31)

[14-04-2022_17-51-55] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 26, Total actions = 26, Produced sub-goal stages = 26, Produced sub-goal literals = 26
Level [1]: Length = 44, Total actions = 44, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-51-55] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[14-04-2022_17-51-55] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 26, Total actions = 26, Produced sub-goal stages = 26, Produced sub-goal literals = 26
Level [1]: Length = 44, Total actions = 44, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-51-55] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [11-20], problem number = 2, increment number = 3

[14-04-2022_17-51-55] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 11)
	('last_sgoals', 20)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1752.7370629999996)
	('length_limit', 300)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[14-04-2022_17-51-55] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 2] partial conformance refinement (sequential) with sgoals range [11-20] : Concurrency disabled : Minimum search length bound enabled with value 35

[14-04-2022_17-51-55] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 11
last_sgoals = 20
start_step = 26
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 35

[14-04-2022_17-51-55] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[14-04-2022_17-51-55] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[14-04-2022_17-51-55] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[14-04-2022_17-51-55] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[14-04-2022_17-51-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[14-04-2022_17-51-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[14-04-2022_17-51-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-51-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-51-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-51-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-51-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[14-04-2022_17-51-55] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-51-55] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 26 as problem start state.

[14-04-2022_17-51-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 26})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 26})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 26})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 26})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 26})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 26})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,8)', 'S': 26})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 26})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 26})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 26})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 26})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 26})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 26})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 26})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'puzzle_room', 'S': 26})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 26})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 26})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 26})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 26})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'S': 26})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 26})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 26})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 26})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 26})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 26})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 26})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 26})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 26})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'S': 26})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 26})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 26})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 26})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 26})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 26})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 26})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 26})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 26})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 26})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,8)', 'S': 26})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 26})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 26})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 26})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 26})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 26})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 26})
Fluent({'L': 3, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 26})
Fluent({'L': 3, 'F': 'in((block,8))', 'V': 'puzzle_room', 'S': 26})
Fluent({'L': 3, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 26})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 26})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 26})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 26})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'S': 26})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 26})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 26})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 26})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 26})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 26})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 26})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 26})
Fluent({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 26})
Fluent({'L': 3, 'F': 'on((block,8))', 'V': '(block,9)', 'S': 26})
Fluent({'L': 3, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 26})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 26})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 26})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 26})
Fluent({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 26})
Fluent({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 26})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 26})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 26})
Fluent({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 26})

[14-04-2022_17-51-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-51-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 257 rules into program part ash_initial_state:

holds(2, complete_tower(blue,puzzle_room_table), false, 26).
holds(2, complete_tower(red,puzzle_room_table), false, 26).
holds(2, complete_tower(yellow,puzzle_room_table), false, 26).
holds(2, configuration(manipulator_arm_1), extended, 26).
holds(2, configuration(manipulator_arm_2), extended, 26).
holds(2, configuration(puzzle_room_door), open, 26).
holds(2, configuration(starting_room_door), closed, 26).
holds(2, configuration(store_room_door), open, 26).
holds(2, grasping(manipulator_arm_1), nothing, 26).
holds(2, grasping(manipulator_arm_2), (block,8), 26).
holds(2, in((block,1)), puzzle_room, 26).
holds(2, in((block,2)), puzzle_room, 26).
holds(2, in((block,3)), puzzle_room, 26).
holds(2, in((block,4)), store_room, 26).
holds(2, in((block,5)), store_room, 26).
holds(2, in((block,6)), puzzle_room, 26).
holds(2, in((block,7)), puzzle_room, 26).
holds(2, in((block,8)), puzzle_room, 26).
holds(2, in((block,9)), puzzle_room, 26).
holds(2, in(manipulator_arm_1), puzzle_room, 26).
holds(2, in(manipulator_arm_2), puzzle_room, 26).
holds(2, in(puzzle_room_table), puzzle_room, 26).
holds(2, in(talos), puzzle_room, 26).
holds(2, in_tower((block,1),(block,1)), true, 26).
holds(2, in_tower((block,1),(block,2)), false, 26).
holds(2, in_tower((block,1),(block,3)), true, 26).
holds(2, in_tower((block,1),(block,4)), false, 26).
holds(2, in_tower((block,1),(block,5)), false, 26).
holds(2, in_tower((block,1),(block,6)), false, 26).
holds(2, in_tower((block,1),(block,7)), false, 26).
holds(2, in_tower((block,1),(block,8)), false, 26).
holds(2, in_tower((block,1),(block,9)), false, 26).
holds(2, in_tower((block,2),(block,1)), false, 26).
holds(2, in_tower((block,2),(block,2)), true, 26).
holds(2, in_tower((block,2),(block,3)), false, 26).
holds(2, in_tower((block,2),(block,4)), false, 26).
holds(2, in_tower((block,2),(block,5)), false, 26).
holds(2, in_tower((block,2),(block,6)), false, 26).
holds(2, in_tower((block,2),(block,7)), false, 26).
holds(2, in_tower((block,2),(block,8)), false, 26).
holds(2, in_tower((block,2),(block,9)), false, 26).
holds(2, in_tower((block,3),(block,1)), false, 26).
holds(2, in_tower((block,3),(block,2)), false, 26).
holds(2, in_tower((block,3),(block,3)), false, 26).
holds(2, in_tower((block,3),(block,4)), false, 26).
holds(2, in_tower((block,3),(block,5)), false, 26).
holds(2, in_tower((block,3),(block,6)), false, 26).
holds(2, in_tower((block,3),(block,7)), false, 26).
holds(2, in_tower((block,3),(block,8)), false, 26).
holds(2, in_tower((block,3),(block,9)), false, 26).
holds(2, in_tower((block,4),(block,1)), false, 26).
holds(2, in_tower((block,4),(block,2)), false, 26).
holds(2, in_tower((block,4),(block,3)), false, 26).
holds(2, in_tower((block,4),(block,4)), false, 26).
holds(2, in_tower((block,4),(block,5)), false, 26).
holds(2, in_tower((block,4),(block,6)), false, 26).
holds(2, in_tower((block,4),(block,7)), false, 26).
holds(2, in_tower((block,4),(block,8)), false, 26).
holds(2, in_tower((block,4),(block,9)), false, 26).
holds(2, in_tower((block,5),(block,1)), false, 26).
holds(2, in_tower((block,5),(block,2)), false, 26).
holds(2, in_tower((block,5),(block,3)), false, 26).
holds(2, in_tower((block,5),(block,4)), false, 26).
holds(2, in_tower((block,5),(block,5)), false, 26).
holds(2, in_tower((block,5),(block,6)), false, 26).
holds(2, in_tower((block,5),(block,7)), false, 26).
holds(2, in_tower((block,5),(block,8)), false, 26).
holds(2, in_tower((block,5),(block,9)), false, 26).
holds(2, in_tower((block,6),(block,1)), false, 26).
holds(2, in_tower((block,6),(block,2)), false, 26).
holds(2, in_tower((block,6),(block,3)), false, 26).
holds(2, in_tower((block,6),(block,4)), false, 26).
holds(2, in_tower((block,6),(block,5)), false, 26).
holds(2, in_tower((block,6),(block,6)), true, 26).
holds(2, in_tower((block,6),(block,7)), false, 26).
holds(2, in_tower((block,6),(block,8)), false, 26).
holds(2, in_tower((block,6),(block,9)), false, 26).
holds(2, in_tower((block,7),(block,1)), false, 26).
holds(2, in_tower((block,7),(block,2)), false, 26).
holds(2, in_tower((block,7),(block,3)), false, 26).
holds(2, in_tower((block,7),(block,4)), false, 26).
holds(2, in_tower((block,7),(block,5)), false, 26).
holds(2, in_tower((block,7),(block,6)), false, 26).
holds(2, in_tower((block,7),(block,7)), true, 26).
holds(2, in_tower((block,7),(block,8)), false, 26).
holds(2, in_tower((block,7),(block,9)), false, 26).
holds(2, in_tower((block,8),(block,1)), false, 26).
holds(2, in_tower((block,8),(block,2)), false, 26).
holds(2, in_tower((block,8),(block,3)), false, 26).
holds(2, in_tower((block,8),(block,4)), false, 26).
holds(2, in_tower((block,8),(block,5)), false, 26).
holds(2, in_tower((block,8),(block,6)), false, 26).
holds(2, in_tower((block,8),(block,7)), false, 26).
holds(2, in_tower((block,8),(block,8)), false, 26).
holds(2, in_tower((block,8),(block,9)), false, 26).
holds(2, in_tower((block,9),(block,1)), false, 26).
holds(2, in_tower((block,9),(block,2)), false, 26).
holds(2, in_tower((block,9),(block,3)), false, 26).
holds(2, in_tower((block,9),(block,4)), false, 26).
holds(2, in_tower((block,9),(block,5)), false, 26).
holds(2, in_tower((block,9),(block,6)), false, 26).
holds(2, in_tower((block,9),(block,7)), false, 26).
holds(2, in_tower((block,9),(block,8)), true, 26).
holds(2, in_tower((block,9),(block,9)), true, 26).
holds(2, on((block,1)), puzzle_room_table, 26).
holds(2, on((block,2)), puzzle_room_table, 26).
holds(2, on((block,3)), (block,1), 26).
holds(2, on((block,4)), nothing, 26).
holds(2, on((block,5)), nothing, 26).
holds(2, on((block,6)), puzzle_room_table, 26).
holds(2, on((block,7)), puzzle_room_table, 26).
holds(2, on((block,8)), (block,9), 26).
holds(2, on((block,9)), puzzle_room_table, 26).
holds(2, tower_base((block,1),puzzle_room_table), true, 26).
holds(2, tower_base((block,2),puzzle_room_table), true, 26).
holds(2, tower_base((block,3),puzzle_room_table), false, 26).
holds(2, tower_base((block,4),puzzle_room_table), false, 26).
holds(2, tower_base((block,5),puzzle_room_table), false, 26).
holds(2, tower_base((block,6),puzzle_room_table), true, 26).
holds(2, tower_base((block,7),puzzle_room_table), true, 26).
holds(2, tower_base((block,8),puzzle_room_table), false, 26).
holds(2, tower_base((block,9),puzzle_room_table), true, 26).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 26).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 26).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 26).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 26).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 26).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 26).
holds(2, unordered_tower((block,7),puzzle_room_table), false, 26).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 26).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 26).
holds(3, complete_tower(blue,puzzle_room_table), false, 26).
holds(3, complete_tower(red,puzzle_room_table), false, 26).
holds(3, complete_tower(yellow,puzzle_room_table), false, 26).
holds(3, grasping(manipulator_arm_1), nothing, 26).
holds(3, grasping(manipulator_arm_2), (block,8), 26).
holds(3, in((block,1)), puzzle_room, 26).
holds(3, in((block,2)), puzzle_room, 26).
holds(3, in((block,3)), puzzle_room, 26).
holds(3, in((block,4)), store_room, 26).
holds(3, in((block,5)), store_room, 26).
holds(3, in((block,6)), puzzle_room, 26).
holds(3, in((block,7)), puzzle_room, 26).
holds(3, in((block,8)), puzzle_room, 26).
holds(3, in((block,9)), puzzle_room, 26).
holds(3, in(manipulator_arm_1), puzzle_room, 26).
holds(3, in(manipulator_arm_2), puzzle_room, 26).
holds(3, in(puzzle_room_table), puzzle_room, 26).
holds(3, in(talos), puzzle_room, 26).
holds(3, in_tower((block,1),(block,1)), true, 26).
holds(3, in_tower((block,1),(block,2)), false, 26).
holds(3, in_tower((block,1),(block,3)), true, 26).
holds(3, in_tower((block,1),(block,4)), false, 26).
holds(3, in_tower((block,1),(block,5)), false, 26).
holds(3, in_tower((block,1),(block,6)), false, 26).
holds(3, in_tower((block,1),(block,7)), false, 26).
holds(3, in_tower((block,1),(block,8)), false, 26).
holds(3, in_tower((block,1),(block,9)), false, 26).
holds(3, in_tower((block,2),(block,1)), false, 26).
holds(3, in_tower((block,2),(block,2)), true, 26).
holds(3, in_tower((block,2),(block,3)), false, 26).
holds(3, in_tower((block,2),(block,4)), false, 26).
holds(3, in_tower((block,2),(block,5)), false, 26).
holds(3, in_tower((block,2),(block,6)), false, 26).
holds(3, in_tower((block,2),(block,7)), false, 26).
holds(3, in_tower((block,2),(block,8)), false, 26).
holds(3, in_tower((block,2),(block,9)), false, 26).
holds(3, in_tower((block,3),(block,1)), false, 26).
holds(3, in_tower((block,3),(block,2)), false, 26).
holds(3, in_tower((block,3),(block,3)), false, 26).
holds(3, in_tower((block,3),(block,4)), false, 26).
holds(3, in_tower((block,3),(block,5)), false, 26).
holds(3, in_tower((block,3),(block,6)), false, 26).
holds(3, in_tower((block,3),(block,7)), false, 26).
holds(3, in_tower((block,3),(block,8)), false, 26).
holds(3, in_tower((block,3),(block,9)), false, 26).
holds(3, in_tower((block,4),(block,1)), false, 26).
holds(3, in_tower((block,4),(block,2)), false, 26).
holds(3, in_tower((block,4),(block,3)), false, 26).
holds(3, in_tower((block,4),(block,4)), false, 26).
holds(3, in_tower((block,4),(block,5)), false, 26).
holds(3, in_tower((block,4),(block,6)), false, 26).
holds(3, in_tower((block,4),(block,7)), false, 26).
holds(3, in_tower((block,4),(block,8)), false, 26).
holds(3, in_tower((block,4),(block,9)), false, 26).
holds(3, in_tower((block,5),(block,1)), false, 26).
holds(3, in_tower((block,5),(block,2)), false, 26).
holds(3, in_tower((block,5),(block,3)), false, 26).
holds(3, in_tower((block,5),(block,4)), false, 26).
holds(3, in_tower((block,5),(block,5)), false, 26).
holds(3, in_tower((block,5),(block,6)), false, 26).
holds(3, in_tower((block,5),(block,7)), false, 26).
holds(3, in_tower((block,5),(block,8)), false, 26).
holds(3, in_tower((block,5),(block,9)), false, 26).
holds(3, in_tower((block,6),(block,1)), false, 26).
holds(3, in_tower((block,6),(block,2)), false, 26).
holds(3, in_tower((block,6),(block,3)), false, 26).
holds(3, in_tower((block,6),(block,4)), false, 26).
holds(3, in_tower((block,6),(block,5)), false, 26).
holds(3, in_tower((block,6),(block,6)), true, 26).
holds(3, in_tower((block,6),(block,7)), false, 26).
holds(3, in_tower((block,6),(block,8)), false, 26).
holds(3, in_tower((block,6),(block,9)), false, 26).
holds(3, in_tower((block,7),(block,1)), false, 26).
holds(3, in_tower((block,7),(block,2)), false, 26).
holds(3, in_tower((block,7),(block,3)), false, 26).
holds(3, in_tower((block,7),(block,4)), false, 26).
holds(3, in_tower((block,7),(block,5)), false, 26).
holds(3, in_tower((block,7),(block,6)), false, 26).
holds(3, in_tower((block,7),(block,7)), true, 26).
holds(3, in_tower((block,7),(block,8)), false, 26).
holds(3, in_tower((block,7),(block,9)), false, 26).
holds(3, in_tower((block,8),(block,1)), false, 26).
holds(3, in_tower((block,8),(block,2)), false, 26).
holds(3, in_tower((block,8),(block,3)), false, 26).
holds(3, in_tower((block,8),(block,4)), false, 26).
holds(3, in_tower((block,8),(block,5)), false, 26).
holds(3, in_tower((block,8),(block,6)), false, 26).
holds(3, in_tower((block,8),(block,7)), false, 26).
holds(3, in_tower((block,8),(block,8)), false, 26).
holds(3, in_tower((block,8),(block,9)), false, 26).
holds(3, in_tower((block,9),(block,1)), false, 26).
holds(3, in_tower((block,9),(block,2)), false, 26).
holds(3, in_tower((block,9),(block,3)), false, 26).
holds(3, in_tower((block,9),(block,4)), false, 26).
holds(3, in_tower((block,9),(block,5)), false, 26).
holds(3, in_tower((block,9),(block,6)), false, 26).
holds(3, in_tower((block,9),(block,7)), false, 26).
holds(3, in_tower((block,9),(block,8)), true, 26).
holds(3, in_tower((block,9),(block,9)), true, 26).
holds(3, on((block,1)), puzzle_room_table, 26).
holds(3, on((block,2)), puzzle_room_table, 26).
holds(3, on((block,3)), (block,1), 26).
holds(3, on((block,4)), nothing, 26).
holds(3, on((block,5)), nothing, 26).
holds(3, on((block,6)), puzzle_room_table, 26).
holds(3, on((block,7)), puzzle_room_table, 26).
holds(3, on((block,8)), (block,9), 26).
holds(3, on((block,9)), puzzle_room_table, 26).
holds(3, tower_base((block,1),puzzle_room_table), true, 26).
holds(3, tower_base((block,2),puzzle_room_table), true, 26).
holds(3, tower_base((block,3),puzzle_room_table), false, 26).
holds(3, tower_base((block,4),puzzle_room_table), false, 26).
holds(3, tower_base((block,5),puzzle_room_table), false, 26).
holds(3, tower_base((block,6),puzzle_room_table), true, 26).
holds(3, tower_base((block,7),puzzle_room_table), true, 26).
holds(3, tower_base((block,8),puzzle_room_table), false, 26).
holds(3, tower_base((block,9),puzzle_room_table), true, 26).
holds(3, unordered_tower((block,1),puzzle_room_table), true, 26).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 26).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 26).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 26).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 26).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 26).
holds(3, unordered_tower((block,7),puzzle_room_table), false, 26).
holds(3, unordered_tower((block,8),puzzle_room_table), false, 26).
holds(3, unordered_tower((block,9),puzzle_room_table), false, 26).

[14-04-2022_17-51-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[14-04-2022_17-51-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-51-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 588 rules into program part ash_goal_state:

final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(3, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,1),(block,7)), false, true).
final_goal(3, in_tower((block,1),(block,7)), true, false).
final_goal(3, in_tower((block,1),(block,8)), false, true).
final_goal(3, in_tower((block,1),(block,8)), true, false).
final_goal(3, in_tower((block,1),(block,9)), false, true).
final_goal(3, in_tower((block,1),(block,9)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,7)), false, true).
final_goal(3, in_tower((block,2),(block,7)), true, false).
final_goal(3, in_tower((block,2),(block,8)), false, true).
final_goal(3, in_tower((block,2),(block,8)), true, false).
final_goal(3, in_tower((block,2),(block,9)), false, true).
final_goal(3, in_tower((block,2),(block,9)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,7)), false, true).
final_goal(3, in_tower((block,3),(block,7)), true, false).
final_goal(3, in_tower((block,3),(block,8)), false, true).
final_goal(3, in_tower((block,3),(block,8)), true, false).
final_goal(3, in_tower((block,3),(block,9)), false, true).
final_goal(3, in_tower((block,3),(block,9)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,7)), false, true).
final_goal(3, in_tower((block,4),(block,7)), true, false).
final_goal(3, in_tower((block,4),(block,8)), false, true).
final_goal(3, in_tower((block,4),(block,8)), true, false).
final_goal(3, in_tower((block,4),(block,9)), false, true).
final_goal(3, in_tower((block,4),(block,9)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,7)), false, true).
final_goal(3, in_tower((block,5),(block,7)), true, false).
final_goal(3, in_tower((block,5),(block,8)), false, true).
final_goal(3, in_tower((block,5),(block,8)), true, false).
final_goal(3, in_tower((block,5),(block,9)), false, true).
final_goal(3, in_tower((block,5),(block,9)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, in_tower((block,6),(block,7)), false, true).
final_goal(3, in_tower((block,6),(block,7)), true, false).
final_goal(3, in_tower((block,6),(block,8)), false, true).
final_goal(3, in_tower((block,6),(block,8)), true, false).
final_goal(3, in_tower((block,6),(block,9)), false, true).
final_goal(3, in_tower((block,6),(block,9)), true, false).
final_goal(3, in_tower((block,7),(block,1)), false, true).
final_goal(3, in_tower((block,7),(block,1)), true, false).
final_goal(3, in_tower((block,7),(block,2)), false, true).
final_goal(3, in_tower((block,7),(block,2)), true, false).
final_goal(3, in_tower((block,7),(block,3)), false, true).
final_goal(3, in_tower((block,7),(block,3)), true, false).
final_goal(3, in_tower((block,7),(block,4)), false, true).
final_goal(3, in_tower((block,7),(block,4)), true, false).
final_goal(3, in_tower((block,7),(block,5)), false, true).
final_goal(3, in_tower((block,7),(block,5)), true, false).
final_goal(3, in_tower((block,7),(block,6)), false, true).
final_goal(3, in_tower((block,7),(block,6)), true, false).
final_goal(3, in_tower((block,7),(block,7)), false, true).
final_goal(3, in_tower((block,7),(block,7)), true, false).
final_goal(3, in_tower((block,7),(block,8)), false, true).
final_goal(3, in_tower((block,7),(block,8)), true, false).
final_goal(3, in_tower((block,7),(block,9)), false, true).
final_goal(3, in_tower((block,7),(block,9)), true, false).
final_goal(3, in_tower((block,8),(block,1)), false, true).
final_goal(3, in_tower((block,8),(block,1)), true, false).
final_goal(3, in_tower((block,8),(block,2)), false, true).
final_goal(3, in_tower((block,8),(block,2)), true, false).
final_goal(3, in_tower((block,8),(block,3)), false, true).
final_goal(3, in_tower((block,8),(block,3)), true, false).
final_goal(3, in_tower((block,8),(block,4)), false, true).
final_goal(3, in_tower((block,8),(block,4)), true, false).
final_goal(3, in_tower((block,8),(block,5)), false, true).
final_goal(3, in_tower((block,8),(block,5)), true, false).
final_goal(3, in_tower((block,8),(block,6)), false, true).
final_goal(3, in_tower((block,8),(block,6)), true, false).
final_goal(3, in_tower((block,8),(block,7)), false, true).
final_goal(3, in_tower((block,8),(block,7)), true, false).
final_goal(3, in_tower((block,8),(block,8)), false, true).
final_goal(3, in_tower((block,8),(block,8)), true, false).
final_goal(3, in_tower((block,8),(block,9)), false, true).
final_goal(3, in_tower((block,8),(block,9)), true, false).
final_goal(3, in_tower((block,9),(block,1)), false, true).
final_goal(3, in_tower((block,9),(block,1)), true, false).
final_goal(3, in_tower((block,9),(block,2)), false, true).
final_goal(3, in_tower((block,9),(block,2)), true, false).
final_goal(3, in_tower((block,9),(block,3)), false, true).
final_goal(3, in_tower((block,9),(block,3)), true, false).
final_goal(3, in_tower((block,9),(block,4)), false, true).
final_goal(3, in_tower((block,9),(block,4)), true, false).
final_goal(3, in_tower((block,9),(block,5)), false, true).
final_goal(3, in_tower((block,9),(block,5)), true, false).
final_goal(3, in_tower((block,9),(block,6)), false, true).
final_goal(3, in_tower((block,9),(block,6)), true, false).
final_goal(3, in_tower((block,9),(block,7)), false, false).
final_goal(3, in_tower((block,9),(block,7)), true, true).
final_goal(3, in_tower((block,9),(block,8)), false, false).
final_goal(3, in_tower((block,9),(block,8)), true, true).
final_goal(3, in_tower((block,9),(block,9)), false, false).
final_goal(3, in_tower((block,9),(block,9)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), (block,7), false).
final_goal(3, on((block,1)), (block,8), false).
final_goal(3, on((block,1)), (block,9), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), (block,7), false).
final_goal(3, on((block,2)), (block,8), false).
final_goal(3, on((block,2)), (block,9), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), (block,7), false).
final_goal(3, on((block,3)), (block,8), false).
final_goal(3, on((block,3)), (block,9), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), (block,7), false).
final_goal(3, on((block,4)), (block,8), false).
final_goal(3, on((block,4)), (block,9), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), (block,7), false).
final_goal(3, on((block,5)), (block,8), false).
final_goal(3, on((block,5)), (block,9), false).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), (block,7), false).
final_goal(3, on((block,6)), (block,8), false).
final_goal(3, on((block,6)), (block,9), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, on((block,7)), (block,1), false).
final_goal(3, on((block,7)), (block,2), false).
final_goal(3, on((block,7)), (block,3), false).
final_goal(3, on((block,7)), (block,4), false).
final_goal(3, on((block,7)), (block,5), false).
final_goal(3, on((block,7)), (block,6), false).
final_goal(3, on((block,7)), (block,8), true).
final_goal(3, on((block,7)), (block,9), false).
final_goal(3, on((block,7)), nothing, false).
final_goal(3, on((block,7)), puzzle_room_table, false).
final_goal(3, on((block,8)), (block,1), false).
final_goal(3, on((block,8)), (block,2), false).
final_goal(3, on((block,8)), (block,3), false).
final_goal(3, on((block,8)), (block,4), false).
final_goal(3, on((block,8)), (block,5), false).
final_goal(3, on((block,8)), (block,6), false).
final_goal(3, on((block,8)), (block,7), false).
final_goal(3, on((block,8)), (block,9), true).
final_goal(3, on((block,8)), nothing, false).
final_goal(3, on((block,8)), puzzle_room_table, false).
final_goal(3, on((block,9)), (block,1), false).
final_goal(3, on((block,9)), (block,2), false).
final_goal(3, on((block,9)), (block,3), false).
final_goal(3, on((block,9)), (block,4), false).
final_goal(3, on((block,9)), (block,5), false).
final_goal(3, on((block,9)), (block,6), false).
final_goal(3, on((block,9)), (block,7), false).
final_goal(3, on((block,9)), (block,8), false).
final_goal(3, on((block,9)), nothing, false).
final_goal(3, on((block,9)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, tower_base((block,7),puzzle_room_table), false, true).
final_goal(3, tower_base((block,7),puzzle_room_table), true, false).
final_goal(3, tower_base((block,8),puzzle_room_table), false, true).
final_goal(3, tower_base((block,8),puzzle_room_table), true, false).
final_goal(3, tower_base((block,9),puzzle_room_table), false, false).
final_goal(3, tower_base((block,9),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,9),puzzle_room_table), true, false).

[14-04-2022_17-51-55] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=35']

[14-04-2022_17-51-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,8))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 11})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,7))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,7)', 'I': 12})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,7),(block,8))', 'F': 'on((block,7))', 'V': '(block,8)', 'I': 13})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'I': 14})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,7))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 15})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 16})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,2)', 'I': 17})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 18})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 19})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 20})

[14-04-2022_17-51-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-51-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 10 rules into program part base:

sub_goal(3, talos, release(manipulator_arm_2,(block,8)), grasping(manipulator_arm_2), nothing, 11).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,7)), grasping(manipulator_arm_2), (block,7), 12).
sub_goal(3, talos, put(manipulator_arm_2,(block,7),(block,8)), on((block,7)), (block,8), 13).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 14).
sub_goal(3, talos, release(manipulator_arm_2,(block,7)), grasping(manipulator_arm_2), nothing, 15).
sub_goal(3, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 16).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), (block,2), 17).
sub_goal(3, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 18).
sub_goal(3, talos, put(manipulator_arm_2,(block,2),(block,3)), on((block,2)), (block,3), 19).
sub_goal(3, talos, release(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), nothing, 20).

[14-04-2022_17-51-55] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-51-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[14-04-2022_17-51-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=35']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A2584D9160>]
	incrementor = SolveIncrementor(step_start=26, step_increase=1, step_increase_initial=10, step_end_min=36, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1752.7370629999996, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 26), range_=None), IncPart(name='plan_module', args=('#inc', 26, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 26, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 26, 11, 20, 'sequential', 'false'), range_=None)]

[14-04-2022_17-51-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-51-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-51-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-51-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1245 rules

[14-04-2022_17-51-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006558099999892875s

[14-04-2022_17-51-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[14-04-2022_17-51-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[14-04-2022_17-51-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.034425s.

[14-04-2022_17-51-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005868s with result Satisfiable.

[14-04-2022_17-51-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[14-04-2022_17-51-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A28614BCC0>

[14-04-2022_17-51-56] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 2)
	('start_step', 26)
	('last_sgoals', 20)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('first_sgoals', 11)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A28614BCC0>)

[14-04-2022_17-51-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 26). %* None *%
#program plan_module(#inc, 26, false, false). %* None *%
#program optimisation_module(#inc, 26, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 26, 11, 20, sequential, false). %* None *%

[14-04-2022_17-51-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     25 : Current =     35
Incrementor step ends | Minimum  =     36 : Maximum =    300

[14-04-2022_17-51-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(35)]), ('state_module', [Number(26), Number(26)]), ('plan_module', [Number(26), Number(26), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(26), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(26), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(27), Number(26)]), ('plan_module', [Number(27), Number(26), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(26), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('conformance_module', [Number(27), Number(26), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(28), Number(26)]), ('plan_module', [Number(28), Number(26), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(26), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('conformance_module', [Number(28), Number(26), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(29), Number(26)]), ('plan_module', [Number(29), Number(26), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(26), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(26), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(30), Number(26)]), ('plan_module', [Number(30), Number(26), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(26), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(26), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(31), Number(26)]), ('plan_module', [Number(31), Number(26), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(31), Number(26), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('conformance_module', [Number(31), Number(26), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(32), Number(26)]), ('plan_module', [Number(32), Number(26), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(32), Number(26), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('conformance_module', [Number(32), Number(26), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(33), Number(26)]), ('plan_module', [Number(33), Number(26), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(33), Number(26), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('conformance_module', [Number(33), Number(26), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(34), Number(26)]), ('plan_module', [Number(34), Number(26), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(34), Number(26), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(34)]), ('action_preconditions', [Number(34)]), ('variable_relations', [Number(34)]), ('abstraction_mappings', [Number(34)]), ('conformance_module', [Number(34), Number(26), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(35), Number(26)]), ('plan_module', [Number(35), Number(26), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(35), Number(26), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(35)]), ('action_preconditions', [Number(35)]), ('variable_relations', [Number(35)]), ('abstraction_mappings', [Number(35)]), ('conformance_module', [Number(35), Number(26), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.796227s.

[14-04-2022_17-51-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 1.647880s with result Satisfiable.

[14-04-2022_17-51-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.4441077000001314, Incremental time limit = None
Running cumulative time = 2.4441077000001314, Cumulative time limit = 1752.7370629999996
Used memory = (RSS = 2048.914062Mb, VMS = 2059.625000Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 9
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.796227s, Solving = 1.647880s, Total = 2.444108s, Memory = (RSS = 2048.914062Mb, VMS = 2059.625000Mb), Step range = [26-35]), Calls = 1
Final Model :: Total atoms = 11785, Cost = (-9,), Optimality proven = False, Number = 8, Thread ID = 2, Model type = ModelType.StableModel

[14-04-2022_17-51-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     35 : Current =     36
Incrementor step ends | Minimum  =     36 : Maximum =    300

[14-04-2022_17-51-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(36)]), ('state_module', [Number(36), Number(26)]), ('plan_module', [Number(36), Number(26), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(36), Number(26), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('conformance_module', [Number(36), Number(26), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.146088s.

[14-04-2022_17-51-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.043058s with result Satisfiable.

[14-04-2022_17-51-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1891458000009152, Incremental time limit = None
Running cumulative time = 2.6332535000010466, Cumulative time limit = 1752.7370629999996
Used memory = (RSS = 2051.664062Mb, VMS = 2063.617188Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-51-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 10
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.942316s, Solving = 1.690938s, Total = 2.633254s, Memory = (RSS = 2051.664062Mb, VMS = 2063.617188Mb), Step range = [26-36]), Calls = 2
Final Model :: Total atoms = 12442, Cost = (-3,), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[14-04-2022_17-51-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.796227s, Solving = 1.647880s, Total = 2.444108s, Memory = (RSS = 2048.914062Mb, VMS = 2059.625000Mb), Step range = [26-35]
2 : Statistics :: Grounding = 0.146088s, Solving = 0.043058s, Total = 0.189146s, Memory = (RSS = 2051.664062Mb, VMS = 2063.617188Mb), Step range = [36-36]

[14-04-2022_17-51-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 2.633254s due to: Stop condition reached.

[14-04-2022_17-51-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[14-04-2022_17-51-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[14-04-2022_17-51-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-51-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-51-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 14, 27: 14, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 20, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25, 14: 28, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 38, 21: 39, 22: 40, 23: 41, 24: 42, 25: 43, 26: 44}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 6, 23: 7, 24: 8, 25: 9, 26: 10}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 22, 7: 23, 8: 24, 9: 25, 10: 26}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 7, 16: 8, 17: 9, 18: 9, 19: 10, 20: 10, 21: 11, 22: 12, 23: 13, 24: 14, 25: 15, 26: 15, 27: 16, 28: 16, 29: 16, 30: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 15, 8: 16, 9: 18, 10: 20, 11: 21, 12: 22, 13: 23, 14: 24, 15: 26, 16: 29, 17: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 14, 27: 14, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 20, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25, 14: 28, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 38, 21: 39, 22: 40, 23: 41, 24: 42, 25: 43, 26: 44}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 6, 23: 7, 24: 8, 25: 9, 26: 10, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 16, 33: 17, 34: 18, 35: 19, 36: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 22, 7: 23, 8: 24, 9: 25, 10: 26, 11: 27, 12: 28, 13: 29, 14: 30, 15: 31, 16: 32, 17: 33, 18: 34, 19: 35, 20: 36}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 7, 16: 8, 17: 9, 18: 9, 19: 10, 20: 10, 21: 11, 22: 12, 23: 13, 24: 14, 25: 15, 26: 15, 27: 16, 28: 16, 29: 16, 30: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 15, 8: 16, 9: 18, 10: 20, 11: 21, 12: 22, 13: 23, 14: 24, 15: 26, 16: 29, 17: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 20, Last requested goal index = 20, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.942316s, Solving = 1.690938s, Total = 2.633254s, Memory = (RSS = 2051.664062Mb, VMS = 2063.617188Mb), Step range = [26-36]), Calls = 2
Model :: Total atoms = 12442, Cost = (-3,), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 10 :: Actions = 10                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_2,store_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,store_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_2,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 11:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 12:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,8))
Step 15:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 17:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 18:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 19:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 20:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 21:
    Current Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 22:
    Current Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 23:
    Current Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Achieved Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,9))
Step 24:
    Current Sub-goals:
        [Index = 8] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 8] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,9),puzzle_room_table)
Step 25:
    Current Sub-goals:
        [Index = 9] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 9] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,9))
Step 26:
    Current Sub-goals:
        [Index = 10] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Achieved Sub-goals:
        [Index = 10] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Planned actions:
        talos : put(manipulator_arm_2,(block,8),(block,9))
Step 27:
    Current Sub-goals:
        [Index = 11] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 11] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,8))
Step 28:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = (block,7)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = (block,7)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,7))
Step 29:
    Current Sub-goals:
        [Index = 13] talos : put(manipulator_arm_2,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Achieved Sub-goals:
        [Index = 13] talos : put(manipulator_arm_2,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Planned actions:
        talos : put(manipulator_arm_2,(block,7),(block,8))
Step 30:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
Step 31:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 15] talos : release(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,7))
Step 32:
    Current Sub-goals:
        [Index = 16] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 16] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
Step 33:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,2))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,3))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 19] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_arm_2,(block,2),(block,3))
Step 36:
    Current Sub-goals:
        [Index = 20] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 20] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,2))

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=26, end_step=None

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for parts of the existing plan at the current level that have already been divided: start_step=26

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> Value of end step of abstract plan to divide adjusted for right blend of current problem: end_step=36

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=26

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> Preparing to invoke division strategy...

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> Online method OnlineMethod.GroundFirst chose to invoke the division strategy before a downwards level change:Current increment = 3, Current planning level is complete = False

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 36, chosen step range to extract = range(26, 37)

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 36, Total actions = 36, Produced sub-goal stages = 36, Produced sub-goal literals = 36
Level [1]: Length = 44, Total actions = 44, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =  10, AC =  10, CF = 1.0, GT =   4.50s, ST =   3.56s, OT = 0.00s, TT =   8.06s, EF = (LE = 1.0, AC = 1.0), ED = (LE = 0.0, AC = 0.0), EB = (LE = 0.0, AC = 0.0)

[14-04-2022_17-51-59] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=10, start_step=26, blend=Blend(left=0, right=0)

[14-04-2022_17-51-59] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=0, small_group_size=5, large_group_size=6

[14-04-2022_17-51-59] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=31, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 2, Problem Range = [3-4], Size = 10, Sub-goal Stage Range = [27-36]
Division points [total=1] : [(Index = 31, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> Monolevel problem 2 at level 2 solved.

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 3 at level 1:
Total Templated Partial Problems = 2, Problem Range = [3-4], Size = 10, Sub-goal Stage Range = [27-36]
Division points [total=1] : [(Index = 31, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [27-31]

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 44, chosen step range to extract = range(0, 45)

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 36, Total actions = 36, Produced sub-goal stages = 36, Produced sub-goal literals = 36
Level [1]: Length = 44, Total actions = 44, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 36, chosen step range to extract = range(0, 37)

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 36, Total actions = 36, Produced sub-goal stages = 36, Produced sub-goal literals = 36
Level [1]: Length = 44, Total actions = 44, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 30, chosen step range to extract = range(0, 31)

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 36, Total actions = 36, Produced sub-goal stages = 36, Produced sub-goal literals = 36
Level [1]: Length = 44, Total actions = 44, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 36, Total actions = 36, Produced sub-goal stages = 36, Produced sub-goal literals = 36
Level [1]: Length = 44, Total actions = 44, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [27-31], problem number = 3, increment number = 3

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 27)
	('last_sgoals', 31)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1737.96979)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [27-31] : Concurrency disabled : Minimum search length bound enabled with value 48

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 27
last_sgoals = 31
start_step = 44
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 48

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[14-04-2022_17-51-59] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[14-04-2022_17-51-59] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[14-04-2022_17-51-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[14-04-2022_17-51-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[14-04-2022_17-51-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-51-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-51-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-51-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-51-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 44 as problem start state.

[14-04-2022_17-51-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 44})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,8))', 'S': 44})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 44})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 44})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 44})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 44})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 44})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 44})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,8)', 'S': 44})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 44})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,8)', 'S': 44})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 44})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 44})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 44})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 44})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 44})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 44})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 44})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(puzzle_room,1)', 'S': 44})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 44})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 44})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 44})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 44})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 44})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 44})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 44})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 44})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 44})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 44})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 44})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 44})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 44})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 44})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 44})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 44})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 44})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 44})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 44})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'S': 44})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'S': 44})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 44})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 44})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 44})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 44})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 44})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 44})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 44})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 44})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 44})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 44})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 44})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 44})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,8)', 'S': 44})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 44})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 44})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 44})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 44})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 44})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 44})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 44})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'puzzle_room', 'S': 44})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 44})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 44})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 44})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 44})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 44})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 44})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 44})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 44})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 44})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 44})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 44})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 44})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'S': 44})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 44})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 44})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 44})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 44})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 44})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 44})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 44})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 44})

[14-04-2022_17-51-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-51-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 44).
holds(1, complete_tower(red,puzzle_room_table), false, 44).
holds(1, complete_tower(yellow,puzzle_room_table), false, 44).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 44).
holds(1, configuration(manipulator_end_2), aligned_with((block,8)), 44).
holds(1, configuration(manipulator_limb_1), extended, 44).
holds(1, configuration(manipulator_limb_2), extended, 44).
holds(1, configuration(puzzle_room_door), open, 44).
holds(1, configuration(starting_room_door), closed, 44).
holds(1, configuration(store_room_door), open, 44).
holds(1, grasping(manipulator_arm_1), nothing, 44).
holds(1, grasping(manipulator_arm_2), (block,8), 44).
holds(1, grasping(manipulator_end_1), nothing, 44).
holds(1, grasping(manipulator_end_2), (block,8), 44).
holds(1, in((block,1)), (puzzle_room,1), 44).
holds(1, in((block,2)), (puzzle_room,1), 44).
holds(1, in((block,3)), (puzzle_room,1), 44).
holds(1, in((block,4)), (store_room,0), 44).
holds(1, in((block,5)), (store_room,0), 44).
holds(1, in((block,6)), (puzzle_room,1), 44).
holds(1, in((block,7)), (puzzle_room,1), 44).
holds(1, in((block,8)), (puzzle_room,1), 44).
holds(1, in((block,9)), (puzzle_room,1), 44).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 44).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 44).
holds(1, in(manipulator_end_1), (puzzle_room,1), 44).
holds(1, in(manipulator_end_2), (puzzle_room,1), 44).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 44).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 44).
holds(1, in(puzzle_room_table), (puzzle_room,1), 44).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 44).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 44).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 44).
holds(1, in(talos), (puzzle_room,1), 44).
holds(1, in_tower((block,1),(block,1)), true, 44).
holds(1, in_tower((block,1),(block,2)), false, 44).
holds(1, in_tower((block,1),(block,3)), true, 44).
holds(1, in_tower((block,1),(block,4)), false, 44).
holds(1, in_tower((block,1),(block,5)), false, 44).
holds(1, in_tower((block,1),(block,6)), false, 44).
holds(1, in_tower((block,1),(block,7)), false, 44).
holds(1, in_tower((block,1),(block,8)), false, 44).
holds(1, in_tower((block,1),(block,9)), false, 44).
holds(1, in_tower((block,2),(block,1)), false, 44).
holds(1, in_tower((block,2),(block,2)), true, 44).
holds(1, in_tower((block,2),(block,3)), false, 44).
holds(1, in_tower((block,2),(block,4)), false, 44).
holds(1, in_tower((block,2),(block,5)), false, 44).
holds(1, in_tower((block,2),(block,6)), false, 44).
holds(1, in_tower((block,2),(block,7)), false, 44).
holds(1, in_tower((block,2),(block,8)), false, 44).
holds(1, in_tower((block,2),(block,9)), false, 44).
holds(1, in_tower((block,3),(block,1)), false, 44).
holds(1, in_tower((block,3),(block,2)), false, 44).
holds(1, in_tower((block,3),(block,3)), false, 44).
holds(1, in_tower((block,3),(block,4)), false, 44).
holds(1, in_tower((block,3),(block,5)), false, 44).
holds(1, in_tower((block,3),(block,6)), false, 44).
holds(1, in_tower((block,3),(block,7)), false, 44).
holds(1, in_tower((block,3),(block,8)), false, 44).
holds(1, in_tower((block,3),(block,9)), false, 44).
holds(1, in_tower((block,4),(block,1)), false, 44).
holds(1, in_tower((block,4),(block,2)), false, 44).
holds(1, in_tower((block,4),(block,3)), false, 44).
holds(1, in_tower((block,4),(block,4)), false, 44).
holds(1, in_tower((block,4),(block,5)), false, 44).
holds(1, in_tower((block,4),(block,6)), false, 44).
holds(1, in_tower((block,4),(block,7)), false, 44).
holds(1, in_tower((block,4),(block,8)), false, 44).
holds(1, in_tower((block,4),(block,9)), false, 44).
holds(1, in_tower((block,5),(block,1)), false, 44).
holds(1, in_tower((block,5),(block,2)), false, 44).
holds(1, in_tower((block,5),(block,3)), false, 44).
holds(1, in_tower((block,5),(block,4)), false, 44).
holds(1, in_tower((block,5),(block,5)), false, 44).
holds(1, in_tower((block,5),(block,6)), false, 44).
holds(1, in_tower((block,5),(block,7)), false, 44).
holds(1, in_tower((block,5),(block,8)), false, 44).
holds(1, in_tower((block,5),(block,9)), false, 44).
holds(1, in_tower((block,6),(block,1)), false, 44).
holds(1, in_tower((block,6),(block,2)), false, 44).
holds(1, in_tower((block,6),(block,3)), false, 44).
holds(1, in_tower((block,6),(block,4)), false, 44).
holds(1, in_tower((block,6),(block,5)), false, 44).
holds(1, in_tower((block,6),(block,6)), true, 44).
holds(1, in_tower((block,6),(block,7)), false, 44).
holds(1, in_tower((block,6),(block,8)), false, 44).
holds(1, in_tower((block,6),(block,9)), false, 44).
holds(1, in_tower((block,7),(block,1)), false, 44).
holds(1, in_tower((block,7),(block,2)), false, 44).
holds(1, in_tower((block,7),(block,3)), false, 44).
holds(1, in_tower((block,7),(block,4)), false, 44).
holds(1, in_tower((block,7),(block,5)), false, 44).
holds(1, in_tower((block,7),(block,6)), false, 44).
holds(1, in_tower((block,7),(block,7)), true, 44).
holds(1, in_tower((block,7),(block,8)), false, 44).
holds(1, in_tower((block,7),(block,9)), false, 44).
holds(1, in_tower((block,8),(block,1)), false, 44).
holds(1, in_tower((block,8),(block,2)), false, 44).
holds(1, in_tower((block,8),(block,3)), false, 44).
holds(1, in_tower((block,8),(block,4)), false, 44).
holds(1, in_tower((block,8),(block,5)), false, 44).
holds(1, in_tower((block,8),(block,6)), false, 44).
holds(1, in_tower((block,8),(block,7)), false, 44).
holds(1, in_tower((block,8),(block,8)), false, 44).
holds(1, in_tower((block,8),(block,9)), false, 44).
holds(1, in_tower((block,9),(block,1)), false, 44).
holds(1, in_tower((block,9),(block,2)), false, 44).
holds(1, in_tower((block,9),(block,3)), false, 44).
holds(1, in_tower((block,9),(block,4)), false, 44).
holds(1, in_tower((block,9),(block,5)), false, 44).
holds(1, in_tower((block,9),(block,6)), false, 44).
holds(1, in_tower((block,9),(block,7)), false, 44).
holds(1, in_tower((block,9),(block,8)), true, 44).
holds(1, in_tower((block,9),(block,9)), true, 44).
holds(1, on((block,1)), puzzle_room_table_left, 44).
holds(1, on((block,2)), puzzle_room_table_right, 44).
holds(1, on((block,3)), (block,1), 44).
holds(1, on((block,4)), nothing, 44).
holds(1, on((block,5)), nothing, 44).
holds(1, on((block,6)), puzzle_room_table_right, 44).
holds(1, on((block,7)), puzzle_room_table_middle, 44).
holds(1, on((block,8)), (block,9), 44).
holds(1, on((block,9)), puzzle_room_table_middle, 44).
holds(1, tower_base((block,1),puzzle_room_table), true, 44).
holds(1, tower_base((block,2),puzzle_room_table), true, 44).
holds(1, tower_base((block,3),puzzle_room_table), false, 44).
holds(1, tower_base((block,4),puzzle_room_table), false, 44).
holds(1, tower_base((block,5),puzzle_room_table), false, 44).
holds(1, tower_base((block,6),puzzle_room_table), true, 44).
holds(1, tower_base((block,7),puzzle_room_table), true, 44).
holds(1, tower_base((block,8),puzzle_room_table), false, 44).
holds(1, tower_base((block,9),puzzle_room_table), true, 44).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 44).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 44).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 44).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 44).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 44).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 44).
holds(1, unordered_tower((block,7),puzzle_room_table), false, 44).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 44).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 44).
holds(2, complete_tower(blue,puzzle_room_table), false, 44).
holds(2, complete_tower(red,puzzle_room_table), false, 44).
holds(2, complete_tower(yellow,puzzle_room_table), false, 44).
holds(2, configuration(manipulator_arm_1), extended, 44).
holds(2, configuration(manipulator_arm_2), extended, 44).
holds(2, configuration(puzzle_room_door), open, 44).
holds(2, configuration(starting_room_door), closed, 44).
holds(2, configuration(store_room_door), open, 44).
holds(2, grasping(manipulator_arm_1), nothing, 44).
holds(2, grasping(manipulator_arm_2), (block,8), 44).
holds(2, in((block,1)), puzzle_room, 44).
holds(2, in((block,2)), puzzle_room, 44).
holds(2, in((block,3)), puzzle_room, 44).
holds(2, in((block,4)), store_room, 44).
holds(2, in((block,5)), store_room, 44).
holds(2, in((block,6)), puzzle_room, 44).
holds(2, in((block,7)), puzzle_room, 44).
holds(2, in((block,8)), puzzle_room, 44).
holds(2, in((block,9)), puzzle_room, 44).
holds(2, in(manipulator_arm_1), puzzle_room, 44).
holds(2, in(manipulator_arm_2), puzzle_room, 44).
holds(2, in(puzzle_room_table), puzzle_room, 44).
holds(2, in(talos), puzzle_room, 44).
holds(2, in_tower((block,1),(block,1)), true, 44).
holds(2, in_tower((block,1),(block,2)), false, 44).
holds(2, in_tower((block,1),(block,3)), true, 44).
holds(2, in_tower((block,1),(block,4)), false, 44).
holds(2, in_tower((block,1),(block,5)), false, 44).
holds(2, in_tower((block,1),(block,6)), false, 44).
holds(2, in_tower((block,1),(block,7)), false, 44).
holds(2, in_tower((block,1),(block,8)), false, 44).
holds(2, in_tower((block,1),(block,9)), false, 44).
holds(2, in_tower((block,2),(block,1)), false, 44).
holds(2, in_tower((block,2),(block,2)), true, 44).
holds(2, in_tower((block,2),(block,3)), false, 44).
holds(2, in_tower((block,2),(block,4)), false, 44).
holds(2, in_tower((block,2),(block,5)), false, 44).
holds(2, in_tower((block,2),(block,6)), false, 44).
holds(2, in_tower((block,2),(block,7)), false, 44).
holds(2, in_tower((block,2),(block,8)), false, 44).
holds(2, in_tower((block,2),(block,9)), false, 44).
holds(2, in_tower((block,3),(block,1)), false, 44).
holds(2, in_tower((block,3),(block,2)), false, 44).
holds(2, in_tower((block,3),(block,3)), false, 44).
holds(2, in_tower((block,3),(block,4)), false, 44).
holds(2, in_tower((block,3),(block,5)), false, 44).
holds(2, in_tower((block,3),(block,6)), false, 44).
holds(2, in_tower((block,3),(block,7)), false, 44).
holds(2, in_tower((block,3),(block,8)), false, 44).
holds(2, in_tower((block,3),(block,9)), false, 44).
holds(2, in_tower((block,4),(block,1)), false, 44).
holds(2, in_tower((block,4),(block,2)), false, 44).
holds(2, in_tower((block,4),(block,3)), false, 44).
holds(2, in_tower((block,4),(block,4)), false, 44).
holds(2, in_tower((block,4),(block,5)), false, 44).
holds(2, in_tower((block,4),(block,6)), false, 44).
holds(2, in_tower((block,4),(block,7)), false, 44).
holds(2, in_tower((block,4),(block,8)), false, 44).
holds(2, in_tower((block,4),(block,9)), false, 44).
holds(2, in_tower((block,5),(block,1)), false, 44).
holds(2, in_tower((block,5),(block,2)), false, 44).
holds(2, in_tower((block,5),(block,3)), false, 44).
holds(2, in_tower((block,5),(block,4)), false, 44).
holds(2, in_tower((block,5),(block,5)), false, 44).
holds(2, in_tower((block,5),(block,6)), false, 44).
holds(2, in_tower((block,5),(block,7)), false, 44).
holds(2, in_tower((block,5),(block,8)), false, 44).
holds(2, in_tower((block,5),(block,9)), false, 44).
holds(2, in_tower((block,6),(block,1)), false, 44).
holds(2, in_tower((block,6),(block,2)), false, 44).
holds(2, in_tower((block,6),(block,3)), false, 44).
holds(2, in_tower((block,6),(block,4)), false, 44).
holds(2, in_tower((block,6),(block,5)), false, 44).
holds(2, in_tower((block,6),(block,6)), true, 44).
holds(2, in_tower((block,6),(block,7)), false, 44).
holds(2, in_tower((block,6),(block,8)), false, 44).
holds(2, in_tower((block,6),(block,9)), false, 44).
holds(2, in_tower((block,7),(block,1)), false, 44).
holds(2, in_tower((block,7),(block,2)), false, 44).
holds(2, in_tower((block,7),(block,3)), false, 44).
holds(2, in_tower((block,7),(block,4)), false, 44).
holds(2, in_tower((block,7),(block,5)), false, 44).
holds(2, in_tower((block,7),(block,6)), false, 44).
holds(2, in_tower((block,7),(block,7)), true, 44).
holds(2, in_tower((block,7),(block,8)), false, 44).
holds(2, in_tower((block,7),(block,9)), false, 44).
holds(2, in_tower((block,8),(block,1)), false, 44).
holds(2, in_tower((block,8),(block,2)), false, 44).
holds(2, in_tower((block,8),(block,3)), false, 44).
holds(2, in_tower((block,8),(block,4)), false, 44).
holds(2, in_tower((block,8),(block,5)), false, 44).
holds(2, in_tower((block,8),(block,6)), false, 44).
holds(2, in_tower((block,8),(block,7)), false, 44).
holds(2, in_tower((block,8),(block,8)), false, 44).
holds(2, in_tower((block,8),(block,9)), false, 44).
holds(2, in_tower((block,9),(block,1)), false, 44).
holds(2, in_tower((block,9),(block,2)), false, 44).
holds(2, in_tower((block,9),(block,3)), false, 44).
holds(2, in_tower((block,9),(block,4)), false, 44).
holds(2, in_tower((block,9),(block,5)), false, 44).
holds(2, in_tower((block,9),(block,6)), false, 44).
holds(2, in_tower((block,9),(block,7)), false, 44).
holds(2, in_tower((block,9),(block,8)), true, 44).
holds(2, in_tower((block,9),(block,9)), true, 44).
holds(2, on((block,1)), puzzle_room_table, 44).
holds(2, on((block,2)), puzzle_room_table, 44).
holds(2, on((block,3)), (block,1), 44).
holds(2, on((block,4)), nothing, 44).
holds(2, on((block,5)), nothing, 44).
holds(2, on((block,6)), puzzle_room_table, 44).
holds(2, on((block,7)), puzzle_room_table, 44).
holds(2, on((block,8)), (block,9), 44).
holds(2, on((block,9)), puzzle_room_table, 44).
holds(2, tower_base((block,1),puzzle_room_table), true, 44).
holds(2, tower_base((block,2),puzzle_room_table), true, 44).
holds(2, tower_base((block,3),puzzle_room_table), false, 44).
holds(2, tower_base((block,4),puzzle_room_table), false, 44).
holds(2, tower_base((block,5),puzzle_room_table), false, 44).
holds(2, tower_base((block,6),puzzle_room_table), true, 44).
holds(2, tower_base((block,7),puzzle_room_table), true, 44).
holds(2, tower_base((block,8),puzzle_room_table), false, 44).
holds(2, tower_base((block,9),puzzle_room_table), true, 44).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 44).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 44).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 44).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 44).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 44).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 44).
holds(2, unordered_tower((block,7),puzzle_room_table), false, 44).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 44).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 44).

[14-04-2022_17-51-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[14-04-2022_17-51-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-51-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=48']

[14-04-2022_17-51-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,8))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 27})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,7))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,7)', 'I': 28})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,7),(block,8))', 'F': 'on((block,7))', 'V': '(block,8)', 'I': 29})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'I': 30})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,7))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 31})

[14-04-2022_17-51-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-51-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 5 rules into program part base:

sub_goal(2, talos, release(manipulator_arm_2,(block,8)), grasping(manipulator_arm_2), nothing, 27).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,7)), grasping(manipulator_arm_2), (block,7), 28).
sub_goal(2, talos, put(manipulator_arm_2,(block,7),(block,8)), on((block,7)), (block,8), 29).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 30).
sub_goal(2, talos, release(manipulator_arm_2,(block,7)), grasping(manipulator_arm_2), nothing, 31).

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-51-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[14-04-2022_17-51-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=48']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A2584D9F70>]
	incrementor = SolveIncrementor(step_start=44, step_increase=1, step_increase_initial=5, step_end_min=49, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1737.96979, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 44), range_=None), IncPart(name='plan_module', args=('#inc', 44, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 44, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 44, 27, 31, 'sequential', 'false'), range_=None)]

[14-04-2022_17-51-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-51-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-51-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-51-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1274 rules

[14-04-2022_17-51-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006787100000110513s

[14-04-2022_17-51-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[14-04-2022_17-51-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[14-04-2022_17-51-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.041216s.

[14-04-2022_17-51-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-51-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007812s with result Satisfiable.

[14-04-2022_17-51-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[14-04-2022_17-51-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A286557D60>

[14-04-2022_17-51-59] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 44)
	('last_sgoals', 31)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('first_sgoals', 27)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A286557D60>)

[14-04-2022_17-51-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 44). %* None *%
#program plan_module(#inc, 44, false, false). %* None *%
#program optimisation_module(#inc, 44, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 44, 27, 31, sequential, false). %* None *%

[14-04-2022_17-51-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     43 : Current =     48
Incrementor step ends | Minimum  =     49 : Maximum =    300

[14-04-2022_17-51-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(48)]), ('state_module', [Number(44), Number(44)]), ('plan_module', [Number(44), Number(44), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(44), Number(44), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(44)]), ('action_preconditions', [Number(44)]), ('variable_relations', [Number(44)]), ('abstraction_mappings', [Number(44)]), ('conformance_module', [Number(44), Number(44), Number(27), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(45), Number(44)]), ('plan_module', [Number(45), Number(44), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(45), Number(44), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(45)]), ('action_preconditions', [Number(45)]), ('variable_relations', [Number(45)]), ('abstraction_mappings', [Number(45)]), ('conformance_module', [Number(45), Number(44), Number(27), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(46), Number(44)]), ('plan_module', [Number(46), Number(44), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(46), Number(44), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(46)]), ('action_preconditions', [Number(46)]), ('variable_relations', [Number(46)]), ('abstraction_mappings', [Number(46)]), ('conformance_module', [Number(46), Number(44), Number(27), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(47), Number(44)]), ('plan_module', [Number(47), Number(44), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(47), Number(44), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(47)]), ('action_preconditions', [Number(47)]), ('variable_relations', [Number(47)]), ('abstraction_mappings', [Number(47)]), ('conformance_module', [Number(47), Number(44), Number(27), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(48), Number(44)]), ('plan_module', [Number(48), Number(44), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(48), Number(44), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(48)]), ('action_preconditions', [Number(48)]), ('variable_relations', [Number(48)]), ('abstraction_mappings', [Number(48)]), ('conformance_module', [Number(48), Number(44), Number(27), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-51-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.634265s.

[14-04-2022_17-51-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.277116s with result Satisfiable.

[14-04-2022_17-52-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.9113811000006535, Incremental time limit = None
Running cumulative time = 0.9113811000006535, Cumulative time limit = 1737.96979
Used memory = (RSS = 2038.402344Mb, VMS = 2047.675781Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.634265s, Solving = 0.277116s, Total = 0.911381s, Memory = (RSS = 2038.402344Mb, VMS = 2047.675781Mb), Step range = [44-48]), Calls = 1
Final Model :: Total atoms = 9558, Cost = (-4,), Optimality proven = False, Number = 5, Thread ID = 4, Model type = ModelType.StableModel

[14-04-2022_17-52-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     48 : Current =     49
Incrementor step ends | Minimum  =     49 : Maximum =    300

[14-04-2022_17-52-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(49)]), ('state_module', [Number(49), Number(44)]), ('plan_module', [Number(49), Number(44), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(49), Number(44), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(49)]), ('action_preconditions', [Number(49)]), ('variable_relations', [Number(49)]), ('abstraction_mappings', [Number(49)]), ('conformance_module', [Number(49), Number(44), Number(27), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.193199s.

[14-04-2022_17-52-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.026491s with result Unsatisfiable.

[14-04-2022_17-52-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2196893000000273, Incremental time limit = None
Running cumulative time = 1.1310704000006808, Cumulative time limit = 1737.96979
Used memory = (RSS = 2042.464844Mb, VMS = 2052.003906Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     49 : Current =     50
Incrementor step ends | Minimum  =     49 : Maximum =    300

[14-04-2022_17-52-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(50)]), ('state_module', [Number(50), Number(44)]), ('plan_module', [Number(50), Number(44), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(50), Number(44), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(50)]), ('action_preconditions', [Number(50)]), ('variable_relations', [Number(50)]), ('abstraction_mappings', [Number(50)]), ('conformance_module', [Number(50), Number(44), Number(27), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.194832s.

[14-04-2022_17-52-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.030522s with result Unsatisfiable.

[14-04-2022_17-52-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.22535420000076556, Incremental time limit = None
Running cumulative time = 1.3564246000014464, Cumulative time limit = 1737.96979
Used memory = (RSS = 2043.949219Mb, VMS = 2052.347656Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     50 : Current =     51
Incrementor step ends | Minimum  =     49 : Maximum =    300

[14-04-2022_17-52-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(51)]), ('state_module', [Number(51), Number(44)]), ('plan_module', [Number(51), Number(44), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(51), Number(44), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(51)]), ('action_preconditions', [Number(51)]), ('variable_relations', [Number(51)]), ('abstraction_mappings', [Number(51)]), ('conformance_module', [Number(51), Number(44), Number(27), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.200496s.

[14-04-2022_17-52-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.050658s with result Satisfiable.

[14-04-2022_17-52-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.25115459999960876, Incremental time limit = None
Running cumulative time = 1.6075792000010551, Cumulative time limit = 1737.96979
Used memory = (RSS = 2046.792969Mb, VMS = 2057.886719Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.222792s, Solving = 0.384787s, Total = 1.607579s, Memory = (RSS = 2046.792969Mb, VMS = 2057.886719Mb), Step range = [44-51]), Calls = 4
Final Model :: Total atoms = 11753, Cost = (-1,), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[14-04-2022_17-52-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.634265s, Solving = 0.277116s, Total = 0.911381s, Memory = (RSS = 2038.402344Mb, VMS = 2047.675781Mb), Step range = [44-48]
2 : Statistics :: Grounding = 0.193199s, Solving = 0.026491s, Total = 0.219689s, Memory = (RSS = 2042.464844Mb, VMS = 2052.003906Mb), Step range = [49-49]
3 : Statistics :: Grounding = 0.194832s, Solving = 0.030522s, Total = 0.225354s, Memory = (RSS = 2043.949219Mb, VMS = 2052.347656Mb), Step range = [50-50]
4 : Statistics :: Grounding = 0.200496s, Solving = 0.050658s, Total = 0.251155s, Memory = (RSS = 2046.792969Mb, VMS = 2057.886719Mb), Step range = [51-51]

[14-04-2022_17-52-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 1.607579s due to: Stop condition reached.

[14-04-2022_17-52-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[14-04-2022_17-52-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[14-04-2022_17-52-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-52-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-52-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[14-04-2022_17-52-01] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 14, 27: 14, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 20, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25, 14: 28, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 38, 21: 39, 22: 40, 23: 41, 24: 42, 25: 43, 26: 44}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 6, 23: 7, 24: 8, 25: 9, 26: 10, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 16, 33: 17, 34: 18, 35: 19, 36: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 22, 7: 23, 8: 24, 9: 25, 10: 26, 11: 27, 12: 28, 13: 29, 14: 30, 15: 31, 16: 32, 17: 33, 18: 34, 19: 35, 20: 36}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 7, 16: 8, 17: 9, 18: 9, 19: 10, 20: 10, 21: 11, 22: 12, 23: 13, 24: 14, 25: 15, 26: 15, 27: 16, 28: 16, 29: 16, 30: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 15, 8: 16, 9: 18, 10: 20, 11: 21, 12: 22, 13: 23, 14: 24, 15: 26, 16: 29, 17: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-52-01] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 14, 27: 14, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 20, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 29, 50: 30, 51: 31}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25, 14: 28, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 38, 21: 39, 22: 40, 23: 41, 24: 42, 25: 43, 26: 44, 27: 46, 28: 48, 29: 49, 30: 50, 31: 51}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 6, 23: 7, 24: 8, 25: 9, 26: 10, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 16, 33: 17, 34: 18, 35: 19, 36: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 22, 7: 23, 8: 24, 9: 25, 10: 26, 11: 27, 12: 28, 13: 29, 14: 30, 15: 31, 16: 32, 17: 33, 18: 34, 19: 35, 20: 36}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 7, 16: 8, 17: 9, 18: 9, 19: 10, 20: 10, 21: 11, 22: 12, 23: 13, 24: 14, 25: 15, 26: 15, 27: 16, 28: 16, 29: 16, 30: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 15, 8: 16, 9: 18, 10: 20, 11: 21, 12: 22, 13: 23, 14: 24, 15: 26, 16: 29, 17: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-52-01] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 31, Last requested goal index = 31, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[14-04-2022_17-52-01] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.222792s, Solving = 0.384787s, Total = 1.607579s, Memory = (RSS = 2046.792969Mb, VMS = 2057.886719Mb), Step range = [44-51]), Calls = 4
Model :: Total atoms = 11753, Cost = (-1,), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[14-04-2022_17-52-01] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 7 :: Actions = 7                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 25:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 26:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,8)))
Step 27:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 28:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,8))
Step 29:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 30:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : move((store_room,1))
Step 31:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 37:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 38:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 39:
    Current Sub-goals:
        [Index = 21] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 21] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 40:
    Current Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,9)))
Step 41:
    Current Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Achieved Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,9))
Step 42:
    Current Sub-goals:
        [Index = 24] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 24] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,9),puzzle_room_table_middle)
Step 43:
    Current Sub-goals:
        [Index = 25] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 25] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,9))
Step 44:
    Current Sub-goals:
        [Index = 26] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Achieved Sub-goals:
        [Index = 26] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Planned actions:
        talos : put(manipulator_end_2,(block,8),(block,9))
Step 45:
    Current Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 46:
    Current Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,8))
Step 47:
    Current Sub-goals:
        [Index = 28] talos : grasp(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = (block,7)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,7)))
Step 48:
    Current Sub-goals:
        [Index = 28] talos : grasp(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = (block,7)
    Achieved Sub-goals:
        [Index = 28] talos : grasp(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = (block,7)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,7))
Step 49:
    Current Sub-goals:
        [Index = 29] talos : put(manipulator_arm_2,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Achieved Sub-goals:
        [Index = 29] talos : put(manipulator_arm_2,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Planned actions:
        talos : put(manipulator_end_2,(block,7),(block,8))
Step 50:
    Current Sub-goals:
        [Index = 30] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 30] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 51:
    Current Sub-goals:
        [Index = 31] talos : release(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 31] talos : release(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,7))

[14-04-2022_17-52-01] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[14-04-2022_17-52-01] DEBUG :: ASH Planner Main #1 >> Value of end step of abstract plan to divide adjusted for right blend of current problem: end_step=51

[14-04-2022_17-52-01] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[14-04-2022_17-52-01] DEBUG :: ASH Planner Main #1 >> Monolevel problem 3 at level 1 solved.

[14-04-2022_17-52-01] DEBUG :: ASH Planner Main #1 >> Online planning increment 3 finished.

[14-04-2022_17-52-01] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 17 : Goals achieved = 17 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 30 : Goals achieved = 20 : Goals unachieved = 10 : Complete = False
Level = 1 : Solved problems = 3 : Total constraining sub-goal stages = 36 : Goals achieved = 31 : Goals unachieved = 5 : Complete = False

[14-04-2022_17-52-01] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 2.

[14-04-2022_17-52-01] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 4 by method ground-first is [1-1].

[14-04-2022_17-52-01] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 4 at level 1:
Total Templated Partial Problems = 2, Problem Range = [3-4], Size = 10, Sub-goal Stage Range = [27-36]
Division points [total=1] : [(Index = 31, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[14-04-2022_17-52-01] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [32-36]

[14-04-2022_17-52-01] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 51, chosen step range to extract = range(0, 52)

[14-04-2022_17-52-01] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 36, Total actions = 36, Produced sub-goal stages = 36, Produced sub-goal literals = 36
Level [1]: Length = 51, Total actions = 51, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-52-01] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 36, chosen step range to extract = range(0, 37)

[14-04-2022_17-52-01] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 36, Total actions = 36, Produced sub-goal stages = 36, Produced sub-goal literals = 36
Level [1]: Length = 51, Total actions = 51, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-52-01] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 30, chosen step range to extract = range(0, 31)

[14-04-2022_17-52-01] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 36, Total actions = 36, Produced sub-goal stages = 36, Produced sub-goal literals = 36
Level [1]: Length = 51, Total actions = 51, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-52-01] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[14-04-2022_17-52-01] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 36, Total actions = 36, Produced sub-goal stages = 36, Produced sub-goal literals = 36
Level [1]: Length = 51, Total actions = 51, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-52-01] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [32-36], problem number = 4, increment number = 4

[14-04-2022_17-52-01] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 32)
	('last_sgoals', 36)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1736.362210799999)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[14-04-2022_17-52-01] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [32-36] : Concurrency disabled : Minimum search length bound enabled with value 55

[14-04-2022_17-52-01] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 32
last_sgoals = 36
start_step = 51
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 55

[14-04-2022_17-52-01] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[14-04-2022_17-52-01] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[14-04-2022_17-52-01] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[14-04-2022_17-52-01] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[14-04-2022_17-52-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[14-04-2022_17-52-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[14-04-2022_17-52-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-52-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-52-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-52-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-52-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[14-04-2022_17-52-01] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-52-01] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 51 as problem start state.

[14-04-2022_17-52-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'S': 51})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,3))', 'S': 51})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 51})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 51})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 51})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 51})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 51})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 51})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'S': 51})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 51})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,3)', 'S': 51})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 51})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 51})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 51})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 51})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 51})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 51})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 51})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 51})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 51})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 51})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'S': 51})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'S': 51})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'S': 51})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 51})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 51})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 51})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 51})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 51})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'S': 51})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 51})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 51})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 51})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 51})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 51})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'S': 51})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 51})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 51})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 51})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 51})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 51})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 51})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 51})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 51})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'puzzle_room', 'S': 51})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 51})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 51})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 51})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 51})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 51})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 51})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 51})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 51})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 51})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 51})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 51})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'S': 51})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'S': 51})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 51})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 51})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 51})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 51})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 51})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 51})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 51})

[14-04-2022_17-52-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-52-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 51).
holds(1, complete_tower(red,puzzle_room_table), false, 51).
holds(1, complete_tower(yellow,puzzle_room_table), true, 51).
holds(1, configuration(manipulator_end_1), aligned_with((block,3)), 51).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 51).
holds(1, configuration(manipulator_limb_1), extended, 51).
holds(1, configuration(manipulator_limb_2), extended, 51).
holds(1, configuration(puzzle_room_door), open, 51).
holds(1, configuration(starting_room_door), closed, 51).
holds(1, configuration(store_room_door), open, 51).
holds(1, grasping(manipulator_arm_1), (block,3), 51).
holds(1, grasping(manipulator_arm_2), nothing, 51).
holds(1, grasping(manipulator_end_1), (block,3), 51).
holds(1, grasping(manipulator_end_2), nothing, 51).
holds(1, in((block,1)), (puzzle_room,1), 51).
holds(1, in((block,2)), (puzzle_room,1), 51).
holds(1, in((block,3)), (puzzle_room,1), 51).
holds(1, in((block,4)), (store_room,0), 51).
holds(1, in((block,5)), (store_room,0), 51).
holds(1, in((block,6)), (puzzle_room,1), 51).
holds(1, in((block,7)), (puzzle_room,1), 51).
holds(1, in((block,8)), (puzzle_room,1), 51).
holds(1, in((block,9)), (puzzle_room,1), 51).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 51).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 51).
holds(1, in(manipulator_end_1), (puzzle_room,1), 51).
holds(1, in(manipulator_end_2), (puzzle_room,1), 51).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 51).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 51).
holds(1, in(puzzle_room_table), (puzzle_room,1), 51).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 51).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 51).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 51).
holds(1, in(talos), (puzzle_room,1), 51).
holds(1, in_tower((block,1),(block,1)), true, 51).
holds(1, in_tower((block,1),(block,2)), false, 51).
holds(1, in_tower((block,1),(block,3)), true, 51).
holds(1, in_tower((block,1),(block,4)), false, 51).
holds(1, in_tower((block,1),(block,5)), false, 51).
holds(1, in_tower((block,1),(block,6)), false, 51).
holds(1, in_tower((block,1),(block,7)), false, 51).
holds(1, in_tower((block,1),(block,8)), false, 51).
holds(1, in_tower((block,1),(block,9)), false, 51).
holds(1, in_tower((block,2),(block,1)), false, 51).
holds(1, in_tower((block,2),(block,2)), true, 51).
holds(1, in_tower((block,2),(block,3)), false, 51).
holds(1, in_tower((block,2),(block,4)), false, 51).
holds(1, in_tower((block,2),(block,5)), false, 51).
holds(1, in_tower((block,2),(block,6)), false, 51).
holds(1, in_tower((block,2),(block,7)), false, 51).
holds(1, in_tower((block,2),(block,8)), false, 51).
holds(1, in_tower((block,2),(block,9)), false, 51).
holds(1, in_tower((block,3),(block,1)), false, 51).
holds(1, in_tower((block,3),(block,2)), false, 51).
holds(1, in_tower((block,3),(block,3)), false, 51).
holds(1, in_tower((block,3),(block,4)), false, 51).
holds(1, in_tower((block,3),(block,5)), false, 51).
holds(1, in_tower((block,3),(block,6)), false, 51).
holds(1, in_tower((block,3),(block,7)), false, 51).
holds(1, in_tower((block,3),(block,8)), false, 51).
holds(1, in_tower((block,3),(block,9)), false, 51).
holds(1, in_tower((block,4),(block,1)), false, 51).
holds(1, in_tower((block,4),(block,2)), false, 51).
holds(1, in_tower((block,4),(block,3)), false, 51).
holds(1, in_tower((block,4),(block,4)), false, 51).
holds(1, in_tower((block,4),(block,5)), false, 51).
holds(1, in_tower((block,4),(block,6)), false, 51).
holds(1, in_tower((block,4),(block,7)), false, 51).
holds(1, in_tower((block,4),(block,8)), false, 51).
holds(1, in_tower((block,4),(block,9)), false, 51).
holds(1, in_tower((block,5),(block,1)), false, 51).
holds(1, in_tower((block,5),(block,2)), false, 51).
holds(1, in_tower((block,5),(block,3)), false, 51).
holds(1, in_tower((block,5),(block,4)), false, 51).
holds(1, in_tower((block,5),(block,5)), false, 51).
holds(1, in_tower((block,5),(block,6)), false, 51).
holds(1, in_tower((block,5),(block,7)), false, 51).
holds(1, in_tower((block,5),(block,8)), false, 51).
holds(1, in_tower((block,5),(block,9)), false, 51).
holds(1, in_tower((block,6),(block,1)), false, 51).
holds(1, in_tower((block,6),(block,2)), false, 51).
holds(1, in_tower((block,6),(block,3)), false, 51).
holds(1, in_tower((block,6),(block,4)), false, 51).
holds(1, in_tower((block,6),(block,5)), false, 51).
holds(1, in_tower((block,6),(block,6)), true, 51).
holds(1, in_tower((block,6),(block,7)), false, 51).
holds(1, in_tower((block,6),(block,8)), false, 51).
holds(1, in_tower((block,6),(block,9)), false, 51).
holds(1, in_tower((block,7),(block,1)), false, 51).
holds(1, in_tower((block,7),(block,2)), false, 51).
holds(1, in_tower((block,7),(block,3)), false, 51).
holds(1, in_tower((block,7),(block,4)), false, 51).
holds(1, in_tower((block,7),(block,5)), false, 51).
holds(1, in_tower((block,7),(block,6)), false, 51).
holds(1, in_tower((block,7),(block,7)), false, 51).
holds(1, in_tower((block,7),(block,8)), false, 51).
holds(1, in_tower((block,7),(block,9)), false, 51).
holds(1, in_tower((block,8),(block,1)), false, 51).
holds(1, in_tower((block,8),(block,2)), false, 51).
holds(1, in_tower((block,8),(block,3)), false, 51).
holds(1, in_tower((block,8),(block,4)), false, 51).
holds(1, in_tower((block,8),(block,5)), false, 51).
holds(1, in_tower((block,8),(block,6)), false, 51).
holds(1, in_tower((block,8),(block,7)), false, 51).
holds(1, in_tower((block,8),(block,8)), false, 51).
holds(1, in_tower((block,8),(block,9)), false, 51).
holds(1, in_tower((block,9),(block,1)), false, 51).
holds(1, in_tower((block,9),(block,2)), false, 51).
holds(1, in_tower((block,9),(block,3)), false, 51).
holds(1, in_tower((block,9),(block,4)), false, 51).
holds(1, in_tower((block,9),(block,5)), false, 51).
holds(1, in_tower((block,9),(block,6)), false, 51).
holds(1, in_tower((block,9),(block,7)), true, 51).
holds(1, in_tower((block,9),(block,8)), true, 51).
holds(1, in_tower((block,9),(block,9)), true, 51).
holds(1, on((block,1)), puzzle_room_table_left, 51).
holds(1, on((block,2)), puzzle_room_table_right, 51).
holds(1, on((block,3)), (block,1), 51).
holds(1, on((block,4)), nothing, 51).
holds(1, on((block,5)), nothing, 51).
holds(1, on((block,6)), puzzle_room_table_right, 51).
holds(1, on((block,7)), (block,8), 51).
holds(1, on((block,8)), (block,9), 51).
holds(1, on((block,9)), puzzle_room_table_middle, 51).
holds(1, tower_base((block,1),puzzle_room_table), true, 51).
holds(1, tower_base((block,2),puzzle_room_table), true, 51).
holds(1, tower_base((block,3),puzzle_room_table), false, 51).
holds(1, tower_base((block,4),puzzle_room_table), false, 51).
holds(1, tower_base((block,5),puzzle_room_table), false, 51).
holds(1, tower_base((block,6),puzzle_room_table), true, 51).
holds(1, tower_base((block,7),puzzle_room_table), false, 51).
holds(1, tower_base((block,8),puzzle_room_table), false, 51).
holds(1, tower_base((block,9),puzzle_room_table), true, 51).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 51).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 51).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 51).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 51).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 51).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 51).
holds(1, unordered_tower((block,7),puzzle_room_table), false, 51).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 51).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 51).
holds(2, complete_tower(blue,puzzle_room_table), false, 51).
holds(2, complete_tower(red,puzzle_room_table), false, 51).
holds(2, complete_tower(yellow,puzzle_room_table), true, 51).
holds(2, configuration(manipulator_arm_1), extended, 51).
holds(2, configuration(manipulator_arm_2), extended, 51).
holds(2, configuration(puzzle_room_door), open, 51).
holds(2, configuration(starting_room_door), closed, 51).
holds(2, configuration(store_room_door), open, 51).
holds(2, grasping(manipulator_arm_1), (block,3), 51).
holds(2, grasping(manipulator_arm_2), nothing, 51).
holds(2, in((block,1)), puzzle_room, 51).
holds(2, in((block,2)), puzzle_room, 51).
holds(2, in((block,3)), puzzle_room, 51).
holds(2, in((block,4)), store_room, 51).
holds(2, in((block,5)), store_room, 51).
holds(2, in((block,6)), puzzle_room, 51).
holds(2, in((block,7)), puzzle_room, 51).
holds(2, in((block,8)), puzzle_room, 51).
holds(2, in((block,9)), puzzle_room, 51).
holds(2, in(manipulator_arm_1), puzzle_room, 51).
holds(2, in(manipulator_arm_2), puzzle_room, 51).
holds(2, in(puzzle_room_table), puzzle_room, 51).
holds(2, in(talos), puzzle_room, 51).
holds(2, in_tower((block,1),(block,1)), true, 51).
holds(2, in_tower((block,1),(block,2)), false, 51).
holds(2, in_tower((block,1),(block,3)), true, 51).
holds(2, in_tower((block,1),(block,4)), false, 51).
holds(2, in_tower((block,1),(block,5)), false, 51).
holds(2, in_tower((block,1),(block,6)), false, 51).
holds(2, in_tower((block,1),(block,7)), false, 51).
holds(2, in_tower((block,1),(block,8)), false, 51).
holds(2, in_tower((block,1),(block,9)), false, 51).
holds(2, in_tower((block,2),(block,1)), false, 51).
holds(2, in_tower((block,2),(block,2)), true, 51).
holds(2, in_tower((block,2),(block,3)), false, 51).
holds(2, in_tower((block,2),(block,4)), false, 51).
holds(2, in_tower((block,2),(block,5)), false, 51).
holds(2, in_tower((block,2),(block,6)), false, 51).
holds(2, in_tower((block,2),(block,7)), false, 51).
holds(2, in_tower((block,2),(block,8)), false, 51).
holds(2, in_tower((block,2),(block,9)), false, 51).
holds(2, in_tower((block,3),(block,1)), false, 51).
holds(2, in_tower((block,3),(block,2)), false, 51).
holds(2, in_tower((block,3),(block,3)), false, 51).
holds(2, in_tower((block,3),(block,4)), false, 51).
holds(2, in_tower((block,3),(block,5)), false, 51).
holds(2, in_tower((block,3),(block,6)), false, 51).
holds(2, in_tower((block,3),(block,7)), false, 51).
holds(2, in_tower((block,3),(block,8)), false, 51).
holds(2, in_tower((block,3),(block,9)), false, 51).
holds(2, in_tower((block,4),(block,1)), false, 51).
holds(2, in_tower((block,4),(block,2)), false, 51).
holds(2, in_tower((block,4),(block,3)), false, 51).
holds(2, in_tower((block,4),(block,4)), false, 51).
holds(2, in_tower((block,4),(block,5)), false, 51).
holds(2, in_tower((block,4),(block,6)), false, 51).
holds(2, in_tower((block,4),(block,7)), false, 51).
holds(2, in_tower((block,4),(block,8)), false, 51).
holds(2, in_tower((block,4),(block,9)), false, 51).
holds(2, in_tower((block,5),(block,1)), false, 51).
holds(2, in_tower((block,5),(block,2)), false, 51).
holds(2, in_tower((block,5),(block,3)), false, 51).
holds(2, in_tower((block,5),(block,4)), false, 51).
holds(2, in_tower((block,5),(block,5)), false, 51).
holds(2, in_tower((block,5),(block,6)), false, 51).
holds(2, in_tower((block,5),(block,7)), false, 51).
holds(2, in_tower((block,5),(block,8)), false, 51).
holds(2, in_tower((block,5),(block,9)), false, 51).
holds(2, in_tower((block,6),(block,1)), false, 51).
holds(2, in_tower((block,6),(block,2)), false, 51).
holds(2, in_tower((block,6),(block,3)), false, 51).
holds(2, in_tower((block,6),(block,4)), false, 51).
holds(2, in_tower((block,6),(block,5)), false, 51).
holds(2, in_tower((block,6),(block,6)), true, 51).
holds(2, in_tower((block,6),(block,7)), false, 51).
holds(2, in_tower((block,6),(block,8)), false, 51).
holds(2, in_tower((block,6),(block,9)), false, 51).
holds(2, in_tower((block,7),(block,1)), false, 51).
holds(2, in_tower((block,7),(block,2)), false, 51).
holds(2, in_tower((block,7),(block,3)), false, 51).
holds(2, in_tower((block,7),(block,4)), false, 51).
holds(2, in_tower((block,7),(block,5)), false, 51).
holds(2, in_tower((block,7),(block,6)), false, 51).
holds(2, in_tower((block,7),(block,7)), false, 51).
holds(2, in_tower((block,7),(block,8)), false, 51).
holds(2, in_tower((block,7),(block,9)), false, 51).
holds(2, in_tower((block,8),(block,1)), false, 51).
holds(2, in_tower((block,8),(block,2)), false, 51).
holds(2, in_tower((block,8),(block,3)), false, 51).
holds(2, in_tower((block,8),(block,4)), false, 51).
holds(2, in_tower((block,8),(block,5)), false, 51).
holds(2, in_tower((block,8),(block,6)), false, 51).
holds(2, in_tower((block,8),(block,7)), false, 51).
holds(2, in_tower((block,8),(block,8)), false, 51).
holds(2, in_tower((block,8),(block,9)), false, 51).
holds(2, in_tower((block,9),(block,1)), false, 51).
holds(2, in_tower((block,9),(block,2)), false, 51).
holds(2, in_tower((block,9),(block,3)), false, 51).
holds(2, in_tower((block,9),(block,4)), false, 51).
holds(2, in_tower((block,9),(block,5)), false, 51).
holds(2, in_tower((block,9),(block,6)), false, 51).
holds(2, in_tower((block,9),(block,7)), true, 51).
holds(2, in_tower((block,9),(block,8)), true, 51).
holds(2, in_tower((block,9),(block,9)), true, 51).
holds(2, on((block,1)), puzzle_room_table, 51).
holds(2, on((block,2)), puzzle_room_table, 51).
holds(2, on((block,3)), (block,1), 51).
holds(2, on((block,4)), nothing, 51).
holds(2, on((block,5)), nothing, 51).
holds(2, on((block,6)), puzzle_room_table, 51).
holds(2, on((block,7)), (block,8), 51).
holds(2, on((block,8)), (block,9), 51).
holds(2, on((block,9)), puzzle_room_table, 51).
holds(2, tower_base((block,1),puzzle_room_table), true, 51).
holds(2, tower_base((block,2),puzzle_room_table), true, 51).
holds(2, tower_base((block,3),puzzle_room_table), false, 51).
holds(2, tower_base((block,4),puzzle_room_table), false, 51).
holds(2, tower_base((block,5),puzzle_room_table), false, 51).
holds(2, tower_base((block,6),puzzle_room_table), true, 51).
holds(2, tower_base((block,7),puzzle_room_table), false, 51).
holds(2, tower_base((block,8),puzzle_room_table), false, 51).
holds(2, tower_base((block,9),puzzle_room_table), true, 51).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 51).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 51).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 51).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 51).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 51).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 51).
holds(2, unordered_tower((block,7),puzzle_room_table), false, 51).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 51).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 51).

[14-04-2022_17-52-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[14-04-2022_17-52-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-52-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[14-04-2022_17-52-01] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=55']

[14-04-2022_17-52-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 32})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,2)', 'I': 33})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 34})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 35})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 36})

[14-04-2022_17-52-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-52-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 5 rules into program part base:

sub_goal(2, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 32).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), (block,2), 33).
sub_goal(2, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 34).
sub_goal(2, talos, put(manipulator_arm_2,(block,2),(block,3)), on((block,2)), (block,3), 35).
sub_goal(2, talos, release(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), nothing, 36).

[14-04-2022_17-52-01] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-52-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[14-04-2022_17-52-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=55']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A27DECCB80>]
	incrementor = SolveIncrementor(step_start=51, step_increase=1, step_increase_initial=5, step_end_min=56, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1736.362210799999, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 51), range_=None), IncPart(name='plan_module', args=('#inc', 51, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 51, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 51, 32, 36, 'sequential', 'false'), range_=None)]

[14-04-2022_17-52-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-52-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-52-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-52-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1274 rules

[14-04-2022_17-52-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006771999999727996s

[14-04-2022_17-52-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[14-04-2022_17-52-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[14-04-2022_17-52-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.041297s.

[14-04-2022_17-52-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006928s with result Satisfiable.

[14-04-2022_17-52-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[14-04-2022_17-52-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A28652C450>

[14-04-2022_17-52-01] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 51)
	('last_sgoals', 36)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('first_sgoals', 32)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A28652C450>)

[14-04-2022_17-52-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 51). %* None *%
#program plan_module(#inc, 51, false, false). %* None *%
#program optimisation_module(#inc, 51, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 51, 32, 36, sequential, false). %* None *%

[14-04-2022_17-52-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     50 : Current =     55
Incrementor step ends | Minimum  =     56 : Maximum =    300

[14-04-2022_17-52-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(55)]), ('state_module', [Number(51), Number(51)]), ('plan_module', [Number(51), Number(51), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(51), Number(51), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(51)]), ('action_preconditions', [Number(51)]), ('variable_relations', [Number(51)]), ('abstraction_mappings', [Number(51)]), ('conformance_module', [Number(51), Number(51), Number(32), Number(36), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(52), Number(51)]), ('plan_module', [Number(52), Number(51), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(52), Number(51), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(52)]), ('action_preconditions', [Number(52)]), ('variable_relations', [Number(52)]), ('abstraction_mappings', [Number(52)]), ('conformance_module', [Number(52), Number(51), Number(32), Number(36), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(53), Number(51)]), ('plan_module', [Number(53), Number(51), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(53), Number(51), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(53)]), ('action_preconditions', [Number(53)]), ('variable_relations', [Number(53)]), ('abstraction_mappings', [Number(53)]), ('conformance_module', [Number(53), Number(51), Number(32), Number(36), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(54), Number(51)]), ('plan_module', [Number(54), Number(51), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(54), Number(51), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(54)]), ('action_preconditions', [Number(54)]), ('variable_relations', [Number(54)]), ('abstraction_mappings', [Number(54)]), ('conformance_module', [Number(54), Number(51), Number(32), Number(36), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(55), Number(51)]), ('plan_module', [Number(55), Number(51), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(55), Number(51), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(55)]), ('action_preconditions', [Number(55)]), ('variable_relations', [Number(55)]), ('abstraction_mappings', [Number(55)]), ('conformance_module', [Number(55), Number(51), Number(32), Number(36), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.631182s.

[14-04-2022_17-52-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.249336s with result Satisfiable.

[14-04-2022_17-52-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.8805177999993248, Incremental time limit = None
Running cumulative time = 0.8805177999993248, Cumulative time limit = 1736.362210799999
Used memory = (RSS = 2039.925781Mb, VMS = 2048.394531Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.631182s, Solving = 0.249336s, Total = 0.880518s, Memory = (RSS = 2039.925781Mb, VMS = 2048.394531Mb), Step range = [51-55]), Calls = 1
Final Model :: Total atoms = 9559, Cost = (-4,), Optimality proven = False, Number = 3, Thread ID = 1, Model type = ModelType.StableModel

[14-04-2022_17-52-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     55 : Current =     56
Incrementor step ends | Minimum  =     56 : Maximum =    300

[14-04-2022_17-52-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(56)]), ('state_module', [Number(56), Number(51)]), ('plan_module', [Number(56), Number(51), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(56), Number(51), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(56)]), ('action_preconditions', [Number(56)]), ('variable_relations', [Number(56)]), ('abstraction_mappings', [Number(56)]), ('conformance_module', [Number(56), Number(51), Number(32), Number(36), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.191860s.

[14-04-2022_17-52-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.028187s with result Unsatisfiable.

[14-04-2022_17-52-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2200470999996469, Incremental time limit = None
Running cumulative time = 1.1005648999989717, Cumulative time limit = 1736.362210799999
Used memory = (RSS = 2043.511719Mb, VMS = 2052.507812Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     56 : Current =     57
Incrementor step ends | Minimum  =     56 : Maximum =    300

[14-04-2022_17-52-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(57)]), ('state_module', [Number(57), Number(51)]), ('plan_module', [Number(57), Number(51), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(57), Number(51), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(57)]), ('action_preconditions', [Number(57)]), ('variable_relations', [Number(57)]), ('abstraction_mappings', [Number(57)]), ('conformance_module', [Number(57), Number(51), Number(32), Number(36), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.197541s.

[14-04-2022_17-52-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.053156s with result Satisfiable.

[14-04-2022_17-52-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.25069690000054834, Incremental time limit = None
Running cumulative time = 1.35126179999952, Cumulative time limit = 1736.362210799999
Used memory = (RSS = 2045.191406Mb, VMS = 2052.957031Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.020583s, Solving = 0.330678s, Total = 1.351262s, Memory = (RSS = 2045.191406Mb, VMS = 2052.957031Mb), Step range = [51-57]), Calls = 3
Final Model :: Total atoms = 11021, Cost = (-2,), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[14-04-2022_17-52-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.631182s, Solving = 0.249336s, Total = 0.880518s, Memory = (RSS = 2039.925781Mb, VMS = 2048.394531Mb), Step range = [51-55]
2 : Statistics :: Grounding = 0.191860s, Solving = 0.028187s, Total = 0.220047s, Memory = (RSS = 2043.511719Mb, VMS = 2052.507812Mb), Step range = [56-56]
3 : Statistics :: Grounding = 0.197541s, Solving = 0.053156s, Total = 0.250697s, Memory = (RSS = 2045.191406Mb, VMS = 2052.957031Mb), Step range = [57-57]

[14-04-2022_17-52-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 1.351262s due to: Stop condition reached.

[14-04-2022_17-52-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[14-04-2022_17-52-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[14-04-2022_17-52-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-52-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-52-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[14-04-2022_17-52-03] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 14, 27: 14, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 20, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 29, 50: 30, 51: 31}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25, 14: 28, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 38, 21: 39, 22: 40, 23: 41, 24: 42, 25: 43, 26: 44, 27: 46, 28: 48, 29: 49, 30: 50, 31: 51}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 6, 23: 7, 24: 8, 25: 9, 26: 10, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 16, 33: 17, 34: 18, 35: 19, 36: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 22, 7: 23, 8: 24, 9: 25, 10: 26, 11: 27, 12: 28, 13: 29, 14: 30, 15: 31, 16: 32, 17: 33, 18: 34, 19: 35, 20: 36}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 7, 16: 8, 17: 9, 18: 9, 19: 10, 20: 10, 21: 11, 22: 12, 23: 13, 24: 14, 25: 15, 26: 15, 27: 16, 28: 16, 29: 16, 30: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 15, 8: 16, 9: 18, 10: 20, 11: 21, 12: 22, 13: 23, 14: 24, 15: 26, 16: 29, 17: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-52-03] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 14, 27: 14, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 20, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 29, 50: 30, 51: 31, 52: 32, 53: 32, 54: 33, 55: 34, 56: 35, 57: 36}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25, 14: 28, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 38, 21: 39, 22: 40, 23: 41, 24: 42, 25: 43, 26: 44, 27: 46, 28: 48, 29: 49, 30: 50, 31: 51, 32: 53, 33: 54, 34: 55, 35: 56, 36: 57}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 6, 23: 7, 24: 8, 25: 9, 26: 10, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 16, 33: 17, 34: 18, 35: 19, 36: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 22, 7: 23, 8: 24, 9: 25, 10: 26, 11: 27, 12: 28, 13: 29, 14: 30, 15: 31, 16: 32, 17: 33, 18: 34, 19: 35, 20: 36}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 7, 16: 8, 17: 9, 18: 9, 19: 10, 20: 10, 21: 11, 22: 12, 23: 13, 24: 14, 25: 15, 26: 15, 27: 16, 28: 16, 29: 16, 30: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 15, 8: 16, 9: 18, 10: 20, 11: 21, 12: 22, 13: 23, 14: 24, 15: 26, 16: 29, 17: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-52-03] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 36, Last requested goal index = 36, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[14-04-2022_17-52-03] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.020583s, Solving = 0.330678s, Total = 1.351262s, Memory = (RSS = 2045.191406Mb, VMS = 2052.957031Mb), Step range = [51-57]), Calls = 3
Model :: Total atoms = 11021, Cost = (-2,), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[14-04-2022_17-52-03] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 6 :: Actions = 6                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 25:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 26:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,8)))
Step 27:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 28:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,8))
Step 29:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 30:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : move((store_room,1))
Step 31:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 37:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 38:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 39:
    Current Sub-goals:
        [Index = 21] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 21] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 40:
    Current Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,9)))
Step 41:
    Current Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Achieved Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,9))
Step 42:
    Current Sub-goals:
        [Index = 24] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 24] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,9),puzzle_room_table_middle)
Step 43:
    Current Sub-goals:
        [Index = 25] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 25] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,9))
Step 44:
    Current Sub-goals:
        [Index = 26] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Achieved Sub-goals:
        [Index = 26] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Planned actions:
        talos : put(manipulator_end_2,(block,8),(block,9))
Step 45:
    Current Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 46:
    Current Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,8))
Step 47:
    Current Sub-goals:
        [Index = 28] talos : grasp(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = (block,7)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,7)))
Step 48:
    Current Sub-goals:
        [Index = 28] talos : grasp(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = (block,7)
    Achieved Sub-goals:
        [Index = 28] talos : grasp(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = (block,7)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,7))
Step 49:
    Current Sub-goals:
        [Index = 29] talos : put(manipulator_arm_2,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Achieved Sub-goals:
        [Index = 29] talos : put(manipulator_arm_2,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Planned actions:
        talos : put(manipulator_end_2,(block,7),(block,8))
Step 50:
    Current Sub-goals:
        [Index = 30] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 30] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 51:
    Current Sub-goals:
        [Index = 31] talos : release(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 31] talos : release(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,7))
Step 52:
    Current Sub-goals:
        [Index = 32] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,2)))
Step 53:
    Current Sub-goals:
        [Index = 32] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 32] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 54:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,2))
Step 55:
    Current Sub-goals:
        [Index = 34] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 34] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 56:
    Current Sub-goals:
        [Index = 35] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 35] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_2,(block,2),(block,3))
Step 57:
    Current Sub-goals:
        [Index = 36] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 36] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,2))

[14-04-2022_17-52-03] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[14-04-2022_17-52-03] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[14-04-2022_17-52-03] DEBUG :: ASH Planner Main #1 >> Monolevel problem 4 at level 1 solved.

[14-04-2022_17-52-03] DEBUG :: ASH Planner Main #1 >> Online planning increment 4 finished.

[14-04-2022_17-52-03] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 17 : Goals achieved = 17 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 30 : Goals achieved = 20 : Goals unachieved = 10 : Complete = False
Level = 1 : Solved problems = 4 : Total constraining sub-goal stages = 36 : Goals achieved = 36 : Goals unachieved = 0 : Complete = False

[14-04-2022_17-52-03] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 2, Highest = 2.

[14-04-2022_17-52-03] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 5 by method ground-first is [1-2].

[14-04-2022_17-52-03] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning problem 3 at level 2:
Total Templated Partial Problems = 3, Problem Range = [1-3], Size = 30, Sub-goal Stage Range = [1-30]
Division points [total=2] : [(Index = 10, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 20, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[14-04-2022_17-52-03] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [21-30]

[14-04-2022_17-52-03] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 36, chosen step range to extract = range(0, 37)

[14-04-2022_17-52-03] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 36, Total actions = 36, Produced sub-goal stages = 36, Produced sub-goal literals = 36
Level [1]: Length = 57, Total actions = 57, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-52-03] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 30, chosen step range to extract = range(0, 31)

[14-04-2022_17-52-03] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 36, Total actions = 36, Produced sub-goal stages = 36, Produced sub-goal literals = 36
Level [1]: Length = 57, Total actions = 57, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-52-03] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[14-04-2022_17-52-03] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 36, Total actions = 36, Produced sub-goal stages = 36, Produced sub-goal literals = 36
Level [1]: Length = 57, Total actions = 57, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-52-03] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [21-30], problem number = 3, increment number = 5

[14-04-2022_17-52-03] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 21)
	('last_sgoals', 30)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1750.1038094999985)
	('length_limit', 300)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[14-04-2022_17-52-03] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 2] partial conformance refinement (sequential) with sgoals range [21-30] : Concurrency disabled : Minimum search length bound enabled with value 45

[14-04-2022_17-52-03] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 21
last_sgoals = 30
start_step = 36
is_initial = False
is_final = True
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 45

[14-04-2022_17-52-03] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[14-04-2022_17-52-03] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[14-04-2022_17-52-03] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[14-04-2022_17-52-03] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[14-04-2022_17-52-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[14-04-2022_17-52-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[14-04-2022_17-52-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-52-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-52-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-52-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-52-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[14-04-2022_17-52-03] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-52-03] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 36 as problem start state.

[14-04-2022_17-52-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'S': 36})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 36})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 36})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 36})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 36})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 36})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 36})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 36})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 36})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 36})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 36})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 36})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 36})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 36})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 36})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 36})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 36})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'S': 36})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'S': 36})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 36})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 36})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 36})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 36})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 36})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'S': 36})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 36})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 36})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 36})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 36})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 3, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 3, 'F': 'in((block,8))', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 3, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 36})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 36})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 36})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 36})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 36})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 36})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 36})
Fluent({'L': 3, 'F': 'on((block,7))', 'V': '(block,8)', 'S': 36})
Fluent({'L': 3, 'F': 'on((block,8))', 'V': '(block,9)', 'S': 36})
Fluent({'L': 3, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 36})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 36})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 36})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 36})
Fluent({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 36})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 36})

[14-04-2022_17-52-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-52-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 257 rules into program part ash_initial_state:

holds(2, complete_tower(blue,puzzle_room_table), false, 36).
holds(2, complete_tower(red,puzzle_room_table), false, 36).
holds(2, complete_tower(yellow,puzzle_room_table), true, 36).
holds(2, configuration(manipulator_arm_1), extended, 36).
holds(2, configuration(manipulator_arm_2), extended, 36).
holds(2, configuration(puzzle_room_door), open, 36).
holds(2, configuration(starting_room_door), closed, 36).
holds(2, configuration(store_room_door), open, 36).
holds(2, grasping(manipulator_arm_1), nothing, 36).
holds(2, grasping(manipulator_arm_2), nothing, 36).
holds(2, in((block,1)), puzzle_room, 36).
holds(2, in((block,2)), puzzle_room, 36).
holds(2, in((block,3)), puzzle_room, 36).
holds(2, in((block,4)), store_room, 36).
holds(2, in((block,5)), store_room, 36).
holds(2, in((block,6)), puzzle_room, 36).
holds(2, in((block,7)), puzzle_room, 36).
holds(2, in((block,8)), puzzle_room, 36).
holds(2, in((block,9)), puzzle_room, 36).
holds(2, in(manipulator_arm_1), puzzle_room, 36).
holds(2, in(manipulator_arm_2), puzzle_room, 36).
holds(2, in(puzzle_room_table), puzzle_room, 36).
holds(2, in(talos), puzzle_room, 36).
holds(2, in_tower((block,1),(block,1)), true, 36).
holds(2, in_tower((block,1),(block,2)), false, 36).
holds(2, in_tower((block,1),(block,3)), false, 36).
holds(2, in_tower((block,1),(block,4)), false, 36).
holds(2, in_tower((block,1),(block,5)), false, 36).
holds(2, in_tower((block,1),(block,6)), false, 36).
holds(2, in_tower((block,1),(block,7)), false, 36).
holds(2, in_tower((block,1),(block,8)), false, 36).
holds(2, in_tower((block,1),(block,9)), false, 36).
holds(2, in_tower((block,2),(block,1)), false, 36).
holds(2, in_tower((block,2),(block,2)), false, 36).
holds(2, in_tower((block,2),(block,3)), false, 36).
holds(2, in_tower((block,2),(block,4)), false, 36).
holds(2, in_tower((block,2),(block,5)), false, 36).
holds(2, in_tower((block,2),(block,6)), false, 36).
holds(2, in_tower((block,2),(block,7)), false, 36).
holds(2, in_tower((block,2),(block,8)), false, 36).
holds(2, in_tower((block,2),(block,9)), false, 36).
holds(2, in_tower((block,3),(block,1)), false, 36).
holds(2, in_tower((block,3),(block,2)), true, 36).
holds(2, in_tower((block,3),(block,3)), true, 36).
holds(2, in_tower((block,3),(block,4)), false, 36).
holds(2, in_tower((block,3),(block,5)), false, 36).
holds(2, in_tower((block,3),(block,6)), false, 36).
holds(2, in_tower((block,3),(block,7)), false, 36).
holds(2, in_tower((block,3),(block,8)), false, 36).
holds(2, in_tower((block,3),(block,9)), false, 36).
holds(2, in_tower((block,4),(block,1)), false, 36).
holds(2, in_tower((block,4),(block,2)), false, 36).
holds(2, in_tower((block,4),(block,3)), false, 36).
holds(2, in_tower((block,4),(block,4)), false, 36).
holds(2, in_tower((block,4),(block,5)), false, 36).
holds(2, in_tower((block,4),(block,6)), false, 36).
holds(2, in_tower((block,4),(block,7)), false, 36).
holds(2, in_tower((block,4),(block,8)), false, 36).
holds(2, in_tower((block,4),(block,9)), false, 36).
holds(2, in_tower((block,5),(block,1)), false, 36).
holds(2, in_tower((block,5),(block,2)), false, 36).
holds(2, in_tower((block,5),(block,3)), false, 36).
holds(2, in_tower((block,5),(block,4)), false, 36).
holds(2, in_tower((block,5),(block,5)), false, 36).
holds(2, in_tower((block,5),(block,6)), false, 36).
holds(2, in_tower((block,5),(block,7)), false, 36).
holds(2, in_tower((block,5),(block,8)), false, 36).
holds(2, in_tower((block,5),(block,9)), false, 36).
holds(2, in_tower((block,6),(block,1)), false, 36).
holds(2, in_tower((block,6),(block,2)), false, 36).
holds(2, in_tower((block,6),(block,3)), false, 36).
holds(2, in_tower((block,6),(block,4)), false, 36).
holds(2, in_tower((block,6),(block,5)), false, 36).
holds(2, in_tower((block,6),(block,6)), true, 36).
holds(2, in_tower((block,6),(block,7)), false, 36).
holds(2, in_tower((block,6),(block,8)), false, 36).
holds(2, in_tower((block,6),(block,9)), false, 36).
holds(2, in_tower((block,7),(block,1)), false, 36).
holds(2, in_tower((block,7),(block,2)), false, 36).
holds(2, in_tower((block,7),(block,3)), false, 36).
holds(2, in_tower((block,7),(block,4)), false, 36).
holds(2, in_tower((block,7),(block,5)), false, 36).
holds(2, in_tower((block,7),(block,6)), false, 36).
holds(2, in_tower((block,7),(block,7)), false, 36).
holds(2, in_tower((block,7),(block,8)), false, 36).
holds(2, in_tower((block,7),(block,9)), false, 36).
holds(2, in_tower((block,8),(block,1)), false, 36).
holds(2, in_tower((block,8),(block,2)), false, 36).
holds(2, in_tower((block,8),(block,3)), false, 36).
holds(2, in_tower((block,8),(block,4)), false, 36).
holds(2, in_tower((block,8),(block,5)), false, 36).
holds(2, in_tower((block,8),(block,6)), false, 36).
holds(2, in_tower((block,8),(block,7)), false, 36).
holds(2, in_tower((block,8),(block,8)), false, 36).
holds(2, in_tower((block,8),(block,9)), false, 36).
holds(2, in_tower((block,9),(block,1)), false, 36).
holds(2, in_tower((block,9),(block,2)), false, 36).
holds(2, in_tower((block,9),(block,3)), false, 36).
holds(2, in_tower((block,9),(block,4)), false, 36).
holds(2, in_tower((block,9),(block,5)), false, 36).
holds(2, in_tower((block,9),(block,6)), false, 36).
holds(2, in_tower((block,9),(block,7)), true, 36).
holds(2, in_tower((block,9),(block,8)), true, 36).
holds(2, in_tower((block,9),(block,9)), true, 36).
holds(2, on((block,1)), puzzle_room_table, 36).
holds(2, on((block,2)), (block,3), 36).
holds(2, on((block,3)), puzzle_room_table, 36).
holds(2, on((block,4)), nothing, 36).
holds(2, on((block,5)), nothing, 36).
holds(2, on((block,6)), puzzle_room_table, 36).
holds(2, on((block,7)), (block,8), 36).
holds(2, on((block,8)), (block,9), 36).
holds(2, on((block,9)), puzzle_room_table, 36).
holds(2, tower_base((block,1),puzzle_room_table), true, 36).
holds(2, tower_base((block,2),puzzle_room_table), false, 36).
holds(2, tower_base((block,3),puzzle_room_table), true, 36).
holds(2, tower_base((block,4),puzzle_room_table), false, 36).
holds(2, tower_base((block,5),puzzle_room_table), false, 36).
holds(2, tower_base((block,6),puzzle_room_table), true, 36).
holds(2, tower_base((block,7),puzzle_room_table), false, 36).
holds(2, tower_base((block,8),puzzle_room_table), false, 36).
holds(2, tower_base((block,9),puzzle_room_table), true, 36).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 36).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 36).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 36).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 36).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 36).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 36).
holds(2, unordered_tower((block,7),puzzle_room_table), false, 36).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 36).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 36).
holds(3, complete_tower(blue,puzzle_room_table), false, 36).
holds(3, complete_tower(red,puzzle_room_table), false, 36).
holds(3, complete_tower(yellow,puzzle_room_table), true, 36).
holds(3, grasping(manipulator_arm_1), nothing, 36).
holds(3, grasping(manipulator_arm_2), nothing, 36).
holds(3, in((block,1)), puzzle_room, 36).
holds(3, in((block,2)), puzzle_room, 36).
holds(3, in((block,3)), puzzle_room, 36).
holds(3, in((block,4)), store_room, 36).
holds(3, in((block,5)), store_room, 36).
holds(3, in((block,6)), puzzle_room, 36).
holds(3, in((block,7)), puzzle_room, 36).
holds(3, in((block,8)), puzzle_room, 36).
holds(3, in((block,9)), puzzle_room, 36).
holds(3, in(manipulator_arm_1), puzzle_room, 36).
holds(3, in(manipulator_arm_2), puzzle_room, 36).
holds(3, in(puzzle_room_table), puzzle_room, 36).
holds(3, in(talos), puzzle_room, 36).
holds(3, in_tower((block,1),(block,1)), true, 36).
holds(3, in_tower((block,1),(block,2)), false, 36).
holds(3, in_tower((block,1),(block,3)), false, 36).
holds(3, in_tower((block,1),(block,4)), false, 36).
holds(3, in_tower((block,1),(block,5)), false, 36).
holds(3, in_tower((block,1),(block,6)), false, 36).
holds(3, in_tower((block,1),(block,7)), false, 36).
holds(3, in_tower((block,1),(block,8)), false, 36).
holds(3, in_tower((block,1),(block,9)), false, 36).
holds(3, in_tower((block,2),(block,1)), false, 36).
holds(3, in_tower((block,2),(block,2)), false, 36).
holds(3, in_tower((block,2),(block,3)), false, 36).
holds(3, in_tower((block,2),(block,4)), false, 36).
holds(3, in_tower((block,2),(block,5)), false, 36).
holds(3, in_tower((block,2),(block,6)), false, 36).
holds(3, in_tower((block,2),(block,7)), false, 36).
holds(3, in_tower((block,2),(block,8)), false, 36).
holds(3, in_tower((block,2),(block,9)), false, 36).
holds(3, in_tower((block,3),(block,1)), false, 36).
holds(3, in_tower((block,3),(block,2)), true, 36).
holds(3, in_tower((block,3),(block,3)), true, 36).
holds(3, in_tower((block,3),(block,4)), false, 36).
holds(3, in_tower((block,3),(block,5)), false, 36).
holds(3, in_tower((block,3),(block,6)), false, 36).
holds(3, in_tower((block,3),(block,7)), false, 36).
holds(3, in_tower((block,3),(block,8)), false, 36).
holds(3, in_tower((block,3),(block,9)), false, 36).
holds(3, in_tower((block,4),(block,1)), false, 36).
holds(3, in_tower((block,4),(block,2)), false, 36).
holds(3, in_tower((block,4),(block,3)), false, 36).
holds(3, in_tower((block,4),(block,4)), false, 36).
holds(3, in_tower((block,4),(block,5)), false, 36).
holds(3, in_tower((block,4),(block,6)), false, 36).
holds(3, in_tower((block,4),(block,7)), false, 36).
holds(3, in_tower((block,4),(block,8)), false, 36).
holds(3, in_tower((block,4),(block,9)), false, 36).
holds(3, in_tower((block,5),(block,1)), false, 36).
holds(3, in_tower((block,5),(block,2)), false, 36).
holds(3, in_tower((block,5),(block,3)), false, 36).
holds(3, in_tower((block,5),(block,4)), false, 36).
holds(3, in_tower((block,5),(block,5)), false, 36).
holds(3, in_tower((block,5),(block,6)), false, 36).
holds(3, in_tower((block,5),(block,7)), false, 36).
holds(3, in_tower((block,5),(block,8)), false, 36).
holds(3, in_tower((block,5),(block,9)), false, 36).
holds(3, in_tower((block,6),(block,1)), false, 36).
holds(3, in_tower((block,6),(block,2)), false, 36).
holds(3, in_tower((block,6),(block,3)), false, 36).
holds(3, in_tower((block,6),(block,4)), false, 36).
holds(3, in_tower((block,6),(block,5)), false, 36).
holds(3, in_tower((block,6),(block,6)), true, 36).
holds(3, in_tower((block,6),(block,7)), false, 36).
holds(3, in_tower((block,6),(block,8)), false, 36).
holds(3, in_tower((block,6),(block,9)), false, 36).
holds(3, in_tower((block,7),(block,1)), false, 36).
holds(3, in_tower((block,7),(block,2)), false, 36).
holds(3, in_tower((block,7),(block,3)), false, 36).
holds(3, in_tower((block,7),(block,4)), false, 36).
holds(3, in_tower((block,7),(block,5)), false, 36).
holds(3, in_tower((block,7),(block,6)), false, 36).
holds(3, in_tower((block,7),(block,7)), false, 36).
holds(3, in_tower((block,7),(block,8)), false, 36).
holds(3, in_tower((block,7),(block,9)), false, 36).
holds(3, in_tower((block,8),(block,1)), false, 36).
holds(3, in_tower((block,8),(block,2)), false, 36).
holds(3, in_tower((block,8),(block,3)), false, 36).
holds(3, in_tower((block,8),(block,4)), false, 36).
holds(3, in_tower((block,8),(block,5)), false, 36).
holds(3, in_tower((block,8),(block,6)), false, 36).
holds(3, in_tower((block,8),(block,7)), false, 36).
holds(3, in_tower((block,8),(block,8)), false, 36).
holds(3, in_tower((block,8),(block,9)), false, 36).
holds(3, in_tower((block,9),(block,1)), false, 36).
holds(3, in_tower((block,9),(block,2)), false, 36).
holds(3, in_tower((block,9),(block,3)), false, 36).
holds(3, in_tower((block,9),(block,4)), false, 36).
holds(3, in_tower((block,9),(block,5)), false, 36).
holds(3, in_tower((block,9),(block,6)), false, 36).
holds(3, in_tower((block,9),(block,7)), true, 36).
holds(3, in_tower((block,9),(block,8)), true, 36).
holds(3, in_tower((block,9),(block,9)), true, 36).
holds(3, on((block,1)), puzzle_room_table, 36).
holds(3, on((block,2)), (block,3), 36).
holds(3, on((block,3)), puzzle_room_table, 36).
holds(3, on((block,4)), nothing, 36).
holds(3, on((block,5)), nothing, 36).
holds(3, on((block,6)), puzzle_room_table, 36).
holds(3, on((block,7)), (block,8), 36).
holds(3, on((block,8)), (block,9), 36).
holds(3, on((block,9)), puzzle_room_table, 36).
holds(3, tower_base((block,1),puzzle_room_table), true, 36).
holds(3, tower_base((block,2),puzzle_room_table), false, 36).
holds(3, tower_base((block,3),puzzle_room_table), true, 36).
holds(3, tower_base((block,4),puzzle_room_table), false, 36).
holds(3, tower_base((block,5),puzzle_room_table), false, 36).
holds(3, tower_base((block,6),puzzle_room_table), true, 36).
holds(3, tower_base((block,7),puzzle_room_table), false, 36).
holds(3, tower_base((block,8),puzzle_room_table), false, 36).
holds(3, tower_base((block,9),puzzle_room_table), true, 36).
holds(3, unordered_tower((block,1),puzzle_room_table), false, 36).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 36).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 36).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 36).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 36).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 36).
holds(3, unordered_tower((block,7),puzzle_room_table), false, 36).
holds(3, unordered_tower((block,8),puzzle_room_table), false, 36).
holds(3, unordered_tower((block,9),puzzle_room_table), false, 36).

[14-04-2022_17-52-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[14-04-2022_17-52-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-52-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 588 rules into program part ash_goal_state:

final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(3, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,1),(block,7)), false, true).
final_goal(3, in_tower((block,1),(block,7)), true, false).
final_goal(3, in_tower((block,1),(block,8)), false, true).
final_goal(3, in_tower((block,1),(block,8)), true, false).
final_goal(3, in_tower((block,1),(block,9)), false, true).
final_goal(3, in_tower((block,1),(block,9)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,7)), false, true).
final_goal(3, in_tower((block,2),(block,7)), true, false).
final_goal(3, in_tower((block,2),(block,8)), false, true).
final_goal(3, in_tower((block,2),(block,8)), true, false).
final_goal(3, in_tower((block,2),(block,9)), false, true).
final_goal(3, in_tower((block,2),(block,9)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,7)), false, true).
final_goal(3, in_tower((block,3),(block,7)), true, false).
final_goal(3, in_tower((block,3),(block,8)), false, true).
final_goal(3, in_tower((block,3),(block,8)), true, false).
final_goal(3, in_tower((block,3),(block,9)), false, true).
final_goal(3, in_tower((block,3),(block,9)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,7)), false, true).
final_goal(3, in_tower((block,4),(block,7)), true, false).
final_goal(3, in_tower((block,4),(block,8)), false, true).
final_goal(3, in_tower((block,4),(block,8)), true, false).
final_goal(3, in_tower((block,4),(block,9)), false, true).
final_goal(3, in_tower((block,4),(block,9)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,7)), false, true).
final_goal(3, in_tower((block,5),(block,7)), true, false).
final_goal(3, in_tower((block,5),(block,8)), false, true).
final_goal(3, in_tower((block,5),(block,8)), true, false).
final_goal(3, in_tower((block,5),(block,9)), false, true).
final_goal(3, in_tower((block,5),(block,9)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, in_tower((block,6),(block,7)), false, true).
final_goal(3, in_tower((block,6),(block,7)), true, false).
final_goal(3, in_tower((block,6),(block,8)), false, true).
final_goal(3, in_tower((block,6),(block,8)), true, false).
final_goal(3, in_tower((block,6),(block,9)), false, true).
final_goal(3, in_tower((block,6),(block,9)), true, false).
final_goal(3, in_tower((block,7),(block,1)), false, true).
final_goal(3, in_tower((block,7),(block,1)), true, false).
final_goal(3, in_tower((block,7),(block,2)), false, true).
final_goal(3, in_tower((block,7),(block,2)), true, false).
final_goal(3, in_tower((block,7),(block,3)), false, true).
final_goal(3, in_tower((block,7),(block,3)), true, false).
final_goal(3, in_tower((block,7),(block,4)), false, true).
final_goal(3, in_tower((block,7),(block,4)), true, false).
final_goal(3, in_tower((block,7),(block,5)), false, true).
final_goal(3, in_tower((block,7),(block,5)), true, false).
final_goal(3, in_tower((block,7),(block,6)), false, true).
final_goal(3, in_tower((block,7),(block,6)), true, false).
final_goal(3, in_tower((block,7),(block,7)), false, true).
final_goal(3, in_tower((block,7),(block,7)), true, false).
final_goal(3, in_tower((block,7),(block,8)), false, true).
final_goal(3, in_tower((block,7),(block,8)), true, false).
final_goal(3, in_tower((block,7),(block,9)), false, true).
final_goal(3, in_tower((block,7),(block,9)), true, false).
final_goal(3, in_tower((block,8),(block,1)), false, true).
final_goal(3, in_tower((block,8),(block,1)), true, false).
final_goal(3, in_tower((block,8),(block,2)), false, true).
final_goal(3, in_tower((block,8),(block,2)), true, false).
final_goal(3, in_tower((block,8),(block,3)), false, true).
final_goal(3, in_tower((block,8),(block,3)), true, false).
final_goal(3, in_tower((block,8),(block,4)), false, true).
final_goal(3, in_tower((block,8),(block,4)), true, false).
final_goal(3, in_tower((block,8),(block,5)), false, true).
final_goal(3, in_tower((block,8),(block,5)), true, false).
final_goal(3, in_tower((block,8),(block,6)), false, true).
final_goal(3, in_tower((block,8),(block,6)), true, false).
final_goal(3, in_tower((block,8),(block,7)), false, true).
final_goal(3, in_tower((block,8),(block,7)), true, false).
final_goal(3, in_tower((block,8),(block,8)), false, true).
final_goal(3, in_tower((block,8),(block,8)), true, false).
final_goal(3, in_tower((block,8),(block,9)), false, true).
final_goal(3, in_tower((block,8),(block,9)), true, false).
final_goal(3, in_tower((block,9),(block,1)), false, true).
final_goal(3, in_tower((block,9),(block,1)), true, false).
final_goal(3, in_tower((block,9),(block,2)), false, true).
final_goal(3, in_tower((block,9),(block,2)), true, false).
final_goal(3, in_tower((block,9),(block,3)), false, true).
final_goal(3, in_tower((block,9),(block,3)), true, false).
final_goal(3, in_tower((block,9),(block,4)), false, true).
final_goal(3, in_tower((block,9),(block,4)), true, false).
final_goal(3, in_tower((block,9),(block,5)), false, true).
final_goal(3, in_tower((block,9),(block,5)), true, false).
final_goal(3, in_tower((block,9),(block,6)), false, true).
final_goal(3, in_tower((block,9),(block,6)), true, false).
final_goal(3, in_tower((block,9),(block,7)), false, false).
final_goal(3, in_tower((block,9),(block,7)), true, true).
final_goal(3, in_tower((block,9),(block,8)), false, false).
final_goal(3, in_tower((block,9),(block,8)), true, true).
final_goal(3, in_tower((block,9),(block,9)), false, false).
final_goal(3, in_tower((block,9),(block,9)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), (block,7), false).
final_goal(3, on((block,1)), (block,8), false).
final_goal(3, on((block,1)), (block,9), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), (block,7), false).
final_goal(3, on((block,2)), (block,8), false).
final_goal(3, on((block,2)), (block,9), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), (block,7), false).
final_goal(3, on((block,3)), (block,8), false).
final_goal(3, on((block,3)), (block,9), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), (block,7), false).
final_goal(3, on((block,4)), (block,8), false).
final_goal(3, on((block,4)), (block,9), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), (block,7), false).
final_goal(3, on((block,5)), (block,8), false).
final_goal(3, on((block,5)), (block,9), false).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), (block,7), false).
final_goal(3, on((block,6)), (block,8), false).
final_goal(3, on((block,6)), (block,9), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, on((block,7)), (block,1), false).
final_goal(3, on((block,7)), (block,2), false).
final_goal(3, on((block,7)), (block,3), false).
final_goal(3, on((block,7)), (block,4), false).
final_goal(3, on((block,7)), (block,5), false).
final_goal(3, on((block,7)), (block,6), false).
final_goal(3, on((block,7)), (block,8), true).
final_goal(3, on((block,7)), (block,9), false).
final_goal(3, on((block,7)), nothing, false).
final_goal(3, on((block,7)), puzzle_room_table, false).
final_goal(3, on((block,8)), (block,1), false).
final_goal(3, on((block,8)), (block,2), false).
final_goal(3, on((block,8)), (block,3), false).
final_goal(3, on((block,8)), (block,4), false).
final_goal(3, on((block,8)), (block,5), false).
final_goal(3, on((block,8)), (block,6), false).
final_goal(3, on((block,8)), (block,7), false).
final_goal(3, on((block,8)), (block,9), true).
final_goal(3, on((block,8)), nothing, false).
final_goal(3, on((block,8)), puzzle_room_table, false).
final_goal(3, on((block,9)), (block,1), false).
final_goal(3, on((block,9)), (block,2), false).
final_goal(3, on((block,9)), (block,3), false).
final_goal(3, on((block,9)), (block,4), false).
final_goal(3, on((block,9)), (block,5), false).
final_goal(3, on((block,9)), (block,6), false).
final_goal(3, on((block,9)), (block,7), false).
final_goal(3, on((block,9)), (block,8), false).
final_goal(3, on((block,9)), nothing, false).
final_goal(3, on((block,9)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, tower_base((block,7),puzzle_room_table), false, true).
final_goal(3, tower_base((block,7),puzzle_room_table), true, false).
final_goal(3, tower_base((block,8),puzzle_room_table), false, true).
final_goal(3, tower_base((block,8),puzzle_room_table), true, false).
final_goal(3, tower_base((block,9),puzzle_room_table), false, false).
final_goal(3, tower_base((block,9),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,9),puzzle_room_table), true, false).

[14-04-2022_17-52-03] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=45']

[14-04-2022_17-52-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 21})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'I': 22})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,4))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'I': 23})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 24})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 25})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 26})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 27})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,1))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'I': 28})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 29})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,4))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 30})

[14-04-2022_17-52-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-52-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 10 rules into program part base:

sub_goal(3, talos, move(store_room), in(talos), store_room, 21).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), (block,5), 22).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,4)), grasping(manipulator_arm_1), (block,4), 23).
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 24).
sub_goal(3, talos, put(manipulator_arm_2,(block,5),(block,6)), on((block,5)), (block,6), 25).
sub_goal(3, talos, release(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), nothing, 26).
sub_goal(3, talos, put(manipulator_arm_1,(block,4),(block,5)), on((block,4)), (block,5), 27).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 28).
sub_goal(3, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 29).
sub_goal(3, talos, release(manipulator_arm_1,(block,4)), grasping(manipulator_arm_1), nothing, 30).

[14-04-2022_17-52-03] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-52-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[14-04-2022_17-52-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=45']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A27DECCDC0>]
	incrementor = SolveIncrementor(step_start=36, step_increase=1, step_increase_initial=10, step_end_min=46, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1750.1038094999985, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 36), range_=None), IncPart(name='plan_module', args=('#inc', 36, 'false', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 36, 'false', 'false', 'false', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 36, 21, 30, 'sequential', 'false'), range_=None)]

[14-04-2022_17-52-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-52-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-52-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-52-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1245 rules

[14-04-2022_17-52-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006594999999833817s

[14-04-2022_17-52-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[14-04-2022_17-52-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[14-04-2022_17-52-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.034646s.

[14-04-2022_17-52-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005883s with result Satisfiable.

[14-04-2022_17-52-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[14-04-2022_17-52-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A287B50360>

[14-04-2022_17-52-03] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 2)
	('start_step', 36)
	('last_sgoals', 30)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('first_sgoals', 21)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A287B50360>)

[14-04-2022_17-52-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 36). %* None *%
#program plan_module(#inc, 36, false, true). %* None *%
#program optimisation_module(#inc, 36, false, false, false, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 36, 21, 30, sequential, false). %* None *%

[14-04-2022_17-52-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     35 : Current =     45
Incrementor step ends | Minimum  =     46 : Maximum =    300

[14-04-2022_17-52-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(45)]), ('state_module', [Number(36), Number(36)]), ('plan_module', [Number(36), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(36), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('conformance_module', [Number(36), Number(36), Number(21), Number(30), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(37), Number(36)]), ('plan_module', [Number(37), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(37), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(37)]), ('action_preconditions', [Number(37)]), ('variable_relations', [Number(37)]), ('abstraction_mappings', [Number(37)]), ('conformance_module', [Number(37), Number(36), Number(21), Number(30), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(38), Number(36)]), ('plan_module', [Number(38), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(38), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('conformance_module', [Number(38), Number(36), Number(21), Number(30), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(39), Number(36)]), ('plan_module', [Number(39), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(39), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(39)]), ('action_preconditions', [Number(39)]), ('variable_relations', [Number(39)]), ('abstraction_mappings', [Number(39)]), ('conformance_module', [Number(39), Number(36), Number(21), Number(30), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(40), Number(36)]), ('plan_module', [Number(40), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(40), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(40)]), ('action_preconditions', [Number(40)]), ('variable_relations', [Number(40)]), ('abstraction_mappings', [Number(40)]), ('conformance_module', [Number(40), Number(36), Number(21), Number(30), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(41), Number(36)]), ('plan_module', [Number(41), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(41), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(41)]), ('action_preconditions', [Number(41)]), ('variable_relations', [Number(41)]), ('abstraction_mappings', [Number(41)]), ('conformance_module', [Number(41), Number(36), Number(21), Number(30), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(42), Number(36)]), ('plan_module', [Number(42), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(42), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('conformance_module', [Number(42), Number(36), Number(21), Number(30), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(43), Number(36)]), ('plan_module', [Number(43), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(43), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(43)]), ('action_preconditions', [Number(43)]), ('variable_relations', [Number(43)]), ('abstraction_mappings', [Number(43)]), ('conformance_module', [Number(43), Number(36), Number(21), Number(30), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(44), Number(36)]), ('plan_module', [Number(44), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(44), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(44)]), ('action_preconditions', [Number(44)]), ('variable_relations', [Number(44)]), ('abstraction_mappings', [Number(44)]), ('conformance_module', [Number(44), Number(36), Number(21), Number(30), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(45), Number(36)]), ('plan_module', [Number(45), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(45), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(45)]), ('action_preconditions', [Number(45)]), ('variable_relations', [Number(45)]), ('abstraction_mappings', [Number(45)]), ('conformance_module', [Number(45), Number(36), Number(21), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.799904s.

[14-04-2022_17-52-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.357780s with result Satisfiable.

[14-04-2022_17-52-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.1576838000009957, Incremental time limit = None
Running cumulative time = 1.1576838000009957, Cumulative time limit = 1750.1038094999985
Used memory = (RSS = 2047.886719Mb, VMS = 2055.789062Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.799904s, Solving = 0.357780s, Total = 1.157684s, Memory = (RSS = 2047.886719Mb, VMS = 2055.789062Mb), Step range = [36-45]), Calls = 1
Final Model :: Total atoms = 14426, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[14-04-2022_17-52-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     45 : Current =     46
Incrementor step ends | Minimum  =     46 : Maximum =    300

[14-04-2022_17-52-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(46)]), ('state_module', [Number(46), Number(36)]), ('plan_module', [Number(46), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(46), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(46)]), ('action_preconditions', [Number(46)]), ('variable_relations', [Number(46)]), ('abstraction_mappings', [Number(46)]), ('conformance_module', [Number(46), Number(36), Number(21), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.145059s.

[14-04-2022_17-52-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.027359s with result Unsatisfiable.

[14-04-2022_17-52-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.17241829999966285, Incremental time limit = None
Running cumulative time = 1.3301021000006585, Cumulative time limit = 1750.1038094999985
Used memory = (RSS = 2049.410156Mb, VMS = 2059.687500Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     46 : Current =     47
Incrementor step ends | Minimum  =     46 : Maximum =    300

[14-04-2022_17-52-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(47)]), ('state_module', [Number(47), Number(36)]), ('plan_module', [Number(47), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(47), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(47)]), ('action_preconditions', [Number(47)]), ('variable_relations', [Number(47)]), ('abstraction_mappings', [Number(47)]), ('conformance_module', [Number(47), Number(36), Number(21), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.146280s.

[14-04-2022_17-52-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.026710s with result Unsatisfiable.

[14-04-2022_17-52-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.17298999999911757, Incremental time limit = None
Running cumulative time = 1.503092099999776, Cumulative time limit = 1750.1038094999985
Used memory = (RSS = 2050.667969Mb, VMS = 2060.054688Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     47 : Current =     48
Incrementor step ends | Minimum  =     46 : Maximum =    300

[14-04-2022_17-52-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(48)]), ('state_module', [Number(48), Number(36)]), ('plan_module', [Number(48), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(48), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(48)]), ('action_preconditions', [Number(48)]), ('variable_relations', [Number(48)]), ('abstraction_mappings', [Number(48)]), ('conformance_module', [Number(48), Number(36), Number(21), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.149750s.

[14-04-2022_17-52-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.027098s with result Unsatisfiable.

[14-04-2022_17-52-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1768475999997463, Incremental time limit = None
Running cumulative time = 1.6799396999995224, Cumulative time limit = 1750.1038094999985
Used memory = (RSS = 2052.074219Mb, VMS = 2060.433594Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     48 : Current =     49
Incrementor step ends | Minimum  =     46 : Maximum =    300

[14-04-2022_17-52-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(49)]), ('state_module', [Number(49), Number(36)]), ('plan_module', [Number(49), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(49), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(49)]), ('action_preconditions', [Number(49)]), ('variable_relations', [Number(49)]), ('abstraction_mappings', [Number(49)]), ('conformance_module', [Number(49), Number(36), Number(21), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.153228s.

[14-04-2022_17-52-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.028364s with result Unsatisfiable.

[14-04-2022_17-52-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.18159259999993083, Incremental time limit = None
Running cumulative time = 1.8615322999994532, Cumulative time limit = 1750.1038094999985
Used memory = (RSS = 2053.332031Mb, VMS = 2060.800781Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     49 : Current =     50
Incrementor step ends | Minimum  =     46 : Maximum =    300

[14-04-2022_17-52-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(50)]), ('state_module', [Number(50), Number(36)]), ('plan_module', [Number(50), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(50), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(50)]), ('action_preconditions', [Number(50)]), ('variable_relations', [Number(50)]), ('abstraction_mappings', [Number(50)]), ('conformance_module', [Number(50), Number(36), Number(21), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.155514s.

[14-04-2022_17-52-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.035395s with result Unsatisfiable.

[14-04-2022_17-52-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.19090940000023693, Incremental time limit = None
Running cumulative time = 2.05244169999969, Cumulative time limit = 1750.1038094999985
Used memory = (RSS = 2059.351562Mb, VMS = 2073.925781Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     50 : Current =     51
Incrementor step ends | Minimum  =     46 : Maximum =    300

[14-04-2022_17-52-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(51)]), ('state_module', [Number(51), Number(36)]), ('plan_module', [Number(51), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(51), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(51)]), ('action_preconditions', [Number(51)]), ('variable_relations', [Number(51)]), ('abstraction_mappings', [Number(51)]), ('conformance_module', [Number(51), Number(36), Number(21), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.158229s.

[14-04-2022_17-52-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.039827s with result Unsatisfiable.

[14-04-2022_17-52-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.19805600000017876, Incremental time limit = None
Running cumulative time = 2.250497699999869, Cumulative time limit = 1750.1038094999985
Used memory = (RSS = 2061.156250Mb, VMS = 2074.351562Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     51 : Current =     52
Incrementor step ends | Minimum  =     46 : Maximum =    300

[14-04-2022_17-52-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(52)]), ('state_module', [Number(52), Number(36)]), ('plan_module', [Number(52), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(52), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(52)]), ('action_preconditions', [Number(52)]), ('variable_relations', [Number(52)]), ('abstraction_mappings', [Number(52)]), ('conformance_module', [Number(52), Number(36), Number(21), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.162982s.

[14-04-2022_17-52-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.044278s with result Unsatisfiable.

[14-04-2022_17-52-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2072597999995196, Incremental time limit = None
Running cumulative time = 2.4577574999993885, Cumulative time limit = 1750.1038094999985
Used memory = (RSS = 2062.777344Mb, VMS = 2074.726562Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     52 : Current =     53
Incrementor step ends | Minimum  =     46 : Maximum =    300

[14-04-2022_17-52-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(53)]), ('state_module', [Number(53), Number(36)]), ('plan_module', [Number(53), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(53), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(53)]), ('action_preconditions', [Number(53)]), ('variable_relations', [Number(53)]), ('abstraction_mappings', [Number(53)]), ('conformance_module', [Number(53), Number(36), Number(21), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.165773s.

[14-04-2022_17-52-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.049973s with result Unsatisfiable.

[14-04-2022_17-52-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2157459000000017, Incremental time limit = None
Running cumulative time = 2.6735033999993902, Cumulative time limit = 1750.1038094999985
Used memory = (RSS = 2064.285156Mb, VMS = 2075.093750Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     53 : Current =     54
Incrementor step ends | Minimum  =     46 : Maximum =    300

[14-04-2022_17-52-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(54)]), ('state_module', [Number(54), Number(36)]), ('plan_module', [Number(54), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(54), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(54)]), ('action_preconditions', [Number(54)]), ('variable_relations', [Number(54)]), ('abstraction_mappings', [Number(54)]), ('conformance_module', [Number(54), Number(36), Number(21), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.169685s.

[14-04-2022_17-52-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.061891s with result Unsatisfiable.

[14-04-2022_17-52-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.23157569999966654, Incremental time limit = None
Running cumulative time = 2.905079099999057, Cumulative time limit = 1750.1038094999985
Used memory = (RSS = 2065.976562Mb, VMS = 2075.531250Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     54 : Current =     55
Incrementor step ends | Minimum  =     46 : Maximum =    300

[14-04-2022_17-52-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(55)]), ('state_module', [Number(55), Number(36)]), ('plan_module', [Number(55), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(55), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(55)]), ('action_preconditions', [Number(55)]), ('variable_relations', [Number(55)]), ('abstraction_mappings', [Number(55)]), ('conformance_module', [Number(55), Number(36), Number(21), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.170809s.

[14-04-2022_17-52-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.084212s with result Unsatisfiable.

[14-04-2022_17-52-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.25502050000068266, Incremental time limit = None
Running cumulative time = 3.1600995999997394, Cumulative time limit = 1750.1038094999985
Used memory = (RSS = 2067.679688Mb, VMS = 2075.906250Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     55 : Current =     56
Incrementor step ends | Minimum  =     46 : Maximum =    300

[14-04-2022_17-52-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(56)]), ('state_module', [Number(56), Number(36)]), ('plan_module', [Number(56), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(56), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(56)]), ('action_preconditions', [Number(56)]), ('variable_relations', [Number(56)]), ('abstraction_mappings', [Number(56)]), ('conformance_module', [Number(56), Number(36), Number(21), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.174815s.

[14-04-2022_17-52-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.101449s with result Satisfiable.

[14-04-2022_17-52-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.27626409999993484, Incremental time limit = None
Running cumulative time = 3.4363636999996743, Cumulative time limit = 1750.1038094999985
Used memory = (RSS = 2072.062500Mb, VMS = 2079.410156Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.552028s, Solving = 0.884335s, Total = 3.436364s, Memory = (RSS = 2072.062500Mb, VMS = 2079.410156Mb), Step range = [36-56]), Calls = 12
Final Model :: Total atoms = 24772, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[14-04-2022_17-52-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.799904s, Solving = 0.357780s, Total = 1.157684s, Memory = (RSS = 2047.886719Mb, VMS = 2055.789062Mb), Step range = [36-45]
2 : Statistics :: Grounding = 0.145059s, Solving = 0.027359s, Total = 0.172418s, Memory = (RSS = 2049.410156Mb, VMS = 2059.687500Mb), Step range = [46-46]
3 : Statistics :: Grounding = 0.146280s, Solving = 0.026710s, Total = 0.172990s, Memory = (RSS = 2050.667969Mb, VMS = 2060.054688Mb), Step range = [47-47]
4 : Statistics :: Grounding = 0.149750s, Solving = 0.027098s, Total = 0.176848s, Memory = (RSS = 2052.074219Mb, VMS = 2060.433594Mb), Step range = [48-48]
5 : Statistics :: Grounding = 0.153228s, Solving = 0.028364s, Total = 0.181593s, Memory = (RSS = 2053.332031Mb, VMS = 2060.800781Mb), Step range = [49-49]
6 : Statistics :: Grounding = 0.155514s, Solving = 0.035395s, Total = 0.190909s, Memory = (RSS = 2059.351562Mb, VMS = 2073.925781Mb), Step range = [50-50]
7 : Statistics :: Grounding = 0.158229s, Solving = 0.039827s, Total = 0.198056s, Memory = (RSS = 2061.156250Mb, VMS = 2074.351562Mb), Step range = [51-51]
8 : Statistics :: Grounding = 0.162982s, Solving = 0.044278s, Total = 0.207260s, Memory = (RSS = 2062.777344Mb, VMS = 2074.726562Mb), Step range = [52-52]
9 : Statistics :: Grounding = 0.165773s, Solving = 0.049973s, Total = 0.215746s, Memory = (RSS = 2064.285156Mb, VMS = 2075.093750Mb), Step range = [53-53]
10 : Statistics :: Grounding = 0.169685s, Solving = 0.061891s, Total = 0.231576s, Memory = (RSS = 2065.976562Mb, VMS = 2075.531250Mb), Step range = [54-54]
11 : Statistics :: Grounding = 0.170809s, Solving = 0.084212s, Total = 0.255021s, Memory = (RSS = 2067.679688Mb, VMS = 2075.906250Mb), Step range = [55-55]
12 : Statistics :: Grounding = 0.174815s, Solving = 0.101449s, Total = 0.276264s, Memory = (RSS = 2072.062500Mb, VMS = 2079.410156Mb), Step range = [56-56]

[14-04-2022_17-52-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 3.436364s due to: Stop condition reached.

[14-04-2022_17-52-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[14-04-2022_17-52-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[14-04-2022_17-52-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-52-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-52-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[14-04-2022_17-52-07] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 14, 27: 14, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 20, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 29, 50: 30, 51: 31, 52: 32, 53: 32, 54: 33, 55: 34, 56: 35, 57: 36}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25, 14: 28, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 38, 21: 39, 22: 40, 23: 41, 24: 42, 25: 43, 26: 44, 27: 46, 28: 48, 29: 49, 30: 50, 31: 51, 32: 53, 33: 54, 34: 55, 35: 56, 36: 57}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 6, 23: 7, 24: 8, 25: 9, 26: 10, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 16, 33: 17, 34: 18, 35: 19, 36: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 22, 7: 23, 8: 24, 9: 25, 10: 26, 11: 27, 12: 28, 13: 29, 14: 30, 15: 31, 16: 32, 17: 33, 18: 34, 19: 35, 20: 36}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 7, 16: 8, 17: 9, 18: 9, 19: 10, 20: 10, 21: 11, 22: 12, 23: 13, 24: 14, 25: 15, 26: 15, 27: 16, 28: 16, 29: 16, 30: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 15, 8: 16, 9: 18, 10: 20, 11: 21, 12: 22, 13: 23, 14: 24, 15: 26, 16: 29, 17: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-52-07] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 14, 27: 14, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 20, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 29, 50: 30, 51: 31, 52: 32, 53: 32, 54: 33, 55: 34, 56: 35, 57: 36}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25, 14: 28, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 38, 21: 39, 22: 40, 23: 41, 24: 42, 25: 43, 26: 44, 27: 46, 28: 48, 29: 49, 30: 50, 31: 51, 32: 53, 33: 54, 34: 55, 35: 56, 36: 57}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 6, 23: 7, 24: 8, 25: 9, 26: 10, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 16, 33: 17, 34: 18, 35: 19, 36: 20, 37: 21, 38: 21, 39: 21, 40: 21, 41: 22, 42: 22, 43: 22, 44: 22, 45: 23, 46: 24, 47: 24, 48: 24, 49: 25, 50: 25, 51: 26, 52: 27, 53: 27, 54: 28, 55: 29, 56: 30}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 22, 7: 23, 8: 24, 9: 25, 10: 26, 11: 27, 12: 28, 13: 29, 14: 30, 15: 31, 16: 32, 17: 33, 18: 34, 19: 35, 20: 36, 21: 40, 22: 44, 23: 45, 24: 48, 25: 50, 26: 51, 27: 53, 28: 54, 29: 55, 30: 56}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 7, 16: 8, 17: 9, 18: 9, 19: 10, 20: 10, 21: 11, 22: 12, 23: 13, 24: 14, 25: 15, 26: 15, 27: 16, 28: 16, 29: 16, 30: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 15, 8: 16, 9: 18, 10: 20, 11: 21, 12: 22, 13: 23, 14: 24, 15: 26, 16: 29, 17: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-52-07] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 30, Last requested goal index = 30, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[14-04-2022_17-52-07] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.552028s, Solving = 0.884335s, Total = 3.436364s, Memory = (RSS = 2072.062500Mb, VMS = 2079.410156Mb), Step range = [36-56]), Calls = 12
Model :: Total atoms = 24772, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[14-04-2022_17-52-07] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 20 :: Actions = 20                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_2,store_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,store_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_2,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 11:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 12:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,8))
Step 15:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 17:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 18:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 19:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 20:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 21:
    Current Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 22:
    Current Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 23:
    Current Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Achieved Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,9))
Step 24:
    Current Sub-goals:
        [Index = 8] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 8] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,9),puzzle_room_table)
Step 25:
    Current Sub-goals:
        [Index = 9] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 9] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,9))
Step 26:
    Current Sub-goals:
        [Index = 10] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Achieved Sub-goals:
        [Index = 10] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Planned actions:
        talos : put(manipulator_arm_2,(block,8),(block,9))
Step 27:
    Current Sub-goals:
        [Index = 11] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 11] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,8))
Step 28:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = (block,7)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = (block,7)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,7))
Step 29:
    Current Sub-goals:
        [Index = 13] talos : put(manipulator_arm_2,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Achieved Sub-goals:
        [Index = 13] talos : put(manipulator_arm_2,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Planned actions:
        talos : put(manipulator_arm_2,(block,7),(block,8))
Step 30:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
Step 31:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 15] talos : release(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,7))
Step 32:
    Current Sub-goals:
        [Index = 16] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 16] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
Step 33:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,2))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,3))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 19] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_arm_2,(block,2),(block,3))
Step 36:
    Current Sub-goals:
        [Index = 20] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 20] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,2))
Step 37:
    Current Sub-goals:
        [Index = 21] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 38:
    Current Sub-goals:
        [Index = 21] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 39:
    Current Sub-goals:
        [Index = 21] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 40:
    Current Sub-goals:
        [Index = 21] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 21] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 41:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 42:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 43:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,4))
Step 44:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,5))
Step 45:
    Current Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 46:
    Current Sub-goals:
        [Index = 24] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 47:
    Current Sub-goals:
        [Index = 24] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 48:
    Current Sub-goals:
        [Index = 24] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 24] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 49:
    Current Sub-goals:
        [Index = 25] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 50:
    Current Sub-goals:
        [Index = 25] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 25] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_arm_2,(block,5),(block,6))
Step 51:
    Current Sub-goals:
        [Index = 26] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 26] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,5))
Step 52:
    Current Sub-goals:
        [Index = 27] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 53:
    Current Sub-goals:
        [Index = 27] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 27] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_arm_1,(block,4),(block,5))
Step 54:
    Current Sub-goals:
        [Index = 28] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Achieved Sub-goals:
        [Index = 28] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,1))
Step 55:
    Current Sub-goals:
        [Index = 29] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 29] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_arm_2,(block,1),(block,2))
Step 56:
    Current Sub-goals:
        [Index = 30] talos : release(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 30] talos : release(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,4))

[14-04-2022_17-52-07] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=36, end_step=None

[14-04-2022_17-52-07] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for parts of the existing plan at the current level that have already been divided: start_step=36

[14-04-2022_17-52-07] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=36

[14-04-2022_17-52-07] DEBUG :: ASH Planner Main #1 >> Preparing to invoke division strategy...

[14-04-2022_17-52-07] DEBUG :: ASH Planner Main #1 >> Online method OnlineMethod.GroundFirst chose to invoke the division strategy before a downwards level change:Current increment = 5, Current planning level is complete = True

[14-04-2022_17-52-07] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 56, chosen step range to extract = range(36, 57)

[14-04-2022_17-52-07] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 56, Total actions = 56, Produced sub-goal stages = 56, Produced sub-goal literals = 56
Level [1]: Length = 57, Total actions = 57, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-52-07] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =  20, AC =  20, CF = 1.0, GT =   7.06s, ST =   4.44s, OT = 0.00s, TT =  11.50s, EF = (LE = 2.0, AC = 2.0), ED = (LE = 1.2, AC = 1.2), EB = (LE = 0.6, AC = 0.6)

[14-04-2022_17-52-07] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=20, start_step=36, blend=Blend(left=0, right=0)

[14-04-2022_17-52-07] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=0, small_group_size=10, large_group_size=11

[14-04-2022_17-52-07] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=46, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[14-04-2022_17-52-07] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 2, Problem Range = [5-6], Size = 20, Sub-goal Stage Range = [37-56]
Division points [total=1] : [(Index = 46, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[14-04-2022_17-52-07] DEBUG :: ASH Planner Main #1 >> Monolevel problem 3 at level 2 solved.

[14-04-2022_17-52-07] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 5 at level 1:
Total Templated Partial Problems = 2, Problem Range = [5-6], Size = 20, Sub-goal Stage Range = [37-56]
Division points [total=1] : [(Index = 46, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[14-04-2022_17-52-07] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [37-46]

[14-04-2022_17-52-07] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 57, chosen step range to extract = range(0, 58)

[14-04-2022_17-52-07] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 56, Total actions = 56, Produced sub-goal stages = 56, Produced sub-goal literals = 56
Level [1]: Length = 57, Total actions = 57, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-52-07] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 56, chosen step range to extract = range(0, 57)

[14-04-2022_17-52-07] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 56, Total actions = 56, Produced sub-goal stages = 56, Produced sub-goal literals = 56
Level [1]: Length = 57, Total actions = 57, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-52-07] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 30, chosen step range to extract = range(0, 31)

[14-04-2022_17-52-07] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 56, Total actions = 56, Produced sub-goal stages = 56, Produced sub-goal literals = 56
Level [1]: Length = 57, Total actions = 57, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-52-07] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[14-04-2022_17-52-07] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 56, Total actions = 56, Produced sub-goal stages = 56, Produced sub-goal literals = 56
Level [1]: Length = 57, Total actions = 57, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-52-07] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [37-46], problem number = 5, increment number = 5

[14-04-2022_17-52-07] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 37)
	('last_sgoals', 46)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1731.5745852999999)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[14-04-2022_17-52-07] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [37-46] : Concurrency disabled : Minimum search length bound enabled with value 66

[14-04-2022_17-52-07] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 37
last_sgoals = 46
start_step = 57
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 66

[14-04-2022_17-52-07] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[14-04-2022_17-52-07] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[14-04-2022_17-52-07] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[14-04-2022_17-52-07] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[14-04-2022_17-52-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[14-04-2022_17-52-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[14-04-2022_17-52-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-52-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-52-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-52-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-52-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[14-04-2022_17-52-07] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-52-07] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 57 as problem start state.

[14-04-2022_17-52-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 57})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 57})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 57})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 57})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 57})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 57})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 57})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 57})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 57})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 57})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 57})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 57})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 57})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 57})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 57})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 57})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 57})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 57})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 57})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'S': 57})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'S': 57})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'S': 57})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 57})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 57})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 57})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 57})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 57})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 57})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 57})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 57})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 57})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 57})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 57})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 57})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 57})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 57})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 57})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'S': 57})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'S': 57})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 57})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 57})

[14-04-2022_17-52-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-52-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 57).
holds(1, complete_tower(red,puzzle_room_table), false, 57).
holds(1, complete_tower(yellow,puzzle_room_table), true, 57).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 57).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 57).
holds(1, configuration(manipulator_limb_1), extended, 57).
holds(1, configuration(manipulator_limb_2), extended, 57).
holds(1, configuration(puzzle_room_door), open, 57).
holds(1, configuration(starting_room_door), closed, 57).
holds(1, configuration(store_room_door), open, 57).
holds(1, grasping(manipulator_arm_1), nothing, 57).
holds(1, grasping(manipulator_arm_2), nothing, 57).
holds(1, grasping(manipulator_end_1), nothing, 57).
holds(1, grasping(manipulator_end_2), nothing, 57).
holds(1, in((block,1)), (puzzle_room,1), 57).
holds(1, in((block,2)), (puzzle_room,1), 57).
holds(1, in((block,3)), (puzzle_room,1), 57).
holds(1, in((block,4)), (store_room,0), 57).
holds(1, in((block,5)), (store_room,0), 57).
holds(1, in((block,6)), (puzzle_room,1), 57).
holds(1, in((block,7)), (puzzle_room,1), 57).
holds(1, in((block,8)), (puzzle_room,1), 57).
holds(1, in((block,9)), (puzzle_room,1), 57).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 57).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 57).
holds(1, in(manipulator_end_1), (puzzle_room,1), 57).
holds(1, in(manipulator_end_2), (puzzle_room,1), 57).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 57).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 57).
holds(1, in(puzzle_room_table), (puzzle_room,1), 57).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 57).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 57).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 57).
holds(1, in(talos), (puzzle_room,1), 57).
holds(1, in_tower((block,1),(block,1)), true, 57).
holds(1, in_tower((block,1),(block,2)), false, 57).
holds(1, in_tower((block,1),(block,3)), false, 57).
holds(1, in_tower((block,1),(block,4)), false, 57).
holds(1, in_tower((block,1),(block,5)), false, 57).
holds(1, in_tower((block,1),(block,6)), false, 57).
holds(1, in_tower((block,1),(block,7)), false, 57).
holds(1, in_tower((block,1),(block,8)), false, 57).
holds(1, in_tower((block,1),(block,9)), false, 57).
holds(1, in_tower((block,2),(block,1)), false, 57).
holds(1, in_tower((block,2),(block,2)), false, 57).
holds(1, in_tower((block,2),(block,3)), false, 57).
holds(1, in_tower((block,2),(block,4)), false, 57).
holds(1, in_tower((block,2),(block,5)), false, 57).
holds(1, in_tower((block,2),(block,6)), false, 57).
holds(1, in_tower((block,2),(block,7)), false, 57).
holds(1, in_tower((block,2),(block,8)), false, 57).
holds(1, in_tower((block,2),(block,9)), false, 57).
holds(1, in_tower((block,3),(block,1)), false, 57).
holds(1, in_tower((block,3),(block,2)), true, 57).
holds(1, in_tower((block,3),(block,3)), true, 57).
holds(1, in_tower((block,3),(block,4)), false, 57).
holds(1, in_tower((block,3),(block,5)), false, 57).
holds(1, in_tower((block,3),(block,6)), false, 57).
holds(1, in_tower((block,3),(block,7)), false, 57).
holds(1, in_tower((block,3),(block,8)), false, 57).
holds(1, in_tower((block,3),(block,9)), false, 57).
holds(1, in_tower((block,4),(block,1)), false, 57).
holds(1, in_tower((block,4),(block,2)), false, 57).
holds(1, in_tower((block,4),(block,3)), false, 57).
holds(1, in_tower((block,4),(block,4)), false, 57).
holds(1, in_tower((block,4),(block,5)), false, 57).
holds(1, in_tower((block,4),(block,6)), false, 57).
holds(1, in_tower((block,4),(block,7)), false, 57).
holds(1, in_tower((block,4),(block,8)), false, 57).
holds(1, in_tower((block,4),(block,9)), false, 57).
holds(1, in_tower((block,5),(block,1)), false, 57).
holds(1, in_tower((block,5),(block,2)), false, 57).
holds(1, in_tower((block,5),(block,3)), false, 57).
holds(1, in_tower((block,5),(block,4)), false, 57).
holds(1, in_tower((block,5),(block,5)), false, 57).
holds(1, in_tower((block,5),(block,6)), false, 57).
holds(1, in_tower((block,5),(block,7)), false, 57).
holds(1, in_tower((block,5),(block,8)), false, 57).
holds(1, in_tower((block,5),(block,9)), false, 57).
holds(1, in_tower((block,6),(block,1)), false, 57).
holds(1, in_tower((block,6),(block,2)), false, 57).
holds(1, in_tower((block,6),(block,3)), false, 57).
holds(1, in_tower((block,6),(block,4)), false, 57).
holds(1, in_tower((block,6),(block,5)), false, 57).
holds(1, in_tower((block,6),(block,6)), true, 57).
holds(1, in_tower((block,6),(block,7)), false, 57).
holds(1, in_tower((block,6),(block,8)), false, 57).
holds(1, in_tower((block,6),(block,9)), false, 57).
holds(1, in_tower((block,7),(block,1)), false, 57).
holds(1, in_tower((block,7),(block,2)), false, 57).
holds(1, in_tower((block,7),(block,3)), false, 57).
holds(1, in_tower((block,7),(block,4)), false, 57).
holds(1, in_tower((block,7),(block,5)), false, 57).
holds(1, in_tower((block,7),(block,6)), false, 57).
holds(1, in_tower((block,7),(block,7)), false, 57).
holds(1, in_tower((block,7),(block,8)), false, 57).
holds(1, in_tower((block,7),(block,9)), false, 57).
holds(1, in_tower((block,8),(block,1)), false, 57).
holds(1, in_tower((block,8),(block,2)), false, 57).
holds(1, in_tower((block,8),(block,3)), false, 57).
holds(1, in_tower((block,8),(block,4)), false, 57).
holds(1, in_tower((block,8),(block,5)), false, 57).
holds(1, in_tower((block,8),(block,6)), false, 57).
holds(1, in_tower((block,8),(block,7)), false, 57).
holds(1, in_tower((block,8),(block,8)), false, 57).
holds(1, in_tower((block,8),(block,9)), false, 57).
holds(1, in_tower((block,9),(block,1)), false, 57).
holds(1, in_tower((block,9),(block,2)), false, 57).
holds(1, in_tower((block,9),(block,3)), false, 57).
holds(1, in_tower((block,9),(block,4)), false, 57).
holds(1, in_tower((block,9),(block,5)), false, 57).
holds(1, in_tower((block,9),(block,6)), false, 57).
holds(1, in_tower((block,9),(block,7)), true, 57).
holds(1, in_tower((block,9),(block,8)), true, 57).
holds(1, in_tower((block,9),(block,9)), true, 57).
holds(1, on((block,1)), puzzle_room_table_left, 57).
holds(1, on((block,2)), (block,3), 57).
holds(1, on((block,3)), puzzle_room_table_left, 57).
holds(1, on((block,4)), nothing, 57).
holds(1, on((block,5)), nothing, 57).
holds(1, on((block,6)), puzzle_room_table_right, 57).
holds(1, on((block,7)), (block,8), 57).
holds(1, on((block,8)), (block,9), 57).
holds(1, on((block,9)), puzzle_room_table_middle, 57).
holds(1, tower_base((block,1),puzzle_room_table), true, 57).
holds(1, tower_base((block,2),puzzle_room_table), false, 57).
holds(1, tower_base((block,3),puzzle_room_table), true, 57).
holds(1, tower_base((block,4),puzzle_room_table), false, 57).
holds(1, tower_base((block,5),puzzle_room_table), false, 57).
holds(1, tower_base((block,6),puzzle_room_table), true, 57).
holds(1, tower_base((block,7),puzzle_room_table), false, 57).
holds(1, tower_base((block,8),puzzle_room_table), false, 57).
holds(1, tower_base((block,9),puzzle_room_table), true, 57).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 57).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 57).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 57).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 57).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 57).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 57).
holds(1, unordered_tower((block,7),puzzle_room_table), false, 57).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 57).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 57).
holds(2, complete_tower(blue,puzzle_room_table), false, 57).
holds(2, complete_tower(red,puzzle_room_table), false, 57).
holds(2, complete_tower(yellow,puzzle_room_table), true, 57).
holds(2, configuration(manipulator_arm_1), extended, 57).
holds(2, configuration(manipulator_arm_2), extended, 57).
holds(2, configuration(puzzle_room_door), open, 57).
holds(2, configuration(starting_room_door), closed, 57).
holds(2, configuration(store_room_door), open, 57).
holds(2, grasping(manipulator_arm_1), nothing, 57).
holds(2, grasping(manipulator_arm_2), nothing, 57).
holds(2, in((block,1)), puzzle_room, 57).
holds(2, in((block,2)), puzzle_room, 57).
holds(2, in((block,3)), puzzle_room, 57).
holds(2, in((block,4)), store_room, 57).
holds(2, in((block,5)), store_room, 57).
holds(2, in((block,6)), puzzle_room, 57).
holds(2, in((block,7)), puzzle_room, 57).
holds(2, in((block,8)), puzzle_room, 57).
holds(2, in((block,9)), puzzle_room, 57).
holds(2, in(manipulator_arm_1), puzzle_room, 57).
holds(2, in(manipulator_arm_2), puzzle_room, 57).
holds(2, in(puzzle_room_table), puzzle_room, 57).
holds(2, in(talos), puzzle_room, 57).
holds(2, in_tower((block,1),(block,1)), true, 57).
holds(2, in_tower((block,1),(block,2)), false, 57).
holds(2, in_tower((block,1),(block,3)), false, 57).
holds(2, in_tower((block,1),(block,4)), false, 57).
holds(2, in_tower((block,1),(block,5)), false, 57).
holds(2, in_tower((block,1),(block,6)), false, 57).
holds(2, in_tower((block,1),(block,7)), false, 57).
holds(2, in_tower((block,1),(block,8)), false, 57).
holds(2, in_tower((block,1),(block,9)), false, 57).
holds(2, in_tower((block,2),(block,1)), false, 57).
holds(2, in_tower((block,2),(block,2)), false, 57).
holds(2, in_tower((block,2),(block,3)), false, 57).
holds(2, in_tower((block,2),(block,4)), false, 57).
holds(2, in_tower((block,2),(block,5)), false, 57).
holds(2, in_tower((block,2),(block,6)), false, 57).
holds(2, in_tower((block,2),(block,7)), false, 57).
holds(2, in_tower((block,2),(block,8)), false, 57).
holds(2, in_tower((block,2),(block,9)), false, 57).
holds(2, in_tower((block,3),(block,1)), false, 57).
holds(2, in_tower((block,3),(block,2)), true, 57).
holds(2, in_tower((block,3),(block,3)), true, 57).
holds(2, in_tower((block,3),(block,4)), false, 57).
holds(2, in_tower((block,3),(block,5)), false, 57).
holds(2, in_tower((block,3),(block,6)), false, 57).
holds(2, in_tower((block,3),(block,7)), false, 57).
holds(2, in_tower((block,3),(block,8)), false, 57).
holds(2, in_tower((block,3),(block,9)), false, 57).
holds(2, in_tower((block,4),(block,1)), false, 57).
holds(2, in_tower((block,4),(block,2)), false, 57).
holds(2, in_tower((block,4),(block,3)), false, 57).
holds(2, in_tower((block,4),(block,4)), false, 57).
holds(2, in_tower((block,4),(block,5)), false, 57).
holds(2, in_tower((block,4),(block,6)), false, 57).
holds(2, in_tower((block,4),(block,7)), false, 57).
holds(2, in_tower((block,4),(block,8)), false, 57).
holds(2, in_tower((block,4),(block,9)), false, 57).
holds(2, in_tower((block,5),(block,1)), false, 57).
holds(2, in_tower((block,5),(block,2)), false, 57).
holds(2, in_tower((block,5),(block,3)), false, 57).
holds(2, in_tower((block,5),(block,4)), false, 57).
holds(2, in_tower((block,5),(block,5)), false, 57).
holds(2, in_tower((block,5),(block,6)), false, 57).
holds(2, in_tower((block,5),(block,7)), false, 57).
holds(2, in_tower((block,5),(block,8)), false, 57).
holds(2, in_tower((block,5),(block,9)), false, 57).
holds(2, in_tower((block,6),(block,1)), false, 57).
holds(2, in_tower((block,6),(block,2)), false, 57).
holds(2, in_tower((block,6),(block,3)), false, 57).
holds(2, in_tower((block,6),(block,4)), false, 57).
holds(2, in_tower((block,6),(block,5)), false, 57).
holds(2, in_tower((block,6),(block,6)), true, 57).
holds(2, in_tower((block,6),(block,7)), false, 57).
holds(2, in_tower((block,6),(block,8)), false, 57).
holds(2, in_tower((block,6),(block,9)), false, 57).
holds(2, in_tower((block,7),(block,1)), false, 57).
holds(2, in_tower((block,7),(block,2)), false, 57).
holds(2, in_tower((block,7),(block,3)), false, 57).
holds(2, in_tower((block,7),(block,4)), false, 57).
holds(2, in_tower((block,7),(block,5)), false, 57).
holds(2, in_tower((block,7),(block,6)), false, 57).
holds(2, in_tower((block,7),(block,7)), false, 57).
holds(2, in_tower((block,7),(block,8)), false, 57).
holds(2, in_tower((block,7),(block,9)), false, 57).
holds(2, in_tower((block,8),(block,1)), false, 57).
holds(2, in_tower((block,8),(block,2)), false, 57).
holds(2, in_tower((block,8),(block,3)), false, 57).
holds(2, in_tower((block,8),(block,4)), false, 57).
holds(2, in_tower((block,8),(block,5)), false, 57).
holds(2, in_tower((block,8),(block,6)), false, 57).
holds(2, in_tower((block,8),(block,7)), false, 57).
holds(2, in_tower((block,8),(block,8)), false, 57).
holds(2, in_tower((block,8),(block,9)), false, 57).
holds(2, in_tower((block,9),(block,1)), false, 57).
holds(2, in_tower((block,9),(block,2)), false, 57).
holds(2, in_tower((block,9),(block,3)), false, 57).
holds(2, in_tower((block,9),(block,4)), false, 57).
holds(2, in_tower((block,9),(block,5)), false, 57).
holds(2, in_tower((block,9),(block,6)), false, 57).
holds(2, in_tower((block,9),(block,7)), true, 57).
holds(2, in_tower((block,9),(block,8)), true, 57).
holds(2, in_tower((block,9),(block,9)), true, 57).
holds(2, on((block,1)), puzzle_room_table, 57).
holds(2, on((block,2)), (block,3), 57).
holds(2, on((block,3)), puzzle_room_table, 57).
holds(2, on((block,4)), nothing, 57).
holds(2, on((block,5)), nothing, 57).
holds(2, on((block,6)), puzzle_room_table, 57).
holds(2, on((block,7)), (block,8), 57).
holds(2, on((block,8)), (block,9), 57).
holds(2, on((block,9)), puzzle_room_table, 57).
holds(2, tower_base((block,1),puzzle_room_table), true, 57).
holds(2, tower_base((block,2),puzzle_room_table), false, 57).
holds(2, tower_base((block,3),puzzle_room_table), true, 57).
holds(2, tower_base((block,4),puzzle_room_table), false, 57).
holds(2, tower_base((block,5),puzzle_room_table), false, 57).
holds(2, tower_base((block,6),puzzle_room_table), true, 57).
holds(2, tower_base((block,7),puzzle_room_table), false, 57).
holds(2, tower_base((block,8),puzzle_room_table), false, 57).
holds(2, tower_base((block,9),puzzle_room_table), true, 57).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 57).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 57).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 57).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 57).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 57).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 57).
holds(2, unordered_tower((block,7),puzzle_room_table), false, 57).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 57).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 57).

[14-04-2022_17-52-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[14-04-2022_17-52-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-52-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[14-04-2022_17-52-07] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=66']

[14-04-2022_17-52-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 37})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 38})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 39})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 40})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 41})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 42})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,4))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'I': 43})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'I': 44})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 45})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 46})

[14-04-2022_17-52-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-52-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 10 rules into program part base:

sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 37).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 38).
sub_goal(2, talos, move(hallway), in(talos), hallway, 39).
sub_goal(2, talos, move(store_room), in(talos), store_room, 40).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 41).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 42).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,4)), grasping(manipulator_arm_1), (block,4), 43).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), (block,5), 44).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 45).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 46).

[14-04-2022_17-52-07] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-52-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[14-04-2022_17-52-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=66']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A27DECC160>]
	incrementor = SolveIncrementor(step_start=57, step_increase=1, step_increase_initial=10, step_end_min=67, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1731.5745852999999, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 57), range_=None), IncPart(name='plan_module', args=('#inc', 57, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 57, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 57, 37, 46, 'sequential', 'false'), range_=None)]

[14-04-2022_17-52-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-52-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-52-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-52-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1279 rules

[14-04-2022_17-52-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0067308999996384955s

[14-04-2022_17-52-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[14-04-2022_17-52-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[14-04-2022_17-52-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.041167s.

[14-04-2022_17-52-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007361s with result Satisfiable.

[14-04-2022_17-52-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[14-04-2022_17-52-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A286175360>

[14-04-2022_17-52-07] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 57)
	('last_sgoals', 46)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('first_sgoals', 37)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A286175360>)

[14-04-2022_17-52-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 57). %* None *%
#program plan_module(#inc, 57, false, false). %* None *%
#program optimisation_module(#inc, 57, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 57, 37, 46, sequential, false). %* None *%

[14-04-2022_17-52-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     56 : Current =     66
Incrementor step ends | Minimum  =     67 : Maximum =    300

[14-04-2022_17-52-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(66)]), ('state_module', [Number(57), Number(57)]), ('plan_module', [Number(57), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(57), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(57)]), ('action_preconditions', [Number(57)]), ('variable_relations', [Number(57)]), ('abstraction_mappings', [Number(57)]), ('conformance_module', [Number(57), Number(57), Number(37), Number(46), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(58), Number(57)]), ('plan_module', [Number(58), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(58), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(58)]), ('action_preconditions', [Number(58)]), ('variable_relations', [Number(58)]), ('abstraction_mappings', [Number(58)]), ('conformance_module', [Number(58), Number(57), Number(37), Number(46), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(59), Number(57)]), ('plan_module', [Number(59), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(59), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(59)]), ('action_preconditions', [Number(59)]), ('variable_relations', [Number(59)]), ('abstraction_mappings', [Number(59)]), ('conformance_module', [Number(59), Number(57), Number(37), Number(46), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(60), Number(57)]), ('plan_module', [Number(60), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(60), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(60)]), ('action_preconditions', [Number(60)]), ('variable_relations', [Number(60)]), ('abstraction_mappings', [Number(60)]), ('conformance_module', [Number(60), Number(57), Number(37), Number(46), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(61), Number(57)]), ('plan_module', [Number(61), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(61), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(61)]), ('action_preconditions', [Number(61)]), ('variable_relations', [Number(61)]), ('abstraction_mappings', [Number(61)]), ('conformance_module', [Number(61), Number(57), Number(37), Number(46), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(62), Number(57)]), ('plan_module', [Number(62), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(62), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(62)]), ('action_preconditions', [Number(62)]), ('variable_relations', [Number(62)]), ('abstraction_mappings', [Number(62)]), ('conformance_module', [Number(62), Number(57), Number(37), Number(46), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(63), Number(57)]), ('plan_module', [Number(63), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(63), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(63)]), ('action_preconditions', [Number(63)]), ('variable_relations', [Number(63)]), ('abstraction_mappings', [Number(63)]), ('conformance_module', [Number(63), Number(57), Number(37), Number(46), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(64), Number(57)]), ('plan_module', [Number(64), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(64), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(64)]), ('action_preconditions', [Number(64)]), ('variable_relations', [Number(64)]), ('abstraction_mappings', [Number(64)]), ('conformance_module', [Number(64), Number(57), Number(37), Number(46), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(65), Number(57)]), ('plan_module', [Number(65), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(65), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(65)]), ('action_preconditions', [Number(65)]), ('variable_relations', [Number(65)]), ('abstraction_mappings', [Number(65)]), ('conformance_module', [Number(65), Number(57), Number(37), Number(46), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(66), Number(57)]), ('plan_module', [Number(66), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(66), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(66)]), ('action_preconditions', [Number(66)]), ('variable_relations', [Number(66)]), ('abstraction_mappings', [Number(66)]), ('conformance_module', [Number(66), Number(57), Number(37), Number(46), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.385727s.

[14-04-2022_17-52-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.876320s with result Satisfiable.

[14-04-2022_17-52-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.262047399999574, Incremental time limit = None
Running cumulative time = 2.262047399999574, Cumulative time limit = 1731.5745852999999
Used memory = (RSS = 2069.363281Mb, VMS = 2080.136719Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.385727s, Solving = 0.876320s, Total = 2.262047s, Memory = (RSS = 2069.363281Mb, VMS = 2080.136719Mb), Step range = [57-66]), Calls = 1
Final Model :: Total atoms = 13270, Cost = (-7,), Optimality proven = False, Number = 5, Thread ID = 3, Model type = ModelType.StableModel

[14-04-2022_17-52-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     66 : Current =     67
Incrementor step ends | Minimum  =     67 : Maximum =    300

[14-04-2022_17-52-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(67)]), ('state_module', [Number(67), Number(57)]), ('plan_module', [Number(67), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(67), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(67)]), ('action_preconditions', [Number(67)]), ('variable_relations', [Number(67)]), ('abstraction_mappings', [Number(67)]), ('conformance_module', [Number(67), Number(57), Number(37), Number(46), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.217052s.

[14-04-2022_17-52-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.042666s with result Unsatisfiable.

[14-04-2022_17-52-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2597176999997828, Incremental time limit = None
Running cumulative time = 2.5217650999993566, Cumulative time limit = 1731.5745852999999
Used memory = (RSS = 2073.796875Mb, VMS = 2086.757812Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     67 : Current =     68
Incrementor step ends | Minimum  =     67 : Maximum =    300

[14-04-2022_17-52-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(68)]), ('state_module', [Number(68), Number(57)]), ('plan_module', [Number(68), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(68), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(68)]), ('action_preconditions', [Number(68)]), ('variable_relations', [Number(68)]), ('abstraction_mappings', [Number(68)]), ('conformance_module', [Number(68), Number(57), Number(37), Number(46), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.217933s.

[14-04-2022_17-52-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.044834s with result Unsatisfiable.

[14-04-2022_17-52-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2627671000009286, Incremental time limit = None
Running cumulative time = 2.7845322000002852, Cumulative time limit = 1731.5745852999999
Used memory = (RSS = 2076.144531Mb, VMS = 2087.285156Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     68 : Current =     69
Incrementor step ends | Minimum  =     67 : Maximum =    300

[14-04-2022_17-52-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(69)]), ('state_module', [Number(69), Number(57)]), ('plan_module', [Number(69), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(69), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(69)]), ('action_preconditions', [Number(69)]), ('variable_relations', [Number(69)]), ('abstraction_mappings', [Number(69)]), ('conformance_module', [Number(69), Number(57), Number(37), Number(46), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.223152s.

[14-04-2022_17-52-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.060830s with result Unsatisfiable.

[14-04-2022_17-52-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.28398269999979675, Incremental time limit = None
Running cumulative time = 3.068514900000082, Cumulative time limit = 1731.5745852999999
Used memory = (RSS = 2080.441406Mb, VMS = 2090.289062Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     69 : Current =     70
Incrementor step ends | Minimum  =     67 : Maximum =    300

[14-04-2022_17-52-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(70)]), ('state_module', [Number(70), Number(57)]), ('plan_module', [Number(70), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(70), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(70)]), ('action_preconditions', [Number(70)]), ('variable_relations', [Number(70)]), ('abstraction_mappings', [Number(70)]), ('conformance_module', [Number(70), Number(57), Number(37), Number(46), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.228117s.

[14-04-2022_17-52-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.053738s with result Unsatisfiable.

[14-04-2022_17-52-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.28185560000019905, Incremental time limit = None
Running cumulative time = 3.350370500000281, Cumulative time limit = 1731.5745852999999
Used memory = (RSS = 2082.722656Mb, VMS = 2090.816406Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     70 : Current =     71
Incrementor step ends | Minimum  =     67 : Maximum =    300

[14-04-2022_17-52-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(71)]), ('state_module', [Number(71), Number(57)]), ('plan_module', [Number(71), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(71), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(71)]), ('action_preconditions', [Number(71)]), ('variable_relations', [Number(71)]), ('abstraction_mappings', [Number(71)]), ('conformance_module', [Number(71), Number(57), Number(37), Number(46), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.231579s.

[14-04-2022_17-52-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.066620s with result Unsatisfiable.

[14-04-2022_17-52-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.298198900000898, Incremental time limit = None
Running cumulative time = 3.648569400001179, Cumulative time limit = 1731.5745852999999
Used memory = (RSS = 2085.304688Mb, VMS = 2103.503906Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     71 : Current =     72
Incrementor step ends | Minimum  =     67 : Maximum =    300

[14-04-2022_17-52-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(72)]), ('state_module', [Number(72), Number(57)]), ('plan_module', [Number(72), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(72), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(72)]), ('action_preconditions', [Number(72)]), ('variable_relations', [Number(72)]), ('abstraction_mappings', [Number(72)]), ('conformance_module', [Number(72), Number(57), Number(37), Number(46), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.236231s.

[14-04-2022_17-52-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.073820s with result Unsatisfiable.

[14-04-2022_17-52-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3100501999997505, Incremental time limit = None
Running cumulative time = 3.9586196000009295, Cumulative time limit = 1731.5745852999999
Used memory = (RSS = 2087.792969Mb, VMS = 2104.031250Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     72 : Current =     73
Incrementor step ends | Minimum  =     67 : Maximum =    300

[14-04-2022_17-52-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(73)]), ('state_module', [Number(73), Number(57)]), ('plan_module', [Number(73), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(73), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(73)]), ('action_preconditions', [Number(73)]), ('variable_relations', [Number(73)]), ('abstraction_mappings', [Number(73)]), ('conformance_module', [Number(73), Number(57), Number(37), Number(46), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.244104s.

[14-04-2022_17-52-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.093259s with result Satisfiable.

[14-04-2022_17-52-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3373634999998103, Incremental time limit = None
Running cumulative time = 4.29598310000074, Cumulative time limit = 1731.5745852999999
Used memory = (RSS = 2091.511719Mb, VMS = 2106.054688Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.983896s, Solving = 1.312087s, Total = 4.295983s, Memory = (RSS = 2091.511719Mb, VMS = 2106.054688Mb), Step range = [57-73]), Calls = 8
Final Model :: Total atoms = 18437, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[14-04-2022_17-52-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 1.385727s, Solving = 0.876320s, Total = 2.262047s, Memory = (RSS = 2069.363281Mb, VMS = 2080.136719Mb), Step range = [57-66]
2 : Statistics :: Grounding = 0.217052s, Solving = 0.042666s, Total = 0.259718s, Memory = (RSS = 2073.796875Mb, VMS = 2086.757812Mb), Step range = [67-67]
3 : Statistics :: Grounding = 0.217933s, Solving = 0.044834s, Total = 0.262767s, Memory = (RSS = 2076.144531Mb, VMS = 2087.285156Mb), Step range = [68-68]
4 : Statistics :: Grounding = 0.223152s, Solving = 0.060830s, Total = 0.283983s, Memory = (RSS = 2080.441406Mb, VMS = 2090.289062Mb), Step range = [69-69]
5 : Statistics :: Grounding = 0.228117s, Solving = 0.053738s, Total = 0.281856s, Memory = (RSS = 2082.722656Mb, VMS = 2090.816406Mb), Step range = [70-70]
6 : Statistics :: Grounding = 0.231579s, Solving = 0.066620s, Total = 0.298199s, Memory = (RSS = 2085.304688Mb, VMS = 2103.503906Mb), Step range = [71-71]
7 : Statistics :: Grounding = 0.236231s, Solving = 0.073820s, Total = 0.310050s, Memory = (RSS = 2087.792969Mb, VMS = 2104.031250Mb), Step range = [72-72]
8 : Statistics :: Grounding = 0.244104s, Solving = 0.093259s, Total = 0.337363s, Memory = (RSS = 2091.511719Mb, VMS = 2106.054688Mb), Step range = [73-73]

[14-04-2022_17-52-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 4.295983s due to: Stop condition reached.

[14-04-2022_17-52-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[14-04-2022_17-52-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[14-04-2022_17-52-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-52-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-52-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[14-04-2022_17-52-12] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 14, 27: 14, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 20, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 29, 50: 30, 51: 31, 52: 32, 53: 32, 54: 33, 55: 34, 56: 35, 57: 36}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25, 14: 28, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 38, 21: 39, 22: 40, 23: 41, 24: 42, 25: 43, 26: 44, 27: 46, 28: 48, 29: 49, 30: 50, 31: 51, 32: 53, 33: 54, 34: 55, 35: 56, 36: 57}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 6, 23: 7, 24: 8, 25: 9, 26: 10, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 16, 33: 17, 34: 18, 35: 19, 36: 20, 37: 21, 38: 21, 39: 21, 40: 21, 41: 22, 42: 22, 43: 22, 44: 22, 45: 23, 46: 24, 47: 24, 48: 24, 49: 25, 50: 25, 51: 26, 52: 27, 53: 27, 54: 28, 55: 29, 56: 30}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 22, 7: 23, 8: 24, 9: 25, 10: 26, 11: 27, 12: 28, 13: 29, 14: 30, 15: 31, 16: 32, 17: 33, 18: 34, 19: 35, 20: 36, 21: 40, 22: 44, 23: 45, 24: 48, 25: 50, 26: 51, 27: 53, 28: 54, 29: 55, 30: 56}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 7, 16: 8, 17: 9, 18: 9, 19: 10, 20: 10, 21: 11, 22: 12, 23: 13, 24: 14, 25: 15, 26: 15, 27: 16, 28: 16, 29: 16, 30: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 15, 8: 16, 9: 18, 10: 20, 11: 21, 12: 22, 13: 23, 14: 24, 15: 26, 16: 29, 17: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-52-13] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 14, 27: 14, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 20, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 29, 50: 30, 51: 31, 52: 32, 53: 32, 54: 33, 55: 34, 56: 35, 57: 36, 58: 37, 59: 38, 60: 39, 61: 39, 62: 40, 63: 40, 64: 40, 65: 41, 66: 41, 67: 41, 68: 42, 69: 43, 70: 43, 71: 44, 72: 45, 73: 46}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25, 14: 28, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 38, 21: 39, 22: 40, 23: 41, 24: 42, 25: 43, 26: 44, 27: 46, 28: 48, 29: 49, 30: 50, 31: 51, 32: 53, 33: 54, 34: 55, 35: 56, 36: 57, 37: 58, 38: 59, 39: 61, 40: 64, 41: 67, 42: 68, 43: 70, 44: 71, 45: 72, 46: 73}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 6, 23: 7, 24: 8, 25: 9, 26: 10, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 16, 33: 17, 34: 18, 35: 19, 36: 20, 37: 21, 38: 21, 39: 21, 40: 21, 41: 22, 42: 22, 43: 22, 44: 22, 45: 23, 46: 24, 47: 24, 48: 24, 49: 25, 50: 25, 51: 26, 52: 27, 53: 27, 54: 28, 55: 29, 56: 30}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 22, 7: 23, 8: 24, 9: 25, 10: 26, 11: 27, 12: 28, 13: 29, 14: 30, 15: 31, 16: 32, 17: 33, 18: 34, 19: 35, 20: 36, 21: 40, 22: 44, 23: 45, 24: 48, 25: 50, 26: 51, 27: 53, 28: 54, 29: 55, 30: 56}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 7, 16: 8, 17: 9, 18: 9, 19: 10, 20: 10, 21: 11, 22: 12, 23: 13, 24: 14, 25: 15, 26: 15, 27: 16, 28: 16, 29: 16, 30: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 15, 8: 16, 9: 18, 10: 20, 11: 21, 12: 22, 13: 23, 14: 24, 15: 26, 16: 29, 17: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-52-13] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 46, Last requested goal index = 46, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[14-04-2022_17-52-13] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.983896s, Solving = 1.312087s, Total = 4.295983s, Memory = (RSS = 2091.511719Mb, VMS = 2106.054688Mb), Step range = [57-73]), Calls = 8
Model :: Total atoms = 18437, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[14-04-2022_17-52-13] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 16 :: Actions = 16                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 25:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 26:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,8)))
Step 27:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 28:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,8))
Step 29:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 30:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : move((store_room,1))
Step 31:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 37:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 38:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 39:
    Current Sub-goals:
        [Index = 21] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 21] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 40:
    Current Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,9)))
Step 41:
    Current Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Achieved Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,9))
Step 42:
    Current Sub-goals:
        [Index = 24] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 24] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,9),puzzle_room_table_middle)
Step 43:
    Current Sub-goals:
        [Index = 25] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 25] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,9))
Step 44:
    Current Sub-goals:
        [Index = 26] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Achieved Sub-goals:
        [Index = 26] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Planned actions:
        talos : put(manipulator_end_2,(block,8),(block,9))
Step 45:
    Current Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 46:
    Current Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,8))
Step 47:
    Current Sub-goals:
        [Index = 28] talos : grasp(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = (block,7)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,7)))
Step 48:
    Current Sub-goals:
        [Index = 28] talos : grasp(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = (block,7)
    Achieved Sub-goals:
        [Index = 28] talos : grasp(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = (block,7)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,7))
Step 49:
    Current Sub-goals:
        [Index = 29] talos : put(manipulator_arm_2,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Achieved Sub-goals:
        [Index = 29] talos : put(manipulator_arm_2,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Planned actions:
        talos : put(manipulator_end_2,(block,7),(block,8))
Step 50:
    Current Sub-goals:
        [Index = 30] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 30] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 51:
    Current Sub-goals:
        [Index = 31] talos : release(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 31] talos : release(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,7))
Step 52:
    Current Sub-goals:
        [Index = 32] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,2)))
Step 53:
    Current Sub-goals:
        [Index = 32] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 32] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 54:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,2))
Step 55:
    Current Sub-goals:
        [Index = 34] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 34] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 56:
    Current Sub-goals:
        [Index = 35] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 35] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_2,(block,2),(block,3))
Step 57:
    Current Sub-goals:
        [Index = 36] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 36] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,2))
Step 58:
    Current Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 59:
    Current Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 60:
    Current Sub-goals:
        [Index = 39] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 61:
    Current Sub-goals:
        [Index = 39] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 39] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 62:
    Current Sub-goals:
        [Index = 40] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 63:
    Current Sub-goals:
        [Index = 40] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 64:
    Current Sub-goals:
        [Index = 40] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 40] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 65:
    Current Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 66:
    Current Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 67:
    Current Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 68:
    Current Sub-goals:
        [Index = 42] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 42] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
Step 69:
    Current Sub-goals:
        [Index = 43] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 70:
    Current Sub-goals:
        [Index = 43] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
        [Index = 43] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
Step 71:
    Current Sub-goals:
        [Index = 44] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 44] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 72:
    Current Sub-goals:
        [Index = 45] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 45] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 73:
    Current Sub-goals:
        [Index = 46] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 46] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)

[14-04-2022_17-52-13] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[14-04-2022_17-52-13] DEBUG :: ASH Planner Main #1 >> Value of end step of abstract plan to divide adjusted for right blend of current problem: end_step=73

[14-04-2022_17-52-13] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[14-04-2022_17-52-13] DEBUG :: ASH Planner Main #1 >> Monolevel problem 5 at level 1 solved.

[14-04-2022_17-52-13] DEBUG :: ASH Planner Main #1 >> Online planning increment 5 finished.

[14-04-2022_17-52-13] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 17 : Goals achieved = 17 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 3 : Total constraining sub-goal stages = 30 : Goals achieved = 30 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 5 : Total constraining sub-goal stages = 56 : Goals achieved = 46 : Goals unachieved = 10 : Complete = False

[14-04-2022_17-52-13] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[14-04-2022_17-52-13] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 6 by method ground-first is [1-1].

[14-04-2022_17-52-13] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 6 at level 1:
Total Templated Partial Problems = 2, Problem Range = [5-6], Size = 20, Sub-goal Stage Range = [37-56]
Division points [total=1] : [(Index = 46, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[14-04-2022_17-52-13] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [47-56]

[14-04-2022_17-52-13] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 73, chosen step range to extract = range(0, 74)

[14-04-2022_17-52-13] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 56, Total actions = 56, Produced sub-goal stages = 56, Produced sub-goal literals = 56
Level [1]: Length = 73, Total actions = 73, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-52-13] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 56, chosen step range to extract = range(0, 57)

[14-04-2022_17-52-13] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 56, Total actions = 56, Produced sub-goal stages = 56, Produced sub-goal literals = 56
Level [1]: Length = 73, Total actions = 73, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-52-13] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 30, chosen step range to extract = range(0, 31)

[14-04-2022_17-52-13] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 56, Total actions = 56, Produced sub-goal stages = 56, Produced sub-goal literals = 56
Level [1]: Length = 73, Total actions = 73, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-52-13] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[14-04-2022_17-52-13] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 56, Total actions = 56, Produced sub-goal stages = 56, Produced sub-goal literals = 56
Level [1]: Length = 73, Total actions = 73, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-52-13] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [47-56], problem number = 6, increment number = 6

[14-04-2022_17-52-13] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 47)
	('last_sgoals', 56)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1727.278602199999)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[14-04-2022_17-52-13] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [47-56] : Concurrency disabled : Minimum search length bound enabled with value 82

[14-04-2022_17-52-13] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 47
last_sgoals = 56
start_step = 73
is_initial = False
is_final = True
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 82

[14-04-2022_17-52-13] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[14-04-2022_17-52-13] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[14-04-2022_17-52-13] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[14-04-2022_17-52-13] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[14-04-2022_17-52-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[14-04-2022_17-52-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[14-04-2022_17-52-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-52-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-52-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-52-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-52-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[14-04-2022_17-52-13] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-52-13] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 73 as problem start state.

[14-04-2022_17-52-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'S': 73})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,4))', 'S': 73})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 73})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 73})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 73})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 73})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 73})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 73})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'S': 73})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 73})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,4)', 'S': 73})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 73})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 73})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 73})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 73})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 73})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 73})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 73})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 73})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(puzzle_room,1)', 'S': 73})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 73})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(store_room,0)', 'S': 73})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(store_room,0)', 'S': 73})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(store_room,0)', 'S': 73})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(store_room,0)', 'S': 73})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(store_room,0)', 'S': 73})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(store_room,0)', 'S': 73})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 73})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 73})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 73})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 73})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(store_room,0)', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 73})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 73})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 73})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 73})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 73})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 73})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 73})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'S': 73})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'S': 73})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'S': 73})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 73})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 73})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 73})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 73})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'S': 73})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 73})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 73})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 73})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 73})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 73})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'S': 73})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 73})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 73})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 73})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 73})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 73})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 73})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 73})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 73})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'puzzle_room', 'S': 73})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 73})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 73})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 73})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 73})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'store_room', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 73})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 73})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 73})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 73})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 73})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 73})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 73})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'S': 73})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'S': 73})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 73})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 73})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 73})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 73})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 73})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 73})

[14-04-2022_17-52-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-52-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 73).
holds(1, complete_tower(red,puzzle_room_table), false, 73).
holds(1, complete_tower(yellow,puzzle_room_table), true, 73).
holds(1, configuration(manipulator_end_1), aligned_with((block,4)), 73).
holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 73).
holds(1, configuration(manipulator_limb_1), retracted, 73).
holds(1, configuration(manipulator_limb_2), retracted, 73).
holds(1, configuration(puzzle_room_door), open, 73).
holds(1, configuration(starting_room_door), closed, 73).
holds(1, configuration(store_room_door), open, 73).
holds(1, grasping(manipulator_arm_1), (block,4), 73).
holds(1, grasping(manipulator_arm_2), (block,5), 73).
holds(1, grasping(manipulator_end_1), (block,4), 73).
holds(1, grasping(manipulator_end_2), (block,5), 73).
holds(1, in((block,1)), (puzzle_room,1), 73).
holds(1, in((block,2)), (puzzle_room,1), 73).
holds(1, in((block,3)), (puzzle_room,1), 73).
holds(1, in((block,4)), (store_room,0), 73).
holds(1, in((block,5)), (store_room,0), 73).
holds(1, in((block,6)), (puzzle_room,1), 73).
holds(1, in((block,7)), (puzzle_room,1), 73).
holds(1, in((block,8)), (puzzle_room,1), 73).
holds(1, in((block,9)), (puzzle_room,1), 73).
holds(1, in(manipulator_arm_1), (store_room,0), 73).
holds(1, in(manipulator_arm_2), (store_room,0), 73).
holds(1, in(manipulator_end_1), (store_room,0), 73).
holds(1, in(manipulator_end_2), (store_room,0), 73).
holds(1, in(manipulator_limb_1), (store_room,0), 73).
holds(1, in(manipulator_limb_2), (store_room,0), 73).
holds(1, in(puzzle_room_table), (puzzle_room,1), 73).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 73).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 73).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 73).
holds(1, in(talos), (store_room,0), 73).
holds(1, in_tower((block,1),(block,1)), true, 73).
holds(1, in_tower((block,1),(block,2)), false, 73).
holds(1, in_tower((block,1),(block,3)), false, 73).
holds(1, in_tower((block,1),(block,4)), false, 73).
holds(1, in_tower((block,1),(block,5)), false, 73).
holds(1, in_tower((block,1),(block,6)), false, 73).
holds(1, in_tower((block,1),(block,7)), false, 73).
holds(1, in_tower((block,1),(block,8)), false, 73).
holds(1, in_tower((block,1),(block,9)), false, 73).
holds(1, in_tower((block,2),(block,1)), false, 73).
holds(1, in_tower((block,2),(block,2)), false, 73).
holds(1, in_tower((block,2),(block,3)), false, 73).
holds(1, in_tower((block,2),(block,4)), false, 73).
holds(1, in_tower((block,2),(block,5)), false, 73).
holds(1, in_tower((block,2),(block,6)), false, 73).
holds(1, in_tower((block,2),(block,7)), false, 73).
holds(1, in_tower((block,2),(block,8)), false, 73).
holds(1, in_tower((block,2),(block,9)), false, 73).
holds(1, in_tower((block,3),(block,1)), false, 73).
holds(1, in_tower((block,3),(block,2)), true, 73).
holds(1, in_tower((block,3),(block,3)), true, 73).
holds(1, in_tower((block,3),(block,4)), false, 73).
holds(1, in_tower((block,3),(block,5)), false, 73).
holds(1, in_tower((block,3),(block,6)), false, 73).
holds(1, in_tower((block,3),(block,7)), false, 73).
holds(1, in_tower((block,3),(block,8)), false, 73).
holds(1, in_tower((block,3),(block,9)), false, 73).
holds(1, in_tower((block,4),(block,1)), false, 73).
holds(1, in_tower((block,4),(block,2)), false, 73).
holds(1, in_tower((block,4),(block,3)), false, 73).
holds(1, in_tower((block,4),(block,4)), false, 73).
holds(1, in_tower((block,4),(block,5)), false, 73).
holds(1, in_tower((block,4),(block,6)), false, 73).
holds(1, in_tower((block,4),(block,7)), false, 73).
holds(1, in_tower((block,4),(block,8)), false, 73).
holds(1, in_tower((block,4),(block,9)), false, 73).
holds(1, in_tower((block,5),(block,1)), false, 73).
holds(1, in_tower((block,5),(block,2)), false, 73).
holds(1, in_tower((block,5),(block,3)), false, 73).
holds(1, in_tower((block,5),(block,4)), false, 73).
holds(1, in_tower((block,5),(block,5)), false, 73).
holds(1, in_tower((block,5),(block,6)), false, 73).
holds(1, in_tower((block,5),(block,7)), false, 73).
holds(1, in_tower((block,5),(block,8)), false, 73).
holds(1, in_tower((block,5),(block,9)), false, 73).
holds(1, in_tower((block,6),(block,1)), false, 73).
holds(1, in_tower((block,6),(block,2)), false, 73).
holds(1, in_tower((block,6),(block,3)), false, 73).
holds(1, in_tower((block,6),(block,4)), false, 73).
holds(1, in_tower((block,6),(block,5)), false, 73).
holds(1, in_tower((block,6),(block,6)), true, 73).
holds(1, in_tower((block,6),(block,7)), false, 73).
holds(1, in_tower((block,6),(block,8)), false, 73).
holds(1, in_tower((block,6),(block,9)), false, 73).
holds(1, in_tower((block,7),(block,1)), false, 73).
holds(1, in_tower((block,7),(block,2)), false, 73).
holds(1, in_tower((block,7),(block,3)), false, 73).
holds(1, in_tower((block,7),(block,4)), false, 73).
holds(1, in_tower((block,7),(block,5)), false, 73).
holds(1, in_tower((block,7),(block,6)), false, 73).
holds(1, in_tower((block,7),(block,7)), false, 73).
holds(1, in_tower((block,7),(block,8)), false, 73).
holds(1, in_tower((block,7),(block,9)), false, 73).
holds(1, in_tower((block,8),(block,1)), false, 73).
holds(1, in_tower((block,8),(block,2)), false, 73).
holds(1, in_tower((block,8),(block,3)), false, 73).
holds(1, in_tower((block,8),(block,4)), false, 73).
holds(1, in_tower((block,8),(block,5)), false, 73).
holds(1, in_tower((block,8),(block,6)), false, 73).
holds(1, in_tower((block,8),(block,7)), false, 73).
holds(1, in_tower((block,8),(block,8)), false, 73).
holds(1, in_tower((block,8),(block,9)), false, 73).
holds(1, in_tower((block,9),(block,1)), false, 73).
holds(1, in_tower((block,9),(block,2)), false, 73).
holds(1, in_tower((block,9),(block,3)), false, 73).
holds(1, in_tower((block,9),(block,4)), false, 73).
holds(1, in_tower((block,9),(block,5)), false, 73).
holds(1, in_tower((block,9),(block,6)), false, 73).
holds(1, in_tower((block,9),(block,7)), true, 73).
holds(1, in_tower((block,9),(block,8)), true, 73).
holds(1, in_tower((block,9),(block,9)), true, 73).
holds(1, on((block,1)), puzzle_room_table_left, 73).
holds(1, on((block,2)), (block,3), 73).
holds(1, on((block,3)), puzzle_room_table_left, 73).
holds(1, on((block,4)), nothing, 73).
holds(1, on((block,5)), nothing, 73).
holds(1, on((block,6)), puzzle_room_table_right, 73).
holds(1, on((block,7)), (block,8), 73).
holds(1, on((block,8)), (block,9), 73).
holds(1, on((block,9)), puzzle_room_table_middle, 73).
holds(1, tower_base((block,1),puzzle_room_table), true, 73).
holds(1, tower_base((block,2),puzzle_room_table), false, 73).
holds(1, tower_base((block,3),puzzle_room_table), true, 73).
holds(1, tower_base((block,4),puzzle_room_table), false, 73).
holds(1, tower_base((block,5),puzzle_room_table), false, 73).
holds(1, tower_base((block,6),puzzle_room_table), true, 73).
holds(1, tower_base((block,7),puzzle_room_table), false, 73).
holds(1, tower_base((block,8),puzzle_room_table), false, 73).
holds(1, tower_base((block,9),puzzle_room_table), true, 73).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 73).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 73).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 73).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 73).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 73).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 73).
holds(1, unordered_tower((block,7),puzzle_room_table), false, 73).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 73).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 73).
holds(2, complete_tower(blue,puzzle_room_table), false, 73).
holds(2, complete_tower(red,puzzle_room_table), false, 73).
holds(2, complete_tower(yellow,puzzle_room_table), true, 73).
holds(2, configuration(manipulator_arm_1), retracted, 73).
holds(2, configuration(manipulator_arm_2), retracted, 73).
holds(2, configuration(puzzle_room_door), open, 73).
holds(2, configuration(starting_room_door), closed, 73).
holds(2, configuration(store_room_door), open, 73).
holds(2, grasping(manipulator_arm_1), (block,4), 73).
holds(2, grasping(manipulator_arm_2), (block,5), 73).
holds(2, in((block,1)), puzzle_room, 73).
holds(2, in((block,2)), puzzle_room, 73).
holds(2, in((block,3)), puzzle_room, 73).
holds(2, in((block,4)), store_room, 73).
holds(2, in((block,5)), store_room, 73).
holds(2, in((block,6)), puzzle_room, 73).
holds(2, in((block,7)), puzzle_room, 73).
holds(2, in((block,8)), puzzle_room, 73).
holds(2, in((block,9)), puzzle_room, 73).
holds(2, in(manipulator_arm_1), store_room, 73).
holds(2, in(manipulator_arm_2), store_room, 73).
holds(2, in(puzzle_room_table), puzzle_room, 73).
holds(2, in(talos), store_room, 73).
holds(2, in_tower((block,1),(block,1)), true, 73).
holds(2, in_tower((block,1),(block,2)), false, 73).
holds(2, in_tower((block,1),(block,3)), false, 73).
holds(2, in_tower((block,1),(block,4)), false, 73).
holds(2, in_tower((block,1),(block,5)), false, 73).
holds(2, in_tower((block,1),(block,6)), false, 73).
holds(2, in_tower((block,1),(block,7)), false, 73).
holds(2, in_tower((block,1),(block,8)), false, 73).
holds(2, in_tower((block,1),(block,9)), false, 73).
holds(2, in_tower((block,2),(block,1)), false, 73).
holds(2, in_tower((block,2),(block,2)), false, 73).
holds(2, in_tower((block,2),(block,3)), false, 73).
holds(2, in_tower((block,2),(block,4)), false, 73).
holds(2, in_tower((block,2),(block,5)), false, 73).
holds(2, in_tower((block,2),(block,6)), false, 73).
holds(2, in_tower((block,2),(block,7)), false, 73).
holds(2, in_tower((block,2),(block,8)), false, 73).
holds(2, in_tower((block,2),(block,9)), false, 73).
holds(2, in_tower((block,3),(block,1)), false, 73).
holds(2, in_tower((block,3),(block,2)), true, 73).
holds(2, in_tower((block,3),(block,3)), true, 73).
holds(2, in_tower((block,3),(block,4)), false, 73).
holds(2, in_tower((block,3),(block,5)), false, 73).
holds(2, in_tower((block,3),(block,6)), false, 73).
holds(2, in_tower((block,3),(block,7)), false, 73).
holds(2, in_tower((block,3),(block,8)), false, 73).
holds(2, in_tower((block,3),(block,9)), false, 73).
holds(2, in_tower((block,4),(block,1)), false, 73).
holds(2, in_tower((block,4),(block,2)), false, 73).
holds(2, in_tower((block,4),(block,3)), false, 73).
holds(2, in_tower((block,4),(block,4)), false, 73).
holds(2, in_tower((block,4),(block,5)), false, 73).
holds(2, in_tower((block,4),(block,6)), false, 73).
holds(2, in_tower((block,4),(block,7)), false, 73).
holds(2, in_tower((block,4),(block,8)), false, 73).
holds(2, in_tower((block,4),(block,9)), false, 73).
holds(2, in_tower((block,5),(block,1)), false, 73).
holds(2, in_tower((block,5),(block,2)), false, 73).
holds(2, in_tower((block,5),(block,3)), false, 73).
holds(2, in_tower((block,5),(block,4)), false, 73).
holds(2, in_tower((block,5),(block,5)), false, 73).
holds(2, in_tower((block,5),(block,6)), false, 73).
holds(2, in_tower((block,5),(block,7)), false, 73).
holds(2, in_tower((block,5),(block,8)), false, 73).
holds(2, in_tower((block,5),(block,9)), false, 73).
holds(2, in_tower((block,6),(block,1)), false, 73).
holds(2, in_tower((block,6),(block,2)), false, 73).
holds(2, in_tower((block,6),(block,3)), false, 73).
holds(2, in_tower((block,6),(block,4)), false, 73).
holds(2, in_tower((block,6),(block,5)), false, 73).
holds(2, in_tower((block,6),(block,6)), true, 73).
holds(2, in_tower((block,6),(block,7)), false, 73).
holds(2, in_tower((block,6),(block,8)), false, 73).
holds(2, in_tower((block,6),(block,9)), false, 73).
holds(2, in_tower((block,7),(block,1)), false, 73).
holds(2, in_tower((block,7),(block,2)), false, 73).
holds(2, in_tower((block,7),(block,3)), false, 73).
holds(2, in_tower((block,7),(block,4)), false, 73).
holds(2, in_tower((block,7),(block,5)), false, 73).
holds(2, in_tower((block,7),(block,6)), false, 73).
holds(2, in_tower((block,7),(block,7)), false, 73).
holds(2, in_tower((block,7),(block,8)), false, 73).
holds(2, in_tower((block,7),(block,9)), false, 73).
holds(2, in_tower((block,8),(block,1)), false, 73).
holds(2, in_tower((block,8),(block,2)), false, 73).
holds(2, in_tower((block,8),(block,3)), false, 73).
holds(2, in_tower((block,8),(block,4)), false, 73).
holds(2, in_tower((block,8),(block,5)), false, 73).
holds(2, in_tower((block,8),(block,6)), false, 73).
holds(2, in_tower((block,8),(block,7)), false, 73).
holds(2, in_tower((block,8),(block,8)), false, 73).
holds(2, in_tower((block,8),(block,9)), false, 73).
holds(2, in_tower((block,9),(block,1)), false, 73).
holds(2, in_tower((block,9),(block,2)), false, 73).
holds(2, in_tower((block,9),(block,3)), false, 73).
holds(2, in_tower((block,9),(block,4)), false, 73).
holds(2, in_tower((block,9),(block,5)), false, 73).
holds(2, in_tower((block,9),(block,6)), false, 73).
holds(2, in_tower((block,9),(block,7)), true, 73).
holds(2, in_tower((block,9),(block,8)), true, 73).
holds(2, in_tower((block,9),(block,9)), true, 73).
holds(2, on((block,1)), puzzle_room_table, 73).
holds(2, on((block,2)), (block,3), 73).
holds(2, on((block,3)), puzzle_room_table, 73).
holds(2, on((block,4)), nothing, 73).
holds(2, on((block,5)), nothing, 73).
holds(2, on((block,6)), puzzle_room_table, 73).
holds(2, on((block,7)), (block,8), 73).
holds(2, on((block,8)), (block,9), 73).
holds(2, on((block,9)), puzzle_room_table, 73).
holds(2, tower_base((block,1),puzzle_room_table), true, 73).
holds(2, tower_base((block,2),puzzle_room_table), false, 73).
holds(2, tower_base((block,3),puzzle_room_table), true, 73).
holds(2, tower_base((block,4),puzzle_room_table), false, 73).
holds(2, tower_base((block,5),puzzle_room_table), false, 73).
holds(2, tower_base((block,6),puzzle_room_table), true, 73).
holds(2, tower_base((block,7),puzzle_room_table), false, 73).
holds(2, tower_base((block,8),puzzle_room_table), false, 73).
holds(2, tower_base((block,9),puzzle_room_table), true, 73).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 73).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 73).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 73).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 73).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 73).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 73).
holds(2, unordered_tower((block,7),puzzle_room_table), false, 73).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 73).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 73).

[14-04-2022_17-52-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[14-04-2022_17-52-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-52-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[14-04-2022_17-52-13] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=82']

[14-04-2022_17-52-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 47})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 48})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 49})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 50})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 51})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 52})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 53})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,1))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'I': 54})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 55})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,4))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 56})

[14-04-2022_17-52-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-52-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 10 rules into program part base:

sub_goal(2, talos, move(hallway), in(talos), hallway, 47).
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 48).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 49).
sub_goal(2, talos, put(manipulator_arm_2,(block,5),(block,6)), on((block,5)), (block,6), 50).
sub_goal(2, talos, release(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), nothing, 51).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 52).
sub_goal(2, talos, put(manipulator_arm_1,(block,4),(block,5)), on((block,4)), (block,5), 53).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 54).
sub_goal(2, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 55).
sub_goal(2, talos, release(manipulator_arm_1,(block,4)), grasping(manipulator_arm_1), nothing, 56).

[14-04-2022_17-52-13] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-52-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[14-04-2022_17-52-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=82']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A2870D9700>]
	incrementor = SolveIncrementor(step_start=73, step_increase=1, step_increase_initial=10, step_end_min=83, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1727.278602199999, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 73), range_=None), IncPart(name='plan_module', args=('#inc', 73, 'false', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 73, 'false', 'false', 'false', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 73, 47, 56, 'sequential', 'false'), range_=None)]

[14-04-2022_17-52-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-52-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-52-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-52-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1279 rules

[14-04-2022_17-52-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006818099999691185s

[14-04-2022_17-52-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[14-04-2022_17-52-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[14-04-2022_17-52-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.041148s.

[14-04-2022_17-52-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007717s with result Satisfiable.

[14-04-2022_17-52-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[14-04-2022_17-52-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A286893090>

[14-04-2022_17-52-13] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 73)
	('last_sgoals', 56)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('first_sgoals', 47)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A286893090>)

[14-04-2022_17-52-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 73). %* None *%
#program plan_module(#inc, 73, false, true). %* None *%
#program optimisation_module(#inc, 73, false, false, false, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 73, 47, 56, sequential, false). %* None *%

[14-04-2022_17-52-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     72 : Current =     82
Incrementor step ends | Minimum  =     83 : Maximum =    300

[14-04-2022_17-52-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(82)]), ('state_module', [Number(73), Number(73)]), ('plan_module', [Number(73), Number(73), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(73), Number(73), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(73)]), ('action_preconditions', [Number(73)]), ('variable_relations', [Number(73)]), ('abstraction_mappings', [Number(73)]), ('conformance_module', [Number(73), Number(73), Number(47), Number(56), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(74), Number(73)]), ('plan_module', [Number(74), Number(73), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(74), Number(73), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(74)]), ('action_preconditions', [Number(74)]), ('variable_relations', [Number(74)]), ('abstraction_mappings', [Number(74)]), ('conformance_module', [Number(74), Number(73), Number(47), Number(56), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(75), Number(73)]), ('plan_module', [Number(75), Number(73), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(75), Number(73), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(75)]), ('action_preconditions', [Number(75)]), ('variable_relations', [Number(75)]), ('abstraction_mappings', [Number(75)]), ('conformance_module', [Number(75), Number(73), Number(47), Number(56), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(76), Number(73)]), ('plan_module', [Number(76), Number(73), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(76), Number(73), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(76)]), ('action_preconditions', [Number(76)]), ('variable_relations', [Number(76)]), ('abstraction_mappings', [Number(76)]), ('conformance_module', [Number(76), Number(73), Number(47), Number(56), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(77), Number(73)]), ('plan_module', [Number(77), Number(73), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(77), Number(73), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(77)]), ('action_preconditions', [Number(77)]), ('variable_relations', [Number(77)]), ('abstraction_mappings', [Number(77)]), ('conformance_module', [Number(77), Number(73), Number(47), Number(56), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(78), Number(73)]), ('plan_module', [Number(78), Number(73), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(78), Number(73), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(78)]), ('action_preconditions', [Number(78)]), ('variable_relations', [Number(78)]), ('abstraction_mappings', [Number(78)]), ('conformance_module', [Number(78), Number(73), Number(47), Number(56), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(79), Number(73)]), ('plan_module', [Number(79), Number(73), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(79), Number(73), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(79)]), ('action_preconditions', [Number(79)]), ('variable_relations', [Number(79)]), ('abstraction_mappings', [Number(79)]), ('conformance_module', [Number(79), Number(73), Number(47), Number(56), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(80), Number(73)]), ('plan_module', [Number(80), Number(73), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(80), Number(73), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(80)]), ('action_preconditions', [Number(80)]), ('variable_relations', [Number(80)]), ('abstraction_mappings', [Number(80)]), ('conformance_module', [Number(80), Number(73), Number(47), Number(56), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(81), Number(73)]), ('plan_module', [Number(81), Number(73), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(81), Number(73), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(81)]), ('action_preconditions', [Number(81)]), ('variable_relations', [Number(81)]), ('abstraction_mappings', [Number(81)]), ('conformance_module', [Number(81), Number(73), Number(47), Number(56), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(82), Number(73)]), ('plan_module', [Number(82), Number(73), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(82), Number(73), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(82)]), ('action_preconditions', [Number(82)]), ('variable_relations', [Number(82)]), ('abstraction_mappings', [Number(82)]), ('conformance_module', [Number(82), Number(73), Number(47), Number(56), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.360705s.

[14-04-2022_17-52-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.608644s with result Satisfiable.

[14-04-2022_17-52-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.9693489999999656, Incremental time limit = None
Running cumulative time = 1.9693489999999656, Cumulative time limit = 1727.278602199999
Used memory = (RSS = 2066.648438Mb, VMS = 2074.355469Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.360705s, Solving = 0.608644s, Total = 1.969349s, Memory = (RSS = 2066.648438Mb, VMS = 2074.355469Mb), Step range = [73-82]), Calls = 1
Final Model :: Total atoms = 16206, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[14-04-2022_17-52-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     82 : Current =     83
Incrementor step ends | Minimum  =     83 : Maximum =    300

[14-04-2022_17-52-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(83)]), ('state_module', [Number(83), Number(73)]), ('plan_module', [Number(83), Number(73), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(83), Number(73), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(83)]), ('action_preconditions', [Number(83)]), ('variable_relations', [Number(83)]), ('abstraction_mappings', [Number(83)]), ('conformance_module', [Number(83), Number(73), Number(47), Number(56), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.216934s.

[14-04-2022_17-52-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.042358s with result Unsatisfiable.

[14-04-2022_17-52-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.259292199999436, Incremental time limit = None
Running cumulative time = 2.2286411999994016, Cumulative time limit = 1727.278602199999
Used memory = (RSS = 2068.269531Mb, VMS = 2079.226562Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     83 : Current =     84
Incrementor step ends | Minimum  =     83 : Maximum =    300

[14-04-2022_17-52-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(84)]), ('state_module', [Number(84), Number(73)]), ('plan_module', [Number(84), Number(73), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(84), Number(73), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(84)]), ('action_preconditions', [Number(84)]), ('variable_relations', [Number(84)]), ('abstraction_mappings', [Number(84)]), ('conformance_module', [Number(84), Number(73), Number(47), Number(56), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.212361s.

[14-04-2022_17-52-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.049751s with result Unsatisfiable.

[14-04-2022_17-52-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.262111900000491, Incremental time limit = None
Running cumulative time = 2.4907530999998926, Cumulative time limit = 1727.278602199999
Used memory = (RSS = 2069.679688Mb, VMS = 2079.625000Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     84 : Current =     85
Incrementor step ends | Minimum  =     83 : Maximum =    300

[14-04-2022_17-52-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(85)]), ('state_module', [Number(85), Number(73)]), ('plan_module', [Number(85), Number(73), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(85), Number(73), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(85)]), ('action_preconditions', [Number(85)]), ('variable_relations', [Number(85)]), ('abstraction_mappings', [Number(85)]), ('conformance_module', [Number(85), Number(73), Number(47), Number(56), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.216797s.

[14-04-2022_17-52-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.041290s with result Unsatisfiable.

[14-04-2022_17-52-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.25808649999999034, Incremental time limit = None
Running cumulative time = 2.748839599999883, Cumulative time limit = 1727.278602199999
Used memory = (RSS = 2073.078125Mb, VMS = 2082.554688Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     85 : Current =     86
Incrementor step ends | Minimum  =     83 : Maximum =    300

[14-04-2022_17-52-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(86)]), ('state_module', [Number(86), Number(73)]), ('plan_module', [Number(86), Number(73), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(86), Number(73), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(86)]), ('action_preconditions', [Number(86)]), ('variable_relations', [Number(86)]), ('abstraction_mappings', [Number(86)]), ('conformance_module', [Number(86), Number(73), Number(47), Number(56), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.222734s.

[14-04-2022_17-52-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.044605s with result Unsatisfiable.

[14-04-2022_17-52-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2673391000007541, Incremental time limit = None
Running cumulative time = 3.016178700000637, Cumulative time limit = 1727.278602199999
Used memory = (RSS = 2075.109375Mb, VMS = 2083.203125Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     86 : Current =     87
Incrementor step ends | Minimum  =     83 : Maximum =    300

[14-04-2022_17-52-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(87)]), ('state_module', [Number(87), Number(73)]), ('plan_module', [Number(87), Number(73), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(87), Number(73), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(87)]), ('action_preconditions', [Number(87)]), ('variable_relations', [Number(87)]), ('abstraction_mappings', [Number(87)]), ('conformance_module', [Number(87), Number(73), Number(47), Number(56), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.226086s.

[14-04-2022_17-52-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.053206s with result Unsatisfiable.

[14-04-2022_17-52-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2792921000000206, Incremental time limit = None
Running cumulative time = 3.2954708000006576, Cumulative time limit = 1727.278602199999
Used memory = (RSS = 2082.375000Mb, VMS = 2099.687500Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     87 : Current =     88
Incrementor step ends | Minimum  =     83 : Maximum =    300

[14-04-2022_17-52-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(88)]), ('state_module', [Number(88), Number(73)]), ('plan_module', [Number(88), Number(73), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(88), Number(73), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(88)]), ('action_preconditions', [Number(88)]), ('variable_relations', [Number(88)]), ('abstraction_mappings', [Number(88)]), ('conformance_module', [Number(88), Number(73), Number(47), Number(56), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.231999s.

[14-04-2022_17-52-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.073217s with result Satisfiable.

[14-04-2022_17-52-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3052160000006552, Incremental time limit = None
Running cumulative time = 3.600686800001313, Cumulative time limit = 1727.278602199999
Used memory = (RSS = 2086.871094Mb, VMS = 2102.218750Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.687616s, Solving = 0.913071s, Total = 3.600687s, Memory = (RSS = 2086.871094Mb, VMS = 2102.218750Mb), Step range = [73-88]), Calls = 7
Final Model :: Total atoms = 22440, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[14-04-2022_17-52-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 1.360705s, Solving = 0.608644s, Total = 1.969349s, Memory = (RSS = 2066.648438Mb, VMS = 2074.355469Mb), Step range = [73-82]
2 : Statistics :: Grounding = 0.216934s, Solving = 0.042358s, Total = 0.259292s, Memory = (RSS = 2068.269531Mb, VMS = 2079.226562Mb), Step range = [83-83]
3 : Statistics :: Grounding = 0.212361s, Solving = 0.049751s, Total = 0.262112s, Memory = (RSS = 2069.679688Mb, VMS = 2079.625000Mb), Step range = [84-84]
4 : Statistics :: Grounding = 0.216797s, Solving = 0.041290s, Total = 0.258086s, Memory = (RSS = 2073.078125Mb, VMS = 2082.554688Mb), Step range = [85-85]
5 : Statistics :: Grounding = 0.222734s, Solving = 0.044605s, Total = 0.267339s, Memory = (RSS = 2075.109375Mb, VMS = 2083.203125Mb), Step range = [86-86]
6 : Statistics :: Grounding = 0.226086s, Solving = 0.053206s, Total = 0.279292s, Memory = (RSS = 2082.375000Mb, VMS = 2099.687500Mb), Step range = [87-87]
7 : Statistics :: Grounding = 0.231999s, Solving = 0.073217s, Total = 0.305216s, Memory = (RSS = 2086.871094Mb, VMS = 2102.218750Mb), Step range = [88-88]

[14-04-2022_17-52-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 3.600687s due to: Stop condition reached.

[14-04-2022_17-52-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[14-04-2022_17-52-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[14-04-2022_17-52-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-52-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-52-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 14, 27: 14, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 20, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 29, 50: 30, 51: 31, 52: 32, 53: 32, 54: 33, 55: 34, 56: 35, 57: 36, 58: 37, 59: 38, 60: 39, 61: 39, 62: 40, 63: 40, 64: 40, 65: 41, 66: 41, 67: 41, 68: 42, 69: 43, 70: 43, 71: 44, 72: 45, 73: 46}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25, 14: 28, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 38, 21: 39, 22: 40, 23: 41, 24: 42, 25: 43, 26: 44, 27: 46, 28: 48, 29: 49, 30: 50, 31: 51, 32: 53, 33: 54, 34: 55, 35: 56, 36: 57, 37: 58, 38: 59, 39: 61, 40: 64, 41: 67, 42: 68, 43: 70, 44: 71, 45: 72, 46: 73}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 6, 23: 7, 24: 8, 25: 9, 26: 10, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 16, 33: 17, 34: 18, 35: 19, 36: 20, 37: 21, 38: 21, 39: 21, 40: 21, 41: 22, 42: 22, 43: 22, 44: 22, 45: 23, 46: 24, 47: 24, 48: 24, 49: 25, 50: 25, 51: 26, 52: 27, 53: 27, 54: 28, 55: 29, 56: 30}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 22, 7: 23, 8: 24, 9: 25, 10: 26, 11: 27, 12: 28, 13: 29, 14: 30, 15: 31, 16: 32, 17: 33, 18: 34, 19: 35, 20: 36, 21: 40, 22: 44, 23: 45, 24: 48, 25: 50, 26: 51, 27: 53, 28: 54, 29: 55, 30: 56}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 7, 16: 8, 17: 9, 18: 9, 19: 10, 20: 10, 21: 11, 22: 12, 23: 13, 24: 14, 25: 15, 26: 15, 27: 16, 28: 16, 29: 16, 30: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 15, 8: 16, 9: 18, 10: 20, 11: 21, 12: 22, 13: 23, 14: 24, 15: 26, 16: 29, 17: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 14, 27: 14, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 20, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 29, 50: 30, 51: 31, 52: 32, 53: 32, 54: 33, 55: 34, 56: 35, 57: 36, 58: 37, 59: 38, 60: 39, 61: 39, 62: 40, 63: 40, 64: 40, 65: 41, 66: 41, 67: 41, 68: 42, 69: 43, 70: 43, 71: 44, 72: 45, 73: 46, 74: 47, 75: 47, 76: 48, 77: 48, 78: 48, 79: 49, 80: 49, 81: 49, 82: 50, 83: 51, 84: 52, 85: 53, 86: 54, 87: 55, 88: 56}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25, 14: 28, 15: 29, 16: 30, 17: 31, 18: 34, 19: 36, 20: 38, 21: 39, 22: 40, 23: 41, 24: 42, 25: 43, 26: 44, 27: 46, 28: 48, 29: 49, 30: 50, 31: 51, 32: 53, 33: 54, 34: 55, 35: 56, 36: 57, 37: 58, 38: 59, 39: 61, 40: 64, 41: 67, 42: 68, 43: 70, 44: 71, 45: 72, 46: 73, 47: 75, 48: 78, 49: 81, 50: 82, 51: 83, 52: 84, 53: 85, 54: 86, 55: 87, 56: 88}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 6, 23: 7, 24: 8, 25: 9, 26: 10, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 16, 33: 17, 34: 18, 35: 19, 36: 20, 37: 21, 38: 21, 39: 21, 40: 21, 41: 22, 42: 22, 43: 22, 44: 22, 45: 23, 46: 24, 47: 24, 48: 24, 49: 25, 50: 25, 51: 26, 52: 27, 53: 27, 54: 28, 55: 29, 56: 30}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 22, 7: 23, 8: 24, 9: 25, 10: 26, 11: 27, 12: 28, 13: 29, 14: 30, 15: 31, 16: 32, 17: 33, 18: 34, 19: 35, 20: 36, 21: 40, 22: 44, 23: 45, 24: 48, 25: 50, 26: 51, 27: 53, 28: 54, 29: 55, 30: 56}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 7, 16: 8, 17: 9, 18: 9, 19: 10, 20: 10, 21: 11, 22: 12, 23: 13, 24: 14, 25: 15, 26: 15, 27: 16, 28: 16, 29: 16, 30: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 15, 8: 16, 9: 18, 10: 20, 11: 21, 12: 22, 13: 23, 14: 24, 15: 26, 16: 29, 17: 30}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 56, Last requested goal index = 56, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.687616s, Solving = 0.913071s, Total = 3.600687s, Memory = (RSS = 2086.871094Mb, VMS = 2102.218750Mb), Step range = [73-88]), Calls = 7
Model :: Total atoms = 22440, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 15 :: Actions = 15                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 25:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 26:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,8)))
Step 27:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 28:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,8))
Step 29:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 30:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : move((store_room,1))
Step 31:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 37:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 38:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 39:
    Current Sub-goals:
        [Index = 21] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 21] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 40:
    Current Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,9)))
Step 41:
    Current Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Achieved Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,9))
Step 42:
    Current Sub-goals:
        [Index = 24] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 24] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,9),puzzle_room_table_middle)
Step 43:
    Current Sub-goals:
        [Index = 25] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 25] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,9))
Step 44:
    Current Sub-goals:
        [Index = 26] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Achieved Sub-goals:
        [Index = 26] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Planned actions:
        talos : put(manipulator_end_2,(block,8),(block,9))
Step 45:
    Current Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 46:
    Current Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,8))
Step 47:
    Current Sub-goals:
        [Index = 28] talos : grasp(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = (block,7)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,7)))
Step 48:
    Current Sub-goals:
        [Index = 28] talos : grasp(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = (block,7)
    Achieved Sub-goals:
        [Index = 28] talos : grasp(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = (block,7)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,7))
Step 49:
    Current Sub-goals:
        [Index = 29] talos : put(manipulator_arm_2,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Achieved Sub-goals:
        [Index = 29] talos : put(manipulator_arm_2,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Planned actions:
        talos : put(manipulator_end_2,(block,7),(block,8))
Step 50:
    Current Sub-goals:
        [Index = 30] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 30] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 51:
    Current Sub-goals:
        [Index = 31] talos : release(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 31] talos : release(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,7))
Step 52:
    Current Sub-goals:
        [Index = 32] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,2)))
Step 53:
    Current Sub-goals:
        [Index = 32] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 32] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 54:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,2))
Step 55:
    Current Sub-goals:
        [Index = 34] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 34] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 56:
    Current Sub-goals:
        [Index = 35] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 35] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_2,(block,2),(block,3))
Step 57:
    Current Sub-goals:
        [Index = 36] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 36] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,2))
Step 58:
    Current Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 59:
    Current Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 60:
    Current Sub-goals:
        [Index = 39] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 61:
    Current Sub-goals:
        [Index = 39] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 39] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 62:
    Current Sub-goals:
        [Index = 40] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 63:
    Current Sub-goals:
        [Index = 40] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 64:
    Current Sub-goals:
        [Index = 40] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 40] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 65:
    Current Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 66:
    Current Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 67:
    Current Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 68:
    Current Sub-goals:
        [Index = 42] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 42] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
Step 69:
    Current Sub-goals:
        [Index = 43] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 70:
    Current Sub-goals:
        [Index = 43] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
        [Index = 43] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
Step 71:
    Current Sub-goals:
        [Index = 44] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 44] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 72:
    Current Sub-goals:
        [Index = 45] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 45] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 73:
    Current Sub-goals:
        [Index = 46] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 46] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 74:
    Current Sub-goals:
        [Index = 47] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 75:
    Current Sub-goals:
        [Index = 47] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 47] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 76:
    Current Sub-goals:
        [Index = 48] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 77:
    Current Sub-goals:
        [Index = 48] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 78:
    Current Sub-goals:
        [Index = 48] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 48] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 79:
    Current Sub-goals:
        [Index = 49] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 80:
    Current Sub-goals:
        [Index = 49] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 81:
    Current Sub-goals:
        [Index = 49] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 49] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 82:
    Current Sub-goals:
        [Index = 50] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 50] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 83:
    Current Sub-goals:
        [Index = 51] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 51] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,5))
Step 84:
    Current Sub-goals:
        [Index = 52] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 52] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,1)))
Step 85:
    Current Sub-goals:
        [Index = 53] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 53] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_1,(block,4),(block,5))
Step 86:
    Current Sub-goals:
        [Index = 54] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Achieved Sub-goals:
        [Index = 54] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,1))
Step 87:
    Current Sub-goals:
        [Index = 55] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 55] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_end_2,(block,1),(block,2))
Step 88:
    Current Sub-goals:
        [Index = 56] talos : release(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 56] talos : release(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,4))

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Monolevel problem 6 at level 1 solved.

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Online planning increment 6 finished.

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 88, chosen step range to extract = range(0, 89)

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 56, Total actions = 56, Produced sub-goal stages = 56, Produced sub-goal literals = 56
Level [1]: Length = 88, Total actions = 88, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 56, chosen step range to extract = range(0, 57)

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 56, Total actions = 56, Produced sub-goal stages = 56, Produced sub-goal literals = 56
Level [1]: Length = 88, Total actions = 88, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 30, chosen step range to extract = range(0, 31)

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 56, Total actions = 56, Produced sub-goal stages = 56, Produced sub-goal literals = 56
Level [1]: Length = 88, Total actions = 88, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 56, Total actions = 56, Produced sub-goal stages = 56, Produced sub-goal literals = 56
Level [1]: Length = 88, Total actions = 88, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Hierarchical plan generated successfully :: Ground Plan Quality >> Length = 88, Actions = 88

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Hierarchical planning summary: (Execution latency = 54.51346190000004, Average ground wait time = 12.774335283333281, Absolution time = 76.3220846000022)

     ========================================================================================================================================================================================================     
     |        Lvl = 4 (classic), LE =  17, AC =  17, CF = 1.0, GT =   1.37s, ST =   0.84s, OT = 0.00s, TT =   2.22s, EF = (LE = 1.0, AC = 1.0), ED = (LE = 0.0, AC = 0.0), EB = (LE = 0.0, AC = 0.0)        |     
     |        Lvl = 3 (com-ref), LE =  30, AC =  30, CF = 1.0, GT =   3.50s, ST =  36.12s, OT = 0.00s, TT =  39.62s, EF = (LE = 1.8, AC = 1.8), ED = (LE = 1.0, AC = 0.4), EB = (LE = 0.5, AC = 0.4)        |     
     |        Lvl = 2 (com-ref), LE =  56, AC =  56, CF = 1.0, GT =   7.06s, ST =   4.44s, OT = 0.00s, TT =  11.50s, EF = (LE = 1.9, AC = 1.9), ED = (LE = 1.8, AC = 1.8), EB = (LE = 1.0, AC = 1.0)        |     
     |        Lvl = 1 (com-ref), LE =  88, AC =  88, CF = 1.0, GT =  16.43s, ST =   6.56s, OT = 0.00s, TT =  22.99s, EF = (LE = 1.6, AC = 1.6), ED = (LE = 0.9, AC = 0.9), EB = (LE = 0.6, AC = 0.6)        |     
     ========================================================================================================================================================================================================     

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 88, chosen step range to extract = range(0, 89)

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 56, Total actions = 56, Produced sub-goal stages = 56, Produced sub-goal literals = 56
Level [1]: Length = 88, Total actions = 88, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 56, chosen step range to extract = range(0, 57)

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 56, Total actions = 56, Produced sub-goal stages = 56, Produced sub-goal literals = 56
Level [1]: Length = 88, Total actions = 88, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 30, chosen step range to extract = range(0, 31)

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 56, Total actions = 56, Produced sub-goal stages = 56, Produced sub-goal literals = 56
Level [1]: Length = 88, Total actions = 88, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 30, Total actions = 30, Produced sub-goal stages = 30, Produced sub-goal literals = 30
Level [2]: Length = 56, Total actions = 56, Produced sub-goal stages = 56, Produced sub-goal literals = 56
Level [1]: Length = 88, Total actions = 88, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-52-17] DEBUG :: Experiment >> 

   ======================================================   
     Experimental run 49 : SUCCESSFUL : Time 86.977728s     
   ======================================================   

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Arguments:
	('bottom_level', 1)
	('top_level', 4)
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('online_method', <OnlineMethod.GroundFirst: 'ground-first'>)
	('save_grounding', False)
	('use_search_length_bound', True)
	('avoid_refining_sgoals_marked_for_blending', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 300)
	('pause_on_level_change', False)
	('pause_on_increment_change', False)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-4] : ONLINE MODE

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 0 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = False
Level = 3 : Solved problems = 0 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = False
Level = 2 : Solved problems = 0 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = False
Level = 1 : Solved problems = 0 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = False

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 4, Highest = 4.

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 1 by method ground-first is [1-4].

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Starting top-level classical planning: level = 4

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', False)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', None)
	('last_sgoals', None)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 300)
	('level', 4)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 4] classical : Concurrency disabled : Minimum search length bound disabled with value 0

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 4
concurrency = False
conformance = False
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 1
start_step = 0
is_initial = True
is_final = True
complete_planning = True
sequential_yield = False
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 0

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[14-04-2022_17-52-17] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[14-04-2022_17-52-17] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 4, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,8))', 'V': 'store_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 4, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 4, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 131 rules into program part ash_initial_state:

holds(4, complete_tower(blue,puzzle_room_table), false, 0).
holds(4, complete_tower(red,puzzle_room_table), false, 0).
holds(4, complete_tower(yellow,puzzle_room_table), false, 0).
holds(4, in((block,1)), puzzle_room, 0).
holds(4, in((block,2)), puzzle_room, 0).
holds(4, in((block,3)), puzzle_room, 0).
holds(4, in((block,4)), store_room, 0).
holds(4, in((block,5)), store_room, 0).
holds(4, in((block,6)), store_room, 0).
holds(4, in((block,7)), puzzle_room, 0).
holds(4, in((block,8)), store_room, 0).
holds(4, in((block,9)), puzzle_room, 0).
holds(4, in(puzzle_room_table), puzzle_room, 0).
holds(4, in(talos), starting_room, 0).
holds(4, in_tower((block,1),(block,1)), true, 0).
holds(4, in_tower((block,1),(block,2)), false, 0).
holds(4, in_tower((block,1),(block,3)), true, 0).
holds(4, in_tower((block,1),(block,4)), false, 0).
holds(4, in_tower((block,1),(block,5)), false, 0).
holds(4, in_tower((block,1),(block,6)), false, 0).
holds(4, in_tower((block,1),(block,7)), false, 0).
holds(4, in_tower((block,1),(block,8)), false, 0).
holds(4, in_tower((block,1),(block,9)), false, 0).
holds(4, in_tower((block,2),(block,1)), false, 0).
holds(4, in_tower((block,2),(block,2)), true, 0).
holds(4, in_tower((block,2),(block,3)), false, 0).
holds(4, in_tower((block,2),(block,4)), false, 0).
holds(4, in_tower((block,2),(block,5)), false, 0).
holds(4, in_tower((block,2),(block,6)), false, 0).
holds(4, in_tower((block,2),(block,7)), false, 0).
holds(4, in_tower((block,2),(block,8)), false, 0).
holds(4, in_tower((block,2),(block,9)), false, 0).
holds(4, in_tower((block,3),(block,1)), false, 0).
holds(4, in_tower((block,3),(block,2)), false, 0).
holds(4, in_tower((block,3),(block,3)), false, 0).
holds(4, in_tower((block,3),(block,4)), false, 0).
holds(4, in_tower((block,3),(block,5)), false, 0).
holds(4, in_tower((block,3),(block,6)), false, 0).
holds(4, in_tower((block,3),(block,7)), false, 0).
holds(4, in_tower((block,3),(block,8)), false, 0).
holds(4, in_tower((block,3),(block,9)), false, 0).
holds(4, in_tower((block,4),(block,1)), false, 0).
holds(4, in_tower((block,4),(block,2)), false, 0).
holds(4, in_tower((block,4),(block,3)), false, 0).
holds(4, in_tower((block,4),(block,4)), false, 0).
holds(4, in_tower((block,4),(block,5)), false, 0).
holds(4, in_tower((block,4),(block,6)), false, 0).
holds(4, in_tower((block,4),(block,7)), false, 0).
holds(4, in_tower((block,4),(block,8)), false, 0).
holds(4, in_tower((block,4),(block,9)), false, 0).
holds(4, in_tower((block,5),(block,1)), false, 0).
holds(4, in_tower((block,5),(block,2)), false, 0).
holds(4, in_tower((block,5),(block,3)), false, 0).
holds(4, in_tower((block,5),(block,4)), false, 0).
holds(4, in_tower((block,5),(block,5)), false, 0).
holds(4, in_tower((block,5),(block,6)), false, 0).
holds(4, in_tower((block,5),(block,7)), false, 0).
holds(4, in_tower((block,5),(block,8)), false, 0).
holds(4, in_tower((block,5),(block,9)), false, 0).
holds(4, in_tower((block,6),(block,1)), false, 0).
holds(4, in_tower((block,6),(block,2)), false, 0).
holds(4, in_tower((block,6),(block,3)), false, 0).
holds(4, in_tower((block,6),(block,4)), false, 0).
holds(4, in_tower((block,6),(block,5)), false, 0).
holds(4, in_tower((block,6),(block,6)), false, 0).
holds(4, in_tower((block,6),(block,7)), false, 0).
holds(4, in_tower((block,6),(block,8)), false, 0).
holds(4, in_tower((block,6),(block,9)), false, 0).
holds(4, in_tower((block,7),(block,1)), false, 0).
holds(4, in_tower((block,7),(block,2)), false, 0).
holds(4, in_tower((block,7),(block,3)), false, 0).
holds(4, in_tower((block,7),(block,4)), false, 0).
holds(4, in_tower((block,7),(block,5)), false, 0).
holds(4, in_tower((block,7),(block,6)), false, 0).
holds(4, in_tower((block,7),(block,7)), true, 0).
holds(4, in_tower((block,7),(block,8)), false, 0).
holds(4, in_tower((block,7),(block,9)), true, 0).
holds(4, in_tower((block,8),(block,1)), false, 0).
holds(4, in_tower((block,8),(block,2)), false, 0).
holds(4, in_tower((block,8),(block,3)), false, 0).
holds(4, in_tower((block,8),(block,4)), false, 0).
holds(4, in_tower((block,8),(block,5)), false, 0).
holds(4, in_tower((block,8),(block,6)), false, 0).
holds(4, in_tower((block,8),(block,7)), false, 0).
holds(4, in_tower((block,8),(block,8)), false, 0).
holds(4, in_tower((block,8),(block,9)), false, 0).
holds(4, in_tower((block,9),(block,1)), false, 0).
holds(4, in_tower((block,9),(block,2)), false, 0).
holds(4, in_tower((block,9),(block,3)), false, 0).
holds(4, in_tower((block,9),(block,4)), false, 0).
holds(4, in_tower((block,9),(block,5)), false, 0).
holds(4, in_tower((block,9),(block,6)), false, 0).
holds(4, in_tower((block,9),(block,7)), false, 0).
holds(4, in_tower((block,9),(block,8)), false, 0).
holds(4, in_tower((block,9),(block,9)), false, 0).
holds(4, on((block,1)), puzzle_room_table, 0).
holds(4, on((block,2)), puzzle_room_table, 0).
holds(4, on((block,3)), (block,1), 0).
holds(4, on((block,4)), nothing, 0).
holds(4, on((block,5)), nothing, 0).
holds(4, on((block,6)), nothing, 0).
holds(4, on((block,7)), puzzle_room_table, 0).
holds(4, on((block,8)), nothing, 0).
holds(4, on((block,9)), (block,7), 0).
holds(4, tower_base((block,1),puzzle_room_table), true, 0).
holds(4, tower_base((block,2),puzzle_room_table), true, 0).
holds(4, tower_base((block,3),puzzle_room_table), false, 0).
holds(4, tower_base((block,4),puzzle_room_table), false, 0).
holds(4, tower_base((block,5),puzzle_room_table), false, 0).
holds(4, tower_base((block,6),puzzle_room_table), false, 0).
holds(4, tower_base((block,7),puzzle_room_table), true, 0).
holds(4, tower_base((block,8),puzzle_room_table), false, 0).
holds(4, tower_base((block,9),puzzle_room_table), false, 0).
holds(4, transporting(talos,(block,1)), false, 0).
holds(4, transporting(talos,(block,2)), false, 0).
holds(4, transporting(talos,(block,3)), false, 0).
holds(4, transporting(talos,(block,4)), false, 0).
holds(4, transporting(talos,(block,5)), false, 0).
holds(4, transporting(talos,(block,6)), false, 0).
holds(4, transporting(talos,(block,7)), false, 0).
holds(4, transporting(talos,(block,8)), false, 0).
holds(4, transporting(talos,(block,9)), false, 0).
holds(4, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(4, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(4, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(4, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(4, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(4, unordered_tower((block,6),puzzle_room_table), false, 0).
holds(4, unordered_tower((block,7),puzzle_room_table), true, 0).
holds(4, unordered_tower((block,8),puzzle_room_table), false, 0).
holds(4, unordered_tower((block,9),puzzle_room_table), false, 0).

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 4, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 294 rules into program part ash_goal_state:

final_goal(4, complete_tower(blue,puzzle_room_table), false, false).
final_goal(4, complete_tower(blue,puzzle_room_table), true, true).
final_goal(4, complete_tower(red,puzzle_room_table), false, false).
final_goal(4, complete_tower(red,puzzle_room_table), true, true).
final_goal(4, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(4, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(4, in_tower((block,1),(block,1)), false, true).
final_goal(4, in_tower((block,1),(block,1)), true, false).
final_goal(4, in_tower((block,1),(block,2)), false, true).
final_goal(4, in_tower((block,1),(block,2)), true, false).
final_goal(4, in_tower((block,1),(block,3)), false, true).
final_goal(4, in_tower((block,1),(block,3)), true, false).
final_goal(4, in_tower((block,1),(block,4)), false, true).
final_goal(4, in_tower((block,1),(block,4)), true, false).
final_goal(4, in_tower((block,1),(block,5)), false, true).
final_goal(4, in_tower((block,1),(block,5)), true, false).
final_goal(4, in_tower((block,1),(block,6)), false, true).
final_goal(4, in_tower((block,1),(block,6)), true, false).
final_goal(4, in_tower((block,1),(block,7)), false, true).
final_goal(4, in_tower((block,1),(block,7)), true, false).
final_goal(4, in_tower((block,1),(block,8)), false, true).
final_goal(4, in_tower((block,1),(block,8)), true, false).
final_goal(4, in_tower((block,1),(block,9)), false, true).
final_goal(4, in_tower((block,1),(block,9)), true, false).
final_goal(4, in_tower((block,2),(block,1)), false, true).
final_goal(4, in_tower((block,2),(block,1)), true, false).
final_goal(4, in_tower((block,2),(block,2)), false, true).
final_goal(4, in_tower((block,2),(block,2)), true, false).
final_goal(4, in_tower((block,2),(block,3)), false, true).
final_goal(4, in_tower((block,2),(block,3)), true, false).
final_goal(4, in_tower((block,2),(block,4)), false, true).
final_goal(4, in_tower((block,2),(block,4)), true, false).
final_goal(4, in_tower((block,2),(block,5)), false, true).
final_goal(4, in_tower((block,2),(block,5)), true, false).
final_goal(4, in_tower((block,2),(block,6)), false, true).
final_goal(4, in_tower((block,2),(block,6)), true, false).
final_goal(4, in_tower((block,2),(block,7)), false, true).
final_goal(4, in_tower((block,2),(block,7)), true, false).
final_goal(4, in_tower((block,2),(block,8)), false, true).
final_goal(4, in_tower((block,2),(block,8)), true, false).
final_goal(4, in_tower((block,2),(block,9)), false, true).
final_goal(4, in_tower((block,2),(block,9)), true, false).
final_goal(4, in_tower((block,3),(block,1)), false, false).
final_goal(4, in_tower((block,3),(block,1)), true, true).
final_goal(4, in_tower((block,3),(block,2)), false, false).
final_goal(4, in_tower((block,3),(block,2)), true, true).
final_goal(4, in_tower((block,3),(block,3)), false, false).
final_goal(4, in_tower((block,3),(block,3)), true, true).
final_goal(4, in_tower((block,3),(block,4)), false, true).
final_goal(4, in_tower((block,3),(block,4)), true, false).
final_goal(4, in_tower((block,3),(block,5)), false, true).
final_goal(4, in_tower((block,3),(block,5)), true, false).
final_goal(4, in_tower((block,3),(block,6)), false, true).
final_goal(4, in_tower((block,3),(block,6)), true, false).
final_goal(4, in_tower((block,3),(block,7)), false, true).
final_goal(4, in_tower((block,3),(block,7)), true, false).
final_goal(4, in_tower((block,3),(block,8)), false, true).
final_goal(4, in_tower((block,3),(block,8)), true, false).
final_goal(4, in_tower((block,3),(block,9)), false, true).
final_goal(4, in_tower((block,3),(block,9)), true, false).
final_goal(4, in_tower((block,4),(block,1)), false, true).
final_goal(4, in_tower((block,4),(block,1)), true, false).
final_goal(4, in_tower((block,4),(block,2)), false, true).
final_goal(4, in_tower((block,4),(block,2)), true, false).
final_goal(4, in_tower((block,4),(block,3)), false, true).
final_goal(4, in_tower((block,4),(block,3)), true, false).
final_goal(4, in_tower((block,4),(block,4)), false, true).
final_goal(4, in_tower((block,4),(block,4)), true, false).
final_goal(4, in_tower((block,4),(block,5)), false, true).
final_goal(4, in_tower((block,4),(block,5)), true, false).
final_goal(4, in_tower((block,4),(block,6)), false, true).
final_goal(4, in_tower((block,4),(block,6)), true, false).
final_goal(4, in_tower((block,4),(block,7)), false, true).
final_goal(4, in_tower((block,4),(block,7)), true, false).
final_goal(4, in_tower((block,4),(block,8)), false, true).
final_goal(4, in_tower((block,4),(block,8)), true, false).
final_goal(4, in_tower((block,4),(block,9)), false, true).
final_goal(4, in_tower((block,4),(block,9)), true, false).
final_goal(4, in_tower((block,5),(block,1)), false, true).
final_goal(4, in_tower((block,5),(block,1)), true, false).
final_goal(4, in_tower((block,5),(block,2)), false, true).
final_goal(4, in_tower((block,5),(block,2)), true, false).
final_goal(4, in_tower((block,5),(block,3)), false, true).
final_goal(4, in_tower((block,5),(block,3)), true, false).
final_goal(4, in_tower((block,5),(block,4)), false, true).
final_goal(4, in_tower((block,5),(block,4)), true, false).
final_goal(4, in_tower((block,5),(block,5)), false, true).
final_goal(4, in_tower((block,5),(block,5)), true, false).
final_goal(4, in_tower((block,5),(block,6)), false, true).
final_goal(4, in_tower((block,5),(block,6)), true, false).
final_goal(4, in_tower((block,5),(block,7)), false, true).
final_goal(4, in_tower((block,5),(block,7)), true, false).
final_goal(4, in_tower((block,5),(block,8)), false, true).
final_goal(4, in_tower((block,5),(block,8)), true, false).
final_goal(4, in_tower((block,5),(block,9)), false, true).
final_goal(4, in_tower((block,5),(block,9)), true, false).
final_goal(4, in_tower((block,6),(block,1)), false, true).
final_goal(4, in_tower((block,6),(block,1)), true, false).
final_goal(4, in_tower((block,6),(block,2)), false, true).
final_goal(4, in_tower((block,6),(block,2)), true, false).
final_goal(4, in_tower((block,6),(block,3)), false, true).
final_goal(4, in_tower((block,6),(block,3)), true, false).
final_goal(4, in_tower((block,6),(block,4)), false, false).
final_goal(4, in_tower((block,6),(block,4)), true, true).
final_goal(4, in_tower((block,6),(block,5)), false, false).
final_goal(4, in_tower((block,6),(block,5)), true, true).
final_goal(4, in_tower((block,6),(block,6)), false, false).
final_goal(4, in_tower((block,6),(block,6)), true, true).
final_goal(4, in_tower((block,6),(block,7)), false, true).
final_goal(4, in_tower((block,6),(block,7)), true, false).
final_goal(4, in_tower((block,6),(block,8)), false, true).
final_goal(4, in_tower((block,6),(block,8)), true, false).
final_goal(4, in_tower((block,6),(block,9)), false, true).
final_goal(4, in_tower((block,6),(block,9)), true, false).
final_goal(4, in_tower((block,7),(block,1)), false, true).
final_goal(4, in_tower((block,7),(block,1)), true, false).
final_goal(4, in_tower((block,7),(block,2)), false, true).
final_goal(4, in_tower((block,7),(block,2)), true, false).
final_goal(4, in_tower((block,7),(block,3)), false, true).
final_goal(4, in_tower((block,7),(block,3)), true, false).
final_goal(4, in_tower((block,7),(block,4)), false, true).
final_goal(4, in_tower((block,7),(block,4)), true, false).
final_goal(4, in_tower((block,7),(block,5)), false, true).
final_goal(4, in_tower((block,7),(block,5)), true, false).
final_goal(4, in_tower((block,7),(block,6)), false, true).
final_goal(4, in_tower((block,7),(block,6)), true, false).
final_goal(4, in_tower((block,7),(block,7)), false, true).
final_goal(4, in_tower((block,7),(block,7)), true, false).
final_goal(4, in_tower((block,7),(block,8)), false, true).
final_goal(4, in_tower((block,7),(block,8)), true, false).
final_goal(4, in_tower((block,7),(block,9)), false, true).
final_goal(4, in_tower((block,7),(block,9)), true, false).
final_goal(4, in_tower((block,8),(block,1)), false, true).
final_goal(4, in_tower((block,8),(block,1)), true, false).
final_goal(4, in_tower((block,8),(block,2)), false, true).
final_goal(4, in_tower((block,8),(block,2)), true, false).
final_goal(4, in_tower((block,8),(block,3)), false, true).
final_goal(4, in_tower((block,8),(block,3)), true, false).
final_goal(4, in_tower((block,8),(block,4)), false, true).
final_goal(4, in_tower((block,8),(block,4)), true, false).
final_goal(4, in_tower((block,8),(block,5)), false, true).
final_goal(4, in_tower((block,8),(block,5)), true, false).
final_goal(4, in_tower((block,8),(block,6)), false, true).
final_goal(4, in_tower((block,8),(block,6)), true, false).
final_goal(4, in_tower((block,8),(block,7)), false, true).
final_goal(4, in_tower((block,8),(block,7)), true, false).
final_goal(4, in_tower((block,8),(block,8)), false, true).
final_goal(4, in_tower((block,8),(block,8)), true, false).
final_goal(4, in_tower((block,8),(block,9)), false, true).
final_goal(4, in_tower((block,8),(block,9)), true, false).
final_goal(4, in_tower((block,9),(block,1)), false, true).
final_goal(4, in_tower((block,9),(block,1)), true, false).
final_goal(4, in_tower((block,9),(block,2)), false, true).
final_goal(4, in_tower((block,9),(block,2)), true, false).
final_goal(4, in_tower((block,9),(block,3)), false, true).
final_goal(4, in_tower((block,9),(block,3)), true, false).
final_goal(4, in_tower((block,9),(block,4)), false, true).
final_goal(4, in_tower((block,9),(block,4)), true, false).
final_goal(4, in_tower((block,9),(block,5)), false, true).
final_goal(4, in_tower((block,9),(block,5)), true, false).
final_goal(4, in_tower((block,9),(block,6)), false, true).
final_goal(4, in_tower((block,9),(block,6)), true, false).
final_goal(4, in_tower((block,9),(block,7)), false, false).
final_goal(4, in_tower((block,9),(block,7)), true, true).
final_goal(4, in_tower((block,9),(block,8)), false, false).
final_goal(4, in_tower((block,9),(block,8)), true, true).
final_goal(4, in_tower((block,9),(block,9)), false, false).
final_goal(4, in_tower((block,9),(block,9)), true, true).
final_goal(4, on((block,1)), (block,2), true).
final_goal(4, on((block,1)), (block,3), false).
final_goal(4, on((block,1)), (block,4), false).
final_goal(4, on((block,1)), (block,5), false).
final_goal(4, on((block,1)), (block,6), false).
final_goal(4, on((block,1)), (block,7), false).
final_goal(4, on((block,1)), (block,8), false).
final_goal(4, on((block,1)), (block,9), false).
final_goal(4, on((block,1)), nothing, false).
final_goal(4, on((block,1)), puzzle_room_table, false).
final_goal(4, on((block,2)), (block,1), false).
final_goal(4, on((block,2)), (block,3), true).
final_goal(4, on((block,2)), (block,4), false).
final_goal(4, on((block,2)), (block,5), false).
final_goal(4, on((block,2)), (block,6), false).
final_goal(4, on((block,2)), (block,7), false).
final_goal(4, on((block,2)), (block,8), false).
final_goal(4, on((block,2)), (block,9), false).
final_goal(4, on((block,2)), nothing, false).
final_goal(4, on((block,2)), puzzle_room_table, false).
final_goal(4, on((block,3)), (block,1), false).
final_goal(4, on((block,3)), (block,2), false).
final_goal(4, on((block,3)), (block,4), false).
final_goal(4, on((block,3)), (block,5), false).
final_goal(4, on((block,3)), (block,6), false).
final_goal(4, on((block,3)), (block,7), false).
final_goal(4, on((block,3)), (block,8), false).
final_goal(4, on((block,3)), (block,9), false).
final_goal(4, on((block,3)), nothing, false).
final_goal(4, on((block,3)), puzzle_room_table, true).
final_goal(4, on((block,4)), (block,1), false).
final_goal(4, on((block,4)), (block,2), false).
final_goal(4, on((block,4)), (block,3), false).
final_goal(4, on((block,4)), (block,5), true).
final_goal(4, on((block,4)), (block,6), false).
final_goal(4, on((block,4)), (block,7), false).
final_goal(4, on((block,4)), (block,8), false).
final_goal(4, on((block,4)), (block,9), false).
final_goal(4, on((block,4)), nothing, false).
final_goal(4, on((block,4)), puzzle_room_table, false).
final_goal(4, on((block,5)), (block,1), false).
final_goal(4, on((block,5)), (block,2), false).
final_goal(4, on((block,5)), (block,3), false).
final_goal(4, on((block,5)), (block,4), false).
final_goal(4, on((block,5)), (block,6), true).
final_goal(4, on((block,5)), (block,7), false).
final_goal(4, on((block,5)), (block,8), false).
final_goal(4, on((block,5)), (block,9), false).
final_goal(4, on((block,5)), nothing, false).
final_goal(4, on((block,5)), puzzle_room_table, false).
final_goal(4, on((block,6)), (block,1), false).
final_goal(4, on((block,6)), (block,2), false).
final_goal(4, on((block,6)), (block,3), false).
final_goal(4, on((block,6)), (block,4), false).
final_goal(4, on((block,6)), (block,5), false).
final_goal(4, on((block,6)), (block,7), false).
final_goal(4, on((block,6)), (block,8), false).
final_goal(4, on((block,6)), (block,9), false).
final_goal(4, on((block,6)), nothing, false).
final_goal(4, on((block,6)), puzzle_room_table, true).
final_goal(4, on((block,7)), (block,1), false).
final_goal(4, on((block,7)), (block,2), false).
final_goal(4, on((block,7)), (block,3), false).
final_goal(4, on((block,7)), (block,4), false).
final_goal(4, on((block,7)), (block,5), false).
final_goal(4, on((block,7)), (block,6), false).
final_goal(4, on((block,7)), (block,8), true).
final_goal(4, on((block,7)), (block,9), false).
final_goal(4, on((block,7)), nothing, false).
final_goal(4, on((block,7)), puzzle_room_table, false).
final_goal(4, on((block,8)), (block,1), false).
final_goal(4, on((block,8)), (block,2), false).
final_goal(4, on((block,8)), (block,3), false).
final_goal(4, on((block,8)), (block,4), false).
final_goal(4, on((block,8)), (block,5), false).
final_goal(4, on((block,8)), (block,6), false).
final_goal(4, on((block,8)), (block,7), false).
final_goal(4, on((block,8)), (block,9), true).
final_goal(4, on((block,8)), nothing, false).
final_goal(4, on((block,8)), puzzle_room_table, false).
final_goal(4, on((block,9)), (block,1), false).
final_goal(4, on((block,9)), (block,2), false).
final_goal(4, on((block,9)), (block,3), false).
final_goal(4, on((block,9)), (block,4), false).
final_goal(4, on((block,9)), (block,5), false).
final_goal(4, on((block,9)), (block,6), false).
final_goal(4, on((block,9)), (block,7), false).
final_goal(4, on((block,9)), (block,8), false).
final_goal(4, on((block,9)), nothing, false).
final_goal(4, on((block,9)), puzzle_room_table, true).
final_goal(4, tower_base((block,1),puzzle_room_table), false, true).
final_goal(4, tower_base((block,1),puzzle_room_table), true, false).
final_goal(4, tower_base((block,2),puzzle_room_table), false, true).
final_goal(4, tower_base((block,2),puzzle_room_table), true, false).
final_goal(4, tower_base((block,3),puzzle_room_table), false, false).
final_goal(4, tower_base((block,3),puzzle_room_table), true, true).
final_goal(4, tower_base((block,4),puzzle_room_table), false, true).
final_goal(4, tower_base((block,4),puzzle_room_table), true, false).
final_goal(4, tower_base((block,5),puzzle_room_table), false, true).
final_goal(4, tower_base((block,5),puzzle_room_table), true, false).
final_goal(4, tower_base((block,6),puzzle_room_table), false, false).
final_goal(4, tower_base((block,6),puzzle_room_table), true, true).
final_goal(4, tower_base((block,7),puzzle_room_table), false, true).
final_goal(4, tower_base((block,7),puzzle_room_table), true, false).
final_goal(4, tower_base((block,8),puzzle_room_table), false, true).
final_goal(4, tower_base((block,8),puzzle_room_table), true, false).
final_goal(4, tower_base((block,9),puzzle_room_table), false, false).
final_goal(4, tower_base((block,9),puzzle_room_table), true, true).
final_goal(4, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,9),puzzle_room_table), true, false).

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore']

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A2870D9EE0>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=1, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(4, 'classical')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'false', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'false', 'false', 'false', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None)]

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 813 rules

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004758799999763141s

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(4, 'classical')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(4), Function('classical', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.026376s.

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.003758s with result Satisfiable.

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A286F5DCC0>

[14-04-2022_17-52-17] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 4)
	('start_step', 0)
	('last_sgoals', 1)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A286F5DCC0>)

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, true). %* None *%
#program optimisation_module(#inc, 0, false, false, false, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =      1 : Maximum =    300

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)])]

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.079520s.

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005564s with result Unsatisfiable.

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.08508319999964442, Incremental time limit = None
Running cumulative time = 0.08508319999964442, Cumulative time limit = 1800
Used memory = (RSS = 2037.847656Mb, VMS = 2044.378906Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =      1 : Maximum =    300

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)])]

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.059778s.

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.003965s with result Unsatisfiable.

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.06374220000088826, Incremental time limit = None
Running cumulative time = 0.14882540000053268, Cumulative time limit = 1800
Used memory = (RSS = 2037.847656Mb, VMS = 2044.378906Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =      1 : Maximum =    300

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)])]

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.064463s.

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006903s with result Unsatisfiable.

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.07136650000029476, Incremental time limit = None
Running cumulative time = 0.22019190000082745, Cumulative time limit = 1800
Used memory = (RSS = 2037.847656Mb, VMS = 2044.378906Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =      1 : Maximum =    300

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)])]

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.068203s.

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007861s with result Unsatisfiable.

[14-04-2022_17-52-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.07606479999958538, Incremental time limit = None
Running cumulative time = 0.2962567000004128, Cumulative time limit = 1800
Used memory = (RSS = 2037.847656Mb, VMS = 2044.378906Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =      1 : Maximum =    300

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)])]

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.070687s.

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008907s with result Unsatisfiable.

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.07959359999949811, Incremental time limit = None
Running cumulative time = 0.37585029999991093, Cumulative time limit = 1800
Used memory = (RSS = 2037.855469Mb, VMS = 2044.378906Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =      1 : Maximum =    300

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)])]

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.073559s.

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009923s with result Unsatisfiable.

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.08348130000013043, Incremental time limit = None
Running cumulative time = 0.45933160000004136, Cumulative time limit = 1800
Used memory = (RSS = 2037.878906Mb, VMS = 2044.378906Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =      1 : Maximum =    300

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)])]

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.074507s.

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010375s with result Unsatisfiable.

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.08488169999964157, Incremental time limit = None
Running cumulative time = 0.5442132999996829, Cumulative time limit = 1800
Used memory = (RSS = 2038.964844Mb, VMS = 2045.460938Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =      1 : Maximum =    300

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)])]

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.076992s.

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011936s with result Unsatisfiable.

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.0889283999995314, Incremental time limit = None
Running cumulative time = 0.6331416999992143, Cumulative time limit = 1800
Used memory = (RSS = 2039.195312Mb, VMS = 2045.707031Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =      1 : Maximum =    300

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)])]

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.079630s.

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012932s with result Unsatisfiable.

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.0925610999993296, Incremental time limit = None
Running cumulative time = 0.7257027999985439, Cumulative time limit = 1800
Used memory = (RSS = 2039.394531Mb, VMS = 2045.898438Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =      1 : Maximum =    300

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)])]

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.081525s.

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017216s with result Unsatisfiable.

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.09874060000038298, Incremental time limit = None
Running cumulative time = 0.8244433999989269, Cumulative time limit = 1800
Used memory = (RSS = 2039.632812Mb, VMS = 2046.148438Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =      1 : Maximum =    300

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)])]

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.082475s.

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.024020s with result Unsatisfiable.

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.10649520000060875, Incremental time limit = None
Running cumulative time = 0.9309385999995357, Cumulative time limit = 1800
Used memory = (RSS = 2044.808594Mb, VMS = 2052.996094Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =      1 : Maximum =    300

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)])]

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.085494s.

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.025001s with result Unsatisfiable.

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11049470000034489, Incremental time limit = None
Running cumulative time = 1.0414332999998805, Cumulative time limit = 1800
Used memory = (RSS = 2045.437500Mb, VMS = 2053.191406Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =      1 : Maximum =    300

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)])]

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.085647s.

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.041489s with result Unsatisfiable.

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.12713590000021213, Incremental time limit = None
Running cumulative time = 1.1685692000000927, Cumulative time limit = 1800
Used memory = (RSS = 2046.039062Mb, VMS = 2053.433594Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =      1 : Maximum =    300

[14-04-2022_17-52-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)])]

[14-04-2022_17-52-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.089063s.

[14-04-2022_17-52-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.068658s with result Unsatisfiable.

[14-04-2022_17-52-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.15772070000002714, Incremental time limit = None
Running cumulative time = 1.3262899000001198, Cumulative time limit = 1800
Used memory = (RSS = 2046.839844Mb, VMS = 2053.621094Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =      1 : Maximum =    300

[14-04-2022_17-52-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)])]

[14-04-2022_17-52-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.090693s.

[14-04-2022_17-52-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.131840s with result Unsatisfiable.

[14-04-2022_17-52-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.22253340000133903, Incremental time limit = None
Running cumulative time = 1.5488233000014588, Cumulative time limit = 1800
Used memory = (RSS = 2047.476562Mb, VMS = 2054.335938Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =      1 : Maximum =    300

[14-04-2022_17-52-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)])]

[14-04-2022_17-52-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.092739s.

[14-04-2022_17-52-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.236713s with result Unsatisfiable.

[14-04-2022_17-52-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.32945160000053875, Incremental time limit = None
Running cumulative time = 1.8782749000019976, Cumulative time limit = 1800
Used memory = (RSS = 2048.324219Mb, VMS = 2057.324219Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =      1 : Maximum =    300

[14-04-2022_17-52-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)])]

[14-04-2022_17-52-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.095226s.

[14-04-2022_17-52-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.272503s with result Satisfiable.

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.36772880000080477, Incremental time limit = None
Running cumulative time = 2.2460037000028024, Cumulative time limit = 1800
Used memory = (RSS = 2048.945312Mb, VMS = 2057.515625Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.350199s, Solving = 0.895804s, Total = 2.246004s, Memory = (RSS = 2048.945312Mb, VMS = 2057.515625Mb), Step range = [0-17]), Calls = 17
Final Model :: Total atoms = 13654, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.079520s, Solving = 0.005564s, Total = 0.085083s, Memory = (RSS = 2037.847656Mb, VMS = 2044.378906Mb), Step range = [0-1]
2 : Statistics :: Grounding = 0.059778s, Solving = 0.003965s, Total = 0.063742s, Memory = (RSS = 2037.847656Mb, VMS = 2044.378906Mb), Step range = [2-2]
3 : Statistics :: Grounding = 0.064463s, Solving = 0.006903s, Total = 0.071367s, Memory = (RSS = 2037.847656Mb, VMS = 2044.378906Mb), Step range = [3-3]
4 : Statistics :: Grounding = 0.068203s, Solving = 0.007861s, Total = 0.076065s, Memory = (RSS = 2037.847656Mb, VMS = 2044.378906Mb), Step range = [4-4]
5 : Statistics :: Grounding = 0.070687s, Solving = 0.008907s, Total = 0.079594s, Memory = (RSS = 2037.855469Mb, VMS = 2044.378906Mb), Step range = [5-5]
6 : Statistics :: Grounding = 0.073559s, Solving = 0.009923s, Total = 0.083481s, Memory = (RSS = 2037.878906Mb, VMS = 2044.378906Mb), Step range = [6-6]
7 : Statistics :: Grounding = 0.074507s, Solving = 0.010375s, Total = 0.084882s, Memory = (RSS = 2038.964844Mb, VMS = 2045.460938Mb), Step range = [7-7]
8 : Statistics :: Grounding = 0.076992s, Solving = 0.011936s, Total = 0.088928s, Memory = (RSS = 2039.195312Mb, VMS = 2045.707031Mb), Step range = [8-8]
9 : Statistics :: Grounding = 0.079630s, Solving = 0.012932s, Total = 0.092561s, Memory = (RSS = 2039.394531Mb, VMS = 2045.898438Mb), Step range = [9-9]
10 : Statistics :: Grounding = 0.081525s, Solving = 0.017216s, Total = 0.098741s, Memory = (RSS = 2039.632812Mb, VMS = 2046.148438Mb), Step range = [10-10]
11 : Statistics :: Grounding = 0.082475s, Solving = 0.024020s, Total = 0.106495s, Memory = (RSS = 2044.808594Mb, VMS = 2052.996094Mb), Step range = [11-11]
12 : Statistics :: Grounding = 0.085494s, Solving = 0.025001s, Total = 0.110495s, Memory = (RSS = 2045.437500Mb, VMS = 2053.191406Mb), Step range = [12-12]
13 : Statistics :: Grounding = 0.085647s, Solving = 0.041489s, Total = 0.127136s, Memory = (RSS = 2046.039062Mb, VMS = 2053.433594Mb), Step range = [13-13]
14 : Statistics :: Grounding = 0.089063s, Solving = 0.068658s, Total = 0.157721s, Memory = (RSS = 2046.839844Mb, VMS = 2053.621094Mb), Step range = [14-14]
15 : Statistics :: Grounding = 0.090693s, Solving = 0.131840s, Total = 0.222533s, Memory = (RSS = 2047.476562Mb, VMS = 2054.335938Mb), Step range = [15-15]
16 : Statistics :: Grounding = 0.092739s, Solving = 0.236713s, Total = 0.329452s, Memory = (RSS = 2048.324219Mb, VMS = 2057.324219Mb), Step range = [16-16]
17 : Statistics :: Grounding = 0.095226s, Solving = 0.272503s, Total = 0.367729s, Memory = (RSS = 2048.945312Mb, VMS = 2057.515625Mb), Step range = [17-17]

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 2.246004s due to: Stop condition reached.

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[14-04-2022_17-52-20] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 1, Last requested goal index = 1, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[14-04-2022_17-52-20] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.350199s, Solving = 0.895804s, Total = 2.246004s, Memory = (RSS = 2048.945312Mb, VMS = 2057.515625Mb), Step range = [0-17]), Calls = 17
Model :: Total atoms = 13654, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[14-04-2022_17-52-20] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 4                 
          ========================================          
                 Steps = 17 :: Actions = 17                 
                ----------------------------                

Step 1:
    Planned actions:
        talos : move(store_room)
Step 2:
    Planned actions:
        talos : collect((block,8))
Step 3:
    Planned actions:
        talos : collect((block,6))
Step 4:
    Planned actions:
        talos : move(puzzle_room)
Step 5:
    Planned actions:
        talos : place_upon((block,3),puzzle_room_table)
Step 6:
    Planned actions:
        talos : place_upon((block,2),(block,3))
Step 7:
    Planned actions:
        talos : place_upon((block,1),(block,2))
Step 8:
    Planned actions:
        talos : place_upon((block,9),puzzle_room_table)
Step 9:
    Planned actions:
        talos : place_upon((block,8),(block,9))
Step 10:
    Planned actions:
        talos : place_upon((block,6),puzzle_room_table)
Step 11:
    Planned actions:
        talos : place_upon((block,7),(block,8))
Step 12:
    Planned actions:
        talos : move(store_room)
Step 13:
    Planned actions:
        talos : collect((block,4))
Step 14:
    Planned actions:
        talos : collect((block,5))
Step 15:
    Planned actions:
        talos : move(puzzle_room)
Step 16:
    Planned actions:
        talos : place_upon((block,5),(block,6))
Step 17:
    Planned actions:
        talos : place_upon((block,4),(block,5))

[14-04-2022_17-52-20] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[14-04-2022_17-52-20] DEBUG :: ASH Planner Main #1 >> Preparing to invoke division strategy...

[14-04-2022_17-52-20] DEBUG :: ASH Planner Main #1 >> Online method OnlineMethod.GroundFirst chose to invoke the division strategy before a downwards level change:Current increment = 1, Current planning level is complete = True

[14-04-2022_17-52-20] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[14-04-2022_17-52-20] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0
Level [2]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-52-20] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 4 (classic), LE =  17, AC =  17, CF = 1.0, GT =   1.38s, ST =   0.90s, OT = 0.00s, TT =   2.28s, EF = (LE = 1.0, AC = 1.0), ED = (LE = 0.0, AC = 0.0), EB = (LE = 0.0, AC = 0.0)

[14-04-2022_17-52-20] DEBUG :: core.Strategies >> Making heterogenous divisions: division_points=[], plan_length=17, start_step=0, blend=Blend(left=0, right=0)

[14-04-2022_17-52-20] DEBUG :: core.Strategies >> Division points generated:
[]

[14-04-2022_17-52-20] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=1, plan_length=17, start_step=0, blend=Blend(left=0, right=0)

[14-04-2022_17-52-20] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=0, small_group_size=17, large_group_size=18

[14-04-2022_17-52-20] DEBUG :: core.Strategies >> Division points generated:
[]

[14-04-2022_17-52-20] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 1, Problem Range = [1-1], Size = 17, Sub-goal Stage Range = [1-17]
Division points [total=0] : []

[14-04-2022_17-52-20] DEBUG :: ASH Planner Main #1 >> Monolevel problem 1 at level 4 solved.

[14-04-2022_17-52-20] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 4 to proactively divide planning problem 1 at level 3:
Total Templated Partial Problems = 1, Problem Range = [1-1], Size = 17, Sub-goal Stage Range = [1-17]
Division points [total=0] : []

[14-04-2022_17-52-20] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-17]

[14-04-2022_17-52-20] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[14-04-2022_17-52-20] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0
Level [2]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-52-20] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 3, sgoals range = [1-17], problem number = 1, increment number = 1

[14-04-2022_17-52-20] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 17)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1797.7238624999973)
	('length_limit', 300)
	('level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[14-04-2022_17-52-20] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 3] complete conformance refinement (sequential) with sgoals range [1-17] : Concurrency disabled : Minimum search length bound enabled with value 17

[14-04-2022_17-52-20] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 3
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 17
start_step = 0
is_initial = True
is_final = True
complete_planning = True
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 17

[14-04-2022_17-52-20] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[14-04-2022_17-52-20] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[14-04-2022_17-52-20] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[14-04-2022_17-52-20] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[14-04-2022_17-52-20] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-52-20] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,8))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,8))', 'V': 'store_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 4, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 4, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 257 rules into program part ash_initial_state:

holds(3, complete_tower(blue,puzzle_room_table), false, 0).
holds(3, complete_tower(red,puzzle_room_table), false, 0).
holds(3, complete_tower(yellow,puzzle_room_table), false, 0).
holds(3, grasping(manipulator_arm_1), nothing, 0).
holds(3, grasping(manipulator_arm_2), nothing, 0).
holds(3, in((block,1)), puzzle_room, 0).
holds(3, in((block,2)), puzzle_room, 0).
holds(3, in((block,3)), puzzle_room, 0).
holds(3, in((block,4)), store_room, 0).
holds(3, in((block,5)), store_room, 0).
holds(3, in((block,6)), store_room, 0).
holds(3, in((block,7)), puzzle_room, 0).
holds(3, in((block,8)), store_room, 0).
holds(3, in((block,9)), puzzle_room, 0).
holds(3, in(manipulator_arm_1), starting_room, 0).
holds(3, in(manipulator_arm_2), starting_room, 0).
holds(3, in(puzzle_room_table), puzzle_room, 0).
holds(3, in(talos), starting_room, 0).
holds(3, in_tower((block,1),(block,1)), true, 0).
holds(3, in_tower((block,1),(block,2)), false, 0).
holds(3, in_tower((block,1),(block,3)), true, 0).
holds(3, in_tower((block,1),(block,4)), false, 0).
holds(3, in_tower((block,1),(block,5)), false, 0).
holds(3, in_tower((block,1),(block,6)), false, 0).
holds(3, in_tower((block,1),(block,7)), false, 0).
holds(3, in_tower((block,1),(block,8)), false, 0).
holds(3, in_tower((block,1),(block,9)), false, 0).
holds(3, in_tower((block,2),(block,1)), false, 0).
holds(3, in_tower((block,2),(block,2)), true, 0).
holds(3, in_tower((block,2),(block,3)), false, 0).
holds(3, in_tower((block,2),(block,4)), false, 0).
holds(3, in_tower((block,2),(block,5)), false, 0).
holds(3, in_tower((block,2),(block,6)), false, 0).
holds(3, in_tower((block,2),(block,7)), false, 0).
holds(3, in_tower((block,2),(block,8)), false, 0).
holds(3, in_tower((block,2),(block,9)), false, 0).
holds(3, in_tower((block,3),(block,1)), false, 0).
holds(3, in_tower((block,3),(block,2)), false, 0).
holds(3, in_tower((block,3),(block,3)), false, 0).
holds(3, in_tower((block,3),(block,4)), false, 0).
holds(3, in_tower((block,3),(block,5)), false, 0).
holds(3, in_tower((block,3),(block,6)), false, 0).
holds(3, in_tower((block,3),(block,7)), false, 0).
holds(3, in_tower((block,3),(block,8)), false, 0).
holds(3, in_tower((block,3),(block,9)), false, 0).
holds(3, in_tower((block,4),(block,1)), false, 0).
holds(3, in_tower((block,4),(block,2)), false, 0).
holds(3, in_tower((block,4),(block,3)), false, 0).
holds(3, in_tower((block,4),(block,4)), false, 0).
holds(3, in_tower((block,4),(block,5)), false, 0).
holds(3, in_tower((block,4),(block,6)), false, 0).
holds(3, in_tower((block,4),(block,7)), false, 0).
holds(3, in_tower((block,4),(block,8)), false, 0).
holds(3, in_tower((block,4),(block,9)), false, 0).
holds(3, in_tower((block,5),(block,1)), false, 0).
holds(3, in_tower((block,5),(block,2)), false, 0).
holds(3, in_tower((block,5),(block,3)), false, 0).
holds(3, in_tower((block,5),(block,4)), false, 0).
holds(3, in_tower((block,5),(block,5)), false, 0).
holds(3, in_tower((block,5),(block,6)), false, 0).
holds(3, in_tower((block,5),(block,7)), false, 0).
holds(3, in_tower((block,5),(block,8)), false, 0).
holds(3, in_tower((block,5),(block,9)), false, 0).
holds(3, in_tower((block,6),(block,1)), false, 0).
holds(3, in_tower((block,6),(block,2)), false, 0).
holds(3, in_tower((block,6),(block,3)), false, 0).
holds(3, in_tower((block,6),(block,4)), false, 0).
holds(3, in_tower((block,6),(block,5)), false, 0).
holds(3, in_tower((block,6),(block,6)), false, 0).
holds(3, in_tower((block,6),(block,7)), false, 0).
holds(3, in_tower((block,6),(block,8)), false, 0).
holds(3, in_tower((block,6),(block,9)), false, 0).
holds(3, in_tower((block,7),(block,1)), false, 0).
holds(3, in_tower((block,7),(block,2)), false, 0).
holds(3, in_tower((block,7),(block,3)), false, 0).
holds(3, in_tower((block,7),(block,4)), false, 0).
holds(3, in_tower((block,7),(block,5)), false, 0).
holds(3, in_tower((block,7),(block,6)), false, 0).
holds(3, in_tower((block,7),(block,7)), true, 0).
holds(3, in_tower((block,7),(block,8)), false, 0).
holds(3, in_tower((block,7),(block,9)), true, 0).
holds(3, in_tower((block,8),(block,1)), false, 0).
holds(3, in_tower((block,8),(block,2)), false, 0).
holds(3, in_tower((block,8),(block,3)), false, 0).
holds(3, in_tower((block,8),(block,4)), false, 0).
holds(3, in_tower((block,8),(block,5)), false, 0).
holds(3, in_tower((block,8),(block,6)), false, 0).
holds(3, in_tower((block,8),(block,7)), false, 0).
holds(3, in_tower((block,8),(block,8)), false, 0).
holds(3, in_tower((block,8),(block,9)), false, 0).
holds(3, in_tower((block,9),(block,1)), false, 0).
holds(3, in_tower((block,9),(block,2)), false, 0).
holds(3, in_tower((block,9),(block,3)), false, 0).
holds(3, in_tower((block,9),(block,4)), false, 0).
holds(3, in_tower((block,9),(block,5)), false, 0).
holds(3, in_tower((block,9),(block,6)), false, 0).
holds(3, in_tower((block,9),(block,7)), false, 0).
holds(3, in_tower((block,9),(block,8)), false, 0).
holds(3, in_tower((block,9),(block,9)), false, 0).
holds(3, on((block,1)), puzzle_room_table, 0).
holds(3, on((block,2)), puzzle_room_table, 0).
holds(3, on((block,3)), (block,1), 0).
holds(3, on((block,4)), nothing, 0).
holds(3, on((block,5)), nothing, 0).
holds(3, on((block,6)), nothing, 0).
holds(3, on((block,7)), puzzle_room_table, 0).
holds(3, on((block,8)), nothing, 0).
holds(3, on((block,9)), (block,7), 0).
holds(3, tower_base((block,1),puzzle_room_table), true, 0).
holds(3, tower_base((block,2),puzzle_room_table), true, 0).
holds(3, tower_base((block,3),puzzle_room_table), false, 0).
holds(3, tower_base((block,4),puzzle_room_table), false, 0).
holds(3, tower_base((block,5),puzzle_room_table), false, 0).
holds(3, tower_base((block,6),puzzle_room_table), false, 0).
holds(3, tower_base((block,7),puzzle_room_table), true, 0).
holds(3, tower_base((block,8),puzzle_room_table), false, 0).
holds(3, tower_base((block,9),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,7),puzzle_room_table), true, 0).
holds(3, unordered_tower((block,8),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,9),puzzle_room_table), false, 0).
holds(4, complete_tower(blue,puzzle_room_table), false, 0).
holds(4, complete_tower(red,puzzle_room_table), false, 0).
holds(4, complete_tower(yellow,puzzle_room_table), false, 0).
holds(4, in((block,1)), puzzle_room, 0).
holds(4, in((block,2)), puzzle_room, 0).
holds(4, in((block,3)), puzzle_room, 0).
holds(4, in((block,4)), store_room, 0).
holds(4, in((block,5)), store_room, 0).
holds(4, in((block,6)), store_room, 0).
holds(4, in((block,7)), puzzle_room, 0).
holds(4, in((block,8)), store_room, 0).
holds(4, in((block,9)), puzzle_room, 0).
holds(4, in(puzzle_room_table), puzzle_room, 0).
holds(4, in(talos), starting_room, 0).
holds(4, in_tower((block,1),(block,1)), true, 0).
holds(4, in_tower((block,1),(block,2)), false, 0).
holds(4, in_tower((block,1),(block,3)), true, 0).
holds(4, in_tower((block,1),(block,4)), false, 0).
holds(4, in_tower((block,1),(block,5)), false, 0).
holds(4, in_tower((block,1),(block,6)), false, 0).
holds(4, in_tower((block,1),(block,7)), false, 0).
holds(4, in_tower((block,1),(block,8)), false, 0).
holds(4, in_tower((block,1),(block,9)), false, 0).
holds(4, in_tower((block,2),(block,1)), false, 0).
holds(4, in_tower((block,2),(block,2)), true, 0).
holds(4, in_tower((block,2),(block,3)), false, 0).
holds(4, in_tower((block,2),(block,4)), false, 0).
holds(4, in_tower((block,2),(block,5)), false, 0).
holds(4, in_tower((block,2),(block,6)), false, 0).
holds(4, in_tower((block,2),(block,7)), false, 0).
holds(4, in_tower((block,2),(block,8)), false, 0).
holds(4, in_tower((block,2),(block,9)), false, 0).
holds(4, in_tower((block,3),(block,1)), false, 0).
holds(4, in_tower((block,3),(block,2)), false, 0).
holds(4, in_tower((block,3),(block,3)), false, 0).
holds(4, in_tower((block,3),(block,4)), false, 0).
holds(4, in_tower((block,3),(block,5)), false, 0).
holds(4, in_tower((block,3),(block,6)), false, 0).
holds(4, in_tower((block,3),(block,7)), false, 0).
holds(4, in_tower((block,3),(block,8)), false, 0).
holds(4, in_tower((block,3),(block,9)), false, 0).
holds(4, in_tower((block,4),(block,1)), false, 0).
holds(4, in_tower((block,4),(block,2)), false, 0).
holds(4, in_tower((block,4),(block,3)), false, 0).
holds(4, in_tower((block,4),(block,4)), false, 0).
holds(4, in_tower((block,4),(block,5)), false, 0).
holds(4, in_tower((block,4),(block,6)), false, 0).
holds(4, in_tower((block,4),(block,7)), false, 0).
holds(4, in_tower((block,4),(block,8)), false, 0).
holds(4, in_tower((block,4),(block,9)), false, 0).
holds(4, in_tower((block,5),(block,1)), false, 0).
holds(4, in_tower((block,5),(block,2)), false, 0).
holds(4, in_tower((block,5),(block,3)), false, 0).
holds(4, in_tower((block,5),(block,4)), false, 0).
holds(4, in_tower((block,5),(block,5)), false, 0).
holds(4, in_tower((block,5),(block,6)), false, 0).
holds(4, in_tower((block,5),(block,7)), false, 0).
holds(4, in_tower((block,5),(block,8)), false, 0).
holds(4, in_tower((block,5),(block,9)), false, 0).
holds(4, in_tower((block,6),(block,1)), false, 0).
holds(4, in_tower((block,6),(block,2)), false, 0).
holds(4, in_tower((block,6),(block,3)), false, 0).
holds(4, in_tower((block,6),(block,4)), false, 0).
holds(4, in_tower((block,6),(block,5)), false, 0).
holds(4, in_tower((block,6),(block,6)), false, 0).
holds(4, in_tower((block,6),(block,7)), false, 0).
holds(4, in_tower((block,6),(block,8)), false, 0).
holds(4, in_tower((block,6),(block,9)), false, 0).
holds(4, in_tower((block,7),(block,1)), false, 0).
holds(4, in_tower((block,7),(block,2)), false, 0).
holds(4, in_tower((block,7),(block,3)), false, 0).
holds(4, in_tower((block,7),(block,4)), false, 0).
holds(4, in_tower((block,7),(block,5)), false, 0).
holds(4, in_tower((block,7),(block,6)), false, 0).
holds(4, in_tower((block,7),(block,7)), true, 0).
holds(4, in_tower((block,7),(block,8)), false, 0).
holds(4, in_tower((block,7),(block,9)), true, 0).
holds(4, in_tower((block,8),(block,1)), false, 0).
holds(4, in_tower((block,8),(block,2)), false, 0).
holds(4, in_tower((block,8),(block,3)), false, 0).
holds(4, in_tower((block,8),(block,4)), false, 0).
holds(4, in_tower((block,8),(block,5)), false, 0).
holds(4, in_tower((block,8),(block,6)), false, 0).
holds(4, in_tower((block,8),(block,7)), false, 0).
holds(4, in_tower((block,8),(block,8)), false, 0).
holds(4, in_tower((block,8),(block,9)), false, 0).
holds(4, in_tower((block,9),(block,1)), false, 0).
holds(4, in_tower((block,9),(block,2)), false, 0).
holds(4, in_tower((block,9),(block,3)), false, 0).
holds(4, in_tower((block,9),(block,4)), false, 0).
holds(4, in_tower((block,9),(block,5)), false, 0).
holds(4, in_tower((block,9),(block,6)), false, 0).
holds(4, in_tower((block,9),(block,7)), false, 0).
holds(4, in_tower((block,9),(block,8)), false, 0).
holds(4, in_tower((block,9),(block,9)), false, 0).
holds(4, on((block,1)), puzzle_room_table, 0).
holds(4, on((block,2)), puzzle_room_table, 0).
holds(4, on((block,3)), (block,1), 0).
holds(4, on((block,4)), nothing, 0).
holds(4, on((block,5)), nothing, 0).
holds(4, on((block,6)), nothing, 0).
holds(4, on((block,7)), puzzle_room_table, 0).
holds(4, on((block,8)), nothing, 0).
holds(4, on((block,9)), (block,7), 0).
holds(4, tower_base((block,1),puzzle_room_table), true, 0).
holds(4, tower_base((block,2),puzzle_room_table), true, 0).
holds(4, tower_base((block,3),puzzle_room_table), false, 0).
holds(4, tower_base((block,4),puzzle_room_table), false, 0).
holds(4, tower_base((block,5),puzzle_room_table), false, 0).
holds(4, tower_base((block,6),puzzle_room_table), false, 0).
holds(4, tower_base((block,7),puzzle_room_table), true, 0).
holds(4, tower_base((block,8),puzzle_room_table), false, 0).
holds(4, tower_base((block,9),puzzle_room_table), false, 0).
holds(4, transporting(talos,(block,1)), false, 0).
holds(4, transporting(talos,(block,2)), false, 0).
holds(4, transporting(talos,(block,3)), false, 0).
holds(4, transporting(talos,(block,4)), false, 0).
holds(4, transporting(talos,(block,5)), false, 0).
holds(4, transporting(talos,(block,6)), false, 0).
holds(4, transporting(talos,(block,7)), false, 0).
holds(4, transporting(talos,(block,8)), false, 0).
holds(4, transporting(talos,(block,9)), false, 0).
holds(4, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(4, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(4, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(4, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(4, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(4, unordered_tower((block,6),puzzle_room_table), false, 0).
holds(4, unordered_tower((block,7),puzzle_room_table), true, 0).
holds(4, unordered_tower((block,8),puzzle_room_table), false, 0).
holds(4, unordered_tower((block,9),puzzle_room_table), false, 0).

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 588 rules into program part ash_goal_state:

final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(3, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,1),(block,7)), false, true).
final_goal(3, in_tower((block,1),(block,7)), true, false).
final_goal(3, in_tower((block,1),(block,8)), false, true).
final_goal(3, in_tower((block,1),(block,8)), true, false).
final_goal(3, in_tower((block,1),(block,9)), false, true).
final_goal(3, in_tower((block,1),(block,9)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,7)), false, true).
final_goal(3, in_tower((block,2),(block,7)), true, false).
final_goal(3, in_tower((block,2),(block,8)), false, true).
final_goal(3, in_tower((block,2),(block,8)), true, false).
final_goal(3, in_tower((block,2),(block,9)), false, true).
final_goal(3, in_tower((block,2),(block,9)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,7)), false, true).
final_goal(3, in_tower((block,3),(block,7)), true, false).
final_goal(3, in_tower((block,3),(block,8)), false, true).
final_goal(3, in_tower((block,3),(block,8)), true, false).
final_goal(3, in_tower((block,3),(block,9)), false, true).
final_goal(3, in_tower((block,3),(block,9)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,7)), false, true).
final_goal(3, in_tower((block,4),(block,7)), true, false).
final_goal(3, in_tower((block,4),(block,8)), false, true).
final_goal(3, in_tower((block,4),(block,8)), true, false).
final_goal(3, in_tower((block,4),(block,9)), false, true).
final_goal(3, in_tower((block,4),(block,9)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,7)), false, true).
final_goal(3, in_tower((block,5),(block,7)), true, false).
final_goal(3, in_tower((block,5),(block,8)), false, true).
final_goal(3, in_tower((block,5),(block,8)), true, false).
final_goal(3, in_tower((block,5),(block,9)), false, true).
final_goal(3, in_tower((block,5),(block,9)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, in_tower((block,6),(block,7)), false, true).
final_goal(3, in_tower((block,6),(block,7)), true, false).
final_goal(3, in_tower((block,6),(block,8)), false, true).
final_goal(3, in_tower((block,6),(block,8)), true, false).
final_goal(3, in_tower((block,6),(block,9)), false, true).
final_goal(3, in_tower((block,6),(block,9)), true, false).
final_goal(3, in_tower((block,7),(block,1)), false, true).
final_goal(3, in_tower((block,7),(block,1)), true, false).
final_goal(3, in_tower((block,7),(block,2)), false, true).
final_goal(3, in_tower((block,7),(block,2)), true, false).
final_goal(3, in_tower((block,7),(block,3)), false, true).
final_goal(3, in_tower((block,7),(block,3)), true, false).
final_goal(3, in_tower((block,7),(block,4)), false, true).
final_goal(3, in_tower((block,7),(block,4)), true, false).
final_goal(3, in_tower((block,7),(block,5)), false, true).
final_goal(3, in_tower((block,7),(block,5)), true, false).
final_goal(3, in_tower((block,7),(block,6)), false, true).
final_goal(3, in_tower((block,7),(block,6)), true, false).
final_goal(3, in_tower((block,7),(block,7)), false, true).
final_goal(3, in_tower((block,7),(block,7)), true, false).
final_goal(3, in_tower((block,7),(block,8)), false, true).
final_goal(3, in_tower((block,7),(block,8)), true, false).
final_goal(3, in_tower((block,7),(block,9)), false, true).
final_goal(3, in_tower((block,7),(block,9)), true, false).
final_goal(3, in_tower((block,8),(block,1)), false, true).
final_goal(3, in_tower((block,8),(block,1)), true, false).
final_goal(3, in_tower((block,8),(block,2)), false, true).
final_goal(3, in_tower((block,8),(block,2)), true, false).
final_goal(3, in_tower((block,8),(block,3)), false, true).
final_goal(3, in_tower((block,8),(block,3)), true, false).
final_goal(3, in_tower((block,8),(block,4)), false, true).
final_goal(3, in_tower((block,8),(block,4)), true, false).
final_goal(3, in_tower((block,8),(block,5)), false, true).
final_goal(3, in_tower((block,8),(block,5)), true, false).
final_goal(3, in_tower((block,8),(block,6)), false, true).
final_goal(3, in_tower((block,8),(block,6)), true, false).
final_goal(3, in_tower((block,8),(block,7)), false, true).
final_goal(3, in_tower((block,8),(block,7)), true, false).
final_goal(3, in_tower((block,8),(block,8)), false, true).
final_goal(3, in_tower((block,8),(block,8)), true, false).
final_goal(3, in_tower((block,8),(block,9)), false, true).
final_goal(3, in_tower((block,8),(block,9)), true, false).
final_goal(3, in_tower((block,9),(block,1)), false, true).
final_goal(3, in_tower((block,9),(block,1)), true, false).
final_goal(3, in_tower((block,9),(block,2)), false, true).
final_goal(3, in_tower((block,9),(block,2)), true, false).
final_goal(3, in_tower((block,9),(block,3)), false, true).
final_goal(3, in_tower((block,9),(block,3)), true, false).
final_goal(3, in_tower((block,9),(block,4)), false, true).
final_goal(3, in_tower((block,9),(block,4)), true, false).
final_goal(3, in_tower((block,9),(block,5)), false, true).
final_goal(3, in_tower((block,9),(block,5)), true, false).
final_goal(3, in_tower((block,9),(block,6)), false, true).
final_goal(3, in_tower((block,9),(block,6)), true, false).
final_goal(3, in_tower((block,9),(block,7)), false, false).
final_goal(3, in_tower((block,9),(block,7)), true, true).
final_goal(3, in_tower((block,9),(block,8)), false, false).
final_goal(3, in_tower((block,9),(block,8)), true, true).
final_goal(3, in_tower((block,9),(block,9)), false, false).
final_goal(3, in_tower((block,9),(block,9)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), (block,7), false).
final_goal(3, on((block,1)), (block,8), false).
final_goal(3, on((block,1)), (block,9), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), (block,7), false).
final_goal(3, on((block,2)), (block,8), false).
final_goal(3, on((block,2)), (block,9), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), (block,7), false).
final_goal(3, on((block,3)), (block,8), false).
final_goal(3, on((block,3)), (block,9), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), (block,7), false).
final_goal(3, on((block,4)), (block,8), false).
final_goal(3, on((block,4)), (block,9), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), (block,7), false).
final_goal(3, on((block,5)), (block,8), false).
final_goal(3, on((block,5)), (block,9), false).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), (block,7), false).
final_goal(3, on((block,6)), (block,8), false).
final_goal(3, on((block,6)), (block,9), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, on((block,7)), (block,1), false).
final_goal(3, on((block,7)), (block,2), false).
final_goal(3, on((block,7)), (block,3), false).
final_goal(3, on((block,7)), (block,4), false).
final_goal(3, on((block,7)), (block,5), false).
final_goal(3, on((block,7)), (block,6), false).
final_goal(3, on((block,7)), (block,8), true).
final_goal(3, on((block,7)), (block,9), false).
final_goal(3, on((block,7)), nothing, false).
final_goal(3, on((block,7)), puzzle_room_table, false).
final_goal(3, on((block,8)), (block,1), false).
final_goal(3, on((block,8)), (block,2), false).
final_goal(3, on((block,8)), (block,3), false).
final_goal(3, on((block,8)), (block,4), false).
final_goal(3, on((block,8)), (block,5), false).
final_goal(3, on((block,8)), (block,6), false).
final_goal(3, on((block,8)), (block,7), false).
final_goal(3, on((block,8)), (block,9), true).
final_goal(3, on((block,8)), nothing, false).
final_goal(3, on((block,8)), puzzle_room_table, false).
final_goal(3, on((block,9)), (block,1), false).
final_goal(3, on((block,9)), (block,2), false).
final_goal(3, on((block,9)), (block,3), false).
final_goal(3, on((block,9)), (block,4), false).
final_goal(3, on((block,9)), (block,5), false).
final_goal(3, on((block,9)), (block,6), false).
final_goal(3, on((block,9)), (block,7), false).
final_goal(3, on((block,9)), (block,8), false).
final_goal(3, on((block,9)), nothing, false).
final_goal(3, on((block,9)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, tower_base((block,7),puzzle_room_table), false, true).
final_goal(3, tower_base((block,7),puzzle_room_table), true, false).
final_goal(3, tower_base((block,8),puzzle_room_table), false, true).
final_goal(3, tower_base((block,8),puzzle_room_table), true, false).
final_goal(3, tower_base((block,9),puzzle_room_table), false, false).
final_goal(3, tower_base((block,9),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(4, complete_tower(blue,puzzle_room_table), false, false).
final_goal(4, complete_tower(blue,puzzle_room_table), true, true).
final_goal(4, complete_tower(red,puzzle_room_table), false, false).
final_goal(4, complete_tower(red,puzzle_room_table), true, true).
final_goal(4, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(4, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(4, in_tower((block,1),(block,1)), false, true).
final_goal(4, in_tower((block,1),(block,1)), true, false).
final_goal(4, in_tower((block,1),(block,2)), false, true).
final_goal(4, in_tower((block,1),(block,2)), true, false).
final_goal(4, in_tower((block,1),(block,3)), false, true).
final_goal(4, in_tower((block,1),(block,3)), true, false).
final_goal(4, in_tower((block,1),(block,4)), false, true).
final_goal(4, in_tower((block,1),(block,4)), true, false).
final_goal(4, in_tower((block,1),(block,5)), false, true).
final_goal(4, in_tower((block,1),(block,5)), true, false).
final_goal(4, in_tower((block,1),(block,6)), false, true).
final_goal(4, in_tower((block,1),(block,6)), true, false).
final_goal(4, in_tower((block,1),(block,7)), false, true).
final_goal(4, in_tower((block,1),(block,7)), true, false).
final_goal(4, in_tower((block,1),(block,8)), false, true).
final_goal(4, in_tower((block,1),(block,8)), true, false).
final_goal(4, in_tower((block,1),(block,9)), false, true).
final_goal(4, in_tower((block,1),(block,9)), true, false).
final_goal(4, in_tower((block,2),(block,1)), false, true).
final_goal(4, in_tower((block,2),(block,1)), true, false).
final_goal(4, in_tower((block,2),(block,2)), false, true).
final_goal(4, in_tower((block,2),(block,2)), true, false).
final_goal(4, in_tower((block,2),(block,3)), false, true).
final_goal(4, in_tower((block,2),(block,3)), true, false).
final_goal(4, in_tower((block,2),(block,4)), false, true).
final_goal(4, in_tower((block,2),(block,4)), true, false).
final_goal(4, in_tower((block,2),(block,5)), false, true).
final_goal(4, in_tower((block,2),(block,5)), true, false).
final_goal(4, in_tower((block,2),(block,6)), false, true).
final_goal(4, in_tower((block,2),(block,6)), true, false).
final_goal(4, in_tower((block,2),(block,7)), false, true).
final_goal(4, in_tower((block,2),(block,7)), true, false).
final_goal(4, in_tower((block,2),(block,8)), false, true).
final_goal(4, in_tower((block,2),(block,8)), true, false).
final_goal(4, in_tower((block,2),(block,9)), false, true).
final_goal(4, in_tower((block,2),(block,9)), true, false).
final_goal(4, in_tower((block,3),(block,1)), false, false).
final_goal(4, in_tower((block,3),(block,1)), true, true).
final_goal(4, in_tower((block,3),(block,2)), false, false).
final_goal(4, in_tower((block,3),(block,2)), true, true).
final_goal(4, in_tower((block,3),(block,3)), false, false).
final_goal(4, in_tower((block,3),(block,3)), true, true).
final_goal(4, in_tower((block,3),(block,4)), false, true).
final_goal(4, in_tower((block,3),(block,4)), true, false).
final_goal(4, in_tower((block,3),(block,5)), false, true).
final_goal(4, in_tower((block,3),(block,5)), true, false).
final_goal(4, in_tower((block,3),(block,6)), false, true).
final_goal(4, in_tower((block,3),(block,6)), true, false).
final_goal(4, in_tower((block,3),(block,7)), false, true).
final_goal(4, in_tower((block,3),(block,7)), true, false).
final_goal(4, in_tower((block,3),(block,8)), false, true).
final_goal(4, in_tower((block,3),(block,8)), true, false).
final_goal(4, in_tower((block,3),(block,9)), false, true).
final_goal(4, in_tower((block,3),(block,9)), true, false).
final_goal(4, in_tower((block,4),(block,1)), false, true).
final_goal(4, in_tower((block,4),(block,1)), true, false).
final_goal(4, in_tower((block,4),(block,2)), false, true).
final_goal(4, in_tower((block,4),(block,2)), true, false).
final_goal(4, in_tower((block,4),(block,3)), false, true).
final_goal(4, in_tower((block,4),(block,3)), true, false).
final_goal(4, in_tower((block,4),(block,4)), false, true).
final_goal(4, in_tower((block,4),(block,4)), true, false).
final_goal(4, in_tower((block,4),(block,5)), false, true).
final_goal(4, in_tower((block,4),(block,5)), true, false).
final_goal(4, in_tower((block,4),(block,6)), false, true).
final_goal(4, in_tower((block,4),(block,6)), true, false).
final_goal(4, in_tower((block,4),(block,7)), false, true).
final_goal(4, in_tower((block,4),(block,7)), true, false).
final_goal(4, in_tower((block,4),(block,8)), false, true).
final_goal(4, in_tower((block,4),(block,8)), true, false).
final_goal(4, in_tower((block,4),(block,9)), false, true).
final_goal(4, in_tower((block,4),(block,9)), true, false).
final_goal(4, in_tower((block,5),(block,1)), false, true).
final_goal(4, in_tower((block,5),(block,1)), true, false).
final_goal(4, in_tower((block,5),(block,2)), false, true).
final_goal(4, in_tower((block,5),(block,2)), true, false).
final_goal(4, in_tower((block,5),(block,3)), false, true).
final_goal(4, in_tower((block,5),(block,3)), true, false).
final_goal(4, in_tower((block,5),(block,4)), false, true).
final_goal(4, in_tower((block,5),(block,4)), true, false).
final_goal(4, in_tower((block,5),(block,5)), false, true).
final_goal(4, in_tower((block,5),(block,5)), true, false).
final_goal(4, in_tower((block,5),(block,6)), false, true).
final_goal(4, in_tower((block,5),(block,6)), true, false).
final_goal(4, in_tower((block,5),(block,7)), false, true).
final_goal(4, in_tower((block,5),(block,7)), true, false).
final_goal(4, in_tower((block,5),(block,8)), false, true).
final_goal(4, in_tower((block,5),(block,8)), true, false).
final_goal(4, in_tower((block,5),(block,9)), false, true).
final_goal(4, in_tower((block,5),(block,9)), true, false).
final_goal(4, in_tower((block,6),(block,1)), false, true).
final_goal(4, in_tower((block,6),(block,1)), true, false).
final_goal(4, in_tower((block,6),(block,2)), false, true).
final_goal(4, in_tower((block,6),(block,2)), true, false).
final_goal(4, in_tower((block,6),(block,3)), false, true).
final_goal(4, in_tower((block,6),(block,3)), true, false).
final_goal(4, in_tower((block,6),(block,4)), false, false).
final_goal(4, in_tower((block,6),(block,4)), true, true).
final_goal(4, in_tower((block,6),(block,5)), false, false).
final_goal(4, in_tower((block,6),(block,5)), true, true).
final_goal(4, in_tower((block,6),(block,6)), false, false).
final_goal(4, in_tower((block,6),(block,6)), true, true).
final_goal(4, in_tower((block,6),(block,7)), false, true).
final_goal(4, in_tower((block,6),(block,7)), true, false).
final_goal(4, in_tower((block,6),(block,8)), false, true).
final_goal(4, in_tower((block,6),(block,8)), true, false).
final_goal(4, in_tower((block,6),(block,9)), false, true).
final_goal(4, in_tower((block,6),(block,9)), true, false).
final_goal(4, in_tower((block,7),(block,1)), false, true).
final_goal(4, in_tower((block,7),(block,1)), true, false).
final_goal(4, in_tower((block,7),(block,2)), false, true).
final_goal(4, in_tower((block,7),(block,2)), true, false).
final_goal(4, in_tower((block,7),(block,3)), false, true).
final_goal(4, in_tower((block,7),(block,3)), true, false).
final_goal(4, in_tower((block,7),(block,4)), false, true).
final_goal(4, in_tower((block,7),(block,4)), true, false).
final_goal(4, in_tower((block,7),(block,5)), false, true).
final_goal(4, in_tower((block,7),(block,5)), true, false).
final_goal(4, in_tower((block,7),(block,6)), false, true).
final_goal(4, in_tower((block,7),(block,6)), true, false).
final_goal(4, in_tower((block,7),(block,7)), false, true).
final_goal(4, in_tower((block,7),(block,7)), true, false).
final_goal(4, in_tower((block,7),(block,8)), false, true).
final_goal(4, in_tower((block,7),(block,8)), true, false).
final_goal(4, in_tower((block,7),(block,9)), false, true).
final_goal(4, in_tower((block,7),(block,9)), true, false).
final_goal(4, in_tower((block,8),(block,1)), false, true).
final_goal(4, in_tower((block,8),(block,1)), true, false).
final_goal(4, in_tower((block,8),(block,2)), false, true).
final_goal(4, in_tower((block,8),(block,2)), true, false).
final_goal(4, in_tower((block,8),(block,3)), false, true).
final_goal(4, in_tower((block,8),(block,3)), true, false).
final_goal(4, in_tower((block,8),(block,4)), false, true).
final_goal(4, in_tower((block,8),(block,4)), true, false).
final_goal(4, in_tower((block,8),(block,5)), false, true).
final_goal(4, in_tower((block,8),(block,5)), true, false).
final_goal(4, in_tower((block,8),(block,6)), false, true).
final_goal(4, in_tower((block,8),(block,6)), true, false).
final_goal(4, in_tower((block,8),(block,7)), false, true).
final_goal(4, in_tower((block,8),(block,7)), true, false).
final_goal(4, in_tower((block,8),(block,8)), false, true).
final_goal(4, in_tower((block,8),(block,8)), true, false).
final_goal(4, in_tower((block,8),(block,9)), false, true).
final_goal(4, in_tower((block,8),(block,9)), true, false).
final_goal(4, in_tower((block,9),(block,1)), false, true).
final_goal(4, in_tower((block,9),(block,1)), true, false).
final_goal(4, in_tower((block,9),(block,2)), false, true).
final_goal(4, in_tower((block,9),(block,2)), true, false).
final_goal(4, in_tower((block,9),(block,3)), false, true).
final_goal(4, in_tower((block,9),(block,3)), true, false).
final_goal(4, in_tower((block,9),(block,4)), false, true).
final_goal(4, in_tower((block,9),(block,4)), true, false).
final_goal(4, in_tower((block,9),(block,5)), false, true).
final_goal(4, in_tower((block,9),(block,5)), true, false).
final_goal(4, in_tower((block,9),(block,6)), false, true).
final_goal(4, in_tower((block,9),(block,6)), true, false).
final_goal(4, in_tower((block,9),(block,7)), false, false).
final_goal(4, in_tower((block,9),(block,7)), true, true).
final_goal(4, in_tower((block,9),(block,8)), false, false).
final_goal(4, in_tower((block,9),(block,8)), true, true).
final_goal(4, in_tower((block,9),(block,9)), false, false).
final_goal(4, in_tower((block,9),(block,9)), true, true).
final_goal(4, on((block,1)), (block,2), true).
final_goal(4, on((block,1)), (block,3), false).
final_goal(4, on((block,1)), (block,4), false).
final_goal(4, on((block,1)), (block,5), false).
final_goal(4, on((block,1)), (block,6), false).
final_goal(4, on((block,1)), (block,7), false).
final_goal(4, on((block,1)), (block,8), false).
final_goal(4, on((block,1)), (block,9), false).
final_goal(4, on((block,1)), nothing, false).
final_goal(4, on((block,1)), puzzle_room_table, false).
final_goal(4, on((block,2)), (block,1), false).
final_goal(4, on((block,2)), (block,3), true).
final_goal(4, on((block,2)), (block,4), false).
final_goal(4, on((block,2)), (block,5), false).
final_goal(4, on((block,2)), (block,6), false).
final_goal(4, on((block,2)), (block,7), false).
final_goal(4, on((block,2)), (block,8), false).
final_goal(4, on((block,2)), (block,9), false).
final_goal(4, on((block,2)), nothing, false).
final_goal(4, on((block,2)), puzzle_room_table, false).
final_goal(4, on((block,3)), (block,1), false).
final_goal(4, on((block,3)), (block,2), false).
final_goal(4, on((block,3)), (block,4), false).
final_goal(4, on((block,3)), (block,5), false).
final_goal(4, on((block,3)), (block,6), false).
final_goal(4, on((block,3)), (block,7), false).
final_goal(4, on((block,3)), (block,8), false).
final_goal(4, on((block,3)), (block,9), false).
final_goal(4, on((block,3)), nothing, false).
final_goal(4, on((block,3)), puzzle_room_table, true).
final_goal(4, on((block,4)), (block,1), false).
final_goal(4, on((block,4)), (block,2), false).
final_goal(4, on((block,4)), (block,3), false).
final_goal(4, on((block,4)), (block,5), true).
final_goal(4, on((block,4)), (block,6), false).
final_goal(4, on((block,4)), (block,7), false).
final_goal(4, on((block,4)), (block,8), false).
final_goal(4, on((block,4)), (block,9), false).
final_goal(4, on((block,4)), nothing, false).
final_goal(4, on((block,4)), puzzle_room_table, false).
final_goal(4, on((block,5)), (block,1), false).
final_goal(4, on((block,5)), (block,2), false).
final_goal(4, on((block,5)), (block,3), false).
final_goal(4, on((block,5)), (block,4), false).
final_goal(4, on((block,5)), (block,6), true).
final_goal(4, on((block,5)), (block,7), false).
final_goal(4, on((block,5)), (block,8), false).
final_goal(4, on((block,5)), (block,9), false).
final_goal(4, on((block,5)), nothing, false).
final_goal(4, on((block,5)), puzzle_room_table, false).
final_goal(4, on((block,6)), (block,1), false).
final_goal(4, on((block,6)), (block,2), false).
final_goal(4, on((block,6)), (block,3), false).
final_goal(4, on((block,6)), (block,4), false).
final_goal(4, on((block,6)), (block,5), false).
final_goal(4, on((block,6)), (block,7), false).
final_goal(4, on((block,6)), (block,8), false).
final_goal(4, on((block,6)), (block,9), false).
final_goal(4, on((block,6)), nothing, false).
final_goal(4, on((block,6)), puzzle_room_table, true).
final_goal(4, on((block,7)), (block,1), false).
final_goal(4, on((block,7)), (block,2), false).
final_goal(4, on((block,7)), (block,3), false).
final_goal(4, on((block,7)), (block,4), false).
final_goal(4, on((block,7)), (block,5), false).
final_goal(4, on((block,7)), (block,6), false).
final_goal(4, on((block,7)), (block,8), true).
final_goal(4, on((block,7)), (block,9), false).
final_goal(4, on((block,7)), nothing, false).
final_goal(4, on((block,7)), puzzle_room_table, false).
final_goal(4, on((block,8)), (block,1), false).
final_goal(4, on((block,8)), (block,2), false).
final_goal(4, on((block,8)), (block,3), false).
final_goal(4, on((block,8)), (block,4), false).
final_goal(4, on((block,8)), (block,5), false).
final_goal(4, on((block,8)), (block,6), false).
final_goal(4, on((block,8)), (block,7), false).
final_goal(4, on((block,8)), (block,9), true).
final_goal(4, on((block,8)), nothing, false).
final_goal(4, on((block,8)), puzzle_room_table, false).
final_goal(4, on((block,9)), (block,1), false).
final_goal(4, on((block,9)), (block,2), false).
final_goal(4, on((block,9)), (block,3), false).
final_goal(4, on((block,9)), (block,4), false).
final_goal(4, on((block,9)), (block,5), false).
final_goal(4, on((block,9)), (block,6), false).
final_goal(4, on((block,9)), (block,7), false).
final_goal(4, on((block,9)), (block,8), false).
final_goal(4, on((block,9)), nothing, false).
final_goal(4, on((block,9)), puzzle_room_table, true).
final_goal(4, tower_base((block,1),puzzle_room_table), false, true).
final_goal(4, tower_base((block,1),puzzle_room_table), true, false).
final_goal(4, tower_base((block,2),puzzle_room_table), false, true).
final_goal(4, tower_base((block,2),puzzle_room_table), true, false).
final_goal(4, tower_base((block,3),puzzle_room_table), false, false).
final_goal(4, tower_base((block,3),puzzle_room_table), true, true).
final_goal(4, tower_base((block,4),puzzle_room_table), false, true).
final_goal(4, tower_base((block,4),puzzle_room_table), true, false).
final_goal(4, tower_base((block,5),puzzle_room_table), false, true).
final_goal(4, tower_base((block,5),puzzle_room_table), true, false).
final_goal(4, tower_base((block,6),puzzle_room_table), false, false).
final_goal(4, tower_base((block,6),puzzle_room_table), true, true).
final_goal(4, tower_base((block,7),puzzle_room_table), false, true).
final_goal(4, tower_base((block,7),puzzle_room_table), true, false).
final_goal(4, tower_base((block,8),puzzle_room_table), false, true).
final_goal(4, tower_base((block,8),puzzle_room_table), true, false).
final_goal(4, tower_base((block,9),puzzle_room_table), false, false).
final_goal(4, tower_base((block,9),puzzle_room_table), true, true).
final_goal(4, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,9),puzzle_room_table), true, false).

[14-04-2022_17-52-20] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=17']

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 4, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 1})
SubGoal({'L': 4, 'R': 'talos', 'A': 'collect((block,8))', 'F': 'on((block,8))', 'V': 'nothing', 'I': 2})
SubGoal({'L': 4, 'R': 'talos', 'A': 'collect((block,8))', 'F': 'transporting(talos,(block,8))', 'V': 'true', 'I': 2})
SubGoal({'L': 4, 'R': 'talos', 'A': 'collect((block,6))', 'F': 'on((block,6))', 'V': 'nothing', 'I': 3})
SubGoal({'L': 4, 'R': 'talos', 'A': 'collect((block,6))', 'F': 'transporting(talos,(block,6))', 'V': 'true', 'I': 3})
SubGoal({'L': 4, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 4})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 5})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,3),puzzle_room_table)', 'F': 'transporting(talos,(block,3))', 'V': 'false', 'I': 5})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 6})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,2),(block,3))', 'F': 'transporting(talos,(block,2))', 'V': 'false', 'I': 6})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 7})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,1),(block,2))', 'F': 'transporting(talos,(block,1))', 'V': 'false', 'I': 7})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,9),puzzle_room_table)', 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'I': 8})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,9),puzzle_room_table)', 'F': 'transporting(talos,(block,9))', 'V': 'false', 'I': 8})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,8),(block,9))', 'F': 'on((block,8))', 'V': '(block,9)', 'I': 9})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,8),(block,9))', 'F': 'transporting(talos,(block,8))', 'V': 'false', 'I': 9})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,6),puzzle_room_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'I': 10})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,6),puzzle_room_table)', 'F': 'transporting(talos,(block,6))', 'V': 'false', 'I': 10})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,7),(block,8))', 'F': 'on((block,7))', 'V': '(block,8)', 'I': 11})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,7),(block,8))', 'F': 'transporting(talos,(block,7))', 'V': 'false', 'I': 11})
SubGoal({'L': 4, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 12})
SubGoal({'L': 4, 'R': 'talos', 'A': 'collect((block,4))', 'F': 'on((block,4))', 'V': 'nothing', 'I': 13})
SubGoal({'L': 4, 'R': 'talos', 'A': 'collect((block,4))', 'F': 'transporting(talos,(block,4))', 'V': 'true', 'I': 13})
SubGoal({'L': 4, 'R': 'talos', 'A': 'collect((block,5))', 'F': 'on((block,5))', 'V': 'nothing', 'I': 14})
SubGoal({'L': 4, 'R': 'talos', 'A': 'collect((block,5))', 'F': 'transporting(talos,(block,5))', 'V': 'true', 'I': 14})
SubGoal({'L': 4, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 15})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 16})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,5),(block,6))', 'F': 'transporting(talos,(block,5))', 'V': 'false', 'I': 16})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 17})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,4),(block,5))', 'F': 'transporting(talos,(block,4))', 'V': 'false', 'I': 17})

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 30 rules into program part base:

sub_goal(4, talos, move(store_room), in(talos), store_room, 1).
sub_goal(4, talos, collect((block,8)), on((block,8)), nothing, 2).
sub_goal(4, talos, collect((block,8)), transporting(talos,(block,8)), true, 2).
sub_goal(4, talos, collect((block,6)), on((block,6)), nothing, 3).
sub_goal(4, talos, collect((block,6)), transporting(talos,(block,6)), true, 3).
sub_goal(4, talos, move(puzzle_room), in(talos), puzzle_room, 4).
sub_goal(4, talos, place_upon((block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 5).
sub_goal(4, talos, place_upon((block,3),puzzle_room_table), transporting(talos,(block,3)), false, 5).
sub_goal(4, talos, place_upon((block,2),(block,3)), on((block,2)), (block,3), 6).
sub_goal(4, talos, place_upon((block,2),(block,3)), transporting(talos,(block,2)), false, 6).
sub_goal(4, talos, place_upon((block,1),(block,2)), on((block,1)), (block,2), 7).
sub_goal(4, talos, place_upon((block,1),(block,2)), transporting(talos,(block,1)), false, 7).
sub_goal(4, talos, place_upon((block,9),puzzle_room_table), on((block,9)), puzzle_room_table, 8).
sub_goal(4, talos, place_upon((block,9),puzzle_room_table), transporting(talos,(block,9)), false, 8).
sub_goal(4, talos, place_upon((block,8),(block,9)), on((block,8)), (block,9), 9).
sub_goal(4, talos, place_upon((block,8),(block,9)), transporting(talos,(block,8)), false, 9).
sub_goal(4, talos, place_upon((block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 10).
sub_goal(4, talos, place_upon((block,6),puzzle_room_table), transporting(talos,(block,6)), false, 10).
sub_goal(4, talos, place_upon((block,7),(block,8)), on((block,7)), (block,8), 11).
sub_goal(4, talos, place_upon((block,7),(block,8)), transporting(talos,(block,7)), false, 11).
sub_goal(4, talos, move(store_room), in(talos), store_room, 12).
sub_goal(4, talos, collect((block,4)), on((block,4)), nothing, 13).
sub_goal(4, talos, collect((block,4)), transporting(talos,(block,4)), true, 13).
sub_goal(4, talos, collect((block,5)), on((block,5)), nothing, 14).
sub_goal(4, talos, collect((block,5)), transporting(talos,(block,5)), true, 14).
sub_goal(4, talos, move(puzzle_room), in(talos), puzzle_room, 15).
sub_goal(4, talos, place_upon((block,5),(block,6)), on((block,5)), (block,6), 16).
sub_goal(4, talos, place_upon((block,5),(block,6)), transporting(talos,(block,5)), false, 16).
sub_goal(4, talos, place_upon((block,4),(block,5)), on((block,4)), (block,5), 17).
sub_goal(4, talos, place_upon((block,4),(block,5)), transporting(talos,(block,4)), false, 17).

[14-04-2022_17-52-20] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=17']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A2870D9E50>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=18, step_end_min=18, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1797.7238624999973, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(3, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'false', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'false', 'false', 'false', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 17, 'sequential', 'false'), range_=None)]

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1265 rules

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006670900000244728s

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(3, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(3), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.034254s.

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005804s with result Satisfiable.

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A28744B8B0>

[14-04-2022_17-52-20] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 3)
	('start_step', 0)
	('last_sgoals', 17)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A28744B8B0>)

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, true). %* None *%
#program optimisation_module(#inc, 0, false, false, false, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, 17, sequential, false). %* None *%

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =     17
Incrementor step ends | Minimum  =     18 : Maximum =    300

[14-04-2022_17-52-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('conformance_module', [Number(0), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('conformance_module', [Number(1), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('conformance_module', [Number(2), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('conformance_module', [Number(3), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('conformance_module', [Number(4), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('conformance_module', [Number(5), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('conformance_module', [Number(6), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('conformance_module', [Number(7), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('conformance_module', [Number(8), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('conformance_module', [Number(9), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('conformance_module', [Number(10), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('conformance_module', [Number(11), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('conformance_module', [Number(12), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('conformance_module', [Number(13), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('conformance_module', [Number(14), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('conformance_module', [Number(15), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.258332s.

[14-04-2022_17-52-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.719557s with result Satisfiable.

[14-04-2022_17-52-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.9778892000003907, Incremental time limit = None
Running cumulative time = 1.9778892000003907, Cumulative time limit = 1797.7238624999973
Used memory = (RSS = 2078.964844Mb, VMS = 2086.921875Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.258332s, Solving = 0.719557s, Total = 1.977889s, Memory = (RSS = 2078.964844Mb, VMS = 2086.921875Mb), Step range = [0-17]), Calls = 1
Final Model :: Total atoms = 20787, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[14-04-2022_17-52-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =     18 : Maximum =    300

[14-04-2022_17-52-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('conformance_module', [Number(18), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.152545s.

[14-04-2022_17-52-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.045195s with result Unsatisfiable.

[14-04-2022_17-52-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.19774040000083914, Incremental time limit = None
Running cumulative time = 2.17562960000123, Cumulative time limit = 1797.7238624999973
Used memory = (RSS = 2085.183594Mb, VMS = 2100.191406Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =     18 : Maximum =    300

[14-04-2022_17-52-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('state_module', [Number(19), Number(0)]), ('plan_module', [Number(19), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('conformance_module', [Number(19), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.156385s.

[14-04-2022_17-52-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.059020s with result Unsatisfiable.

[14-04-2022_17-52-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.21540539999932662, Incremental time limit = None
Running cumulative time = 2.3910350000005565, Cumulative time limit = 1797.7238624999973
Used memory = (RSS = 2086.753906Mb, VMS = 2100.566406Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =     18 : Maximum =    300

[14-04-2022_17-52-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('state_module', [Number(20), Number(0)]), ('plan_module', [Number(20), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.158335s.

[14-04-2022_17-52-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.084748s with result Unsatisfiable.

[14-04-2022_17-52-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.24308320000091044, Incremental time limit = None
Running cumulative time = 2.634118200001467, Cumulative time limit = 1797.7238624999973
Used memory = (RSS = 2089.125000Mb, VMS = 2101.996094Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     20 : Current =     21
Incrementor step ends | Minimum  =     18 : Maximum =    300

[14-04-2022_17-52-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('state_module', [Number(21), Number(0)]), ('plan_module', [Number(21), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(21), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.161569s.

[14-04-2022_17-52-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.089810s with result Unsatisfiable.

[14-04-2022_17-52-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.25137829999948735, Incremental time limit = None
Running cumulative time = 2.8854965000009543, Cumulative time limit = 1797.7238624999973
Used memory = (RSS = 2091.957031Mb, VMS = 2104.027344Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     21 : Current =     22
Incrementor step ends | Minimum  =     18 : Maximum =    300

[14-04-2022_17-52-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(22)]), ('state_module', [Number(22), Number(0)]), ('plan_module', [Number(22), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(22), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.164309s.

[14-04-2022_17-52-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.117534s with result Unsatisfiable.

[14-04-2022_17-52-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.28184309999960533, Incremental time limit = None
Running cumulative time = 3.1673396000005596, Cumulative time limit = 1797.7238624999973
Used memory = (RSS = 2093.656250Mb, VMS = 2104.398438Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     22 : Current =     23
Incrementor step ends | Minimum  =     18 : Maximum =    300

[14-04-2022_17-52-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(23)]), ('state_module', [Number(23), Number(0)]), ('plan_module', [Number(23), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(23), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('conformance_module', [Number(23), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.165536s.

[14-04-2022_17-52-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.212202s with result Unsatisfiable.

[14-04-2022_17-52-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.377738600000157, Incremental time limit = None
Running cumulative time = 3.5450782000007166, Cumulative time limit = 1797.7238624999973
Used memory = (RSS = 2095.203125Mb, VMS = 2104.761719Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     23 : Current =     24
Incrementor step ends | Minimum  =     18 : Maximum =    300

[14-04-2022_17-52-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(24)]), ('state_module', [Number(24), Number(0)]), ('plan_module', [Number(24), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(24), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.168640s.

[14-04-2022_17-52-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.605030s with result Unsatisfiable.

[14-04-2022_17-52-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.7736700999994355, Incremental time limit = None
Running cumulative time = 4.318748300000152, Cumulative time limit = 1797.7238624999973
Used memory = (RSS = 2097.062500Mb, VMS = 2105.136719Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     24 : Current =     25
Incrementor step ends | Minimum  =     18 : Maximum =    300

[14-04-2022_17-52-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(25)]), ('state_module', [Number(25), Number(0)]), ('plan_module', [Number(25), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(25), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.173026s.

[14-04-2022_17-52-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.897419s with result Unsatisfiable.

[14-04-2022_17-52-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.0704450000002907, Incremental time limit = None
Running cumulative time = 5.389193300000443, Cumulative time limit = 1797.7238624999973
Used memory = (RSS = 2098.851562Mb, VMS = 2105.671875Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     25 : Current =     26
Incrementor step ends | Minimum  =     18 : Maximum =    300

[14-04-2022_17-52-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(26)]), ('state_module', [Number(26), Number(0)]), ('plan_module', [Number(26), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(26), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.175487s.

[14-04-2022_17-52-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.399035s with result Unsatisfiable.

[14-04-2022_17-52-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5745215999995708, Incremental time limit = None
Running cumulative time = 5.963714900000014, Cumulative time limit = 1797.7238624999973
Used memory = (RSS = 2104.058594Mb, VMS = 2126.539062Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     26 : Current =     27
Incrementor step ends | Minimum  =     18 : Maximum =    300

[14-04-2022_17-52-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(27)]), ('state_module', [Number(27), Number(0)]), ('plan_module', [Number(27), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(27), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('conformance_module', [Number(27), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.178471s.

[14-04-2022_17-52-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 4.530108s with result Unsatisfiable.

[14-04-2022_17-52-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 4.708578599998873, Incremental time limit = None
Running cumulative time = 10.672293499998887, Cumulative time limit = 1797.7238624999973
Used memory = (RSS = 2107.527344Mb, VMS = 2127.835938Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     27 : Current =     28
Incrementor step ends | Minimum  =     18 : Maximum =    300

[14-04-2022_17-52-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(28)]), ('state_module', [Number(28), Number(0)]), ('plan_module', [Number(28), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(28), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('conformance_module', [Number(28), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.182004s.

[14-04-2022_17-52-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.224388s with result Unsatisfiable.

[14-04-2022_17-52-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.40639220000048226, Incremental time limit = None
Running cumulative time = 11.078685699999369, Cumulative time limit = 1797.7238624999973
Used memory = (RSS = 2110.359375Mb, VMS = 2129.261719Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     28 : Current =     29
Incrementor step ends | Minimum  =     18 : Maximum =    300

[14-04-2022_17-52-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(29)]), ('state_module', [Number(29), Number(0)]), ('plan_module', [Number(29), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(29), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.182839s.

[14-04-2022_17-52-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 6.291395s with result Unsatisfiable.

[14-04-2022_17-52-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 6.474234099999194, Incremental time limit = None
Running cumulative time = 17.552919799998563, Cumulative time limit = 1797.7238624999973
Used memory = (RSS = 2114.480469Mb, VMS = 2130.640625Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     29 : Current =     30
Incrementor step ends | Minimum  =     18 : Maximum =    300

[14-04-2022_17-52-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(30)]), ('state_module', [Number(30), Number(0)]), ('plan_module', [Number(30), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(30), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.187328s.

[14-04-2022_17-52-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-52-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 11.612443s with result Unsatisfiable.

[14-04-2022_17-52-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 11.79977069999859, Incremental time limit = None
Running cumulative time = 29.352690499997152, Cumulative time limit = 1797.7238624999973
Used memory = (RSS = 2120.722656Mb, VMS = 2133.902344Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-52-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     30 : Current =     31
Incrementor step ends | Minimum  =     18 : Maximum =    300

[14-04-2022_17-52-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(31)]), ('state_module', [Number(31), Number(0)]), ('plan_module', [Number(31), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(31), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('conformance_module', [Number(31), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-52-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.191968s.

[14-04-2022_17-52-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 13.078706s with result Satisfiable.

[14-04-2022_17-53-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 13.27067469999929, Incremental time limit = None
Running cumulative time = 42.62336519999644, Cumulative time limit = 1797.7238624999973
Used memory = (RSS = 2127.632812Mb, VMS = 2139.410156Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.656775s, Solving = 38.966590s, Total = 42.623365s, Memory = (RSS = 2127.632812Mb, VMS = 2139.410156Mb), Step range = [0-31]), Calls = 15
Final Model :: Total atoms = 33803, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[14-04-2022_17-53-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 1.258332s, Solving = 0.719557s, Total = 1.977889s, Memory = (RSS = 2078.964844Mb, VMS = 2086.921875Mb), Step range = [0-17]
2 : Statistics :: Grounding = 0.152545s, Solving = 0.045195s, Total = 0.197740s, Memory = (RSS = 2085.183594Mb, VMS = 2100.191406Mb), Step range = [18-18]
3 : Statistics :: Grounding = 0.156385s, Solving = 0.059020s, Total = 0.215405s, Memory = (RSS = 2086.753906Mb, VMS = 2100.566406Mb), Step range = [19-19]
4 : Statistics :: Grounding = 0.158335s, Solving = 0.084748s, Total = 0.243083s, Memory = (RSS = 2089.125000Mb, VMS = 2101.996094Mb), Step range = [20-20]
5 : Statistics :: Grounding = 0.161569s, Solving = 0.089810s, Total = 0.251378s, Memory = (RSS = 2091.957031Mb, VMS = 2104.027344Mb), Step range = [21-21]
6 : Statistics :: Grounding = 0.164309s, Solving = 0.117534s, Total = 0.281843s, Memory = (RSS = 2093.656250Mb, VMS = 2104.398438Mb), Step range = [22-22]
7 : Statistics :: Grounding = 0.165536s, Solving = 0.212202s, Total = 0.377739s, Memory = (RSS = 2095.203125Mb, VMS = 2104.761719Mb), Step range = [23-23]
8 : Statistics :: Grounding = 0.168640s, Solving = 0.605030s, Total = 0.773670s, Memory = (RSS = 2097.062500Mb, VMS = 2105.136719Mb), Step range = [24-24]
9 : Statistics :: Grounding = 0.173026s, Solving = 0.897419s, Total = 1.070445s, Memory = (RSS = 2098.851562Mb, VMS = 2105.671875Mb), Step range = [25-25]
10 : Statistics :: Grounding = 0.175487s, Solving = 0.399035s, Total = 0.574522s, Memory = (RSS = 2104.058594Mb, VMS = 2126.539062Mb), Step range = [26-26]
11 : Statistics :: Grounding = 0.178471s, Solving = 4.530108s, Total = 4.708579s, Memory = (RSS = 2107.527344Mb, VMS = 2127.835938Mb), Step range = [27-27]
12 : Statistics :: Grounding = 0.182004s, Solving = 0.224388s, Total = 0.406392s, Memory = (RSS = 2110.359375Mb, VMS = 2129.261719Mb), Step range = [28-28]
13 : Statistics :: Grounding = 0.182839s, Solving = 6.291395s, Total = 6.474234s, Memory = (RSS = 2114.480469Mb, VMS = 2130.640625Mb), Step range = [29-29]
14 : Statistics :: Grounding = 0.187328s, Solving = 11.612443s, Total = 11.799771s, Memory = (RSS = 2120.722656Mb, VMS = 2133.902344Mb), Step range = [30-30]
15 : Statistics :: Grounding = 0.191968s, Solving = 13.078706s, Total = 13.270675s, Memory = (RSS = 2127.632812Mb, VMS = 2139.410156Mb), Step range = [31-31]

[14-04-2022_17-53-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 42.623365s due to: Stop condition reached.

[14-04-2022_17-53-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[14-04-2022_17-53-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[14-04-2022_17-53-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-53-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-53-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[14-04-2022_17-53-04] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 2 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-53-04] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 2 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 8, 16: 8, 17: 8, 18: 9, 19: 9, 20: 9, 21: 9, 22: 10, 23: 11, 24: 12, 25: 13, 26: 13, 27: 14, 28: 15, 29: 16, 30: 17, 31: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 14, 8: 17, 9: 21, 10: 22, 11: 23, 12: 24, 13: 26, 14: 27, 15: 28, 16: 29, 17: 31}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-53-04] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 17, Last requested goal index = 17, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[14-04-2022_17-53-04] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.656775s, Solving = 38.966590s, Total = 42.623365s, Memory = (RSS = 2127.632812Mb, VMS = 2139.410156Mb), Step range = [0-31]), Calls = 15
Model :: Total atoms = 33803, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[14-04-2022_17-53-04] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
                 Steps = 31 :: Actions = 31                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 2:
    Current Sub-goals:
        [Index = 2] talos : collect((block,8)) -> on((block,8)) = nothing
        [Index = 2] talos : collect((block,8)) -> transporting(talos,(block,8)) = true
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : collect((block,8)) -> on((block,8)) = nothing
        [Index = 2] talos : collect((block,8)) -> transporting(talos,(block,8)) = true
    Achieved Sub-goals:
        [Index = 2] talos : collect((block,8)) -> on((block,8)) = nothing
        [Index = 2] talos : collect((block,8)) -> transporting(talos,(block,8)) = true
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,8))
Step 4:
    Current Sub-goals:
        [Index = 3] talos : collect((block,6)) -> on((block,6)) = nothing
        [Index = 3] talos : collect((block,6)) -> transporting(talos,(block,6)) = true
    Achieved Sub-goals:
        [Index = 3] talos : collect((block,6)) -> on((block,6)) = nothing
        [Index = 3] talos : collect((block,6)) -> transporting(talos,(block,6)) = true
    Planned actions:
        talos : move(puzzle_room)
Step 5:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 6:
    Current Sub-goals:
        [Index = 5] talos : place_upon((block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 5] talos : place_upon((block,3),puzzle_room_table) -> transporting(talos,(block,3)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 7:
    Current Sub-goals:
        [Index = 5] talos : place_upon((block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 5] talos : place_upon((block,3),puzzle_room_table) -> transporting(talos,(block,3)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
Step 8:
    Current Sub-goals:
        [Index = 5] talos : place_upon((block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 5] talos : place_upon((block,3),puzzle_room_table) -> transporting(talos,(block,3)) = false
    Achieved Sub-goals:
        [Index = 5] talos : place_upon((block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 5] talos : place_upon((block,3),puzzle_room_table) -> transporting(talos,(block,3)) = false
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : place_upon((block,2),(block,3)) -> on((block,2)) = (block,3)
        [Index = 6] talos : place_upon((block,2),(block,3)) -> transporting(talos,(block,2)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,(block,3))
Step 10:
    Current Sub-goals:
        [Index = 6] talos : place_upon((block,2),(block,3)) -> on((block,2)) = (block,3)
        [Index = 6] talos : place_upon((block,2),(block,3)) -> transporting(talos,(block,2)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,2))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : place_upon((block,2),(block,3)) -> on((block,2)) = (block,3)
        [Index = 6] talos : place_upon((block,2),(block,3)) -> transporting(talos,(block,2)) = false
    Achieved Sub-goals:
        [Index = 6] talos : place_upon((block,2),(block,3)) -> on((block,2)) = (block,3)
        [Index = 6] talos : place_upon((block,2),(block,3)) -> transporting(talos,(block,2)) = false
    Planned actions:
        talos : put(manipulator_arm_1,(block,2),(block,3))
Step 12:
    Current Sub-goals:
        [Index = 7] talos : place_upon((block,1),(block,2)) -> on((block,1)) = (block,2)
        [Index = 7] talos : place_upon((block,1),(block,2)) -> transporting(talos,(block,1)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,(block,2))
Step 13:
    Current Sub-goals:
        [Index = 7] talos : place_upon((block,1),(block,2)) -> on((block,1)) = (block,2)
        [Index = 7] talos : place_upon((block,1),(block,2)) -> transporting(talos,(block,1)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,1))
Step 14:
    Current Sub-goals:
        [Index = 7] talos : place_upon((block,1),(block,2)) -> on((block,1)) = (block,2)
        [Index = 7] talos : place_upon((block,1),(block,2)) -> transporting(talos,(block,1)) = false
    Achieved Sub-goals:
        [Index = 7] talos : place_upon((block,1),(block,2)) -> on((block,1)) = (block,2)
        [Index = 7] talos : place_upon((block,1),(block,2)) -> transporting(talos,(block,1)) = false
    Planned actions:
        talos : put(manipulator_arm_1,(block,1),(block,2))
Step 15:
    Current Sub-goals:
        [Index = 8] talos : place_upon((block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
        [Index = 8] talos : place_upon((block,9),puzzle_room_table) -> transporting(talos,(block,9)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,(block,1))
Step 16:
    Current Sub-goals:
        [Index = 8] talos : place_upon((block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
        [Index = 8] talos : place_upon((block,9),puzzle_room_table) -> transporting(talos,(block,9)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,9))
Step 17:
    Current Sub-goals:
        [Index = 8] talos : place_upon((block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
        [Index = 8] talos : place_upon((block,9),puzzle_room_table) -> transporting(talos,(block,9)) = false
    Achieved Sub-goals:
        [Index = 8] talos : place_upon((block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
        [Index = 8] talos : place_upon((block,9),puzzle_room_table) -> transporting(talos,(block,9)) = false
    Planned actions:
        talos : put(manipulator_arm_1,(block,9),puzzle_room_table)
Step 18:
    Current Sub-goals:
        [Index = 9] talos : place_upon((block,8),(block,9)) -> on((block,8)) = (block,9)
        [Index = 9] talos : place_upon((block,8),(block,9)) -> transporting(talos,(block,8)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,(block,9))
Step 19:
    Current Sub-goals:
        [Index = 9] talos : place_upon((block,8),(block,9)) -> on((block,8)) = (block,9)
        [Index = 9] talos : place_upon((block,8),(block,9)) -> transporting(talos,(block,8)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,7))
Step 20:
    Current Sub-goals:
        [Index = 9] talos : place_upon((block,8),(block,9)) -> on((block,8)) = (block,9)
        [Index = 9] talos : place_upon((block,8),(block,9)) -> transporting(talos,(block,8)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : put(manipulator_arm_2,(block,8),(block,9))
Step 21:
    Current Sub-goals:
        [Index = 9] talos : place_upon((block,8),(block,9)) -> on((block,8)) = (block,9)
        [Index = 9] talos : place_upon((block,8),(block,9)) -> transporting(talos,(block,8)) = false
    Achieved Sub-goals:
        [Index = 9] talos : place_upon((block,8),(block,9)) -> on((block,8)) = (block,9)
        [Index = 9] talos : place_upon((block,8),(block,9)) -> transporting(talos,(block,8)) = false
    Planned actions:
        talos : release(manipulator_arm_2,(block,8))
Step 22:
    Current Sub-goals:
        [Index = 10] talos : place_upon((block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
        [Index = 10] talos : place_upon((block,6),puzzle_room_table) -> transporting(talos,(block,6)) = false
    Achieved Sub-goals:
        [Index = 10] talos : place_upon((block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
        [Index = 10] talos : place_upon((block,6),puzzle_room_table) -> transporting(talos,(block,6)) = false
    Planned actions:
        talos : put(manipulator_arm_1,(block,7),(block,8))
Step 23:
    Current Sub-goals:
        [Index = 11] talos : place_upon((block,7),(block,8)) -> on((block,7)) = (block,8)
        [Index = 11] talos : place_upon((block,7),(block,8)) -> transporting(talos,(block,7)) = false
    Achieved Sub-goals:
        [Index = 11] talos : place_upon((block,7),(block,8)) -> on((block,7)) = (block,8)
        [Index = 11] talos : place_upon((block,7),(block,8)) -> transporting(talos,(block,7)) = false
    Planned actions:
        talos : release(manipulator_arm_1,(block,7))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 12] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 25:
    Current Sub-goals:
        [Index = 13] talos : collect((block,4)) -> on((block,4)) = nothing
        [Index = 13] talos : collect((block,4)) -> transporting(talos,(block,4)) = true
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,5))
Step 26:
    Current Sub-goals:
        [Index = 13] talos : collect((block,4)) -> on((block,4)) = nothing
        [Index = 13] talos : collect((block,4)) -> transporting(talos,(block,4)) = true
    Achieved Sub-goals:
        [Index = 13] talos : collect((block,4)) -> on((block,4)) = nothing
        [Index = 13] talos : collect((block,4)) -> transporting(talos,(block,4)) = true
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,4))
Step 27:
    Current Sub-goals:
        [Index = 14] talos : collect((block,5)) -> on((block,5)) = nothing
        [Index = 14] talos : collect((block,5)) -> transporting(talos,(block,5)) = true
    Achieved Sub-goals:
        [Index = 14] talos : collect((block,5)) -> on((block,5)) = nothing
        [Index = 14] talos : collect((block,5)) -> transporting(talos,(block,5)) = true
    Planned actions:
        talos : move(puzzle_room)
Step 28:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : put(manipulator_arm_1,(block,5),(block,6))
Step 29:
    Current Sub-goals:
        [Index = 16] talos : place_upon((block,5),(block,6)) -> on((block,5)) = (block,6)
        [Index = 16] talos : place_upon((block,5),(block,6)) -> transporting(talos,(block,5)) = false
    Achieved Sub-goals:
        [Index = 16] talos : place_upon((block,5),(block,6)) -> on((block,5)) = (block,6)
        [Index = 16] talos : place_upon((block,5),(block,6)) -> transporting(talos,(block,5)) = false
    Planned actions:
        talos : release(manipulator_arm_1,(block,5))
Step 30:
    Current Sub-goals:
        [Index = 17] talos : place_upon((block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 17] talos : place_upon((block,4),(block,5)) -> transporting(talos,(block,4)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : put(manipulator_arm_2,(block,4),(block,5))
Step 31:
    Current Sub-goals:
        [Index = 17] talos : place_upon((block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 17] talos : place_upon((block,4),(block,5)) -> transporting(talos,(block,4)) = false
    Achieved Sub-goals:
        [Index = 17] talos : place_upon((block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 17] talos : place_upon((block,4),(block,5)) -> transporting(talos,(block,4)) = false
    Planned actions:
        talos : release(manipulator_arm_2,(block,4))

[14-04-2022_17-53-04] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[14-04-2022_17-53-04] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[14-04-2022_17-53-04] DEBUG :: ASH Planner Main #1 >> Preparing to invoke division strategy...

[14-04-2022_17-53-04] DEBUG :: ASH Planner Main #1 >> Online method OnlineMethod.GroundFirst chose to invoke the division strategy before a downwards level change:Current increment = 1, Current planning level is complete = True

[14-04-2022_17-53-04] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 31, chosen step range to extract = range(0, 32)

[14-04-2022_17-53-04] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-04] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 3 (com-ref), LE =  31, AC =  31, CF = 1.0, GT =   3.69s, ST =  38.97s, OT = 0.00s, TT =  42.66s, EF = (LE = 1.8, AC = 1.8), ED = (LE = 1.0, AC = 0.4), EB = (LE = 0.6, AC = 0.4)

[14-04-2022_17-53-04] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=3, plan_length=31, start_step=0, blend=Blend(left=0, right=0)

[14-04-2022_17-53-04] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=1, small_group_size=10, large_group_size=11

[14-04-2022_17-53-04] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=10, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1), DivisionPoint(index=20, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[14-04-2022_17-53-04] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 3, Problem Range = [1-3], Size = 31, Sub-goal Stage Range = [1-31]
Division points [total=2] : [(Index = 10, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 20, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[14-04-2022_17-53-04] DEBUG :: ASH Planner Main #1 >> Monolevel problem 1 at level 3 solved.

[14-04-2022_17-53-04] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning problem 1 at level 2:
Total Templated Partial Problems = 3, Problem Range = [1-3], Size = 31, Sub-goal Stage Range = [1-31]
Division points [total=2] : [(Index = 10, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 20, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[14-04-2022_17-53-04] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-10]

[14-04-2022_17-53-04] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 31, chosen step range to extract = range(0, 32)

[14-04-2022_17-53-04] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-04] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[14-04-2022_17-53-04] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-04] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [1-10], problem number = 1, increment number = 1

[14-04-2022_17-53-04] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 10)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1755.0604387000012)
	('length_limit', 300)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[14-04-2022_17-53-04] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 2] partial conformance refinement (sequential) with sgoals range [1-10] : Concurrency disabled : Minimum search length bound enabled with value 9

[14-04-2022_17-53-04] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 10
start_step = 0
is_initial = True
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 9

[14-04-2022_17-53-04] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[14-04-2022_17-53-04] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[14-04-2022_17-53-04] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[14-04-2022_17-53-04] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[14-04-2022_17-53-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[14-04-2022_17-53-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[14-04-2022_17-53-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-53-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-53-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-53-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-53-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[14-04-2022_17-53-04] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-53-04] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[14-04-2022_17-53-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,8))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})

[14-04-2022_17-53-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-53-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 257 rules into program part ash_initial_state:

holds(2, complete_tower(blue,puzzle_room_table), false, 0).
holds(2, complete_tower(red,puzzle_room_table), false, 0).
holds(2, complete_tower(yellow,puzzle_room_table), false, 0).
holds(2, configuration(manipulator_arm_1), retracted, 0).
holds(2, configuration(manipulator_arm_2), retracted, 0).
holds(2, configuration(puzzle_room_door), closed, 0).
holds(2, configuration(starting_room_door), closed, 0).
holds(2, configuration(store_room_door), closed, 0).
holds(2, grasping(manipulator_arm_1), nothing, 0).
holds(2, grasping(manipulator_arm_2), nothing, 0).
holds(2, in((block,1)), puzzle_room, 0).
holds(2, in((block,2)), puzzle_room, 0).
holds(2, in((block,3)), puzzle_room, 0).
holds(2, in((block,4)), store_room, 0).
holds(2, in((block,5)), store_room, 0).
holds(2, in((block,6)), store_room, 0).
holds(2, in((block,7)), puzzle_room, 0).
holds(2, in((block,8)), store_room, 0).
holds(2, in((block,9)), puzzle_room, 0).
holds(2, in(manipulator_arm_1), starting_room, 0).
holds(2, in(manipulator_arm_2), starting_room, 0).
holds(2, in(puzzle_room_table), puzzle_room, 0).
holds(2, in(talos), starting_room, 0).
holds(2, in_tower((block,1),(block,1)), true, 0).
holds(2, in_tower((block,1),(block,2)), false, 0).
holds(2, in_tower((block,1),(block,3)), true, 0).
holds(2, in_tower((block,1),(block,4)), false, 0).
holds(2, in_tower((block,1),(block,5)), false, 0).
holds(2, in_tower((block,1),(block,6)), false, 0).
holds(2, in_tower((block,1),(block,7)), false, 0).
holds(2, in_tower((block,1),(block,8)), false, 0).
holds(2, in_tower((block,1),(block,9)), false, 0).
holds(2, in_tower((block,2),(block,1)), false, 0).
holds(2, in_tower((block,2),(block,2)), true, 0).
holds(2, in_tower((block,2),(block,3)), false, 0).
holds(2, in_tower((block,2),(block,4)), false, 0).
holds(2, in_tower((block,2),(block,5)), false, 0).
holds(2, in_tower((block,2),(block,6)), false, 0).
holds(2, in_tower((block,2),(block,7)), false, 0).
holds(2, in_tower((block,2),(block,8)), false, 0).
holds(2, in_tower((block,2),(block,9)), false, 0).
holds(2, in_tower((block,3),(block,1)), false, 0).
holds(2, in_tower((block,3),(block,2)), false, 0).
holds(2, in_tower((block,3),(block,3)), false, 0).
holds(2, in_tower((block,3),(block,4)), false, 0).
holds(2, in_tower((block,3),(block,5)), false, 0).
holds(2, in_tower((block,3),(block,6)), false, 0).
holds(2, in_tower((block,3),(block,7)), false, 0).
holds(2, in_tower((block,3),(block,8)), false, 0).
holds(2, in_tower((block,3),(block,9)), false, 0).
holds(2, in_tower((block,4),(block,1)), false, 0).
holds(2, in_tower((block,4),(block,2)), false, 0).
holds(2, in_tower((block,4),(block,3)), false, 0).
holds(2, in_tower((block,4),(block,4)), false, 0).
holds(2, in_tower((block,4),(block,5)), false, 0).
holds(2, in_tower((block,4),(block,6)), false, 0).
holds(2, in_tower((block,4),(block,7)), false, 0).
holds(2, in_tower((block,4),(block,8)), false, 0).
holds(2, in_tower((block,4),(block,9)), false, 0).
holds(2, in_tower((block,5),(block,1)), false, 0).
holds(2, in_tower((block,5),(block,2)), false, 0).
holds(2, in_tower((block,5),(block,3)), false, 0).
holds(2, in_tower((block,5),(block,4)), false, 0).
holds(2, in_tower((block,5),(block,5)), false, 0).
holds(2, in_tower((block,5),(block,6)), false, 0).
holds(2, in_tower((block,5),(block,7)), false, 0).
holds(2, in_tower((block,5),(block,8)), false, 0).
holds(2, in_tower((block,5),(block,9)), false, 0).
holds(2, in_tower((block,6),(block,1)), false, 0).
holds(2, in_tower((block,6),(block,2)), false, 0).
holds(2, in_tower((block,6),(block,3)), false, 0).
holds(2, in_tower((block,6),(block,4)), false, 0).
holds(2, in_tower((block,6),(block,5)), false, 0).
holds(2, in_tower((block,6),(block,6)), false, 0).
holds(2, in_tower((block,6),(block,7)), false, 0).
holds(2, in_tower((block,6),(block,8)), false, 0).
holds(2, in_tower((block,6),(block,9)), false, 0).
holds(2, in_tower((block,7),(block,1)), false, 0).
holds(2, in_tower((block,7),(block,2)), false, 0).
holds(2, in_tower((block,7),(block,3)), false, 0).
holds(2, in_tower((block,7),(block,4)), false, 0).
holds(2, in_tower((block,7),(block,5)), false, 0).
holds(2, in_tower((block,7),(block,6)), false, 0).
holds(2, in_tower((block,7),(block,7)), true, 0).
holds(2, in_tower((block,7),(block,8)), false, 0).
holds(2, in_tower((block,7),(block,9)), true, 0).
holds(2, in_tower((block,8),(block,1)), false, 0).
holds(2, in_tower((block,8),(block,2)), false, 0).
holds(2, in_tower((block,8),(block,3)), false, 0).
holds(2, in_tower((block,8),(block,4)), false, 0).
holds(2, in_tower((block,8),(block,5)), false, 0).
holds(2, in_tower((block,8),(block,6)), false, 0).
holds(2, in_tower((block,8),(block,7)), false, 0).
holds(2, in_tower((block,8),(block,8)), false, 0).
holds(2, in_tower((block,8),(block,9)), false, 0).
holds(2, in_tower((block,9),(block,1)), false, 0).
holds(2, in_tower((block,9),(block,2)), false, 0).
holds(2, in_tower((block,9),(block,3)), false, 0).
holds(2, in_tower((block,9),(block,4)), false, 0).
holds(2, in_tower((block,9),(block,5)), false, 0).
holds(2, in_tower((block,9),(block,6)), false, 0).
holds(2, in_tower((block,9),(block,7)), false, 0).
holds(2, in_tower((block,9),(block,8)), false, 0).
holds(2, in_tower((block,9),(block,9)), false, 0).
holds(2, on((block,1)), puzzle_room_table, 0).
holds(2, on((block,2)), puzzle_room_table, 0).
holds(2, on((block,3)), (block,1), 0).
holds(2, on((block,4)), nothing, 0).
holds(2, on((block,5)), nothing, 0).
holds(2, on((block,6)), nothing, 0).
holds(2, on((block,7)), puzzle_room_table, 0).
holds(2, on((block,8)), nothing, 0).
holds(2, on((block,9)), (block,7), 0).
holds(2, tower_base((block,1),puzzle_room_table), true, 0).
holds(2, tower_base((block,2),puzzle_room_table), true, 0).
holds(2, tower_base((block,3),puzzle_room_table), false, 0).
holds(2, tower_base((block,4),puzzle_room_table), false, 0).
holds(2, tower_base((block,5),puzzle_room_table), false, 0).
holds(2, tower_base((block,6),puzzle_room_table), false, 0).
holds(2, tower_base((block,7),puzzle_room_table), true, 0).
holds(2, tower_base((block,8),puzzle_room_table), false, 0).
holds(2, tower_base((block,9),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,7),puzzle_room_table), true, 0).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 0).
holds(3, complete_tower(blue,puzzle_room_table), false, 0).
holds(3, complete_tower(red,puzzle_room_table), false, 0).
holds(3, complete_tower(yellow,puzzle_room_table), false, 0).
holds(3, grasping(manipulator_arm_1), nothing, 0).
holds(3, grasping(manipulator_arm_2), nothing, 0).
holds(3, in((block,1)), puzzle_room, 0).
holds(3, in((block,2)), puzzle_room, 0).
holds(3, in((block,3)), puzzle_room, 0).
holds(3, in((block,4)), store_room, 0).
holds(3, in((block,5)), store_room, 0).
holds(3, in((block,6)), store_room, 0).
holds(3, in((block,7)), puzzle_room, 0).
holds(3, in((block,8)), store_room, 0).
holds(3, in((block,9)), puzzle_room, 0).
holds(3, in(manipulator_arm_1), starting_room, 0).
holds(3, in(manipulator_arm_2), starting_room, 0).
holds(3, in(puzzle_room_table), puzzle_room, 0).
holds(3, in(talos), starting_room, 0).
holds(3, in_tower((block,1),(block,1)), true, 0).
holds(3, in_tower((block,1),(block,2)), false, 0).
holds(3, in_tower((block,1),(block,3)), true, 0).
holds(3, in_tower((block,1),(block,4)), false, 0).
holds(3, in_tower((block,1),(block,5)), false, 0).
holds(3, in_tower((block,1),(block,6)), false, 0).
holds(3, in_tower((block,1),(block,7)), false, 0).
holds(3, in_tower((block,1),(block,8)), false, 0).
holds(3, in_tower((block,1),(block,9)), false, 0).
holds(3, in_tower((block,2),(block,1)), false, 0).
holds(3, in_tower((block,2),(block,2)), true, 0).
holds(3, in_tower((block,2),(block,3)), false, 0).
holds(3, in_tower((block,2),(block,4)), false, 0).
holds(3, in_tower((block,2),(block,5)), false, 0).
holds(3, in_tower((block,2),(block,6)), false, 0).
holds(3, in_tower((block,2),(block,7)), false, 0).
holds(3, in_tower((block,2),(block,8)), false, 0).
holds(3, in_tower((block,2),(block,9)), false, 0).
holds(3, in_tower((block,3),(block,1)), false, 0).
holds(3, in_tower((block,3),(block,2)), false, 0).
holds(3, in_tower((block,3),(block,3)), false, 0).
holds(3, in_tower((block,3),(block,4)), false, 0).
holds(3, in_tower((block,3),(block,5)), false, 0).
holds(3, in_tower((block,3),(block,6)), false, 0).
holds(3, in_tower((block,3),(block,7)), false, 0).
holds(3, in_tower((block,3),(block,8)), false, 0).
holds(3, in_tower((block,3),(block,9)), false, 0).
holds(3, in_tower((block,4),(block,1)), false, 0).
holds(3, in_tower((block,4),(block,2)), false, 0).
holds(3, in_tower((block,4),(block,3)), false, 0).
holds(3, in_tower((block,4),(block,4)), false, 0).
holds(3, in_tower((block,4),(block,5)), false, 0).
holds(3, in_tower((block,4),(block,6)), false, 0).
holds(3, in_tower((block,4),(block,7)), false, 0).
holds(3, in_tower((block,4),(block,8)), false, 0).
holds(3, in_tower((block,4),(block,9)), false, 0).
holds(3, in_tower((block,5),(block,1)), false, 0).
holds(3, in_tower((block,5),(block,2)), false, 0).
holds(3, in_tower((block,5),(block,3)), false, 0).
holds(3, in_tower((block,5),(block,4)), false, 0).
holds(3, in_tower((block,5),(block,5)), false, 0).
holds(3, in_tower((block,5),(block,6)), false, 0).
holds(3, in_tower((block,5),(block,7)), false, 0).
holds(3, in_tower((block,5),(block,8)), false, 0).
holds(3, in_tower((block,5),(block,9)), false, 0).
holds(3, in_tower((block,6),(block,1)), false, 0).
holds(3, in_tower((block,6),(block,2)), false, 0).
holds(3, in_tower((block,6),(block,3)), false, 0).
holds(3, in_tower((block,6),(block,4)), false, 0).
holds(3, in_tower((block,6),(block,5)), false, 0).
holds(3, in_tower((block,6),(block,6)), false, 0).
holds(3, in_tower((block,6),(block,7)), false, 0).
holds(3, in_tower((block,6),(block,8)), false, 0).
holds(3, in_tower((block,6),(block,9)), false, 0).
holds(3, in_tower((block,7),(block,1)), false, 0).
holds(3, in_tower((block,7),(block,2)), false, 0).
holds(3, in_tower((block,7),(block,3)), false, 0).
holds(3, in_tower((block,7),(block,4)), false, 0).
holds(3, in_tower((block,7),(block,5)), false, 0).
holds(3, in_tower((block,7),(block,6)), false, 0).
holds(3, in_tower((block,7),(block,7)), true, 0).
holds(3, in_tower((block,7),(block,8)), false, 0).
holds(3, in_tower((block,7),(block,9)), true, 0).
holds(3, in_tower((block,8),(block,1)), false, 0).
holds(3, in_tower((block,8),(block,2)), false, 0).
holds(3, in_tower((block,8),(block,3)), false, 0).
holds(3, in_tower((block,8),(block,4)), false, 0).
holds(3, in_tower((block,8),(block,5)), false, 0).
holds(3, in_tower((block,8),(block,6)), false, 0).
holds(3, in_tower((block,8),(block,7)), false, 0).
holds(3, in_tower((block,8),(block,8)), false, 0).
holds(3, in_tower((block,8),(block,9)), false, 0).
holds(3, in_tower((block,9),(block,1)), false, 0).
holds(3, in_tower((block,9),(block,2)), false, 0).
holds(3, in_tower((block,9),(block,3)), false, 0).
holds(3, in_tower((block,9),(block,4)), false, 0).
holds(3, in_tower((block,9),(block,5)), false, 0).
holds(3, in_tower((block,9),(block,6)), false, 0).
holds(3, in_tower((block,9),(block,7)), false, 0).
holds(3, in_tower((block,9),(block,8)), false, 0).
holds(3, in_tower((block,9),(block,9)), false, 0).
holds(3, on((block,1)), puzzle_room_table, 0).
holds(3, on((block,2)), puzzle_room_table, 0).
holds(3, on((block,3)), (block,1), 0).
holds(3, on((block,4)), nothing, 0).
holds(3, on((block,5)), nothing, 0).
holds(3, on((block,6)), nothing, 0).
holds(3, on((block,7)), puzzle_room_table, 0).
holds(3, on((block,8)), nothing, 0).
holds(3, on((block,9)), (block,7), 0).
holds(3, tower_base((block,1),puzzle_room_table), true, 0).
holds(3, tower_base((block,2),puzzle_room_table), true, 0).
holds(3, tower_base((block,3),puzzle_room_table), false, 0).
holds(3, tower_base((block,4),puzzle_room_table), false, 0).
holds(3, tower_base((block,5),puzzle_room_table), false, 0).
holds(3, tower_base((block,6),puzzle_room_table), false, 0).
holds(3, tower_base((block,7),puzzle_room_table), true, 0).
holds(3, tower_base((block,8),puzzle_room_table), false, 0).
holds(3, tower_base((block,9),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,7),puzzle_room_table), true, 0).
holds(3, unordered_tower((block,8),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,9),puzzle_room_table), false, 0).

[14-04-2022_17-53-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[14-04-2022_17-53-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-53-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 588 rules into program part ash_goal_state:

final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(3, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,1),(block,7)), false, true).
final_goal(3, in_tower((block,1),(block,7)), true, false).
final_goal(3, in_tower((block,1),(block,8)), false, true).
final_goal(3, in_tower((block,1),(block,8)), true, false).
final_goal(3, in_tower((block,1),(block,9)), false, true).
final_goal(3, in_tower((block,1),(block,9)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,7)), false, true).
final_goal(3, in_tower((block,2),(block,7)), true, false).
final_goal(3, in_tower((block,2),(block,8)), false, true).
final_goal(3, in_tower((block,2),(block,8)), true, false).
final_goal(3, in_tower((block,2),(block,9)), false, true).
final_goal(3, in_tower((block,2),(block,9)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,7)), false, true).
final_goal(3, in_tower((block,3),(block,7)), true, false).
final_goal(3, in_tower((block,3),(block,8)), false, true).
final_goal(3, in_tower((block,3),(block,8)), true, false).
final_goal(3, in_tower((block,3),(block,9)), false, true).
final_goal(3, in_tower((block,3),(block,9)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,7)), false, true).
final_goal(3, in_tower((block,4),(block,7)), true, false).
final_goal(3, in_tower((block,4),(block,8)), false, true).
final_goal(3, in_tower((block,4),(block,8)), true, false).
final_goal(3, in_tower((block,4),(block,9)), false, true).
final_goal(3, in_tower((block,4),(block,9)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,7)), false, true).
final_goal(3, in_tower((block,5),(block,7)), true, false).
final_goal(3, in_tower((block,5),(block,8)), false, true).
final_goal(3, in_tower((block,5),(block,8)), true, false).
final_goal(3, in_tower((block,5),(block,9)), false, true).
final_goal(3, in_tower((block,5),(block,9)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, in_tower((block,6),(block,7)), false, true).
final_goal(3, in_tower((block,6),(block,7)), true, false).
final_goal(3, in_tower((block,6),(block,8)), false, true).
final_goal(3, in_tower((block,6),(block,8)), true, false).
final_goal(3, in_tower((block,6),(block,9)), false, true).
final_goal(3, in_tower((block,6),(block,9)), true, false).
final_goal(3, in_tower((block,7),(block,1)), false, true).
final_goal(3, in_tower((block,7),(block,1)), true, false).
final_goal(3, in_tower((block,7),(block,2)), false, true).
final_goal(3, in_tower((block,7),(block,2)), true, false).
final_goal(3, in_tower((block,7),(block,3)), false, true).
final_goal(3, in_tower((block,7),(block,3)), true, false).
final_goal(3, in_tower((block,7),(block,4)), false, true).
final_goal(3, in_tower((block,7),(block,4)), true, false).
final_goal(3, in_tower((block,7),(block,5)), false, true).
final_goal(3, in_tower((block,7),(block,5)), true, false).
final_goal(3, in_tower((block,7),(block,6)), false, true).
final_goal(3, in_tower((block,7),(block,6)), true, false).
final_goal(3, in_tower((block,7),(block,7)), false, true).
final_goal(3, in_tower((block,7),(block,7)), true, false).
final_goal(3, in_tower((block,7),(block,8)), false, true).
final_goal(3, in_tower((block,7),(block,8)), true, false).
final_goal(3, in_tower((block,7),(block,9)), false, true).
final_goal(3, in_tower((block,7),(block,9)), true, false).
final_goal(3, in_tower((block,8),(block,1)), false, true).
final_goal(3, in_tower((block,8),(block,1)), true, false).
final_goal(3, in_tower((block,8),(block,2)), false, true).
final_goal(3, in_tower((block,8),(block,2)), true, false).
final_goal(3, in_tower((block,8),(block,3)), false, true).
final_goal(3, in_tower((block,8),(block,3)), true, false).
final_goal(3, in_tower((block,8),(block,4)), false, true).
final_goal(3, in_tower((block,8),(block,4)), true, false).
final_goal(3, in_tower((block,8),(block,5)), false, true).
final_goal(3, in_tower((block,8),(block,5)), true, false).
final_goal(3, in_tower((block,8),(block,6)), false, true).
final_goal(3, in_tower((block,8),(block,6)), true, false).
final_goal(3, in_tower((block,8),(block,7)), false, true).
final_goal(3, in_tower((block,8),(block,7)), true, false).
final_goal(3, in_tower((block,8),(block,8)), false, true).
final_goal(3, in_tower((block,8),(block,8)), true, false).
final_goal(3, in_tower((block,8),(block,9)), false, true).
final_goal(3, in_tower((block,8),(block,9)), true, false).
final_goal(3, in_tower((block,9),(block,1)), false, true).
final_goal(3, in_tower((block,9),(block,1)), true, false).
final_goal(3, in_tower((block,9),(block,2)), false, true).
final_goal(3, in_tower((block,9),(block,2)), true, false).
final_goal(3, in_tower((block,9),(block,3)), false, true).
final_goal(3, in_tower((block,9),(block,3)), true, false).
final_goal(3, in_tower((block,9),(block,4)), false, true).
final_goal(3, in_tower((block,9),(block,4)), true, false).
final_goal(3, in_tower((block,9),(block,5)), false, true).
final_goal(3, in_tower((block,9),(block,5)), true, false).
final_goal(3, in_tower((block,9),(block,6)), false, true).
final_goal(3, in_tower((block,9),(block,6)), true, false).
final_goal(3, in_tower((block,9),(block,7)), false, false).
final_goal(3, in_tower((block,9),(block,7)), true, true).
final_goal(3, in_tower((block,9),(block,8)), false, false).
final_goal(3, in_tower((block,9),(block,8)), true, true).
final_goal(3, in_tower((block,9),(block,9)), false, false).
final_goal(3, in_tower((block,9),(block,9)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), (block,7), false).
final_goal(3, on((block,1)), (block,8), false).
final_goal(3, on((block,1)), (block,9), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), (block,7), false).
final_goal(3, on((block,2)), (block,8), false).
final_goal(3, on((block,2)), (block,9), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), (block,7), false).
final_goal(3, on((block,3)), (block,8), false).
final_goal(3, on((block,3)), (block,9), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), (block,7), false).
final_goal(3, on((block,4)), (block,8), false).
final_goal(3, on((block,4)), (block,9), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), (block,7), false).
final_goal(3, on((block,5)), (block,8), false).
final_goal(3, on((block,5)), (block,9), false).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), (block,7), false).
final_goal(3, on((block,6)), (block,8), false).
final_goal(3, on((block,6)), (block,9), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, on((block,7)), (block,1), false).
final_goal(3, on((block,7)), (block,2), false).
final_goal(3, on((block,7)), (block,3), false).
final_goal(3, on((block,7)), (block,4), false).
final_goal(3, on((block,7)), (block,5), false).
final_goal(3, on((block,7)), (block,6), false).
final_goal(3, on((block,7)), (block,8), true).
final_goal(3, on((block,7)), (block,9), false).
final_goal(3, on((block,7)), nothing, false).
final_goal(3, on((block,7)), puzzle_room_table, false).
final_goal(3, on((block,8)), (block,1), false).
final_goal(3, on((block,8)), (block,2), false).
final_goal(3, on((block,8)), (block,3), false).
final_goal(3, on((block,8)), (block,4), false).
final_goal(3, on((block,8)), (block,5), false).
final_goal(3, on((block,8)), (block,6), false).
final_goal(3, on((block,8)), (block,7), false).
final_goal(3, on((block,8)), (block,9), true).
final_goal(3, on((block,8)), nothing, false).
final_goal(3, on((block,8)), puzzle_room_table, false).
final_goal(3, on((block,9)), (block,1), false).
final_goal(3, on((block,9)), (block,2), false).
final_goal(3, on((block,9)), (block,3), false).
final_goal(3, on((block,9)), (block,4), false).
final_goal(3, on((block,9)), (block,5), false).
final_goal(3, on((block,9)), (block,6), false).
final_goal(3, on((block,9)), (block,7), false).
final_goal(3, on((block,9)), (block,8), false).
final_goal(3, on((block,9)), nothing, false).
final_goal(3, on((block,9)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, tower_base((block,7),puzzle_room_table), false, true).
final_goal(3, tower_base((block,7),puzzle_room_table), true, false).
final_goal(3, tower_base((block,8),puzzle_room_table), false, true).
final_goal(3, tower_base((block,8),puzzle_room_table), true, false).
final_goal(3, tower_base((block,9),puzzle_room_table), false, false).
final_goal(3, tower_base((block,9),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,9),puzzle_room_table), true, false).

[14-04-2022_17-53-04] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=9']

[14-04-2022_17-53-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 1})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'I': 2})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,8))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,8)', 'I': 3})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 4})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,6),puzzle_room_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'I': 5})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 6})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'I': 7})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 8})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 9})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'I': 10})

[14-04-2022_17-53-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-53-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 10 rules into program part base:

sub_goal(3, talos, move(store_room), in(talos), store_room, 1).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), (block,6), 2).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,8)), grasping(manipulator_arm_2), (block,8), 3).
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 4).
sub_goal(3, talos, put(manipulator_arm_1,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 5).
sub_goal(3, talos, release(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), nothing, 6).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 7).
sub_goal(3, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 8).
sub_goal(3, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 9).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), (block,2), 10).

[14-04-2022_17-53-04] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-53-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[14-04-2022_17-53-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=9']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A2866FD5E0>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=10, step_end_min=10, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1755.0604387000012, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 10, 'sequential', 'false'), range_=None)]

[14-04-2022_17-53-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-53-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-53-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-53-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1245 rules

[14-04-2022_17-53-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006605900000067777s

[14-04-2022_17-53-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[14-04-2022_17-53-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[14-04-2022_17-53-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.034564s.

[14-04-2022_17-53-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006496s with result Satisfiable.

[14-04-2022_17-53-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[14-04-2022_17-53-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A287349D60>

[14-04-2022_17-53-04] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 2)
	('start_step', 0)
	('last_sgoals', 10)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A287349D60>)

[14-04-2022_17-53-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, false). %* None *%
#program optimisation_module(#inc, 0, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, 10, sequential, false). %* None *%

[14-04-2022_17-53-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      9
Incrementor step ends | Minimum  =     10 : Maximum =    300

[14-04-2022_17-53-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('conformance_module', [Number(0), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('conformance_module', [Number(1), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('conformance_module', [Number(2), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('conformance_module', [Number(3), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('conformance_module', [Number(4), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('conformance_module', [Number(5), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('conformance_module', [Number(6), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('conformance_module', [Number(7), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('conformance_module', [Number(8), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('conformance_module', [Number(9), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.795550s.

[14-04-2022_17-53-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.381366s with result Satisfiable.

[14-04-2022_17-53-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.1769152000006216, Incremental time limit = None
Running cumulative time = 1.1769152000006216, Cumulative time limit = 1755.0604387000012
Used memory = (RSS = 2075.277344Mb, VMS = 2080.312500Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.795550s, Solving = 0.381366s, Total = 1.176915s, Memory = (RSS = 2075.277344Mb, VMS = 2080.312500Mb), Step range = [0-9]), Calls = 1
Final Model :: Total atoms = 11788, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[14-04-2022_17-53-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =     10 : Maximum =    300

[14-04-2022_17-53-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('conformance_module', [Number(10), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.143968s.

[14-04-2022_17-53-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.027486s with result Unsatisfiable.

[14-04-2022_17-53-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1714537999996537, Incremental time limit = None
Running cumulative time = 1.3483690000002753, Cumulative time limit = 1755.0604387000012
Used memory = (RSS = 2076.808594Mb, VMS = 2083.156250Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =     10 : Maximum =    300

[14-04-2022_17-53-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('conformance_module', [Number(11), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.139916s.

[14-04-2022_17-53-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.027281s with result Unsatisfiable.

[14-04-2022_17-53-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.16719759999978123, Incremental time limit = None
Running cumulative time = 1.5155666000000565, Cumulative time limit = 1755.0604387000012
Used memory = (RSS = 2078.234375Mb, VMS = 2083.582031Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =     10 : Maximum =    300

[14-04-2022_17-53-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('conformance_module', [Number(12), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.143325s.

[14-04-2022_17-53-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.027803s with result Unsatisfiable.

[14-04-2022_17-53-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1711273999999321, Incremental time limit = None
Running cumulative time = 1.6866939999999886, Cumulative time limit = 1755.0604387000012
Used memory = (RSS = 2079.785156Mb, VMS = 2084.015625Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =     10 : Maximum =    300

[14-04-2022_17-53-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('conformance_module', [Number(13), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.148155s.

[14-04-2022_17-53-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.029398s with result Unsatisfiable.

[14-04-2022_17-53-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1775528000007398, Incremental time limit = None
Running cumulative time = 1.8642468000007284, Cumulative time limit = 1755.0604387000012
Used memory = (RSS = 2081.335938Mb, VMS = 2084.441406Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =     10 : Maximum =    300

[14-04-2022_17-53-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('conformance_module', [Number(14), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.149901s.

[14-04-2022_17-53-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.035075s with result Unsatisfiable.

[14-04-2022_17-53-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1849763999989591, Incremental time limit = None
Running cumulative time = 2.0492231999996875, Cumulative time limit = 1755.0604387000012
Used memory = (RSS = 2088.097656Mb, VMS = 2099.398438Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =     10 : Maximum =    300

[14-04-2022_17-53-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('conformance_module', [Number(15), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.153180s.

[14-04-2022_17-53-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.033748s with result Unsatisfiable.

[14-04-2022_17-53-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.18692749999991065, Incremental time limit = None
Running cumulative time = 2.236150699999598, Cumulative time limit = 1755.0604387000012
Used memory = (RSS = 2089.964844Mb, VMS = 2099.828125Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =     10 : Maximum =    300

[14-04-2022_17-53-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.155417s.

[14-04-2022_17-53-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.041773s with result Unsatisfiable.

[14-04-2022_17-53-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1971906000007948, Incremental time limit = None
Running cumulative time = 2.433341300000393, Cumulative time limit = 1755.0604387000012
Used memory = (RSS = 2091.890625Mb, VMS = 2100.257812Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =     10 : Maximum =    300

[14-04-2022_17-53-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.160180s.

[14-04-2022_17-53-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.046383s with result Unsatisfiable.

[14-04-2022_17-53-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.20656320000034611, Incremental time limit = None
Running cumulative time = 2.639904500000739, Cumulative time limit = 1755.0604387000012
Used memory = (RSS = 2093.757812Mb, VMS = 2100.683594Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =     10 : Maximum =    300

[14-04-2022_17-53-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('conformance_module', [Number(18), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.162030s.

[14-04-2022_17-53-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.050998s with result Unsatisfiable.

[14-04-2022_17-53-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.21302829999967798, Incremental time limit = None
Running cumulative time = 2.852932800000417, Cumulative time limit = 1755.0604387000012
Used memory = (RSS = 2095.601562Mb, VMS = 2101.113281Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =     10 : Maximum =    300

[14-04-2022_17-53-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('state_module', [Number(19), Number(0)]), ('plan_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('conformance_module', [Number(19), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.162298s.

[14-04-2022_17-53-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.062212s with result Unsatisfiable.

[14-04-2022_17-53-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.22451019999971322, Incremental time limit = None
Running cumulative time = 3.0774430000001303, Cumulative time limit = 1755.0604387000012
Used memory = (RSS = 2097.550781Mb, VMS = 2101.542969Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =     10 : Maximum =    300

[14-04-2022_17-53-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('state_module', [Number(20), Number(0)]), ('plan_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.166493s.

[14-04-2022_17-53-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.083841s with result Unsatisfiable.

[14-04-2022_17-53-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2503345999994053, Incremental time limit = None
Running cumulative time = 3.3277775999995356, Cumulative time limit = 1755.0604387000012
Used memory = (RSS = 2099.890625Mb, VMS = 2103.031250Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     20 : Current =     21
Incrementor step ends | Minimum  =     10 : Maximum =    300

[14-04-2022_17-53-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('state_module', [Number(21), Number(0)]), ('plan_module', [Number(21), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.170187s.

[14-04-2022_17-53-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.095155s with result Unsatisfiable.

[14-04-2022_17-53-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.26534150000043155, Incremental time limit = None
Running cumulative time = 3.593119099999967, Cumulative time limit = 1755.0604387000012
Used memory = (RSS = 2103.152344Mb, VMS = 2119.371094Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     21 : Current =     22
Incrementor step ends | Minimum  =     10 : Maximum =    300

[14-04-2022_17-53-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(22)]), ('state_module', [Number(22), Number(0)]), ('plan_module', [Number(22), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.172014s.

[14-04-2022_17-53-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.115389s with result Unsatisfiable.

[14-04-2022_17-53-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.28740319999997155, Incremental time limit = None
Running cumulative time = 3.8805222999999387, Cumulative time limit = 1755.0604387000012
Used memory = (RSS = 2105.105469Mb, VMS = 2119.796875Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     22 : Current =     23
Incrementor step ends | Minimum  =     10 : Maximum =    300

[14-04-2022_17-53-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(23)]), ('state_module', [Number(23), Number(0)]), ('plan_module', [Number(23), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('conformance_module', [Number(23), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.174214s.

[14-04-2022_17-53-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.148888s with result Unsatisfiable.

[14-04-2022_17-53-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.32310149999921123, Incremental time limit = None
Running cumulative time = 4.20362379999915, Cumulative time limit = 1755.0604387000012
Used memory = (RSS = 2108.585938Mb, VMS = 2122.320312Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     23 : Current =     24
Incrementor step ends | Minimum  =     10 : Maximum =    300

[14-04-2022_17-53-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(24)]), ('state_module', [Number(24), Number(0)]), ('plan_module', [Number(24), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.177921s.

[14-04-2022_17-53-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.172384s with result Unsatisfiable.

[14-04-2022_17-53-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3503049999999348, Incremental time limit = None
Running cumulative time = 4.553928799999085, Cumulative time limit = 1755.0604387000012
Used memory = (RSS = 2110.640625Mb, VMS = 2122.742188Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     24 : Current =     25
Incrementor step ends | Minimum  =     10 : Maximum =    300

[14-04-2022_17-53-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(25)]), ('state_module', [Number(25), Number(0)]), ('plan_module', [Number(25), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.180719s.

[14-04-2022_17-53-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.277393s with result Satisfiable.

[14-04-2022_17-53-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.45811130000038247, Incremental time limit = None
Running cumulative time = 5.012040099999467, Cumulative time limit = 1755.0604387000012
Used memory = (RSS = 2115.644531Mb, VMS = 2126.421875Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.355467s, Solving = 1.656573s, Total = 5.012040s, Memory = (RSS = 2115.644531Mb, VMS = 2126.421875Mb), Step range = [0-25]), Calls = 17
Final Model :: Total atoms = 22171, Cost = (-2,), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[14-04-2022_17-53-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.795550s, Solving = 0.381366s, Total = 1.176915s, Memory = (RSS = 2075.277344Mb, VMS = 2080.312500Mb), Step range = [0-9]
2 : Statistics :: Grounding = 0.143968s, Solving = 0.027486s, Total = 0.171454s, Memory = (RSS = 2076.808594Mb, VMS = 2083.156250Mb), Step range = [10-10]
3 : Statistics :: Grounding = 0.139916s, Solving = 0.027281s, Total = 0.167198s, Memory = (RSS = 2078.234375Mb, VMS = 2083.582031Mb), Step range = [11-11]
4 : Statistics :: Grounding = 0.143325s, Solving = 0.027803s, Total = 0.171127s, Memory = (RSS = 2079.785156Mb, VMS = 2084.015625Mb), Step range = [12-12]
5 : Statistics :: Grounding = 0.148155s, Solving = 0.029398s, Total = 0.177553s, Memory = (RSS = 2081.335938Mb, VMS = 2084.441406Mb), Step range = [13-13]
6 : Statistics :: Grounding = 0.149901s, Solving = 0.035075s, Total = 0.184976s, Memory = (RSS = 2088.097656Mb, VMS = 2099.398438Mb), Step range = [14-14]
7 : Statistics :: Grounding = 0.153180s, Solving = 0.033748s, Total = 0.186927s, Memory = (RSS = 2089.964844Mb, VMS = 2099.828125Mb), Step range = [15-15]
8 : Statistics :: Grounding = 0.155417s, Solving = 0.041773s, Total = 0.197191s, Memory = (RSS = 2091.890625Mb, VMS = 2100.257812Mb), Step range = [16-16]
9 : Statistics :: Grounding = 0.160180s, Solving = 0.046383s, Total = 0.206563s, Memory = (RSS = 2093.757812Mb, VMS = 2100.683594Mb), Step range = [17-17]
10 : Statistics :: Grounding = 0.162030s, Solving = 0.050998s, Total = 0.213028s, Memory = (RSS = 2095.601562Mb, VMS = 2101.113281Mb), Step range = [18-18]
11 : Statistics :: Grounding = 0.162298s, Solving = 0.062212s, Total = 0.224510s, Memory = (RSS = 2097.550781Mb, VMS = 2101.542969Mb), Step range = [19-19]
12 : Statistics :: Grounding = 0.166493s, Solving = 0.083841s, Total = 0.250335s, Memory = (RSS = 2099.890625Mb, VMS = 2103.031250Mb), Step range = [20-20]
13 : Statistics :: Grounding = 0.170187s, Solving = 0.095155s, Total = 0.265342s, Memory = (RSS = 2103.152344Mb, VMS = 2119.371094Mb), Step range = [21-21]
14 : Statistics :: Grounding = 0.172014s, Solving = 0.115389s, Total = 0.287403s, Memory = (RSS = 2105.105469Mb, VMS = 2119.796875Mb), Step range = [22-22]
15 : Statistics :: Grounding = 0.174214s, Solving = 0.148888s, Total = 0.323101s, Memory = (RSS = 2108.585938Mb, VMS = 2122.320312Mb), Step range = [23-23]
16 : Statistics :: Grounding = 0.177921s, Solving = 0.172384s, Total = 0.350305s, Memory = (RSS = 2110.640625Mb, VMS = 2122.742188Mb), Step range = [24-24]
17 : Statistics :: Grounding = 0.180719s, Solving = 0.277393s, Total = 0.458111s, Memory = (RSS = 2115.644531Mb, VMS = 2126.421875Mb), Step range = [25-25]

[14-04-2022_17-53-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 5.012040s due to: Stop condition reached.

[14-04-2022_17-53-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[14-04-2022_17-53-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[14-04-2022_17-53-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-53-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-53-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[14-04-2022_17-53-10] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 2 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 8, 16: 8, 17: 8, 18: 9, 19: 9, 20: 9, 21: 9, 22: 10, 23: 11, 24: 12, 25: 13, 26: 13, 27: 14, 28: 15, 29: 16, 30: 17, 31: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 14, 8: 17, 9: 21, 10: 22, 11: 23, 12: 24, 13: 26, 14: 27, 15: 28, 16: 29, 17: 31}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-53-11] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 8, 16: 8, 17: 8, 18: 9, 19: 9, 20: 9, 21: 9, 22: 10, 23: 11, 24: 12, 25: 13, 26: 13, 27: 14, 28: 15, 29: 16, 30: 17, 31: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 14, 8: 17, 9: 21, 10: 22, 11: 23, 12: 24, 13: 26, 14: 27, 15: 28, 16: 29, 17: 31}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-53-11] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 10, Last requested goal index = 10, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[14-04-2022_17-53-11] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.355467s, Solving = 1.656573s, Total = 5.012040s, Memory = (RSS = 2115.644531Mb, VMS = 2126.421875Mb), Step range = [0-25]), Calls = 17
Model :: Total atoms = 22171, Cost = (-2,), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[14-04-2022_17-53-11] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 25 :: Actions = 25                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,puzzle_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,puzzle_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 11:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 12:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,8))
Step 16:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 17:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 18:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 19:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 20:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 21:
    Current Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 22:
    Current Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
Step 23:
    Current Sub-goals:
        [Index = 8] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 8] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
Step 24:
    Current Sub-goals:
        [Index = 9] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 9] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,3))
Step 25:
    Current Sub-goals:
        [Index = 10] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 10] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,2))

[14-04-2022_17-53-11] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[14-04-2022_17-53-11] DEBUG :: ASH Planner Main #1 >> Value of end step of abstract plan to divide adjusted for right blend of current problem: end_step=25

[14-04-2022_17-53-11] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[14-04-2022_17-53-11] DEBUG :: ASH Planner Main #1 >> Preparing to invoke division strategy...

[14-04-2022_17-53-11] DEBUG :: ASH Planner Main #1 >> Online method OnlineMethod.GroundFirst chose to invoke the division strategy before a downwards level change:Current increment = 1, Current planning level is complete = False

[14-04-2022_17-53-11] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 25, chosen step range to extract = range(0, 26)

[14-04-2022_17-53-11] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 25, Total actions = 25, Produced sub-goal stages = 25, Produced sub-goal literals = 25
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-11] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =  25, AC =  25, CF = 1.0, GT =   3.39s, ST =   1.66s, OT = 0.00s, TT =   5.05s, EF = (LE = 2.5, AC = 2.5), ED = (LE = 2.8, AC = 2.8), EB = (LE = 1.1, AC = 1.1)

[14-04-2022_17-53-11] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=25, start_step=0, blend=Blend(left=0, right=0)

[14-04-2022_17-53-11] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=1, small_group_size=12, large_group_size=13

[14-04-2022_17-53-11] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=12, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[14-04-2022_17-53-11] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 25, Sub-goal Stage Range = [1-25]
Division points [total=1] : [(Index = 12, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[14-04-2022_17-53-11] DEBUG :: ASH Planner Main #1 >> Monolevel problem 1 at level 2 solved.

[14-04-2022_17-53-11] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 1 at level 1:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 25, Sub-goal Stage Range = [1-25]
Division points [total=1] : [(Index = 12, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[14-04-2022_17-53-11] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-12]

[14-04-2022_17-53-11] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 25, chosen step range to extract = range(0, 26)

[14-04-2022_17-53-11] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 25, Total actions = 25, Produced sub-goal stages = 25, Produced sub-goal literals = 25
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-11] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 31, chosen step range to extract = range(0, 32)

[14-04-2022_17-53-11] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 25, Total actions = 25, Produced sub-goal stages = 25, Produced sub-goal literals = 25
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-11] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[14-04-2022_17-53-11] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 25, Total actions = 25, Produced sub-goal stages = 25, Produced sub-goal literals = 25
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-11] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [1-12], problem number = 1, increment number = 1

[14-04-2022_17-53-11] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 12)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1750.0073392000013)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[14-04-2022_17-53-11] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [1-12] : Concurrency disabled : Minimum search length bound enabled with value 11

[14-04-2022_17-53-11] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 12
start_step = 0
is_initial = True
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 11

[14-04-2022_17-53-11] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[14-04-2022_17-53-11] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[14-04-2022_17-53-11] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[14-04-2022_17-53-11] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[14-04-2022_17-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[14-04-2022_17-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[14-04-2022_17-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[14-04-2022_17-53-11] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-53-11] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[14-04-2022_17-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})

[14-04-2022_17-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 0).
holds(1, complete_tower(red,puzzle_room_table), false, 0).
holds(1, complete_tower(yellow,puzzle_room_table), false, 0).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0).
holds(1, configuration(manipulator_limb_1), retracted, 0).
holds(1, configuration(manipulator_limb_2), retracted, 0).
holds(1, configuration(puzzle_room_door), closed, 0).
holds(1, configuration(starting_room_door), closed, 0).
holds(1, configuration(store_room_door), closed, 0).
holds(1, grasping(manipulator_arm_1), nothing, 0).
holds(1, grasping(manipulator_arm_2), nothing, 0).
holds(1, grasping(manipulator_end_1), nothing, 0).
holds(1, grasping(manipulator_end_2), nothing, 0).
holds(1, in((block,1)), (puzzle_room,1), 0).
holds(1, in((block,2)), (puzzle_room,1), 0).
holds(1, in((block,3)), (puzzle_room,1), 0).
holds(1, in((block,4)), (store_room,0), 0).
holds(1, in((block,5)), (store_room,0), 0).
holds(1, in((block,6)), (store_room,0), 0).
holds(1, in((block,7)), (puzzle_room,1), 0).
holds(1, in((block,8)), (store_room,0), 0).
holds(1, in((block,9)), (puzzle_room,1), 0).
holds(1, in(manipulator_arm_1), (starting_room,0), 0).
holds(1, in(manipulator_arm_2), (starting_room,0), 0).
holds(1, in(manipulator_end_1), (starting_room,0), 0).
holds(1, in(manipulator_end_2), (starting_room,0), 0).
holds(1, in(manipulator_limb_1), (starting_room,0), 0).
holds(1, in(manipulator_limb_2), (starting_room,0), 0).
holds(1, in(puzzle_room_table), (puzzle_room,1), 0).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 0).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0).
holds(1, in(talos), (starting_room,0), 0).
holds(1, in_tower((block,1),(block,1)), true, 0).
holds(1, in_tower((block,1),(block,2)), false, 0).
holds(1, in_tower((block,1),(block,3)), true, 0).
holds(1, in_tower((block,1),(block,4)), false, 0).
holds(1, in_tower((block,1),(block,5)), false, 0).
holds(1, in_tower((block,1),(block,6)), false, 0).
holds(1, in_tower((block,1),(block,7)), false, 0).
holds(1, in_tower((block,1),(block,8)), false, 0).
holds(1, in_tower((block,1),(block,9)), false, 0).
holds(1, in_tower((block,2),(block,1)), false, 0).
holds(1, in_tower((block,2),(block,2)), true, 0).
holds(1, in_tower((block,2),(block,3)), false, 0).
holds(1, in_tower((block,2),(block,4)), false, 0).
holds(1, in_tower((block,2),(block,5)), false, 0).
holds(1, in_tower((block,2),(block,6)), false, 0).
holds(1, in_tower((block,2),(block,7)), false, 0).
holds(1, in_tower((block,2),(block,8)), false, 0).
holds(1, in_tower((block,2),(block,9)), false, 0).
holds(1, in_tower((block,3),(block,1)), false, 0).
holds(1, in_tower((block,3),(block,2)), false, 0).
holds(1, in_tower((block,3),(block,3)), false, 0).
holds(1, in_tower((block,3),(block,4)), false, 0).
holds(1, in_tower((block,3),(block,5)), false, 0).
holds(1, in_tower((block,3),(block,6)), false, 0).
holds(1, in_tower((block,3),(block,7)), false, 0).
holds(1, in_tower((block,3),(block,8)), false, 0).
holds(1, in_tower((block,3),(block,9)), false, 0).
holds(1, in_tower((block,4),(block,1)), false, 0).
holds(1, in_tower((block,4),(block,2)), false, 0).
holds(1, in_tower((block,4),(block,3)), false, 0).
holds(1, in_tower((block,4),(block,4)), false, 0).
holds(1, in_tower((block,4),(block,5)), false, 0).
holds(1, in_tower((block,4),(block,6)), false, 0).
holds(1, in_tower((block,4),(block,7)), false, 0).
holds(1, in_tower((block,4),(block,8)), false, 0).
holds(1, in_tower((block,4),(block,9)), false, 0).
holds(1, in_tower((block,5),(block,1)), false, 0).
holds(1, in_tower((block,5),(block,2)), false, 0).
holds(1, in_tower((block,5),(block,3)), false, 0).
holds(1, in_tower((block,5),(block,4)), false, 0).
holds(1, in_tower((block,5),(block,5)), false, 0).
holds(1, in_tower((block,5),(block,6)), false, 0).
holds(1, in_tower((block,5),(block,7)), false, 0).
holds(1, in_tower((block,5),(block,8)), false, 0).
holds(1, in_tower((block,5),(block,9)), false, 0).
holds(1, in_tower((block,6),(block,1)), false, 0).
holds(1, in_tower((block,6),(block,2)), false, 0).
holds(1, in_tower((block,6),(block,3)), false, 0).
holds(1, in_tower((block,6),(block,4)), false, 0).
holds(1, in_tower((block,6),(block,5)), false, 0).
holds(1, in_tower((block,6),(block,6)), false, 0).
holds(1, in_tower((block,6),(block,7)), false, 0).
holds(1, in_tower((block,6),(block,8)), false, 0).
holds(1, in_tower((block,6),(block,9)), false, 0).
holds(1, in_tower((block,7),(block,1)), false, 0).
holds(1, in_tower((block,7),(block,2)), false, 0).
holds(1, in_tower((block,7),(block,3)), false, 0).
holds(1, in_tower((block,7),(block,4)), false, 0).
holds(1, in_tower((block,7),(block,5)), false, 0).
holds(1, in_tower((block,7),(block,6)), false, 0).
holds(1, in_tower((block,7),(block,7)), true, 0).
holds(1, in_tower((block,7),(block,8)), false, 0).
holds(1, in_tower((block,7),(block,9)), true, 0).
holds(1, in_tower((block,8),(block,1)), false, 0).
holds(1, in_tower((block,8),(block,2)), false, 0).
holds(1, in_tower((block,8),(block,3)), false, 0).
holds(1, in_tower((block,8),(block,4)), false, 0).
holds(1, in_tower((block,8),(block,5)), false, 0).
holds(1, in_tower((block,8),(block,6)), false, 0).
holds(1, in_tower((block,8),(block,7)), false, 0).
holds(1, in_tower((block,8),(block,8)), false, 0).
holds(1, in_tower((block,8),(block,9)), false, 0).
holds(1, in_tower((block,9),(block,1)), false, 0).
holds(1, in_tower((block,9),(block,2)), false, 0).
holds(1, in_tower((block,9),(block,3)), false, 0).
holds(1, in_tower((block,9),(block,4)), false, 0).
holds(1, in_tower((block,9),(block,5)), false, 0).
holds(1, in_tower((block,9),(block,6)), false, 0).
holds(1, in_tower((block,9),(block,7)), false, 0).
holds(1, in_tower((block,9),(block,8)), false, 0).
holds(1, in_tower((block,9),(block,9)), false, 0).
holds(1, on((block,1)), puzzle_room_table_left, 0).
holds(1, on((block,2)), puzzle_room_table_right, 0).
holds(1, on((block,3)), (block,1), 0).
holds(1, on((block,4)), nothing, 0).
holds(1, on((block,5)), nothing, 0).
holds(1, on((block,6)), nothing, 0).
holds(1, on((block,7)), puzzle_room_table_middle, 0).
holds(1, on((block,8)), nothing, 0).
holds(1, on((block,9)), (block,7), 0).
holds(1, tower_base((block,1),puzzle_room_table), true, 0).
holds(1, tower_base((block,2),puzzle_room_table), true, 0).
holds(1, tower_base((block,3),puzzle_room_table), false, 0).
holds(1, tower_base((block,4),puzzle_room_table), false, 0).
holds(1, tower_base((block,5),puzzle_room_table), false, 0).
holds(1, tower_base((block,6),puzzle_room_table), false, 0).
holds(1, tower_base((block,7),puzzle_room_table), true, 0).
holds(1, tower_base((block,8),puzzle_room_table), false, 0).
holds(1, tower_base((block,9),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,7),puzzle_room_table), true, 0).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 0).
holds(2, complete_tower(blue,puzzle_room_table), false, 0).
holds(2, complete_tower(red,puzzle_room_table), false, 0).
holds(2, complete_tower(yellow,puzzle_room_table), false, 0).
holds(2, configuration(manipulator_arm_1), retracted, 0).
holds(2, configuration(manipulator_arm_2), retracted, 0).
holds(2, configuration(puzzle_room_door), closed, 0).
holds(2, configuration(starting_room_door), closed, 0).
holds(2, configuration(store_room_door), closed, 0).
holds(2, grasping(manipulator_arm_1), nothing, 0).
holds(2, grasping(manipulator_arm_2), nothing, 0).
holds(2, in((block,1)), puzzle_room, 0).
holds(2, in((block,2)), puzzle_room, 0).
holds(2, in((block,3)), puzzle_room, 0).
holds(2, in((block,4)), store_room, 0).
holds(2, in((block,5)), store_room, 0).
holds(2, in((block,6)), store_room, 0).
holds(2, in((block,7)), puzzle_room, 0).
holds(2, in((block,8)), store_room, 0).
holds(2, in((block,9)), puzzle_room, 0).
holds(2, in(manipulator_arm_1), starting_room, 0).
holds(2, in(manipulator_arm_2), starting_room, 0).
holds(2, in(puzzle_room_table), puzzle_room, 0).
holds(2, in(talos), starting_room, 0).
holds(2, in_tower((block,1),(block,1)), true, 0).
holds(2, in_tower((block,1),(block,2)), false, 0).
holds(2, in_tower((block,1),(block,3)), true, 0).
holds(2, in_tower((block,1),(block,4)), false, 0).
holds(2, in_tower((block,1),(block,5)), false, 0).
holds(2, in_tower((block,1),(block,6)), false, 0).
holds(2, in_tower((block,1),(block,7)), false, 0).
holds(2, in_tower((block,1),(block,8)), false, 0).
holds(2, in_tower((block,1),(block,9)), false, 0).
holds(2, in_tower((block,2),(block,1)), false, 0).
holds(2, in_tower((block,2),(block,2)), true, 0).
holds(2, in_tower((block,2),(block,3)), false, 0).
holds(2, in_tower((block,2),(block,4)), false, 0).
holds(2, in_tower((block,2),(block,5)), false, 0).
holds(2, in_tower((block,2),(block,6)), false, 0).
holds(2, in_tower((block,2),(block,7)), false, 0).
holds(2, in_tower((block,2),(block,8)), false, 0).
holds(2, in_tower((block,2),(block,9)), false, 0).
holds(2, in_tower((block,3),(block,1)), false, 0).
holds(2, in_tower((block,3),(block,2)), false, 0).
holds(2, in_tower((block,3),(block,3)), false, 0).
holds(2, in_tower((block,3),(block,4)), false, 0).
holds(2, in_tower((block,3),(block,5)), false, 0).
holds(2, in_tower((block,3),(block,6)), false, 0).
holds(2, in_tower((block,3),(block,7)), false, 0).
holds(2, in_tower((block,3),(block,8)), false, 0).
holds(2, in_tower((block,3),(block,9)), false, 0).
holds(2, in_tower((block,4),(block,1)), false, 0).
holds(2, in_tower((block,4),(block,2)), false, 0).
holds(2, in_tower((block,4),(block,3)), false, 0).
holds(2, in_tower((block,4),(block,4)), false, 0).
holds(2, in_tower((block,4),(block,5)), false, 0).
holds(2, in_tower((block,4),(block,6)), false, 0).
holds(2, in_tower((block,4),(block,7)), false, 0).
holds(2, in_tower((block,4),(block,8)), false, 0).
holds(2, in_tower((block,4),(block,9)), false, 0).
holds(2, in_tower((block,5),(block,1)), false, 0).
holds(2, in_tower((block,5),(block,2)), false, 0).
holds(2, in_tower((block,5),(block,3)), false, 0).
holds(2, in_tower((block,5),(block,4)), false, 0).
holds(2, in_tower((block,5),(block,5)), false, 0).
holds(2, in_tower((block,5),(block,6)), false, 0).
holds(2, in_tower((block,5),(block,7)), false, 0).
holds(2, in_tower((block,5),(block,8)), false, 0).
holds(2, in_tower((block,5),(block,9)), false, 0).
holds(2, in_tower((block,6),(block,1)), false, 0).
holds(2, in_tower((block,6),(block,2)), false, 0).
holds(2, in_tower((block,6),(block,3)), false, 0).
holds(2, in_tower((block,6),(block,4)), false, 0).
holds(2, in_tower((block,6),(block,5)), false, 0).
holds(2, in_tower((block,6),(block,6)), false, 0).
holds(2, in_tower((block,6),(block,7)), false, 0).
holds(2, in_tower((block,6),(block,8)), false, 0).
holds(2, in_tower((block,6),(block,9)), false, 0).
holds(2, in_tower((block,7),(block,1)), false, 0).
holds(2, in_tower((block,7),(block,2)), false, 0).
holds(2, in_tower((block,7),(block,3)), false, 0).
holds(2, in_tower((block,7),(block,4)), false, 0).
holds(2, in_tower((block,7),(block,5)), false, 0).
holds(2, in_tower((block,7),(block,6)), false, 0).
holds(2, in_tower((block,7),(block,7)), true, 0).
holds(2, in_tower((block,7),(block,8)), false, 0).
holds(2, in_tower((block,7),(block,9)), true, 0).
holds(2, in_tower((block,8),(block,1)), false, 0).
holds(2, in_tower((block,8),(block,2)), false, 0).
holds(2, in_tower((block,8),(block,3)), false, 0).
holds(2, in_tower((block,8),(block,4)), false, 0).
holds(2, in_tower((block,8),(block,5)), false, 0).
holds(2, in_tower((block,8),(block,6)), false, 0).
holds(2, in_tower((block,8),(block,7)), false, 0).
holds(2, in_tower((block,8),(block,8)), false, 0).
holds(2, in_tower((block,8),(block,9)), false, 0).
holds(2, in_tower((block,9),(block,1)), false, 0).
holds(2, in_tower((block,9),(block,2)), false, 0).
holds(2, in_tower((block,9),(block,3)), false, 0).
holds(2, in_tower((block,9),(block,4)), false, 0).
holds(2, in_tower((block,9),(block,5)), false, 0).
holds(2, in_tower((block,9),(block,6)), false, 0).
holds(2, in_tower((block,9),(block,7)), false, 0).
holds(2, in_tower((block,9),(block,8)), false, 0).
holds(2, in_tower((block,9),(block,9)), false, 0).
holds(2, on((block,1)), puzzle_room_table, 0).
holds(2, on((block,2)), puzzle_room_table, 0).
holds(2, on((block,3)), (block,1), 0).
holds(2, on((block,4)), nothing, 0).
holds(2, on((block,5)), nothing, 0).
holds(2, on((block,6)), nothing, 0).
holds(2, on((block,7)), puzzle_room_table, 0).
holds(2, on((block,8)), nothing, 0).
holds(2, on((block,9)), (block,7), 0).
holds(2, tower_base((block,1),puzzle_room_table), true, 0).
holds(2, tower_base((block,2),puzzle_room_table), true, 0).
holds(2, tower_base((block,3),puzzle_room_table), false, 0).
holds(2, tower_base((block,4),puzzle_room_table), false, 0).
holds(2, tower_base((block,5),puzzle_room_table), false, 0).
holds(2, tower_base((block,6),puzzle_room_table), false, 0).
holds(2, tower_base((block,7),puzzle_room_table), true, 0).
holds(2, tower_base((block,8),puzzle_room_table), false, 0).
holds(2, tower_base((block,9),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,7),puzzle_room_table), true, 0).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 0).

[14-04-2022_17-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[14-04-2022_17-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[14-04-2022_17-53-11] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=11']

[14-04-2022_17-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 1})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 2})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,puzzle_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_1)', 'V': 'puzzle_room_door_handle_outer', 'I': 3})
SubGoal({'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,puzzle_room_door)', 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'I': 4})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,puzzle_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 5})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,store_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_1)', 'V': 'store_room_door_handle_outer', 'I': 6})
SubGoal({'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,store_room_door)', 'F': 'configuration(store_room_door)', 'V': 'open', 'I': 7})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,store_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 8})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 9})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 10})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 11})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'I': 12})

[14-04-2022_17-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 12 rules into program part base:

sub_goal(2, talos, move(hallway), in(talos), hallway, 1).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 2).
sub_goal(2, talos, grasp(manipulator_arm_1,puzzle_room_door_handle_outer), grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 3).
sub_goal(2, talos, actuate(manipulator_arm_1,puzzle_room_door), configuration(puzzle_room_door), open, 4).
sub_goal(2, talos, release(manipulator_arm_1,puzzle_room_door_handle_outer), grasping(manipulator_arm_1), nothing, 5).
sub_goal(2, talos, grasp(manipulator_arm_1,store_room_door_handle_outer), grasping(manipulator_arm_1), store_room_door_handle_outer, 6).
sub_goal(2, talos, actuate(manipulator_arm_1,store_room_door), configuration(store_room_door), open, 7).
sub_goal(2, talos, release(manipulator_arm_1,store_room_door_handle_outer), grasping(manipulator_arm_1), nothing, 8).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 9).
sub_goal(2, talos, move(store_room), in(talos), store_room, 10).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 11).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), (block,6), 12).

[14-04-2022_17-53-11] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[14-04-2022_17-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=11']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A2866FD8B0>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=12, step_end_min=12, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1750.0073392000013, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 12, 'sequential', 'false'), range_=None)]

[14-04-2022_17-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1281 rules

[14-04-2022_17-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006799799999498646s

[14-04-2022_17-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[14-04-2022_17-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[14-04-2022_17-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.041013s.

[14-04-2022_17-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006952s with result Satisfiable.

[14-04-2022_17-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[14-04-2022_17-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A2868A9770>

[14-04-2022_17-53-11] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 0)
	('last_sgoals', 12)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A2868A9770>)

[14-04-2022_17-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, false). %* None *%
#program optimisation_module(#inc, 0, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, 12, sequential, false). %* None *%

[14-04-2022_17-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =     11
Incrementor step ends | Minimum  =     12 : Maximum =    300

[14-04-2022_17-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('conformance_module', [Number(0), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('conformance_module', [Number(1), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('conformance_module', [Number(2), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('conformance_module', [Number(3), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('conformance_module', [Number(4), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('conformance_module', [Number(5), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('conformance_module', [Number(6), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('conformance_module', [Number(7), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('conformance_module', [Number(8), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('conformance_module', [Number(9), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('conformance_module', [Number(10), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('conformance_module', [Number(11), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.662804s.

[14-04-2022_17-53-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.809946s with result Satisfiable.

[14-04-2022_17-53-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.4727495999986786, Incremental time limit = None
Running cumulative time = 2.4727495999986786, Cumulative time limit = 1750.0073392000013
Used memory = (RSS = 2097.066406Mb, VMS = 2105.550781Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.662804s, Solving = 0.809946s, Total = 2.472750s, Memory = (RSS = 2097.066406Mb, VMS = 2105.550781Mb), Step range = [0-11]), Calls = 1
Final Model :: Total atoms = 14778, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[14-04-2022_17-53-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =     12 : Maximum =    300

[14-04-2022_17-53-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('conformance_module', [Number(12), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.228258s.

[14-04-2022_17-53-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.044452s with result Unsatisfiable.

[14-04-2022_17-53-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.27271010000004026, Incremental time limit = None
Running cumulative time = 2.745459699998719, Cumulative time limit = 1750.0073392000013
Used memory = (RSS = 2103.687500Mb, VMS = 2116.007812Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =     12 : Maximum =    300

[14-04-2022_17-53-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('conformance_module', [Number(13), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.218740s.

[14-04-2022_17-53-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.043751s with result Unsatisfiable.

[14-04-2022_17-53-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2624903000005361, Incremental time limit = None
Running cumulative time = 3.007949999999255, Cumulative time limit = 1750.0073392000013
Used memory = (RSS = 2106.156250Mb, VMS = 2116.539062Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =     12 : Maximum =    300

[14-04-2022_17-53-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('conformance_module', [Number(14), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.223774s.

[14-04-2022_17-53-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.048700s with result Unsatisfiable.

[14-04-2022_17-53-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.272473799999716, Incremental time limit = None
Running cumulative time = 3.280423799998971, Cumulative time limit = 1750.0073392000013
Used memory = (RSS = 2108.722656Mb, VMS = 2117.074219Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =     12 : Maximum =    300

[14-04-2022_17-53-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('conformance_module', [Number(15), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.229569s.

[14-04-2022_17-53-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.054415s with result Unsatisfiable.

[14-04-2022_17-53-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.28398440000000846, Incremental time limit = None
Running cumulative time = 3.5644081999989794, Cumulative time limit = 1750.0073392000013
Used memory = (RSS = 2111.062500Mb, VMS = 2117.601562Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =     12 : Maximum =    300

[14-04-2022_17-53-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.233269s.

[14-04-2022_17-53-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.065962s with result Unsatisfiable.

[14-04-2022_17-53-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2992308000002595, Incremental time limit = None
Running cumulative time = 3.863638999999239, Cumulative time limit = 1750.0073392000013
Used memory = (RSS = 2113.449219Mb, VMS = 2118.125000Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =     12 : Maximum =    300

[14-04-2022_17-53-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.238012s.

[14-04-2022_17-53-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.067874s with result Unsatisfiable.

[14-04-2022_17-53-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3058853000002273, Incremental time limit = None
Running cumulative time = 4.169524299999466, Cumulative time limit = 1750.0073392000013
Used memory = (RSS = 2117.863281Mb, VMS = 2136.425781Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =     12 : Maximum =    300

[14-04-2022_17-53-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('conformance_module', [Number(18), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.243320s.

[14-04-2022_17-53-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.076057s with result Unsatisfiable.

[14-04-2022_17-53-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3193767000002481, Incremental time limit = None
Running cumulative time = 4.488900999999714, Cumulative time limit = 1750.0073392000013
Used memory = (RSS = 2121.179688Mb, VMS = 2138.574219Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =     12 : Maximum =    300

[14-04-2022_17-53-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('state_module', [Number(19), Number(0)]), ('plan_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('conformance_module', [Number(19), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.247188s.

[14-04-2022_17-53-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.087067s with result Unsatisfiable.

[14-04-2022_17-53-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3342553999991651, Incremental time limit = None
Running cumulative time = 4.823156399998879, Cumulative time limit = 1750.0073392000013
Used memory = (RSS = 2123.957031Mb, VMS = 2139.625000Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =     12 : Maximum =    300

[14-04-2022_17-53-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('state_module', [Number(20), Number(0)]), ('plan_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.250189s.

[14-04-2022_17-53-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.122264s with result Unsatisfiable.

[14-04-2022_17-53-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3724529999999504, Incremental time limit = None
Running cumulative time = 5.19560939999883, Cumulative time limit = 1750.0073392000013
Used memory = (RSS = 2126.441406Mb, VMS = 2140.152344Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     20 : Current =     21
Incrementor step ends | Minimum  =     12 : Maximum =    300

[14-04-2022_17-53-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('state_module', [Number(21), Number(0)]), ('plan_module', [Number(21), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.257657s.

[14-04-2022_17-53-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.122254s with result Unsatisfiable.

[14-04-2022_17-53-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3799113999984911, Incremental time limit = None
Running cumulative time = 5.575520799997321, Cumulative time limit = 1750.0073392000013
Used memory = (RSS = 2129.082031Mb, VMS = 2140.675781Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     21 : Current =     22
Incrementor step ends | Minimum  =     12 : Maximum =    300

[14-04-2022_17-53-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(22)]), ('state_module', [Number(22), Number(0)]), ('plan_module', [Number(22), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.255329s.

[14-04-2022_17-53-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.197973s with result Satisfiable.

[14-04-2022_17-53-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.45330250000097294, Incremental time limit = None
Running cumulative time = 6.028823299998294, Cumulative time limit = 1750.0073392000013
Used memory = (RSS = 2136.187500Mb, VMS = 2145.949219Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.288109s, Solving = 1.740714s, Total = 6.028823s, Memory = (RSS = 2136.187500Mb, VMS = 2145.949219Mb), Step range = [0-22]), Calls = 12
Final Model :: Total atoms = 22917, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[14-04-2022_17-53-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 1.662804s, Solving = 0.809946s, Total = 2.472750s, Memory = (RSS = 2097.066406Mb, VMS = 2105.550781Mb), Step range = [0-11]
2 : Statistics :: Grounding = 0.228258s, Solving = 0.044452s, Total = 0.272710s, Memory = (RSS = 2103.687500Mb, VMS = 2116.007812Mb), Step range = [12-12]
3 : Statistics :: Grounding = 0.218740s, Solving = 0.043751s, Total = 0.262490s, Memory = (RSS = 2106.156250Mb, VMS = 2116.539062Mb), Step range = [13-13]
4 : Statistics :: Grounding = 0.223774s, Solving = 0.048700s, Total = 0.272474s, Memory = (RSS = 2108.722656Mb, VMS = 2117.074219Mb), Step range = [14-14]
5 : Statistics :: Grounding = 0.229569s, Solving = 0.054415s, Total = 0.283984s, Memory = (RSS = 2111.062500Mb, VMS = 2117.601562Mb), Step range = [15-15]
6 : Statistics :: Grounding = 0.233269s, Solving = 0.065962s, Total = 0.299231s, Memory = (RSS = 2113.449219Mb, VMS = 2118.125000Mb), Step range = [16-16]
7 : Statistics :: Grounding = 0.238012s, Solving = 0.067874s, Total = 0.305885s, Memory = (RSS = 2117.863281Mb, VMS = 2136.425781Mb), Step range = [17-17]
8 : Statistics :: Grounding = 0.243320s, Solving = 0.076057s, Total = 0.319377s, Memory = (RSS = 2121.179688Mb, VMS = 2138.574219Mb), Step range = [18-18]
9 : Statistics :: Grounding = 0.247188s, Solving = 0.087067s, Total = 0.334255s, Memory = (RSS = 2123.957031Mb, VMS = 2139.625000Mb), Step range = [19-19]
10 : Statistics :: Grounding = 0.250189s, Solving = 0.122264s, Total = 0.372453s, Memory = (RSS = 2126.441406Mb, VMS = 2140.152344Mb), Step range = [20-20]
11 : Statistics :: Grounding = 0.257657s, Solving = 0.122254s, Total = 0.379911s, Memory = (RSS = 2129.082031Mb, VMS = 2140.675781Mb), Step range = [21-21]
12 : Statistics :: Grounding = 0.255329s, Solving = 0.197973s, Total = 0.453303s, Memory = (RSS = 2136.187500Mb, VMS = 2145.949219Mb), Step range = [22-22]

[14-04-2022_17-53-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 6.028823s due to: Stop condition reached.

[14-04-2022_17-53-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[14-04-2022_17-53-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[14-04-2022_17-53-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-53-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-53-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[14-04-2022_17-53-18] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 8, 16: 8, 17: 8, 18: 9, 19: 9, 20: 9, 21: 9, 22: 10, 23: 11, 24: 12, 25: 13, 26: 13, 27: 14, 28: 15, 29: 16, 30: 17, 31: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 14, 8: 17, 9: 21, 10: 22, 11: 23, 12: 24, 13: 26, 14: 27, 15: 28, 16: 29, 17: 31}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-53-18] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 8, 16: 8, 17: 8, 18: 9, 19: 9, 20: 9, 21: 9, 22: 10, 23: 11, 24: 12, 25: 13, 26: 13, 27: 14, 28: 15, 29: 16, 30: 17, 31: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 14, 8: 17, 9: 21, 10: 22, 11: 23, 12: 24, 13: 26, 14: 27, 15: 28, 16: 29, 17: 31}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-53-18] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 12, Last requested goal index = 12, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[14-04-2022_17-53-18] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.288109s, Solving = 1.740714s, Total = 6.028823s, Memory = (RSS = 2136.187500Mb, VMS = 2145.949219Mb), Step range = [0-22]), Calls = 12
Model :: Total atoms = 22917, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[14-04-2022_17-53-18] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 22 :: Actions = 22                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 22:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))

[14-04-2022_17-53-18] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[14-04-2022_17-53-18] DEBUG :: ASH Planner Main #1 >> Value of end step of abstract plan to divide adjusted for right blend of current problem: end_step=22

[14-04-2022_17-53-18] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[14-04-2022_17-53-18] DEBUG :: ASH Planner Main #1 >> Monolevel problem 1 at level 1 solved.

[14-04-2022_17-53-18] DEBUG :: ASH Planner Main #1 >> Online planning increment 1 finished.

[14-04-2022_17-53-18] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 17 : Goals achieved = 17 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 1 : Total constraining sub-goal stages = 31 : Goals achieved = 10 : Goals unachieved = 21 : Complete = False
Level = 1 : Solved problems = 1 : Total constraining sub-goal stages = 25 : Goals achieved = 12 : Goals unachieved = 13 : Complete = False

[14-04-2022_17-53-18] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 2.

[14-04-2022_17-53-18] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 2 by method ground-first is [1-1].

[14-04-2022_17-53-18] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 2 at level 1:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 25, Sub-goal Stage Range = [1-25]
Division points [total=1] : [(Index = 12, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[14-04-2022_17-53-18] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [13-25]

[14-04-2022_17-53-18] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 22, chosen step range to extract = range(0, 23)

[14-04-2022_17-53-18] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 25, Total actions = 25, Produced sub-goal stages = 25, Produced sub-goal literals = 25
Level [1]: Length = 22, Total actions = 22, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-18] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 25, chosen step range to extract = range(0, 26)

[14-04-2022_17-53-18] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 25, Total actions = 25, Produced sub-goal stages = 25, Produced sub-goal literals = 25
Level [1]: Length = 22, Total actions = 22, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-18] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 31, chosen step range to extract = range(0, 32)

[14-04-2022_17-53-18] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 25, Total actions = 25, Produced sub-goal stages = 25, Produced sub-goal literals = 25
Level [1]: Length = 22, Total actions = 22, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-18] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[14-04-2022_17-53-18] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 25, Total actions = 25, Produced sub-goal stages = 25, Produced sub-goal literals = 25
Level [1]: Length = 22, Total actions = 22, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-18] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [13-25], problem number = 2, increment number = 2

[14-04-2022_17-53-18] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 13)
	('last_sgoals', 25)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1743.930551700004)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[14-04-2022_17-53-18] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [13-25] : Concurrency disabled : Minimum search length bound enabled with value 34

[14-04-2022_17-53-18] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 13
last_sgoals = 25
start_step = 22
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 34

[14-04-2022_17-53-18] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[14-04-2022_17-53-18] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[14-04-2022_17-53-18] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[14-04-2022_17-53-18] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[14-04-2022_17-53-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[14-04-2022_17-53-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[14-04-2022_17-53-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-53-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-53-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-53-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-53-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[14-04-2022_17-53-18] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-53-18] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 22 as problem start state.

[14-04-2022_17-53-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,6))', 'S': 22})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 22})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 22})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 22})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 22})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 22})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 22})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'S': 22})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 22})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,6)', 'S': 22})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 22})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 22})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 22})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 22})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 22})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 22})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(store_room,0)', 'S': 22})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 22})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(store_room,0)', 'S': 22})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 22})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(store_room,0)', 'S': 22})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(store_room,0)', 'S': 22})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(store_room,0)', 'S': 22})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(store_room,0)', 'S': 22})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(store_room,0)', 'S': 22})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(store_room,0)', 'S': 22})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 22})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 22})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 22})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 22})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(store_room,0)', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 22})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 22})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 22})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 22})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 22})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 22})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 22})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'S': 22})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 22})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 22})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 22})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 22})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 22})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 22})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 22})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 22})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 22})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 22})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 22})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'S': 22})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 22})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 22})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 22})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 22})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 22})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 22})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 22})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 22})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'store_room', 'S': 22})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 22})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 22})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 22})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 22})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'store_room', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 22})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 22})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 22})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 22})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 22})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 22})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 22})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 22})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 22})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 22})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 22})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 22})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 22})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 22})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 22})

[14-04-2022_17-53-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-53-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 22).
holds(1, complete_tower(red,puzzle_room_table), false, 22).
holds(1, complete_tower(yellow,puzzle_room_table), false, 22).
holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 22).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 22).
holds(1, configuration(manipulator_limb_1), extended, 22).
holds(1, configuration(manipulator_limb_2), retracted, 22).
holds(1, configuration(puzzle_room_door), open, 22).
holds(1, configuration(starting_room_door), closed, 22).
holds(1, configuration(store_room_door), open, 22).
holds(1, grasping(manipulator_arm_1), (block,6), 22).
holds(1, grasping(manipulator_arm_2), nothing, 22).
holds(1, grasping(manipulator_end_1), (block,6), 22).
holds(1, grasping(manipulator_end_2), nothing, 22).
holds(1, in((block,1)), (puzzle_room,1), 22).
holds(1, in((block,2)), (puzzle_room,1), 22).
holds(1, in((block,3)), (puzzle_room,1), 22).
holds(1, in((block,4)), (store_room,0), 22).
holds(1, in((block,5)), (store_room,0), 22).
holds(1, in((block,6)), (store_room,0), 22).
holds(1, in((block,7)), (puzzle_room,1), 22).
holds(1, in((block,8)), (store_room,0), 22).
holds(1, in((block,9)), (puzzle_room,1), 22).
holds(1, in(manipulator_arm_1), (store_room,0), 22).
holds(1, in(manipulator_arm_2), (store_room,0), 22).
holds(1, in(manipulator_end_1), (store_room,0), 22).
holds(1, in(manipulator_end_2), (store_room,0), 22).
holds(1, in(manipulator_limb_1), (store_room,0), 22).
holds(1, in(manipulator_limb_2), (store_room,0), 22).
holds(1, in(puzzle_room_table), (puzzle_room,1), 22).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 22).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 22).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 22).
holds(1, in(talos), (store_room,0), 22).
holds(1, in_tower((block,1),(block,1)), true, 22).
holds(1, in_tower((block,1),(block,2)), false, 22).
holds(1, in_tower((block,1),(block,3)), true, 22).
holds(1, in_tower((block,1),(block,4)), false, 22).
holds(1, in_tower((block,1),(block,5)), false, 22).
holds(1, in_tower((block,1),(block,6)), false, 22).
holds(1, in_tower((block,1),(block,7)), false, 22).
holds(1, in_tower((block,1),(block,8)), false, 22).
holds(1, in_tower((block,1),(block,9)), false, 22).
holds(1, in_tower((block,2),(block,1)), false, 22).
holds(1, in_tower((block,2),(block,2)), true, 22).
holds(1, in_tower((block,2),(block,3)), false, 22).
holds(1, in_tower((block,2),(block,4)), false, 22).
holds(1, in_tower((block,2),(block,5)), false, 22).
holds(1, in_tower((block,2),(block,6)), false, 22).
holds(1, in_tower((block,2),(block,7)), false, 22).
holds(1, in_tower((block,2),(block,8)), false, 22).
holds(1, in_tower((block,2),(block,9)), false, 22).
holds(1, in_tower((block,3),(block,1)), false, 22).
holds(1, in_tower((block,3),(block,2)), false, 22).
holds(1, in_tower((block,3),(block,3)), false, 22).
holds(1, in_tower((block,3),(block,4)), false, 22).
holds(1, in_tower((block,3),(block,5)), false, 22).
holds(1, in_tower((block,3),(block,6)), false, 22).
holds(1, in_tower((block,3),(block,7)), false, 22).
holds(1, in_tower((block,3),(block,8)), false, 22).
holds(1, in_tower((block,3),(block,9)), false, 22).
holds(1, in_tower((block,4),(block,1)), false, 22).
holds(1, in_tower((block,4),(block,2)), false, 22).
holds(1, in_tower((block,4),(block,3)), false, 22).
holds(1, in_tower((block,4),(block,4)), false, 22).
holds(1, in_tower((block,4),(block,5)), false, 22).
holds(1, in_tower((block,4),(block,6)), false, 22).
holds(1, in_tower((block,4),(block,7)), false, 22).
holds(1, in_tower((block,4),(block,8)), false, 22).
holds(1, in_tower((block,4),(block,9)), false, 22).
holds(1, in_tower((block,5),(block,1)), false, 22).
holds(1, in_tower((block,5),(block,2)), false, 22).
holds(1, in_tower((block,5),(block,3)), false, 22).
holds(1, in_tower((block,5),(block,4)), false, 22).
holds(1, in_tower((block,5),(block,5)), false, 22).
holds(1, in_tower((block,5),(block,6)), false, 22).
holds(1, in_tower((block,5),(block,7)), false, 22).
holds(1, in_tower((block,5),(block,8)), false, 22).
holds(1, in_tower((block,5),(block,9)), false, 22).
holds(1, in_tower((block,6),(block,1)), false, 22).
holds(1, in_tower((block,6),(block,2)), false, 22).
holds(1, in_tower((block,6),(block,3)), false, 22).
holds(1, in_tower((block,6),(block,4)), false, 22).
holds(1, in_tower((block,6),(block,5)), false, 22).
holds(1, in_tower((block,6),(block,6)), false, 22).
holds(1, in_tower((block,6),(block,7)), false, 22).
holds(1, in_tower((block,6),(block,8)), false, 22).
holds(1, in_tower((block,6),(block,9)), false, 22).
holds(1, in_tower((block,7),(block,1)), false, 22).
holds(1, in_tower((block,7),(block,2)), false, 22).
holds(1, in_tower((block,7),(block,3)), false, 22).
holds(1, in_tower((block,7),(block,4)), false, 22).
holds(1, in_tower((block,7),(block,5)), false, 22).
holds(1, in_tower((block,7),(block,6)), false, 22).
holds(1, in_tower((block,7),(block,7)), true, 22).
holds(1, in_tower((block,7),(block,8)), false, 22).
holds(1, in_tower((block,7),(block,9)), true, 22).
holds(1, in_tower((block,8),(block,1)), false, 22).
holds(1, in_tower((block,8),(block,2)), false, 22).
holds(1, in_tower((block,8),(block,3)), false, 22).
holds(1, in_tower((block,8),(block,4)), false, 22).
holds(1, in_tower((block,8),(block,5)), false, 22).
holds(1, in_tower((block,8),(block,6)), false, 22).
holds(1, in_tower((block,8),(block,7)), false, 22).
holds(1, in_tower((block,8),(block,8)), false, 22).
holds(1, in_tower((block,8),(block,9)), false, 22).
holds(1, in_tower((block,9),(block,1)), false, 22).
holds(1, in_tower((block,9),(block,2)), false, 22).
holds(1, in_tower((block,9),(block,3)), false, 22).
holds(1, in_tower((block,9),(block,4)), false, 22).
holds(1, in_tower((block,9),(block,5)), false, 22).
holds(1, in_tower((block,9),(block,6)), false, 22).
holds(1, in_tower((block,9),(block,7)), false, 22).
holds(1, in_tower((block,9),(block,8)), false, 22).
holds(1, in_tower((block,9),(block,9)), false, 22).
holds(1, on((block,1)), puzzle_room_table_left, 22).
holds(1, on((block,2)), puzzle_room_table_right, 22).
holds(1, on((block,3)), (block,1), 22).
holds(1, on((block,4)), nothing, 22).
holds(1, on((block,5)), nothing, 22).
holds(1, on((block,6)), nothing, 22).
holds(1, on((block,7)), puzzle_room_table_middle, 22).
holds(1, on((block,8)), nothing, 22).
holds(1, on((block,9)), (block,7), 22).
holds(1, tower_base((block,1),puzzle_room_table), true, 22).
holds(1, tower_base((block,2),puzzle_room_table), true, 22).
holds(1, tower_base((block,3),puzzle_room_table), false, 22).
holds(1, tower_base((block,4),puzzle_room_table), false, 22).
holds(1, tower_base((block,5),puzzle_room_table), false, 22).
holds(1, tower_base((block,6),puzzle_room_table), false, 22).
holds(1, tower_base((block,7),puzzle_room_table), true, 22).
holds(1, tower_base((block,8),puzzle_room_table), false, 22).
holds(1, tower_base((block,9),puzzle_room_table), false, 22).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 22).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 22).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 22).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 22).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 22).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 22).
holds(1, unordered_tower((block,7),puzzle_room_table), true, 22).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 22).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 22).
holds(2, complete_tower(blue,puzzle_room_table), false, 22).
holds(2, complete_tower(red,puzzle_room_table), false, 22).
holds(2, complete_tower(yellow,puzzle_room_table), false, 22).
holds(2, configuration(manipulator_arm_1), extended, 22).
holds(2, configuration(manipulator_arm_2), retracted, 22).
holds(2, configuration(puzzle_room_door), open, 22).
holds(2, configuration(starting_room_door), closed, 22).
holds(2, configuration(store_room_door), open, 22).
holds(2, grasping(manipulator_arm_1), (block,6), 22).
holds(2, grasping(manipulator_arm_2), nothing, 22).
holds(2, in((block,1)), puzzle_room, 22).
holds(2, in((block,2)), puzzle_room, 22).
holds(2, in((block,3)), puzzle_room, 22).
holds(2, in((block,4)), store_room, 22).
holds(2, in((block,5)), store_room, 22).
holds(2, in((block,6)), store_room, 22).
holds(2, in((block,7)), puzzle_room, 22).
holds(2, in((block,8)), store_room, 22).
holds(2, in((block,9)), puzzle_room, 22).
holds(2, in(manipulator_arm_1), store_room, 22).
holds(2, in(manipulator_arm_2), store_room, 22).
holds(2, in(puzzle_room_table), puzzle_room, 22).
holds(2, in(talos), store_room, 22).
holds(2, in_tower((block,1),(block,1)), true, 22).
holds(2, in_tower((block,1),(block,2)), false, 22).
holds(2, in_tower((block,1),(block,3)), true, 22).
holds(2, in_tower((block,1),(block,4)), false, 22).
holds(2, in_tower((block,1),(block,5)), false, 22).
holds(2, in_tower((block,1),(block,6)), false, 22).
holds(2, in_tower((block,1),(block,7)), false, 22).
holds(2, in_tower((block,1),(block,8)), false, 22).
holds(2, in_tower((block,1),(block,9)), false, 22).
holds(2, in_tower((block,2),(block,1)), false, 22).
holds(2, in_tower((block,2),(block,2)), true, 22).
holds(2, in_tower((block,2),(block,3)), false, 22).
holds(2, in_tower((block,2),(block,4)), false, 22).
holds(2, in_tower((block,2),(block,5)), false, 22).
holds(2, in_tower((block,2),(block,6)), false, 22).
holds(2, in_tower((block,2),(block,7)), false, 22).
holds(2, in_tower((block,2),(block,8)), false, 22).
holds(2, in_tower((block,2),(block,9)), false, 22).
holds(2, in_tower((block,3),(block,1)), false, 22).
holds(2, in_tower((block,3),(block,2)), false, 22).
holds(2, in_tower((block,3),(block,3)), false, 22).
holds(2, in_tower((block,3),(block,4)), false, 22).
holds(2, in_tower((block,3),(block,5)), false, 22).
holds(2, in_tower((block,3),(block,6)), false, 22).
holds(2, in_tower((block,3),(block,7)), false, 22).
holds(2, in_tower((block,3),(block,8)), false, 22).
holds(2, in_tower((block,3),(block,9)), false, 22).
holds(2, in_tower((block,4),(block,1)), false, 22).
holds(2, in_tower((block,4),(block,2)), false, 22).
holds(2, in_tower((block,4),(block,3)), false, 22).
holds(2, in_tower((block,4),(block,4)), false, 22).
holds(2, in_tower((block,4),(block,5)), false, 22).
holds(2, in_tower((block,4),(block,6)), false, 22).
holds(2, in_tower((block,4),(block,7)), false, 22).
holds(2, in_tower((block,4),(block,8)), false, 22).
holds(2, in_tower((block,4),(block,9)), false, 22).
holds(2, in_tower((block,5),(block,1)), false, 22).
holds(2, in_tower((block,5),(block,2)), false, 22).
holds(2, in_tower((block,5),(block,3)), false, 22).
holds(2, in_tower((block,5),(block,4)), false, 22).
holds(2, in_tower((block,5),(block,5)), false, 22).
holds(2, in_tower((block,5),(block,6)), false, 22).
holds(2, in_tower((block,5),(block,7)), false, 22).
holds(2, in_tower((block,5),(block,8)), false, 22).
holds(2, in_tower((block,5),(block,9)), false, 22).
holds(2, in_tower((block,6),(block,1)), false, 22).
holds(2, in_tower((block,6),(block,2)), false, 22).
holds(2, in_tower((block,6),(block,3)), false, 22).
holds(2, in_tower((block,6),(block,4)), false, 22).
holds(2, in_tower((block,6),(block,5)), false, 22).
holds(2, in_tower((block,6),(block,6)), false, 22).
holds(2, in_tower((block,6),(block,7)), false, 22).
holds(2, in_tower((block,6),(block,8)), false, 22).
holds(2, in_tower((block,6),(block,9)), false, 22).
holds(2, in_tower((block,7),(block,1)), false, 22).
holds(2, in_tower((block,7),(block,2)), false, 22).
holds(2, in_tower((block,7),(block,3)), false, 22).
holds(2, in_tower((block,7),(block,4)), false, 22).
holds(2, in_tower((block,7),(block,5)), false, 22).
holds(2, in_tower((block,7),(block,6)), false, 22).
holds(2, in_tower((block,7),(block,7)), true, 22).
holds(2, in_tower((block,7),(block,8)), false, 22).
holds(2, in_tower((block,7),(block,9)), true, 22).
holds(2, in_tower((block,8),(block,1)), false, 22).
holds(2, in_tower((block,8),(block,2)), false, 22).
holds(2, in_tower((block,8),(block,3)), false, 22).
holds(2, in_tower((block,8),(block,4)), false, 22).
holds(2, in_tower((block,8),(block,5)), false, 22).
holds(2, in_tower((block,8),(block,6)), false, 22).
holds(2, in_tower((block,8),(block,7)), false, 22).
holds(2, in_tower((block,8),(block,8)), false, 22).
holds(2, in_tower((block,8),(block,9)), false, 22).
holds(2, in_tower((block,9),(block,1)), false, 22).
holds(2, in_tower((block,9),(block,2)), false, 22).
holds(2, in_tower((block,9),(block,3)), false, 22).
holds(2, in_tower((block,9),(block,4)), false, 22).
holds(2, in_tower((block,9),(block,5)), false, 22).
holds(2, in_tower((block,9),(block,6)), false, 22).
holds(2, in_tower((block,9),(block,7)), false, 22).
holds(2, in_tower((block,9),(block,8)), false, 22).
holds(2, in_tower((block,9),(block,9)), false, 22).
holds(2, on((block,1)), puzzle_room_table, 22).
holds(2, on((block,2)), puzzle_room_table, 22).
holds(2, on((block,3)), (block,1), 22).
holds(2, on((block,4)), nothing, 22).
holds(2, on((block,5)), nothing, 22).
holds(2, on((block,6)), nothing, 22).
holds(2, on((block,7)), puzzle_room_table, 22).
holds(2, on((block,8)), nothing, 22).
holds(2, on((block,9)), (block,7), 22).
holds(2, tower_base((block,1),puzzle_room_table), true, 22).
holds(2, tower_base((block,2),puzzle_room_table), true, 22).
holds(2, tower_base((block,3),puzzle_room_table), false, 22).
holds(2, tower_base((block,4),puzzle_room_table), false, 22).
holds(2, tower_base((block,5),puzzle_room_table), false, 22).
holds(2, tower_base((block,6),puzzle_room_table), false, 22).
holds(2, tower_base((block,7),puzzle_room_table), true, 22).
holds(2, tower_base((block,8),puzzle_room_table), false, 22).
holds(2, tower_base((block,9),puzzle_room_table), false, 22).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 22).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 22).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 22).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 22).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 22).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 22).
holds(2, unordered_tower((block,7),puzzle_room_table), true, 22).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 22).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 22).

[14-04-2022_17-53-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[14-04-2022_17-53-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-53-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[14-04-2022_17-53-18] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=34']

[14-04-2022_17-53-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 13})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 14})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,8))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,8)', 'I': 15})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 16})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 17})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 18})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 19})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,6),puzzle_room_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'I': 20})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 21})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'I': 22})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 23})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 24})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'I': 25})

[14-04-2022_17-53-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-53-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 13 rules into program part base:

sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 13).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 14).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,8)), grasping(manipulator_arm_2), (block,8), 15).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 16).
sub_goal(2, talos, move(hallway), in(talos), hallway, 17).
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 18).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 19).
sub_goal(2, talos, put(manipulator_arm_1,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 20).
sub_goal(2, talos, release(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), nothing, 21).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 22).
sub_goal(2, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 23).
sub_goal(2, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 24).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), (block,2), 25).

[14-04-2022_17-53-18] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-53-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[14-04-2022_17-53-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=34']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A2866FDCA0>]
	incrementor = SolveIncrementor(step_start=22, step_increase=1, step_increase_initial=13, step_end_min=35, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1743.930551700004, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 22), range_=None), IncPart(name='plan_module', args=('#inc', 22, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 22, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 22, 13, 25, 'sequential', 'false'), range_=None)]

[14-04-2022_17-53-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-53-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-53-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-53-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1282 rules

[14-04-2022_17-53-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006641099999797007s

[14-04-2022_17-53-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[14-04-2022_17-53-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[14-04-2022_17-53-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.041170s.

[14-04-2022_17-53-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007082s with result Satisfiable.

[14-04-2022_17-53-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[14-04-2022_17-53-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A287439E50>

[14-04-2022_17-53-18] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 22)
	('last_sgoals', 25)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('first_sgoals', 13)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A287439E50>)

[14-04-2022_17-53-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 22). %* None *%
#program plan_module(#inc, 22, false, false). %* None *%
#program optimisation_module(#inc, 22, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 22, 13, 25, sequential, false). %* None *%

[14-04-2022_17-53-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     21 : Current =     34
Incrementor step ends | Minimum  =     35 : Maximum =    300

[14-04-2022_17-53-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(34)]), ('state_module', [Number(22), Number(22)]), ('plan_module', [Number(22), Number(22), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(22), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(22), Number(13), Number(25), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(23), Number(22)]), ('plan_module', [Number(23), Number(22), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(22), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('conformance_module', [Number(23), Number(22), Number(13), Number(25), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(24), Number(22)]), ('plan_module', [Number(24), Number(22), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(22), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(22), Number(13), Number(25), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(25), Number(22)]), ('plan_module', [Number(25), Number(22), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(22), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(22), Number(13), Number(25), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(26), Number(22)]), ('plan_module', [Number(26), Number(22), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(22), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(22), Number(13), Number(25), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(27), Number(22)]), ('plan_module', [Number(27), Number(22), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(22), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('conformance_module', [Number(27), Number(22), Number(13), Number(25), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(28), Number(22)]), ('plan_module', [Number(28), Number(22), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(22), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('conformance_module', [Number(28), Number(22), Number(13), Number(25), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(29), Number(22)]), ('plan_module', [Number(29), Number(22), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(22), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(22), Number(13), Number(25), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(30), Number(22)]), ('plan_module', [Number(30), Number(22), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(22), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(22), Number(13), Number(25), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(31), Number(22)]), ('plan_module', [Number(31), Number(22), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(31), Number(22), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('conformance_module', [Number(31), Number(22), Number(13), Number(25), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(32), Number(22)]), ('plan_module', [Number(32), Number(22), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(32), Number(22), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('conformance_module', [Number(32), Number(22), Number(13), Number(25), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(33), Number(22)]), ('plan_module', [Number(33), Number(22), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(33), Number(22), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('conformance_module', [Number(33), Number(22), Number(13), Number(25), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(34), Number(22)]), ('plan_module', [Number(34), Number(22), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(34), Number(22), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(34)]), ('action_preconditions', [Number(34)]), ('variable_relations', [Number(34)]), ('abstraction_mappings', [Number(34)]), ('conformance_module', [Number(34), Number(22), Number(13), Number(25), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.808820s.

[14-04-2022_17-53-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.958750s with result Satisfiable.

[14-04-2022_17-53-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.767570199999682, Incremental time limit = None
Running cumulative time = 2.767570199999682, Cumulative time limit = 1743.930551700004
Used memory = (RSS = 2107.167969Mb, VMS = 2116.890625Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.808820s, Solving = 0.958750s, Total = 2.767570s, Memory = (RSS = 2107.167969Mb, VMS = 2116.890625Mb), Step range = [22-34]), Calls = 1
Final Model :: Total atoms = 15522, Cost = (-4,), Optimality proven = False, Number = 4, Thread ID = 2, Model type = ModelType.StableModel

[14-04-2022_17-53-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     34 : Current =     35
Incrementor step ends | Minimum  =     35 : Maximum =    300

[14-04-2022_17-53-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(35)]), ('state_module', [Number(35), Number(22)]), ('plan_module', [Number(35), Number(22), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(35), Number(22), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(35)]), ('action_preconditions', [Number(35)]), ('variable_relations', [Number(35)]), ('abstraction_mappings', [Number(35)]), ('conformance_module', [Number(35), Number(22), Number(13), Number(25), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.231174s.

[14-04-2022_17-53-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.047903s with result Unsatisfiable.

[14-04-2022_17-53-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2790774999994028, Incremental time limit = None
Running cumulative time = 3.0466476999990846, Cumulative time limit = 1743.930551700004
Used memory = (RSS = 2112.441406Mb, VMS = 2125.558594Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     35 : Current =     36
Incrementor step ends | Minimum  =     35 : Maximum =    300

[14-04-2022_17-53-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(36)]), ('state_module', [Number(36), Number(22)]), ('plan_module', [Number(36), Number(22), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(36), Number(22), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('conformance_module', [Number(36), Number(22), Number(13), Number(25), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.225843s.

[14-04-2022_17-53-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.051820s with result Unsatisfiable.

[14-04-2022_17-53-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2776631999995516, Incremental time limit = None
Running cumulative time = 3.324310899998636, Cumulative time limit = 1743.930551700004
Used memory = (RSS = 2115.085938Mb, VMS = 2126.089844Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     36 : Current =     37
Incrementor step ends | Minimum  =     35 : Maximum =    300

[14-04-2022_17-53-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(37)]), ('state_module', [Number(37), Number(22)]), ('plan_module', [Number(37), Number(22), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(37), Number(22), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(37)]), ('action_preconditions', [Number(37)]), ('variable_relations', [Number(37)]), ('abstraction_mappings', [Number(37)]), ('conformance_module', [Number(37), Number(22), Number(13), Number(25), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.230274s.

[14-04-2022_17-53-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.057093s with result Unsatisfiable.

[14-04-2022_17-53-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.28736660000140546, Incremental time limit = None
Running cumulative time = 3.6116775000000416, Cumulative time limit = 1743.930551700004
Used memory = (RSS = 2117.460938Mb, VMS = 2126.621094Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     37 : Current =     38
Incrementor step ends | Minimum  =     35 : Maximum =    300

[14-04-2022_17-53-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(38)]), ('state_module', [Number(38), Number(22)]), ('plan_module', [Number(38), Number(22), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(38), Number(22), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('conformance_module', [Number(38), Number(22), Number(13), Number(25), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.235454s.

[14-04-2022_17-53-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.060201s with result Unsatisfiable.

[14-04-2022_17-53-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.29565460000048915, Incremental time limit = None
Running cumulative time = 3.9073321000005308, Cumulative time limit = 1743.930551700004
Used memory = (RSS = 2119.992188Mb, VMS = 2127.156250Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     38 : Current =     39
Incrementor step ends | Minimum  =     35 : Maximum =    300

[14-04-2022_17-53-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(39)]), ('state_module', [Number(39), Number(22)]), ('plan_module', [Number(39), Number(22), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(39), Number(22), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(39)]), ('action_preconditions', [Number(39)]), ('variable_relations', [Number(39)]), ('abstraction_mappings', [Number(39)]), ('conformance_module', [Number(39), Number(22), Number(13), Number(25), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.239717s.

[14-04-2022_17-53-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.067176s with result Unsatisfiable.

[14-04-2022_17-53-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.30689239999992424, Incremental time limit = None
Running cumulative time = 4.214224500000455, Cumulative time limit = 1743.930551700004
Used memory = (RSS = 2122.445312Mb, VMS = 2128.386719Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     39 : Current =     40
Incrementor step ends | Minimum  =     35 : Maximum =    300

[14-04-2022_17-53-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(40)]), ('state_module', [Number(40), Number(22)]), ('plan_module', [Number(40), Number(22), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(40), Number(22), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(40)]), ('action_preconditions', [Number(40)]), ('variable_relations', [Number(40)]), ('abstraction_mappings', [Number(40)]), ('conformance_module', [Number(40), Number(22), Number(13), Number(25), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.246593s.

[14-04-2022_17-53-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.080929s with result Unsatisfiable.

[14-04-2022_17-53-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.32752239999990707, Incremental time limit = None
Running cumulative time = 4.541746900000362, Cumulative time limit = 1743.930551700004
Used memory = (RSS = 2131.300781Mb, VMS = 2155.125000Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     40 : Current =     41
Incrementor step ends | Minimum  =     35 : Maximum =    300

[14-04-2022_17-53-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(41)]), ('state_module', [Number(41), Number(22)]), ('plan_module', [Number(41), Number(22), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(41), Number(22), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(41)]), ('action_preconditions', [Number(41)]), ('variable_relations', [Number(41)]), ('abstraction_mappings', [Number(41)]), ('conformance_module', [Number(41), Number(22), Number(13), Number(25), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.249579s.

[14-04-2022_17-53-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.113519s with result Unsatisfiable.

[14-04-2022_17-53-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.36309779999919556, Incremental time limit = None
Running cumulative time = 4.904844699999558, Cumulative time limit = 1743.930551700004
Used memory = (RSS = 2134.222656Mb, VMS = 2155.652344Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     41 : Current =     42
Incrementor step ends | Minimum  =     35 : Maximum =    300

[14-04-2022_17-53-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(42)]), ('state_module', [Number(42), Number(22)]), ('plan_module', [Number(42), Number(22), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(42), Number(22), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('conformance_module', [Number(42), Number(22), Number(13), Number(25), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.254499s.

[14-04-2022_17-53-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.211020s with result Satisfiable.

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.46551929999986896, Incremental time limit = None
Running cumulative time = 5.370363999999427, Cumulative time limit = 1743.930551700004
Used memory = (RSS = 2144.308594Mb, VMS = 2163.445312Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.721952s, Solving = 1.648412s, Total = 5.370364s, Memory = (RSS = 2144.308594Mb, VMS = 2163.445312Mb), Step range = [22-42]), Calls = 9
Final Model :: Total atoms = 21425, Cost = (-2,), Optimality proven = False, Number = 2, Thread ID = 0, Model type = ModelType.StableModel

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 1.808820s, Solving = 0.958750s, Total = 2.767570s, Memory = (RSS = 2107.167969Mb, VMS = 2116.890625Mb), Step range = [22-34]
2 : Statistics :: Grounding = 0.231174s, Solving = 0.047903s, Total = 0.279077s, Memory = (RSS = 2112.441406Mb, VMS = 2125.558594Mb), Step range = [35-35]
3 : Statistics :: Grounding = 0.225843s, Solving = 0.051820s, Total = 0.277663s, Memory = (RSS = 2115.085938Mb, VMS = 2126.089844Mb), Step range = [36-36]
4 : Statistics :: Grounding = 0.230274s, Solving = 0.057093s, Total = 0.287367s, Memory = (RSS = 2117.460938Mb, VMS = 2126.621094Mb), Step range = [37-37]
5 : Statistics :: Grounding = 0.235454s, Solving = 0.060201s, Total = 0.295655s, Memory = (RSS = 2119.992188Mb, VMS = 2127.156250Mb), Step range = [38-38]
6 : Statistics :: Grounding = 0.239717s, Solving = 0.067176s, Total = 0.306892s, Memory = (RSS = 2122.445312Mb, VMS = 2128.386719Mb), Step range = [39-39]
7 : Statistics :: Grounding = 0.246593s, Solving = 0.080929s, Total = 0.327522s, Memory = (RSS = 2131.300781Mb, VMS = 2155.125000Mb), Step range = [40-40]
8 : Statistics :: Grounding = 0.249579s, Solving = 0.113519s, Total = 0.363098s, Memory = (RSS = 2134.222656Mb, VMS = 2155.652344Mb), Step range = [41-41]
9 : Statistics :: Grounding = 0.254499s, Solving = 0.211020s, Total = 0.465519s, Memory = (RSS = 2144.308594Mb, VMS = 2163.445312Mb), Step range = [42-42]

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 5.370364s due to: Stop condition reached.

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[14-04-2022_17-53-24] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 8, 16: 8, 17: 8, 18: 9, 19: 9, 20: 9, 21: 9, 22: 10, 23: 11, 24: 12, 25: 13, 26: 13, 27: 14, 28: 15, 29: 16, 30: 17, 31: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 14, 8: 17, 9: 21, 10: 22, 11: 23, 12: 24, 13: 26, 14: 27, 15: 28, 16: 29, 17: 31}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-53-24] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 25}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 27, 15: 28, 16: 29, 17: 30, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 42}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 8, 16: 8, 17: 8, 18: 9, 19: 9, 20: 9, 21: 9, 22: 10, 23: 11, 24: 12, 25: 13, 26: 13, 27: 14, 28: 15, 29: 16, 30: 17, 31: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 14, 8: 17, 9: 21, 10: 22, 11: 23, 12: 24, 13: 26, 14: 27, 15: 28, 16: 29, 17: 31}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-53-24] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 25, Last requested goal index = 25, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[14-04-2022_17-53-24] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.721952s, Solving = 1.648412s, Total = 5.370364s, Memory = (RSS = 2144.308594Mb, VMS = 2163.445312Mb), Step range = [22-42]), Calls = 9
Model :: Total atoms = 21425, Cost = (-2,), Optimality proven = False, Number = 2, Thread ID = 0, Model type = ModelType.StableModel

[14-04-2022_17-53-24] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 20 :: Actions = 20                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 22:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 23:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 24:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,8)))
Step 25:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_2,(block,8))
Step 26:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 27:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 28:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Planned actions:
        talos : move((store_room,1))
Step 29:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : move((hallway,0))
Step 30:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 31:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 33:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 34:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 35:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 36:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 37:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 38:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 39:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 40:
    Current Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 41:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 42:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))

[14-04-2022_17-53-24] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[14-04-2022_17-53-24] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[14-04-2022_17-53-24] DEBUG :: ASH Planner Main #1 >> Monolevel problem 2 at level 1 solved.

[14-04-2022_17-53-24] DEBUG :: ASH Planner Main #1 >> Online planning increment 2 finished.

[14-04-2022_17-53-24] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 17 : Goals achieved = 17 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 1 : Total constraining sub-goal stages = 31 : Goals achieved = 10 : Goals unachieved = 21 : Complete = False
Level = 1 : Solved problems = 2 : Total constraining sub-goal stages = 25 : Goals achieved = 25 : Goals unachieved = 0 : Complete = False

[14-04-2022_17-53-24] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 2, Highest = 2.

[14-04-2022_17-53-24] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 3 by method ground-first is [1-2].

[14-04-2022_17-53-24] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning problem 2 at level 2:
Total Templated Partial Problems = 3, Problem Range = [1-3], Size = 31, Sub-goal Stage Range = [1-31]
Division points [total=2] : [(Index = 10, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 20, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[14-04-2022_17-53-24] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [11-20]

[14-04-2022_17-53-24] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 25, chosen step range to extract = range(0, 26)

[14-04-2022_17-53-24] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 25, Total actions = 25, Produced sub-goal stages = 25, Produced sub-goal literals = 25
Level [1]: Length = 42, Total actions = 42, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-24] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 31, chosen step range to extract = range(0, 32)

[14-04-2022_17-53-24] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 25, Total actions = 25, Produced sub-goal stages = 25, Produced sub-goal literals = 25
Level [1]: Length = 42, Total actions = 42, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-24] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[14-04-2022_17-53-24] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 25, Total actions = 25, Produced sub-goal stages = 25, Produced sub-goal literals = 25
Level [1]: Length = 42, Total actions = 42, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-24] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [11-20], problem number = 2, increment number = 3

[14-04-2022_17-53-24] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 11)
	('last_sgoals', 20)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1750.0073392000013)
	('length_limit', 300)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[14-04-2022_17-53-24] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 2] partial conformance refinement (sequential) with sgoals range [11-20] : Concurrency disabled : Minimum search length bound enabled with value 34

[14-04-2022_17-53-24] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 11
last_sgoals = 20
start_step = 25
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 34

[14-04-2022_17-53-24] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[14-04-2022_17-53-24] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[14-04-2022_17-53-24] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[14-04-2022_17-53-24] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[14-04-2022_17-53-24] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-53-24] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 25 as problem start state.

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 25})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 25})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 25})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 25})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 25})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'S': 25})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,8)', 'S': 25})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 25})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 25})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 25})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 25})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 25})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 25})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 25})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'puzzle_room', 'S': 25})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 25})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 25})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 25})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 25})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 25})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 25})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 25})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 25})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 25})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 25})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 25})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 25})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 25})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 25})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 25})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 25})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 25})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 25})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 25})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'S': 25})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,8)', 'S': 25})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 25})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 25})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 25})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 25})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 25})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 25})
Fluent({'L': 3, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 25})
Fluent({'L': 3, 'F': 'in((block,8))', 'V': 'puzzle_room', 'S': 25})
Fluent({'L': 3, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 25})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 25})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 25})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 25})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 25})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 25})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 25})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 25})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 25})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 25})
Fluent({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 25})
Fluent({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'S': 25})
Fluent({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 25})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 25})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 25})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 25})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 25})
Fluent({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 25})
Fluent({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 25})
Fluent({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 25})

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 257 rules into program part ash_initial_state:

holds(2, complete_tower(blue,puzzle_room_table), false, 25).
holds(2, complete_tower(red,puzzle_room_table), false, 25).
holds(2, complete_tower(yellow,puzzle_room_table), false, 25).
holds(2, configuration(manipulator_arm_1), extended, 25).
holds(2, configuration(manipulator_arm_2), retracted, 25).
holds(2, configuration(puzzle_room_door), open, 25).
holds(2, configuration(starting_room_door), closed, 25).
holds(2, configuration(store_room_door), open, 25).
holds(2, grasping(manipulator_arm_1), (block,2), 25).
holds(2, grasping(manipulator_arm_2), (block,8), 25).
holds(2, in((block,1)), puzzle_room, 25).
holds(2, in((block,2)), puzzle_room, 25).
holds(2, in((block,3)), puzzle_room, 25).
holds(2, in((block,4)), store_room, 25).
holds(2, in((block,5)), store_room, 25).
holds(2, in((block,6)), puzzle_room, 25).
holds(2, in((block,7)), puzzle_room, 25).
holds(2, in((block,8)), puzzle_room, 25).
holds(2, in((block,9)), puzzle_room, 25).
holds(2, in(manipulator_arm_1), puzzle_room, 25).
holds(2, in(manipulator_arm_2), puzzle_room, 25).
holds(2, in(puzzle_room_table), puzzle_room, 25).
holds(2, in(talos), puzzle_room, 25).
holds(2, in_tower((block,1),(block,1)), true, 25).
holds(2, in_tower((block,1),(block,2)), false, 25).
holds(2, in_tower((block,1),(block,3)), false, 25).
holds(2, in_tower((block,1),(block,4)), false, 25).
holds(2, in_tower((block,1),(block,5)), false, 25).
holds(2, in_tower((block,1),(block,6)), false, 25).
holds(2, in_tower((block,1),(block,7)), false, 25).
holds(2, in_tower((block,1),(block,8)), false, 25).
holds(2, in_tower((block,1),(block,9)), false, 25).
holds(2, in_tower((block,2),(block,1)), false, 25).
holds(2, in_tower((block,2),(block,2)), true, 25).
holds(2, in_tower((block,2),(block,3)), false, 25).
holds(2, in_tower((block,2),(block,4)), false, 25).
holds(2, in_tower((block,2),(block,5)), false, 25).
holds(2, in_tower((block,2),(block,6)), false, 25).
holds(2, in_tower((block,2),(block,7)), false, 25).
holds(2, in_tower((block,2),(block,8)), false, 25).
holds(2, in_tower((block,2),(block,9)), false, 25).
holds(2, in_tower((block,3),(block,1)), false, 25).
holds(2, in_tower((block,3),(block,2)), false, 25).
holds(2, in_tower((block,3),(block,3)), true, 25).
holds(2, in_tower((block,3),(block,4)), false, 25).
holds(2, in_tower((block,3),(block,5)), false, 25).
holds(2, in_tower((block,3),(block,6)), false, 25).
holds(2, in_tower((block,3),(block,7)), false, 25).
holds(2, in_tower((block,3),(block,8)), false, 25).
holds(2, in_tower((block,3),(block,9)), false, 25).
holds(2, in_tower((block,4),(block,1)), false, 25).
holds(2, in_tower((block,4),(block,2)), false, 25).
holds(2, in_tower((block,4),(block,3)), false, 25).
holds(2, in_tower((block,4),(block,4)), false, 25).
holds(2, in_tower((block,4),(block,5)), false, 25).
holds(2, in_tower((block,4),(block,6)), false, 25).
holds(2, in_tower((block,4),(block,7)), false, 25).
holds(2, in_tower((block,4),(block,8)), false, 25).
holds(2, in_tower((block,4),(block,9)), false, 25).
holds(2, in_tower((block,5),(block,1)), false, 25).
holds(2, in_tower((block,5),(block,2)), false, 25).
holds(2, in_tower((block,5),(block,3)), false, 25).
holds(2, in_tower((block,5),(block,4)), false, 25).
holds(2, in_tower((block,5),(block,5)), false, 25).
holds(2, in_tower((block,5),(block,6)), false, 25).
holds(2, in_tower((block,5),(block,7)), false, 25).
holds(2, in_tower((block,5),(block,8)), false, 25).
holds(2, in_tower((block,5),(block,9)), false, 25).
holds(2, in_tower((block,6),(block,1)), false, 25).
holds(2, in_tower((block,6),(block,2)), false, 25).
holds(2, in_tower((block,6),(block,3)), false, 25).
holds(2, in_tower((block,6),(block,4)), false, 25).
holds(2, in_tower((block,6),(block,5)), false, 25).
holds(2, in_tower((block,6),(block,6)), true, 25).
holds(2, in_tower((block,6),(block,7)), false, 25).
holds(2, in_tower((block,6),(block,8)), false, 25).
holds(2, in_tower((block,6),(block,9)), false, 25).
holds(2, in_tower((block,7),(block,1)), false, 25).
holds(2, in_tower((block,7),(block,2)), false, 25).
holds(2, in_tower((block,7),(block,3)), false, 25).
holds(2, in_tower((block,7),(block,4)), false, 25).
holds(2, in_tower((block,7),(block,5)), false, 25).
holds(2, in_tower((block,7),(block,6)), false, 25).
holds(2, in_tower((block,7),(block,7)), true, 25).
holds(2, in_tower((block,7),(block,8)), false, 25).
holds(2, in_tower((block,7),(block,9)), true, 25).
holds(2, in_tower((block,8),(block,1)), false, 25).
holds(2, in_tower((block,8),(block,2)), false, 25).
holds(2, in_tower((block,8),(block,3)), false, 25).
holds(2, in_tower((block,8),(block,4)), false, 25).
holds(2, in_tower((block,8),(block,5)), false, 25).
holds(2, in_tower((block,8),(block,6)), false, 25).
holds(2, in_tower((block,8),(block,7)), false, 25).
holds(2, in_tower((block,8),(block,8)), false, 25).
holds(2, in_tower((block,8),(block,9)), false, 25).
holds(2, in_tower((block,9),(block,1)), false, 25).
holds(2, in_tower((block,9),(block,2)), false, 25).
holds(2, in_tower((block,9),(block,3)), false, 25).
holds(2, in_tower((block,9),(block,4)), false, 25).
holds(2, in_tower((block,9),(block,5)), false, 25).
holds(2, in_tower((block,9),(block,6)), false, 25).
holds(2, in_tower((block,9),(block,7)), false, 25).
holds(2, in_tower((block,9),(block,8)), false, 25).
holds(2, in_tower((block,9),(block,9)), false, 25).
holds(2, on((block,1)), puzzle_room_table, 25).
holds(2, on((block,2)), puzzle_room_table, 25).
holds(2, on((block,3)), puzzle_room_table, 25).
holds(2, on((block,4)), nothing, 25).
holds(2, on((block,5)), nothing, 25).
holds(2, on((block,6)), puzzle_room_table, 25).
holds(2, on((block,7)), puzzle_room_table, 25).
holds(2, on((block,8)), nothing, 25).
holds(2, on((block,9)), (block,7), 25).
holds(2, tower_base((block,1),puzzle_room_table), true, 25).
holds(2, tower_base((block,2),puzzle_room_table), true, 25).
holds(2, tower_base((block,3),puzzle_room_table), true, 25).
holds(2, tower_base((block,4),puzzle_room_table), false, 25).
holds(2, tower_base((block,5),puzzle_room_table), false, 25).
holds(2, tower_base((block,6),puzzle_room_table), true, 25).
holds(2, tower_base((block,7),puzzle_room_table), true, 25).
holds(2, tower_base((block,8),puzzle_room_table), false, 25).
holds(2, tower_base((block,9),puzzle_room_table), false, 25).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 25).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 25).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 25).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 25).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 25).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 25).
holds(2, unordered_tower((block,7),puzzle_room_table), true, 25).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 25).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 25).
holds(3, complete_tower(blue,puzzle_room_table), false, 25).
holds(3, complete_tower(red,puzzle_room_table), false, 25).
holds(3, complete_tower(yellow,puzzle_room_table), false, 25).
holds(3, grasping(manipulator_arm_1), (block,2), 25).
holds(3, grasping(manipulator_arm_2), (block,8), 25).
holds(3, in((block,1)), puzzle_room, 25).
holds(3, in((block,2)), puzzle_room, 25).
holds(3, in((block,3)), puzzle_room, 25).
holds(3, in((block,4)), store_room, 25).
holds(3, in((block,5)), store_room, 25).
holds(3, in((block,6)), puzzle_room, 25).
holds(3, in((block,7)), puzzle_room, 25).
holds(3, in((block,8)), puzzle_room, 25).
holds(3, in((block,9)), puzzle_room, 25).
holds(3, in(manipulator_arm_1), puzzle_room, 25).
holds(3, in(manipulator_arm_2), puzzle_room, 25).
holds(3, in(puzzle_room_table), puzzle_room, 25).
holds(3, in(talos), puzzle_room, 25).
holds(3, in_tower((block,1),(block,1)), true, 25).
holds(3, in_tower((block,1),(block,2)), false, 25).
holds(3, in_tower((block,1),(block,3)), false, 25).
holds(3, in_tower((block,1),(block,4)), false, 25).
holds(3, in_tower((block,1),(block,5)), false, 25).
holds(3, in_tower((block,1),(block,6)), false, 25).
holds(3, in_tower((block,1),(block,7)), false, 25).
holds(3, in_tower((block,1),(block,8)), false, 25).
holds(3, in_tower((block,1),(block,9)), false, 25).
holds(3, in_tower((block,2),(block,1)), false, 25).
holds(3, in_tower((block,2),(block,2)), true, 25).
holds(3, in_tower((block,2),(block,3)), false, 25).
holds(3, in_tower((block,2),(block,4)), false, 25).
holds(3, in_tower((block,2),(block,5)), false, 25).
holds(3, in_tower((block,2),(block,6)), false, 25).
holds(3, in_tower((block,2),(block,7)), false, 25).
holds(3, in_tower((block,2),(block,8)), false, 25).
holds(3, in_tower((block,2),(block,9)), false, 25).
holds(3, in_tower((block,3),(block,1)), false, 25).
holds(3, in_tower((block,3),(block,2)), false, 25).
holds(3, in_tower((block,3),(block,3)), true, 25).
holds(3, in_tower((block,3),(block,4)), false, 25).
holds(3, in_tower((block,3),(block,5)), false, 25).
holds(3, in_tower((block,3),(block,6)), false, 25).
holds(3, in_tower((block,3),(block,7)), false, 25).
holds(3, in_tower((block,3),(block,8)), false, 25).
holds(3, in_tower((block,3),(block,9)), false, 25).
holds(3, in_tower((block,4),(block,1)), false, 25).
holds(3, in_tower((block,4),(block,2)), false, 25).
holds(3, in_tower((block,4),(block,3)), false, 25).
holds(3, in_tower((block,4),(block,4)), false, 25).
holds(3, in_tower((block,4),(block,5)), false, 25).
holds(3, in_tower((block,4),(block,6)), false, 25).
holds(3, in_tower((block,4),(block,7)), false, 25).
holds(3, in_tower((block,4),(block,8)), false, 25).
holds(3, in_tower((block,4),(block,9)), false, 25).
holds(3, in_tower((block,5),(block,1)), false, 25).
holds(3, in_tower((block,5),(block,2)), false, 25).
holds(3, in_tower((block,5),(block,3)), false, 25).
holds(3, in_tower((block,5),(block,4)), false, 25).
holds(3, in_tower((block,5),(block,5)), false, 25).
holds(3, in_tower((block,5),(block,6)), false, 25).
holds(3, in_tower((block,5),(block,7)), false, 25).
holds(3, in_tower((block,5),(block,8)), false, 25).
holds(3, in_tower((block,5),(block,9)), false, 25).
holds(3, in_tower((block,6),(block,1)), false, 25).
holds(3, in_tower((block,6),(block,2)), false, 25).
holds(3, in_tower((block,6),(block,3)), false, 25).
holds(3, in_tower((block,6),(block,4)), false, 25).
holds(3, in_tower((block,6),(block,5)), false, 25).
holds(3, in_tower((block,6),(block,6)), true, 25).
holds(3, in_tower((block,6),(block,7)), false, 25).
holds(3, in_tower((block,6),(block,8)), false, 25).
holds(3, in_tower((block,6),(block,9)), false, 25).
holds(3, in_tower((block,7),(block,1)), false, 25).
holds(3, in_tower((block,7),(block,2)), false, 25).
holds(3, in_tower((block,7),(block,3)), false, 25).
holds(3, in_tower((block,7),(block,4)), false, 25).
holds(3, in_tower((block,7),(block,5)), false, 25).
holds(3, in_tower((block,7),(block,6)), false, 25).
holds(3, in_tower((block,7),(block,7)), true, 25).
holds(3, in_tower((block,7),(block,8)), false, 25).
holds(3, in_tower((block,7),(block,9)), true, 25).
holds(3, in_tower((block,8),(block,1)), false, 25).
holds(3, in_tower((block,8),(block,2)), false, 25).
holds(3, in_tower((block,8),(block,3)), false, 25).
holds(3, in_tower((block,8),(block,4)), false, 25).
holds(3, in_tower((block,8),(block,5)), false, 25).
holds(3, in_tower((block,8),(block,6)), false, 25).
holds(3, in_tower((block,8),(block,7)), false, 25).
holds(3, in_tower((block,8),(block,8)), false, 25).
holds(3, in_tower((block,8),(block,9)), false, 25).
holds(3, in_tower((block,9),(block,1)), false, 25).
holds(3, in_tower((block,9),(block,2)), false, 25).
holds(3, in_tower((block,9),(block,3)), false, 25).
holds(3, in_tower((block,9),(block,4)), false, 25).
holds(3, in_tower((block,9),(block,5)), false, 25).
holds(3, in_tower((block,9),(block,6)), false, 25).
holds(3, in_tower((block,9),(block,7)), false, 25).
holds(3, in_tower((block,9),(block,8)), false, 25).
holds(3, in_tower((block,9),(block,9)), false, 25).
holds(3, on((block,1)), puzzle_room_table, 25).
holds(3, on((block,2)), puzzle_room_table, 25).
holds(3, on((block,3)), puzzle_room_table, 25).
holds(3, on((block,4)), nothing, 25).
holds(3, on((block,5)), nothing, 25).
holds(3, on((block,6)), puzzle_room_table, 25).
holds(3, on((block,7)), puzzle_room_table, 25).
holds(3, on((block,8)), nothing, 25).
holds(3, on((block,9)), (block,7), 25).
holds(3, tower_base((block,1),puzzle_room_table), true, 25).
holds(3, tower_base((block,2),puzzle_room_table), true, 25).
holds(3, tower_base((block,3),puzzle_room_table), true, 25).
holds(3, tower_base((block,4),puzzle_room_table), false, 25).
holds(3, tower_base((block,5),puzzle_room_table), false, 25).
holds(3, tower_base((block,6),puzzle_room_table), true, 25).
holds(3, tower_base((block,7),puzzle_room_table), true, 25).
holds(3, tower_base((block,8),puzzle_room_table), false, 25).
holds(3, tower_base((block,9),puzzle_room_table), false, 25).
holds(3, unordered_tower((block,1),puzzle_room_table), false, 25).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 25).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 25).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 25).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 25).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 25).
holds(3, unordered_tower((block,7),puzzle_room_table), true, 25).
holds(3, unordered_tower((block,8),puzzle_room_table), false, 25).
holds(3, unordered_tower((block,9),puzzle_room_table), false, 25).

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 588 rules into program part ash_goal_state:

final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(3, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,1),(block,7)), false, true).
final_goal(3, in_tower((block,1),(block,7)), true, false).
final_goal(3, in_tower((block,1),(block,8)), false, true).
final_goal(3, in_tower((block,1),(block,8)), true, false).
final_goal(3, in_tower((block,1),(block,9)), false, true).
final_goal(3, in_tower((block,1),(block,9)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,7)), false, true).
final_goal(3, in_tower((block,2),(block,7)), true, false).
final_goal(3, in_tower((block,2),(block,8)), false, true).
final_goal(3, in_tower((block,2),(block,8)), true, false).
final_goal(3, in_tower((block,2),(block,9)), false, true).
final_goal(3, in_tower((block,2),(block,9)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,7)), false, true).
final_goal(3, in_tower((block,3),(block,7)), true, false).
final_goal(3, in_tower((block,3),(block,8)), false, true).
final_goal(3, in_tower((block,3),(block,8)), true, false).
final_goal(3, in_tower((block,3),(block,9)), false, true).
final_goal(3, in_tower((block,3),(block,9)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,7)), false, true).
final_goal(3, in_tower((block,4),(block,7)), true, false).
final_goal(3, in_tower((block,4),(block,8)), false, true).
final_goal(3, in_tower((block,4),(block,8)), true, false).
final_goal(3, in_tower((block,4),(block,9)), false, true).
final_goal(3, in_tower((block,4),(block,9)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,7)), false, true).
final_goal(3, in_tower((block,5),(block,7)), true, false).
final_goal(3, in_tower((block,5),(block,8)), false, true).
final_goal(3, in_tower((block,5),(block,8)), true, false).
final_goal(3, in_tower((block,5),(block,9)), false, true).
final_goal(3, in_tower((block,5),(block,9)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, in_tower((block,6),(block,7)), false, true).
final_goal(3, in_tower((block,6),(block,7)), true, false).
final_goal(3, in_tower((block,6),(block,8)), false, true).
final_goal(3, in_tower((block,6),(block,8)), true, false).
final_goal(3, in_tower((block,6),(block,9)), false, true).
final_goal(3, in_tower((block,6),(block,9)), true, false).
final_goal(3, in_tower((block,7),(block,1)), false, true).
final_goal(3, in_tower((block,7),(block,1)), true, false).
final_goal(3, in_tower((block,7),(block,2)), false, true).
final_goal(3, in_tower((block,7),(block,2)), true, false).
final_goal(3, in_tower((block,7),(block,3)), false, true).
final_goal(3, in_tower((block,7),(block,3)), true, false).
final_goal(3, in_tower((block,7),(block,4)), false, true).
final_goal(3, in_tower((block,7),(block,4)), true, false).
final_goal(3, in_tower((block,7),(block,5)), false, true).
final_goal(3, in_tower((block,7),(block,5)), true, false).
final_goal(3, in_tower((block,7),(block,6)), false, true).
final_goal(3, in_tower((block,7),(block,6)), true, false).
final_goal(3, in_tower((block,7),(block,7)), false, true).
final_goal(3, in_tower((block,7),(block,7)), true, false).
final_goal(3, in_tower((block,7),(block,8)), false, true).
final_goal(3, in_tower((block,7),(block,8)), true, false).
final_goal(3, in_tower((block,7),(block,9)), false, true).
final_goal(3, in_tower((block,7),(block,9)), true, false).
final_goal(3, in_tower((block,8),(block,1)), false, true).
final_goal(3, in_tower((block,8),(block,1)), true, false).
final_goal(3, in_tower((block,8),(block,2)), false, true).
final_goal(3, in_tower((block,8),(block,2)), true, false).
final_goal(3, in_tower((block,8),(block,3)), false, true).
final_goal(3, in_tower((block,8),(block,3)), true, false).
final_goal(3, in_tower((block,8),(block,4)), false, true).
final_goal(3, in_tower((block,8),(block,4)), true, false).
final_goal(3, in_tower((block,8),(block,5)), false, true).
final_goal(3, in_tower((block,8),(block,5)), true, false).
final_goal(3, in_tower((block,8),(block,6)), false, true).
final_goal(3, in_tower((block,8),(block,6)), true, false).
final_goal(3, in_tower((block,8),(block,7)), false, true).
final_goal(3, in_tower((block,8),(block,7)), true, false).
final_goal(3, in_tower((block,8),(block,8)), false, true).
final_goal(3, in_tower((block,8),(block,8)), true, false).
final_goal(3, in_tower((block,8),(block,9)), false, true).
final_goal(3, in_tower((block,8),(block,9)), true, false).
final_goal(3, in_tower((block,9),(block,1)), false, true).
final_goal(3, in_tower((block,9),(block,1)), true, false).
final_goal(3, in_tower((block,9),(block,2)), false, true).
final_goal(3, in_tower((block,9),(block,2)), true, false).
final_goal(3, in_tower((block,9),(block,3)), false, true).
final_goal(3, in_tower((block,9),(block,3)), true, false).
final_goal(3, in_tower((block,9),(block,4)), false, true).
final_goal(3, in_tower((block,9),(block,4)), true, false).
final_goal(3, in_tower((block,9),(block,5)), false, true).
final_goal(3, in_tower((block,9),(block,5)), true, false).
final_goal(3, in_tower((block,9),(block,6)), false, true).
final_goal(3, in_tower((block,9),(block,6)), true, false).
final_goal(3, in_tower((block,9),(block,7)), false, false).
final_goal(3, in_tower((block,9),(block,7)), true, true).
final_goal(3, in_tower((block,9),(block,8)), false, false).
final_goal(3, in_tower((block,9),(block,8)), true, true).
final_goal(3, in_tower((block,9),(block,9)), false, false).
final_goal(3, in_tower((block,9),(block,9)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), (block,7), false).
final_goal(3, on((block,1)), (block,8), false).
final_goal(3, on((block,1)), (block,9), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), (block,7), false).
final_goal(3, on((block,2)), (block,8), false).
final_goal(3, on((block,2)), (block,9), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), (block,7), false).
final_goal(3, on((block,3)), (block,8), false).
final_goal(3, on((block,3)), (block,9), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), (block,7), false).
final_goal(3, on((block,4)), (block,8), false).
final_goal(3, on((block,4)), (block,9), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), (block,7), false).
final_goal(3, on((block,5)), (block,8), false).
final_goal(3, on((block,5)), (block,9), false).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), (block,7), false).
final_goal(3, on((block,6)), (block,8), false).
final_goal(3, on((block,6)), (block,9), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, on((block,7)), (block,1), false).
final_goal(3, on((block,7)), (block,2), false).
final_goal(3, on((block,7)), (block,3), false).
final_goal(3, on((block,7)), (block,4), false).
final_goal(3, on((block,7)), (block,5), false).
final_goal(3, on((block,7)), (block,6), false).
final_goal(3, on((block,7)), (block,8), true).
final_goal(3, on((block,7)), (block,9), false).
final_goal(3, on((block,7)), nothing, false).
final_goal(3, on((block,7)), puzzle_room_table, false).
final_goal(3, on((block,8)), (block,1), false).
final_goal(3, on((block,8)), (block,2), false).
final_goal(3, on((block,8)), (block,3), false).
final_goal(3, on((block,8)), (block,4), false).
final_goal(3, on((block,8)), (block,5), false).
final_goal(3, on((block,8)), (block,6), false).
final_goal(3, on((block,8)), (block,7), false).
final_goal(3, on((block,8)), (block,9), true).
final_goal(3, on((block,8)), nothing, false).
final_goal(3, on((block,8)), puzzle_room_table, false).
final_goal(3, on((block,9)), (block,1), false).
final_goal(3, on((block,9)), (block,2), false).
final_goal(3, on((block,9)), (block,3), false).
final_goal(3, on((block,9)), (block,4), false).
final_goal(3, on((block,9)), (block,5), false).
final_goal(3, on((block,9)), (block,6), false).
final_goal(3, on((block,9)), (block,7), false).
final_goal(3, on((block,9)), (block,8), false).
final_goal(3, on((block,9)), nothing, false).
final_goal(3, on((block,9)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, tower_base((block,7),puzzle_room_table), false, true).
final_goal(3, tower_base((block,7),puzzle_room_table), true, false).
final_goal(3, tower_base((block,8),puzzle_room_table), false, true).
final_goal(3, tower_base((block,8),puzzle_room_table), true, false).
final_goal(3, tower_base((block,9),puzzle_room_table), false, false).
final_goal(3, tower_base((block,9),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,9),puzzle_room_table), true, false).

[14-04-2022_17-53-24] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=34']

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 11})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 12})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,1))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,1)', 'I': 13})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 14})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,1))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 15})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,9))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,9)', 'I': 16})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,9),puzzle_room_table)', 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'I': 17})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,9))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 18})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,7))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,7)', 'I': 19})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,8),(block,9))', 'F': 'on((block,8))', 'V': '(block,9)', 'I': 20})

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 10 rules into program part base:

sub_goal(3, talos, put(manipulator_arm_1,(block,2),(block,3)), on((block,2)), (block,3), 11).
sub_goal(3, talos, release(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), nothing, 12).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,1)), grasping(manipulator_arm_1), (block,1), 13).
sub_goal(3, talos, put(manipulator_arm_1,(block,1),(block,2)), on((block,1)), (block,2), 14).
sub_goal(3, talos, release(manipulator_arm_1,(block,1)), grasping(manipulator_arm_1), nothing, 15).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,9)), grasping(manipulator_arm_1), (block,9), 16).
sub_goal(3, talos, put(manipulator_arm_1,(block,9),puzzle_room_table), on((block,9)), puzzle_room_table, 17).
sub_goal(3, talos, release(manipulator_arm_1,(block,9)), grasping(manipulator_arm_1), nothing, 18).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,7)), grasping(manipulator_arm_1), (block,7), 19).
sub_goal(3, talos, put(manipulator_arm_2,(block,8),(block,9)), on((block,8)), (block,9), 20).

[14-04-2022_17-53-24] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=34']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A28766C1F0>]
	incrementor = SolveIncrementor(step_start=25, step_increase=1, step_increase_initial=10, step_end_min=35, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1750.0073392000013, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 25), range_=None), IncPart(name='plan_module', args=('#inc', 25, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 25, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 25, 11, 20, 'sequential', 'false'), range_=None)]

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1245 rules

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006620099999963713s

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.034512s.

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006537s with result Satisfiable.

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A287344F90>

[14-04-2022_17-53-24] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 2)
	('start_step', 25)
	('last_sgoals', 20)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('first_sgoals', 11)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A287344F90>)

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 25). %* None *%
#program plan_module(#inc, 25, false, false). %* None *%
#program optimisation_module(#inc, 25, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 25, 11, 20, sequential, false). %* None *%

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     24 : Current =     34
Incrementor step ends | Minimum  =     35 : Maximum =    300

[14-04-2022_17-53-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(34)]), ('state_module', [Number(25), Number(25)]), ('plan_module', [Number(25), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(25), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(26), Number(25)]), ('plan_module', [Number(26), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(25), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(27), Number(25)]), ('plan_module', [Number(27), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('conformance_module', [Number(27), Number(25), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(28), Number(25)]), ('plan_module', [Number(28), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('conformance_module', [Number(28), Number(25), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(29), Number(25)]), ('plan_module', [Number(29), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(25), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(30), Number(25)]), ('plan_module', [Number(30), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(25), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(31), Number(25)]), ('plan_module', [Number(31), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(31), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('conformance_module', [Number(31), Number(25), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(32), Number(25)]), ('plan_module', [Number(32), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(32), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('conformance_module', [Number(32), Number(25), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(33), Number(25)]), ('plan_module', [Number(33), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(33), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('conformance_module', [Number(33), Number(25), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(34), Number(25)]), ('plan_module', [Number(34), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(34), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(34)]), ('action_preconditions', [Number(34)]), ('variable_relations', [Number(34)]), ('abstraction_mappings', [Number(34)]), ('conformance_module', [Number(34), Number(25), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.792503s.

[14-04-2022_17-53-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 3.240932s with result Satisfiable.

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 4.033435199999985, Incremental time limit = None
Running cumulative time = 4.033435199999985, Cumulative time limit = 1750.0073392000013
Used memory = (RSS = 2090.378906Mb, VMS = 2095.835938Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 9
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.792503s, Solving = 3.240932s, Total = 4.033435s, Memory = (RSS = 2090.378906Mb, VMS = 2095.835938Mb), Step range = [25-34]), Calls = 1
Final Model :: Total atoms = 11786, Cost = (-9,), Optimality proven = False, Number = 8, Thread ID = 2, Model type = ModelType.StableModel

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     34 : Current =     35
Incrementor step ends | Minimum  =     35 : Maximum =    300

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(35)]), ('state_module', [Number(35), Number(25)]), ('plan_module', [Number(35), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(35), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(35)]), ('action_preconditions', [Number(35)]), ('variable_relations', [Number(35)]), ('abstraction_mappings', [Number(35)]), ('conformance_module', [Number(35), Number(25), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.144771s.

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.030956s with result Unsatisfiable.

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.17572649999965506, Incremental time limit = None
Running cumulative time = 4.20916169999964, Cumulative time limit = 1750.0073392000013
Used memory = (RSS = 2092.109375Mb, VMS = 2098.718750Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     35 : Current =     36
Incrementor step ends | Minimum  =     35 : Maximum =    300

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(36)]), ('state_module', [Number(36), Number(25)]), ('plan_module', [Number(36), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(36), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('conformance_module', [Number(36), Number(25), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.146922s.

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.052074s with result Satisfiable.

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.19899590000022727, Incremental time limit = None
Running cumulative time = 4.408157599999868, Cumulative time limit = 1750.0073392000013
Used memory = (RSS = 2094.695312Mb, VMS = 2100.152344Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 10
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.084196s, Solving = 3.323961s, Total = 4.408158s, Memory = (RSS = 2094.695312Mb, VMS = 2100.152344Mb), Step range = [25-36]), Calls = 3
Final Model :: Total atoms = 13090, Cost = (-4,), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.792503s, Solving = 3.240932s, Total = 4.033435s, Memory = (RSS = 2090.378906Mb, VMS = 2095.835938Mb), Step range = [25-34]
2 : Statistics :: Grounding = 0.144771s, Solving = 0.030956s, Total = 0.175726s, Memory = (RSS = 2092.109375Mb, VMS = 2098.718750Mb), Step range = [35-35]
3 : Statistics :: Grounding = 0.146922s, Solving = 0.052074s, Total = 0.198996s, Memory = (RSS = 2094.695312Mb, VMS = 2100.152344Mb), Step range = [36-36]

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 4.408158s due to: Stop condition reached.

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[14-04-2022_17-53-29] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 25}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 27, 15: 28, 16: 29, 17: 30, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 42}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 8, 16: 8, 17: 8, 18: 9, 19: 9, 20: 9, 21: 9, 22: 10, 23: 11, 24: 12, 25: 13, 26: 13, 27: 14, 28: 15, 29: 16, 30: 17, 31: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 14, 8: 17, 9: 21, 10: 22, 11: 23, 12: 24, 13: 26, 14: 27, 15: 28, 16: 29, 17: 31}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-53-29] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 25}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 27, 15: 28, 16: 29, 17: 30, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 42}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 16, 33: 17, 34: 18, 35: 19, 36: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 27, 12: 28, 13: 29, 14: 30, 15: 31, 16: 32, 17: 33, 18: 34, 19: 35, 20: 36}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 8, 16: 8, 17: 8, 18: 9, 19: 9, 20: 9, 21: 9, 22: 10, 23: 11, 24: 12, 25: 13, 26: 13, 27: 14, 28: 15, 29: 16, 30: 17, 31: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 14, 8: 17, 9: 21, 10: 22, 11: 23, 12: 24, 13: 26, 14: 27, 15: 28, 16: 29, 17: 31}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-53-29] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 20, Last requested goal index = 20, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[14-04-2022_17-53-29] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.084196s, Solving = 3.323961s, Total = 4.408158s, Memory = (RSS = 2094.695312Mb, VMS = 2100.152344Mb), Step range = [25-36]), Calls = 3
Model :: Total atoms = 13090, Cost = (-4,), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[14-04-2022_17-53-29] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 11 :: Actions = 11                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,puzzle_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,puzzle_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 11:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 12:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,8))
Step 16:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 17:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 18:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 19:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 20:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 21:
    Current Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 22:
    Current Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
Step 23:
    Current Sub-goals:
        [Index = 8] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 8] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
Step 24:
    Current Sub-goals:
        [Index = 9] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 9] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,3))
Step 25:
    Current Sub-goals:
        [Index = 10] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 10] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,2))
Step 26:
    Current Sub-goals:
        [Index = 11] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 27:
    Current Sub-goals:
        [Index = 11] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 11] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_arm_1,(block,2),(block,3))
Step 28:
    Current Sub-goals:
        [Index = 12] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 12] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,2))
Step 29:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,1))
Step 30:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_arm_1,(block,1),(block,2))
Step 31:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,1))
Step 32:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Achieved Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,9))
Step 33:
    Current Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,9),puzzle_room_table)
Step 34:
    Current Sub-goals:
        [Index = 18] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 18] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,9))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : grasp(manipulator_arm_1,(block,7)) -> grasping(manipulator_arm_1) = (block,7)
    Achieved Sub-goals:
        [Index = 19] talos : grasp(manipulator_arm_1,(block,7)) -> grasping(manipulator_arm_1) = (block,7)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,7))
Step 36:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Planned actions:
        talos : put(manipulator_arm_2,(block,8),(block,9))

[14-04-2022_17-53-29] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=25, end_step=None

[14-04-2022_17-53-29] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for parts of the existing plan at the current level that have already been divided: start_step=25

[14-04-2022_17-53-29] DEBUG :: ASH Planner Main #1 >> Value of end step of abstract plan to divide adjusted for right blend of current problem: end_step=36

[14-04-2022_17-53-29] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=25

[14-04-2022_17-53-29] DEBUG :: ASH Planner Main #1 >> Preparing to invoke division strategy...

[14-04-2022_17-53-29] DEBUG :: ASH Planner Main #1 >> Online method OnlineMethod.GroundFirst chose to invoke the division strategy before a downwards level change:Current increment = 3, Current planning level is complete = False

[14-04-2022_17-53-29] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 36, chosen step range to extract = range(25, 37)

[14-04-2022_17-53-29] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 36, Total actions = 36, Produced sub-goal stages = 36, Produced sub-goal literals = 36
Level [1]: Length = 42, Total actions = 42, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-29] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =  11, AC =  11, CF = 1.0, GT =   4.47s, ST =   4.99s, OT = 0.00s, TT =   9.46s, EF = (LE = 1.1, AC = 1.1), ED = (LE = 0.3, AC = 0.3), EB = (LE = 0.3, AC = 0.3)

[14-04-2022_17-53-29] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=11, start_step=25, blend=Blend(left=0, right=0)

[14-04-2022_17-53-29] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=1, small_group_size=5, large_group_size=6

[14-04-2022_17-53-29] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=30, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[14-04-2022_17-53-29] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 2, Problem Range = [3-4], Size = 11, Sub-goal Stage Range = [26-36]
Division points [total=1] : [(Index = 30, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[14-04-2022_17-53-29] DEBUG :: ASH Planner Main #1 >> Monolevel problem 2 at level 2 solved.

[14-04-2022_17-53-29] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 3 at level 1:
Total Templated Partial Problems = 2, Problem Range = [3-4], Size = 11, Sub-goal Stage Range = [26-36]
Division points [total=1] : [(Index = 30, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[14-04-2022_17-53-29] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [26-30]

[14-04-2022_17-53-29] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 42, chosen step range to extract = range(0, 43)

[14-04-2022_17-53-29] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 36, Total actions = 36, Produced sub-goal stages = 36, Produced sub-goal literals = 36
Level [1]: Length = 42, Total actions = 42, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-29] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 36, chosen step range to extract = range(0, 37)

[14-04-2022_17-53-29] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 36, Total actions = 36, Produced sub-goal stages = 36, Produced sub-goal literals = 36
Level [1]: Length = 42, Total actions = 42, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-29] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 31, chosen step range to extract = range(0, 32)

[14-04-2022_17-53-29] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 36, Total actions = 36, Produced sub-goal stages = 36, Produced sub-goal literals = 36
Level [1]: Length = 42, Total actions = 42, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-29] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[14-04-2022_17-53-29] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 36, Total actions = 36, Produced sub-goal stages = 36, Produced sub-goal literals = 36
Level [1]: Length = 42, Total actions = 42, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-29] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [26-30], problem number = 3, increment number = 3

[14-04-2022_17-53-29] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 26)
	('last_sgoals', 30)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1734.1520301000046)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[14-04-2022_17-53-29] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [26-30] : Concurrency disabled : Minimum search length bound enabled with value 46

[14-04-2022_17-53-29] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 26
last_sgoals = 30
start_step = 42
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 46

[14-04-2022_17-53-29] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[14-04-2022_17-53-29] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[14-04-2022_17-53-29] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[14-04-2022_17-53-29] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[14-04-2022_17-53-29] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-53-29] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 42 as problem start state.

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,2))', 'S': 42})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,8))', 'S': 42})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 42})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 42})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 42})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 42})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 42})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'S': 42})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,8)', 'S': 42})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,2)', 'S': 42})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,8)', 'S': 42})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 42})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 42})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 42})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 42})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 42})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 42})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 42})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 42})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 42})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'S': 42})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 42})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 42})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 42})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 42})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 42})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 42})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'S': 42})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,8)', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 42})

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 42).
holds(1, complete_tower(red,puzzle_room_table), false, 42).
holds(1, complete_tower(yellow,puzzle_room_table), false, 42).
holds(1, configuration(manipulator_end_1), aligned_with((block,2)), 42).
holds(1, configuration(manipulator_end_2), aligned_with((block,8)), 42).
holds(1, configuration(manipulator_limb_1), extended, 42).
holds(1, configuration(manipulator_limb_2), retracted, 42).
holds(1, configuration(puzzle_room_door), open, 42).
holds(1, configuration(starting_room_door), closed, 42).
holds(1, configuration(store_room_door), open, 42).
holds(1, grasping(manipulator_arm_1), (block,2), 42).
holds(1, grasping(manipulator_arm_2), (block,8), 42).
holds(1, grasping(manipulator_end_1), (block,2), 42).
holds(1, grasping(manipulator_end_2), (block,8), 42).
holds(1, in((block,1)), (puzzle_room,1), 42).
holds(1, in((block,2)), (puzzle_room,1), 42).
holds(1, in((block,3)), (puzzle_room,1), 42).
holds(1, in((block,4)), (store_room,0), 42).
holds(1, in((block,5)), (store_room,0), 42).
holds(1, in((block,6)), (puzzle_room,1), 42).
holds(1, in((block,7)), (puzzle_room,1), 42).
holds(1, in((block,8)), (puzzle_room,1), 42).
holds(1, in((block,9)), (puzzle_room,1), 42).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 42).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 42).
holds(1, in(manipulator_end_1), (puzzle_room,1), 42).
holds(1, in(manipulator_end_2), (puzzle_room,1), 42).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 42).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 42).
holds(1, in(puzzle_room_table), (puzzle_room,1), 42).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 42).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 42).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 42).
holds(1, in(talos), (puzzle_room,1), 42).
holds(1, in_tower((block,1),(block,1)), true, 42).
holds(1, in_tower((block,1),(block,2)), false, 42).
holds(1, in_tower((block,1),(block,3)), false, 42).
holds(1, in_tower((block,1),(block,4)), false, 42).
holds(1, in_tower((block,1),(block,5)), false, 42).
holds(1, in_tower((block,1),(block,6)), false, 42).
holds(1, in_tower((block,1),(block,7)), false, 42).
holds(1, in_tower((block,1),(block,8)), false, 42).
holds(1, in_tower((block,1),(block,9)), false, 42).
holds(1, in_tower((block,2),(block,1)), false, 42).
holds(1, in_tower((block,2),(block,2)), true, 42).
holds(1, in_tower((block,2),(block,3)), false, 42).
holds(1, in_tower((block,2),(block,4)), false, 42).
holds(1, in_tower((block,2),(block,5)), false, 42).
holds(1, in_tower((block,2),(block,6)), false, 42).
holds(1, in_tower((block,2),(block,7)), false, 42).
holds(1, in_tower((block,2),(block,8)), false, 42).
holds(1, in_tower((block,2),(block,9)), false, 42).
holds(1, in_tower((block,3),(block,1)), false, 42).
holds(1, in_tower((block,3),(block,2)), false, 42).
holds(1, in_tower((block,3),(block,3)), true, 42).
holds(1, in_tower((block,3),(block,4)), false, 42).
holds(1, in_tower((block,3),(block,5)), false, 42).
holds(1, in_tower((block,3),(block,6)), false, 42).
holds(1, in_tower((block,3),(block,7)), false, 42).
holds(1, in_tower((block,3),(block,8)), false, 42).
holds(1, in_tower((block,3),(block,9)), false, 42).
holds(1, in_tower((block,4),(block,1)), false, 42).
holds(1, in_tower((block,4),(block,2)), false, 42).
holds(1, in_tower((block,4),(block,3)), false, 42).
holds(1, in_tower((block,4),(block,4)), false, 42).
holds(1, in_tower((block,4),(block,5)), false, 42).
holds(1, in_tower((block,4),(block,6)), false, 42).
holds(1, in_tower((block,4),(block,7)), false, 42).
holds(1, in_tower((block,4),(block,8)), false, 42).
holds(1, in_tower((block,4),(block,9)), false, 42).
holds(1, in_tower((block,5),(block,1)), false, 42).
holds(1, in_tower((block,5),(block,2)), false, 42).
holds(1, in_tower((block,5),(block,3)), false, 42).
holds(1, in_tower((block,5),(block,4)), false, 42).
holds(1, in_tower((block,5),(block,5)), false, 42).
holds(1, in_tower((block,5),(block,6)), false, 42).
holds(1, in_tower((block,5),(block,7)), false, 42).
holds(1, in_tower((block,5),(block,8)), false, 42).
holds(1, in_tower((block,5),(block,9)), false, 42).
holds(1, in_tower((block,6),(block,1)), false, 42).
holds(1, in_tower((block,6),(block,2)), false, 42).
holds(1, in_tower((block,6),(block,3)), false, 42).
holds(1, in_tower((block,6),(block,4)), false, 42).
holds(1, in_tower((block,6),(block,5)), false, 42).
holds(1, in_tower((block,6),(block,6)), true, 42).
holds(1, in_tower((block,6),(block,7)), false, 42).
holds(1, in_tower((block,6),(block,8)), false, 42).
holds(1, in_tower((block,6),(block,9)), false, 42).
holds(1, in_tower((block,7),(block,1)), false, 42).
holds(1, in_tower((block,7),(block,2)), false, 42).
holds(1, in_tower((block,7),(block,3)), false, 42).
holds(1, in_tower((block,7),(block,4)), false, 42).
holds(1, in_tower((block,7),(block,5)), false, 42).
holds(1, in_tower((block,7),(block,6)), false, 42).
holds(1, in_tower((block,7),(block,7)), true, 42).
holds(1, in_tower((block,7),(block,8)), false, 42).
holds(1, in_tower((block,7),(block,9)), true, 42).
holds(1, in_tower((block,8),(block,1)), false, 42).
holds(1, in_tower((block,8),(block,2)), false, 42).
holds(1, in_tower((block,8),(block,3)), false, 42).
holds(1, in_tower((block,8),(block,4)), false, 42).
holds(1, in_tower((block,8),(block,5)), false, 42).
holds(1, in_tower((block,8),(block,6)), false, 42).
holds(1, in_tower((block,8),(block,7)), false, 42).
holds(1, in_tower((block,8),(block,8)), false, 42).
holds(1, in_tower((block,8),(block,9)), false, 42).
holds(1, in_tower((block,9),(block,1)), false, 42).
holds(1, in_tower((block,9),(block,2)), false, 42).
holds(1, in_tower((block,9),(block,3)), false, 42).
holds(1, in_tower((block,9),(block,4)), false, 42).
holds(1, in_tower((block,9),(block,5)), false, 42).
holds(1, in_tower((block,9),(block,6)), false, 42).
holds(1, in_tower((block,9),(block,7)), false, 42).
holds(1, in_tower((block,9),(block,8)), false, 42).
holds(1, in_tower((block,9),(block,9)), false, 42).
holds(1, on((block,1)), puzzle_room_table_left, 42).
holds(1, on((block,2)), puzzle_room_table_right, 42).
holds(1, on((block,3)), puzzle_room_table_left, 42).
holds(1, on((block,4)), nothing, 42).
holds(1, on((block,5)), nothing, 42).
holds(1, on((block,6)), puzzle_room_table_right, 42).
holds(1, on((block,7)), puzzle_room_table_middle, 42).
holds(1, on((block,8)), nothing, 42).
holds(1, on((block,9)), (block,7), 42).
holds(1, tower_base((block,1),puzzle_room_table), true, 42).
holds(1, tower_base((block,2),puzzle_room_table), true, 42).
holds(1, tower_base((block,3),puzzle_room_table), true, 42).
holds(1, tower_base((block,4),puzzle_room_table), false, 42).
holds(1, tower_base((block,5),puzzle_room_table), false, 42).
holds(1, tower_base((block,6),puzzle_room_table), true, 42).
holds(1, tower_base((block,7),puzzle_room_table), true, 42).
holds(1, tower_base((block,8),puzzle_room_table), false, 42).
holds(1, tower_base((block,9),puzzle_room_table), false, 42).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 42).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 42).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 42).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 42).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 42).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 42).
holds(1, unordered_tower((block,7),puzzle_room_table), true, 42).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 42).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 42).
holds(2, complete_tower(blue,puzzle_room_table), false, 42).
holds(2, complete_tower(red,puzzle_room_table), false, 42).
holds(2, complete_tower(yellow,puzzle_room_table), false, 42).
holds(2, configuration(manipulator_arm_1), extended, 42).
holds(2, configuration(manipulator_arm_2), retracted, 42).
holds(2, configuration(puzzle_room_door), open, 42).
holds(2, configuration(starting_room_door), closed, 42).
holds(2, configuration(store_room_door), open, 42).
holds(2, grasping(manipulator_arm_1), (block,2), 42).
holds(2, grasping(manipulator_arm_2), (block,8), 42).
holds(2, in((block,1)), puzzle_room, 42).
holds(2, in((block,2)), puzzle_room, 42).
holds(2, in((block,3)), puzzle_room, 42).
holds(2, in((block,4)), store_room, 42).
holds(2, in((block,5)), store_room, 42).
holds(2, in((block,6)), puzzle_room, 42).
holds(2, in((block,7)), puzzle_room, 42).
holds(2, in((block,8)), puzzle_room, 42).
holds(2, in((block,9)), puzzle_room, 42).
holds(2, in(manipulator_arm_1), puzzle_room, 42).
holds(2, in(manipulator_arm_2), puzzle_room, 42).
holds(2, in(puzzle_room_table), puzzle_room, 42).
holds(2, in(talos), puzzle_room, 42).
holds(2, in_tower((block,1),(block,1)), true, 42).
holds(2, in_tower((block,1),(block,2)), false, 42).
holds(2, in_tower((block,1),(block,3)), false, 42).
holds(2, in_tower((block,1),(block,4)), false, 42).
holds(2, in_tower((block,1),(block,5)), false, 42).
holds(2, in_tower((block,1),(block,6)), false, 42).
holds(2, in_tower((block,1),(block,7)), false, 42).
holds(2, in_tower((block,1),(block,8)), false, 42).
holds(2, in_tower((block,1),(block,9)), false, 42).
holds(2, in_tower((block,2),(block,1)), false, 42).
holds(2, in_tower((block,2),(block,2)), true, 42).
holds(2, in_tower((block,2),(block,3)), false, 42).
holds(2, in_tower((block,2),(block,4)), false, 42).
holds(2, in_tower((block,2),(block,5)), false, 42).
holds(2, in_tower((block,2),(block,6)), false, 42).
holds(2, in_tower((block,2),(block,7)), false, 42).
holds(2, in_tower((block,2),(block,8)), false, 42).
holds(2, in_tower((block,2),(block,9)), false, 42).
holds(2, in_tower((block,3),(block,1)), false, 42).
holds(2, in_tower((block,3),(block,2)), false, 42).
holds(2, in_tower((block,3),(block,3)), true, 42).
holds(2, in_tower((block,3),(block,4)), false, 42).
holds(2, in_tower((block,3),(block,5)), false, 42).
holds(2, in_tower((block,3),(block,6)), false, 42).
holds(2, in_tower((block,3),(block,7)), false, 42).
holds(2, in_tower((block,3),(block,8)), false, 42).
holds(2, in_tower((block,3),(block,9)), false, 42).
holds(2, in_tower((block,4),(block,1)), false, 42).
holds(2, in_tower((block,4),(block,2)), false, 42).
holds(2, in_tower((block,4),(block,3)), false, 42).
holds(2, in_tower((block,4),(block,4)), false, 42).
holds(2, in_tower((block,4),(block,5)), false, 42).
holds(2, in_tower((block,4),(block,6)), false, 42).
holds(2, in_tower((block,4),(block,7)), false, 42).
holds(2, in_tower((block,4),(block,8)), false, 42).
holds(2, in_tower((block,4),(block,9)), false, 42).
holds(2, in_tower((block,5),(block,1)), false, 42).
holds(2, in_tower((block,5),(block,2)), false, 42).
holds(2, in_tower((block,5),(block,3)), false, 42).
holds(2, in_tower((block,5),(block,4)), false, 42).
holds(2, in_tower((block,5),(block,5)), false, 42).
holds(2, in_tower((block,5),(block,6)), false, 42).
holds(2, in_tower((block,5),(block,7)), false, 42).
holds(2, in_tower((block,5),(block,8)), false, 42).
holds(2, in_tower((block,5),(block,9)), false, 42).
holds(2, in_tower((block,6),(block,1)), false, 42).
holds(2, in_tower((block,6),(block,2)), false, 42).
holds(2, in_tower((block,6),(block,3)), false, 42).
holds(2, in_tower((block,6),(block,4)), false, 42).
holds(2, in_tower((block,6),(block,5)), false, 42).
holds(2, in_tower((block,6),(block,6)), true, 42).
holds(2, in_tower((block,6),(block,7)), false, 42).
holds(2, in_tower((block,6),(block,8)), false, 42).
holds(2, in_tower((block,6),(block,9)), false, 42).
holds(2, in_tower((block,7),(block,1)), false, 42).
holds(2, in_tower((block,7),(block,2)), false, 42).
holds(2, in_tower((block,7),(block,3)), false, 42).
holds(2, in_tower((block,7),(block,4)), false, 42).
holds(2, in_tower((block,7),(block,5)), false, 42).
holds(2, in_tower((block,7),(block,6)), false, 42).
holds(2, in_tower((block,7),(block,7)), true, 42).
holds(2, in_tower((block,7),(block,8)), false, 42).
holds(2, in_tower((block,7),(block,9)), true, 42).
holds(2, in_tower((block,8),(block,1)), false, 42).
holds(2, in_tower((block,8),(block,2)), false, 42).
holds(2, in_tower((block,8),(block,3)), false, 42).
holds(2, in_tower((block,8),(block,4)), false, 42).
holds(2, in_tower((block,8),(block,5)), false, 42).
holds(2, in_tower((block,8),(block,6)), false, 42).
holds(2, in_tower((block,8),(block,7)), false, 42).
holds(2, in_tower((block,8),(block,8)), false, 42).
holds(2, in_tower((block,8),(block,9)), false, 42).
holds(2, in_tower((block,9),(block,1)), false, 42).
holds(2, in_tower((block,9),(block,2)), false, 42).
holds(2, in_tower((block,9),(block,3)), false, 42).
holds(2, in_tower((block,9),(block,4)), false, 42).
holds(2, in_tower((block,9),(block,5)), false, 42).
holds(2, in_tower((block,9),(block,6)), false, 42).
holds(2, in_tower((block,9),(block,7)), false, 42).
holds(2, in_tower((block,9),(block,8)), false, 42).
holds(2, in_tower((block,9),(block,9)), false, 42).
holds(2, on((block,1)), puzzle_room_table, 42).
holds(2, on((block,2)), puzzle_room_table, 42).
holds(2, on((block,3)), puzzle_room_table, 42).
holds(2, on((block,4)), nothing, 42).
holds(2, on((block,5)), nothing, 42).
holds(2, on((block,6)), puzzle_room_table, 42).
holds(2, on((block,7)), puzzle_room_table, 42).
holds(2, on((block,8)), nothing, 42).
holds(2, on((block,9)), (block,7), 42).
holds(2, tower_base((block,1),puzzle_room_table), true, 42).
holds(2, tower_base((block,2),puzzle_room_table), true, 42).
holds(2, tower_base((block,3),puzzle_room_table), true, 42).
holds(2, tower_base((block,4),puzzle_room_table), false, 42).
holds(2, tower_base((block,5),puzzle_room_table), false, 42).
holds(2, tower_base((block,6),puzzle_room_table), true, 42).
holds(2, tower_base((block,7),puzzle_room_table), true, 42).
holds(2, tower_base((block,8),puzzle_room_table), false, 42).
holds(2, tower_base((block,9),puzzle_room_table), false, 42).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 42).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 42).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 42).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 42).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 42).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 42).
holds(2, unordered_tower((block,7),puzzle_room_table), true, 42).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 42).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 42).

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[14-04-2022_17-53-29] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=46']

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 26})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 27})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 28})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,1))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,1)', 'I': 29})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 30})

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 5 rules into program part base:

sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 26).
sub_goal(2, talos, put(manipulator_arm_1,(block,2),(block,3)), on((block,2)), (block,3), 27).
sub_goal(2, talos, release(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), nothing, 28).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,1)), grasping(manipulator_arm_1), (block,1), 29).
sub_goal(2, talos, put(manipulator_arm_1,(block,1),(block,2)), on((block,1)), (block,2), 30).

[14-04-2022_17-53-29] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=46']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A2866FDCA0>]
	incrementor = SolveIncrementor(step_start=42, step_increase=1, step_increase_initial=5, step_end_min=47, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1734.1520301000046, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 42), range_=None), IncPart(name='plan_module', args=('#inc', 42, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 42, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 42, 26, 30, 'sequential', 'false'), range_=None)]

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1274 rules

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006793499999730557s

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[14-04-2022_17-53-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[14-04-2022_17-53-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.040872s.

[14-04-2022_17-53-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007448s with result Satisfiable.

[14-04-2022_17-53-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[14-04-2022_17-53-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A288DCC040>

[14-04-2022_17-53-30] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 42)
	('last_sgoals', 30)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('first_sgoals', 26)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A288DCC040>)

[14-04-2022_17-53-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 42). %* None *%
#program plan_module(#inc, 42, false, false). %* None *%
#program optimisation_module(#inc, 42, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 42, 26, 30, sequential, false). %* None *%

[14-04-2022_17-53-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     41 : Current =     46
Incrementor step ends | Minimum  =     47 : Maximum =    300

[14-04-2022_17-53-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(46)]), ('state_module', [Number(42), Number(42)]), ('plan_module', [Number(42), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(42), Number(42), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('conformance_module', [Number(42), Number(42), Number(26), Number(30), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(43), Number(42)]), ('plan_module', [Number(43), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(43), Number(42), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(43)]), ('action_preconditions', [Number(43)]), ('variable_relations', [Number(43)]), ('abstraction_mappings', [Number(43)]), ('conformance_module', [Number(43), Number(42), Number(26), Number(30), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(44), Number(42)]), ('plan_module', [Number(44), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(44), Number(42), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(44)]), ('action_preconditions', [Number(44)]), ('variable_relations', [Number(44)]), ('abstraction_mappings', [Number(44)]), ('conformance_module', [Number(44), Number(42), Number(26), Number(30), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(45), Number(42)]), ('plan_module', [Number(45), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(45), Number(42), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(45)]), ('action_preconditions', [Number(45)]), ('variable_relations', [Number(45)]), ('abstraction_mappings', [Number(45)]), ('conformance_module', [Number(45), Number(42), Number(26), Number(30), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(46), Number(42)]), ('plan_module', [Number(46), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(46), Number(42), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(46)]), ('action_preconditions', [Number(46)]), ('variable_relations', [Number(46)]), ('abstraction_mappings', [Number(46)]), ('conformance_module', [Number(46), Number(42), Number(26), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.632464s.

[14-04-2022_17-53-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.271211s with result Satisfiable.

[14-04-2022_17-53-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.9036747999998624, Incremental time limit = None
Running cumulative time = 0.9036747999998624, Cumulative time limit = 1734.1520301000046
Used memory = (RSS = 2080.347656Mb, VMS = 2084.492188Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.632464s, Solving = 0.271211s, Total = 0.903675s, Memory = (RSS = 2080.347656Mb, VMS = 2084.492188Mb), Step range = [42-46]), Calls = 1
Final Model :: Total atoms = 9554, Cost = (-4,), Optimality proven = False, Number = 4, Thread ID = 1, Model type = ModelType.StableModel

[14-04-2022_17-53-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     46 : Current =     47
Incrementor step ends | Minimum  =     47 : Maximum =    300

[14-04-2022_17-53-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(47)]), ('state_module', [Number(47), Number(42)]), ('plan_module', [Number(47), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(47), Number(42), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(47)]), ('action_preconditions', [Number(47)]), ('variable_relations', [Number(47)]), ('abstraction_mappings', [Number(47)]), ('conformance_module', [Number(47), Number(42), Number(26), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.193012s.

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.031463s with result Unsatisfiable.

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.22447560000000522, Incremental time limit = None
Running cumulative time = 1.1281503999998677, Cumulative time limit = 1734.1520301000046
Used memory = (RSS = 2084.230469Mb, VMS = 2088.871094Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     47 : Current =     48
Incrementor step ends | Minimum  =     47 : Maximum =    300

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(48)]), ('state_module', [Number(48), Number(42)]), ('plan_module', [Number(48), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(48), Number(42), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(48)]), ('action_preconditions', [Number(48)]), ('variable_relations', [Number(48)]), ('abstraction_mappings', [Number(48)]), ('conformance_module', [Number(48), Number(42), Number(26), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.192865s.

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.040893s with result Satisfiable.

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2337578000006033, Incremental time limit = None
Running cumulative time = 1.361908200000471, Cumulative time limit = 1734.1520301000046
Used memory = (RSS = 2085.476562Mb, VMS = 2089.210938Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.018341s, Solving = 0.343567s, Total = 1.361908s, Memory = (RSS = 2085.476562Mb, VMS = 2089.210938Mb), Step range = [42-48]), Calls = 3
Final Model :: Total atoms = 11018, Cost = (-2,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.632464s, Solving = 0.271211s, Total = 0.903675s, Memory = (RSS = 2080.347656Mb, VMS = 2084.492188Mb), Step range = [42-46]
2 : Statistics :: Grounding = 0.193012s, Solving = 0.031463s, Total = 0.224476s, Memory = (RSS = 2084.230469Mb, VMS = 2088.871094Mb), Step range = [47-47]
3 : Statistics :: Grounding = 0.192865s, Solving = 0.040893s, Total = 0.233758s, Memory = (RSS = 2085.476562Mb, VMS = 2089.210938Mb), Step range = [48-48]

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 1.361908s due to: Stop condition reached.

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[14-04-2022_17-53-31] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 25}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 27, 15: 28, 16: 29, 17: 30, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 42}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 16, 33: 17, 34: 18, 35: 19, 36: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 27, 12: 28, 13: 29, 14: 30, 15: 31, 16: 32, 17: 33, 18: 34, 19: 35, 20: 36}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 8, 16: 8, 17: 8, 18: 9, 19: 9, 20: 9, 21: 9, 22: 10, 23: 11, 24: 12, 25: 13, 26: 13, 27: 14, 28: 15, 29: 16, 30: 17, 31: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 14, 8: 17, 9: 21, 10: 22, 11: 23, 12: 24, 13: 26, 14: 27, 15: 28, 16: 29, 17: 31}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-53-31] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 25, 43: 26, 44: 27, 45: 28, 46: 29, 47: 29, 48: 30}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 27, 15: 28, 16: 29, 17: 30, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 42, 26: 43, 27: 44, 28: 45, 29: 47, 30: 48}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 16, 33: 17, 34: 18, 35: 19, 36: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 27, 12: 28, 13: 29, 14: 30, 15: 31, 16: 32, 17: 33, 18: 34, 19: 35, 20: 36}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 8, 16: 8, 17: 8, 18: 9, 19: 9, 20: 9, 21: 9, 22: 10, 23: 11, 24: 12, 25: 13, 26: 13, 27: 14, 28: 15, 29: 16, 30: 17, 31: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 14, 8: 17, 9: 21, 10: 22, 11: 23, 12: 24, 13: 26, 14: 27, 15: 28, 16: 29, 17: 31}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-53-31] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 30, Last requested goal index = 30, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[14-04-2022_17-53-31] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.018341s, Solving = 0.343567s, Total = 1.361908s, Memory = (RSS = 2085.476562Mb, VMS = 2089.210938Mb), Step range = [42-48]), Calls = 3
Model :: Total atoms = 11018, Cost = (-2,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[14-04-2022_17-53-31] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 6 :: Actions = 6                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 22:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 23:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 24:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,8)))
Step 25:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_2,(block,8))
Step 26:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 27:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 28:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Planned actions:
        talos : move((store_room,1))
Step 29:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : move((hallway,0))
Step 30:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 31:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 33:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 34:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 35:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 36:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 37:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 38:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 39:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 40:
    Current Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 41:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 42:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 43:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 44:
    Current Sub-goals:
        [Index = 27] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 27] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 45:
    Current Sub-goals:
        [Index = 28] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 28] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,2))
Step 46:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,1)))
Step 47:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,1))
Step 48:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_end_1,(block,1),(block,2))

[14-04-2022_17-53-31] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[14-04-2022_17-53-31] DEBUG :: ASH Planner Main #1 >> Value of end step of abstract plan to divide adjusted for right blend of current problem: end_step=48

[14-04-2022_17-53-31] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[14-04-2022_17-53-31] DEBUG :: ASH Planner Main #1 >> Monolevel problem 3 at level 1 solved.

[14-04-2022_17-53-31] DEBUG :: ASH Planner Main #1 >> Online planning increment 3 finished.

[14-04-2022_17-53-31] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 17 : Goals achieved = 17 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 31 : Goals achieved = 20 : Goals unachieved = 11 : Complete = False
Level = 1 : Solved problems = 3 : Total constraining sub-goal stages = 36 : Goals achieved = 30 : Goals unachieved = 6 : Complete = False

[14-04-2022_17-53-31] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 2.

[14-04-2022_17-53-31] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 4 by method ground-first is [1-1].

[14-04-2022_17-53-31] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 4 at level 1:
Total Templated Partial Problems = 2, Problem Range = [3-4], Size = 11, Sub-goal Stage Range = [26-36]
Division points [total=1] : [(Index = 30, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[14-04-2022_17-53-31] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [31-36]

[14-04-2022_17-53-31] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 48, chosen step range to extract = range(0, 49)

[14-04-2022_17-53-31] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 36, Total actions = 36, Produced sub-goal stages = 36, Produced sub-goal literals = 36
Level [1]: Length = 48, Total actions = 48, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-31] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 36, chosen step range to extract = range(0, 37)

[14-04-2022_17-53-31] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 36, Total actions = 36, Produced sub-goal stages = 36, Produced sub-goal literals = 36
Level [1]: Length = 48, Total actions = 48, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-31] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 31, chosen step range to extract = range(0, 32)

[14-04-2022_17-53-31] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 36, Total actions = 36, Produced sub-goal stages = 36, Produced sub-goal literals = 36
Level [1]: Length = 48, Total actions = 48, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-31] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[14-04-2022_17-53-31] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 36, Total actions = 36, Produced sub-goal stages = 36, Produced sub-goal literals = 36
Level [1]: Length = 48, Total actions = 48, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-31] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [31-36], problem number = 4, increment number = 4

[14-04-2022_17-53-31] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 31)
	('last_sgoals', 36)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1732.7901219000041)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[14-04-2022_17-53-31] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [31-36] : Concurrency disabled : Minimum search length bound enabled with value 53

[14-04-2022_17-53-31] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 31
last_sgoals = 36
start_step = 48
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 53

[14-04-2022_17-53-31] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[14-04-2022_17-53-31] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[14-04-2022_17-53-31] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[14-04-2022_17-53-31] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[14-04-2022_17-53-31] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-53-31] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 48 as problem start state.

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'S': 48})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,1))', 'S': 48})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,8))', 'S': 48})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 48})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 48})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 48})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 48})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 48})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,1)', 'S': 48})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,8)', 'S': 48})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,1)', 'S': 48})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,8)', 'S': 48})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 48})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 48})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'S': 48})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 48})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 48})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 48})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 48})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 48})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 48})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'S': 48})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 48})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 48})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 48})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 48})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 48})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'S': 48})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 48})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 48})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 48})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 48})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 48})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,1)', 'S': 48})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,8)', 'S': 48})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 48})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 48})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 48})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 48})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 48})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 48})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 48})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'puzzle_room', 'S': 48})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 48})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 48})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 48})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 48})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'S': 48})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 48})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 48})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 48})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 48})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 48})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 48})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 48})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 48})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 48})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 48})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 48})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 48})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 48})

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 48).
holds(1, complete_tower(red,puzzle_room_table), true, 48).
holds(1, complete_tower(yellow,puzzle_room_table), false, 48).
holds(1, configuration(manipulator_end_1), aligned_with((block,1)), 48).
holds(1, configuration(manipulator_end_2), aligned_with((block,8)), 48).
holds(1, configuration(manipulator_limb_1), extended, 48).
holds(1, configuration(manipulator_limb_2), extended, 48).
holds(1, configuration(puzzle_room_door), open, 48).
holds(1, configuration(starting_room_door), closed, 48).
holds(1, configuration(store_room_door), open, 48).
holds(1, grasping(manipulator_arm_1), (block,1), 48).
holds(1, grasping(manipulator_arm_2), (block,8), 48).
holds(1, grasping(manipulator_end_1), (block,1), 48).
holds(1, grasping(manipulator_end_2), (block,8), 48).
holds(1, in((block,1)), (puzzle_room,1), 48).
holds(1, in((block,2)), (puzzle_room,1), 48).
holds(1, in((block,3)), (puzzle_room,1), 48).
holds(1, in((block,4)), (store_room,0), 48).
holds(1, in((block,5)), (store_room,0), 48).
holds(1, in((block,6)), (puzzle_room,1), 48).
holds(1, in((block,7)), (puzzle_room,1), 48).
holds(1, in((block,8)), (puzzle_room,1), 48).
holds(1, in((block,9)), (puzzle_room,1), 48).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 48).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 48).
holds(1, in(manipulator_end_1), (puzzle_room,1), 48).
holds(1, in(manipulator_end_2), (puzzle_room,1), 48).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 48).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 48).
holds(1, in(puzzle_room_table), (puzzle_room,1), 48).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 48).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 48).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 48).
holds(1, in(talos), (puzzle_room,1), 48).
holds(1, in_tower((block,1),(block,1)), false, 48).
holds(1, in_tower((block,1),(block,2)), false, 48).
holds(1, in_tower((block,1),(block,3)), false, 48).
holds(1, in_tower((block,1),(block,4)), false, 48).
holds(1, in_tower((block,1),(block,5)), false, 48).
holds(1, in_tower((block,1),(block,6)), false, 48).
holds(1, in_tower((block,1),(block,7)), false, 48).
holds(1, in_tower((block,1),(block,8)), false, 48).
holds(1, in_tower((block,1),(block,9)), false, 48).
holds(1, in_tower((block,2),(block,1)), false, 48).
holds(1, in_tower((block,2),(block,2)), false, 48).
holds(1, in_tower((block,2),(block,3)), false, 48).
holds(1, in_tower((block,2),(block,4)), false, 48).
holds(1, in_tower((block,2),(block,5)), false, 48).
holds(1, in_tower((block,2),(block,6)), false, 48).
holds(1, in_tower((block,2),(block,7)), false, 48).
holds(1, in_tower((block,2),(block,8)), false, 48).
holds(1, in_tower((block,2),(block,9)), false, 48).
holds(1, in_tower((block,3),(block,1)), true, 48).
holds(1, in_tower((block,3),(block,2)), true, 48).
holds(1, in_tower((block,3),(block,3)), true, 48).
holds(1, in_tower((block,3),(block,4)), false, 48).
holds(1, in_tower((block,3),(block,5)), false, 48).
holds(1, in_tower((block,3),(block,6)), false, 48).
holds(1, in_tower((block,3),(block,7)), false, 48).
holds(1, in_tower((block,3),(block,8)), false, 48).
holds(1, in_tower((block,3),(block,9)), false, 48).
holds(1, in_tower((block,4),(block,1)), false, 48).
holds(1, in_tower((block,4),(block,2)), false, 48).
holds(1, in_tower((block,4),(block,3)), false, 48).
holds(1, in_tower((block,4),(block,4)), false, 48).
holds(1, in_tower((block,4),(block,5)), false, 48).
holds(1, in_tower((block,4),(block,6)), false, 48).
holds(1, in_tower((block,4),(block,7)), false, 48).
holds(1, in_tower((block,4),(block,8)), false, 48).
holds(1, in_tower((block,4),(block,9)), false, 48).
holds(1, in_tower((block,5),(block,1)), false, 48).
holds(1, in_tower((block,5),(block,2)), false, 48).
holds(1, in_tower((block,5),(block,3)), false, 48).
holds(1, in_tower((block,5),(block,4)), false, 48).
holds(1, in_tower((block,5),(block,5)), false, 48).
holds(1, in_tower((block,5),(block,6)), false, 48).
holds(1, in_tower((block,5),(block,7)), false, 48).
holds(1, in_tower((block,5),(block,8)), false, 48).
holds(1, in_tower((block,5),(block,9)), false, 48).
holds(1, in_tower((block,6),(block,1)), false, 48).
holds(1, in_tower((block,6),(block,2)), false, 48).
holds(1, in_tower((block,6),(block,3)), false, 48).
holds(1, in_tower((block,6),(block,4)), false, 48).
holds(1, in_tower((block,6),(block,5)), false, 48).
holds(1, in_tower((block,6),(block,6)), true, 48).
holds(1, in_tower((block,6),(block,7)), false, 48).
holds(1, in_tower((block,6),(block,8)), false, 48).
holds(1, in_tower((block,6),(block,9)), false, 48).
holds(1, in_tower((block,7),(block,1)), false, 48).
holds(1, in_tower((block,7),(block,2)), false, 48).
holds(1, in_tower((block,7),(block,3)), false, 48).
holds(1, in_tower((block,7),(block,4)), false, 48).
holds(1, in_tower((block,7),(block,5)), false, 48).
holds(1, in_tower((block,7),(block,6)), false, 48).
holds(1, in_tower((block,7),(block,7)), true, 48).
holds(1, in_tower((block,7),(block,8)), false, 48).
holds(1, in_tower((block,7),(block,9)), true, 48).
holds(1, in_tower((block,8),(block,1)), false, 48).
holds(1, in_tower((block,8),(block,2)), false, 48).
holds(1, in_tower((block,8),(block,3)), false, 48).
holds(1, in_tower((block,8),(block,4)), false, 48).
holds(1, in_tower((block,8),(block,5)), false, 48).
holds(1, in_tower((block,8),(block,6)), false, 48).
holds(1, in_tower((block,8),(block,7)), false, 48).
holds(1, in_tower((block,8),(block,8)), false, 48).
holds(1, in_tower((block,8),(block,9)), false, 48).
holds(1, in_tower((block,9),(block,1)), false, 48).
holds(1, in_tower((block,9),(block,2)), false, 48).
holds(1, in_tower((block,9),(block,3)), false, 48).
holds(1, in_tower((block,9),(block,4)), false, 48).
holds(1, in_tower((block,9),(block,5)), false, 48).
holds(1, in_tower((block,9),(block,6)), false, 48).
holds(1, in_tower((block,9),(block,7)), false, 48).
holds(1, in_tower((block,9),(block,8)), false, 48).
holds(1, in_tower((block,9),(block,9)), false, 48).
holds(1, on((block,1)), (block,2), 48).
holds(1, on((block,2)), (block,3), 48).
holds(1, on((block,3)), puzzle_room_table_left, 48).
holds(1, on((block,4)), nothing, 48).
holds(1, on((block,5)), nothing, 48).
holds(1, on((block,6)), puzzle_room_table_right, 48).
holds(1, on((block,7)), puzzle_room_table_middle, 48).
holds(1, on((block,8)), nothing, 48).
holds(1, on((block,9)), (block,7), 48).
holds(1, tower_base((block,1),puzzle_room_table), false, 48).
holds(1, tower_base((block,2),puzzle_room_table), false, 48).
holds(1, tower_base((block,3),puzzle_room_table), true, 48).
holds(1, tower_base((block,4),puzzle_room_table), false, 48).
holds(1, tower_base((block,5),puzzle_room_table), false, 48).
holds(1, tower_base((block,6),puzzle_room_table), true, 48).
holds(1, tower_base((block,7),puzzle_room_table), true, 48).
holds(1, tower_base((block,8),puzzle_room_table), false, 48).
holds(1, tower_base((block,9),puzzle_room_table), false, 48).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 48).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 48).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 48).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 48).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 48).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 48).
holds(1, unordered_tower((block,7),puzzle_room_table), true, 48).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 48).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 48).
holds(2, complete_tower(blue,puzzle_room_table), false, 48).
holds(2, complete_tower(red,puzzle_room_table), true, 48).
holds(2, complete_tower(yellow,puzzle_room_table), false, 48).
holds(2, configuration(manipulator_arm_1), extended, 48).
holds(2, configuration(manipulator_arm_2), extended, 48).
holds(2, configuration(puzzle_room_door), open, 48).
holds(2, configuration(starting_room_door), closed, 48).
holds(2, configuration(store_room_door), open, 48).
holds(2, grasping(manipulator_arm_1), (block,1), 48).
holds(2, grasping(manipulator_arm_2), (block,8), 48).
holds(2, in((block,1)), puzzle_room, 48).
holds(2, in((block,2)), puzzle_room, 48).
holds(2, in((block,3)), puzzle_room, 48).
holds(2, in((block,4)), store_room, 48).
holds(2, in((block,5)), store_room, 48).
holds(2, in((block,6)), puzzle_room, 48).
holds(2, in((block,7)), puzzle_room, 48).
holds(2, in((block,8)), puzzle_room, 48).
holds(2, in((block,9)), puzzle_room, 48).
holds(2, in(manipulator_arm_1), puzzle_room, 48).
holds(2, in(manipulator_arm_2), puzzle_room, 48).
holds(2, in(puzzle_room_table), puzzle_room, 48).
holds(2, in(talos), puzzle_room, 48).
holds(2, in_tower((block,1),(block,1)), false, 48).
holds(2, in_tower((block,1),(block,2)), false, 48).
holds(2, in_tower((block,1),(block,3)), false, 48).
holds(2, in_tower((block,1),(block,4)), false, 48).
holds(2, in_tower((block,1),(block,5)), false, 48).
holds(2, in_tower((block,1),(block,6)), false, 48).
holds(2, in_tower((block,1),(block,7)), false, 48).
holds(2, in_tower((block,1),(block,8)), false, 48).
holds(2, in_tower((block,1),(block,9)), false, 48).
holds(2, in_tower((block,2),(block,1)), false, 48).
holds(2, in_tower((block,2),(block,2)), false, 48).
holds(2, in_tower((block,2),(block,3)), false, 48).
holds(2, in_tower((block,2),(block,4)), false, 48).
holds(2, in_tower((block,2),(block,5)), false, 48).
holds(2, in_tower((block,2),(block,6)), false, 48).
holds(2, in_tower((block,2),(block,7)), false, 48).
holds(2, in_tower((block,2),(block,8)), false, 48).
holds(2, in_tower((block,2),(block,9)), false, 48).
holds(2, in_tower((block,3),(block,1)), true, 48).
holds(2, in_tower((block,3),(block,2)), true, 48).
holds(2, in_tower((block,3),(block,3)), true, 48).
holds(2, in_tower((block,3),(block,4)), false, 48).
holds(2, in_tower((block,3),(block,5)), false, 48).
holds(2, in_tower((block,3),(block,6)), false, 48).
holds(2, in_tower((block,3),(block,7)), false, 48).
holds(2, in_tower((block,3),(block,8)), false, 48).
holds(2, in_tower((block,3),(block,9)), false, 48).
holds(2, in_tower((block,4),(block,1)), false, 48).
holds(2, in_tower((block,4),(block,2)), false, 48).
holds(2, in_tower((block,4),(block,3)), false, 48).
holds(2, in_tower((block,4),(block,4)), false, 48).
holds(2, in_tower((block,4),(block,5)), false, 48).
holds(2, in_tower((block,4),(block,6)), false, 48).
holds(2, in_tower((block,4),(block,7)), false, 48).
holds(2, in_tower((block,4),(block,8)), false, 48).
holds(2, in_tower((block,4),(block,9)), false, 48).
holds(2, in_tower((block,5),(block,1)), false, 48).
holds(2, in_tower((block,5),(block,2)), false, 48).
holds(2, in_tower((block,5),(block,3)), false, 48).
holds(2, in_tower((block,5),(block,4)), false, 48).
holds(2, in_tower((block,5),(block,5)), false, 48).
holds(2, in_tower((block,5),(block,6)), false, 48).
holds(2, in_tower((block,5),(block,7)), false, 48).
holds(2, in_tower((block,5),(block,8)), false, 48).
holds(2, in_tower((block,5),(block,9)), false, 48).
holds(2, in_tower((block,6),(block,1)), false, 48).
holds(2, in_tower((block,6),(block,2)), false, 48).
holds(2, in_tower((block,6),(block,3)), false, 48).
holds(2, in_tower((block,6),(block,4)), false, 48).
holds(2, in_tower((block,6),(block,5)), false, 48).
holds(2, in_tower((block,6),(block,6)), true, 48).
holds(2, in_tower((block,6),(block,7)), false, 48).
holds(2, in_tower((block,6),(block,8)), false, 48).
holds(2, in_tower((block,6),(block,9)), false, 48).
holds(2, in_tower((block,7),(block,1)), false, 48).
holds(2, in_tower((block,7),(block,2)), false, 48).
holds(2, in_tower((block,7),(block,3)), false, 48).
holds(2, in_tower((block,7),(block,4)), false, 48).
holds(2, in_tower((block,7),(block,5)), false, 48).
holds(2, in_tower((block,7),(block,6)), false, 48).
holds(2, in_tower((block,7),(block,7)), true, 48).
holds(2, in_tower((block,7),(block,8)), false, 48).
holds(2, in_tower((block,7),(block,9)), true, 48).
holds(2, in_tower((block,8),(block,1)), false, 48).
holds(2, in_tower((block,8),(block,2)), false, 48).
holds(2, in_tower((block,8),(block,3)), false, 48).
holds(2, in_tower((block,8),(block,4)), false, 48).
holds(2, in_tower((block,8),(block,5)), false, 48).
holds(2, in_tower((block,8),(block,6)), false, 48).
holds(2, in_tower((block,8),(block,7)), false, 48).
holds(2, in_tower((block,8),(block,8)), false, 48).
holds(2, in_tower((block,8),(block,9)), false, 48).
holds(2, in_tower((block,9),(block,1)), false, 48).
holds(2, in_tower((block,9),(block,2)), false, 48).
holds(2, in_tower((block,9),(block,3)), false, 48).
holds(2, in_tower((block,9),(block,4)), false, 48).
holds(2, in_tower((block,9),(block,5)), false, 48).
holds(2, in_tower((block,9),(block,6)), false, 48).
holds(2, in_tower((block,9),(block,7)), false, 48).
holds(2, in_tower((block,9),(block,8)), false, 48).
holds(2, in_tower((block,9),(block,9)), false, 48).
holds(2, on((block,1)), (block,2), 48).
holds(2, on((block,2)), (block,3), 48).
holds(2, on((block,3)), puzzle_room_table, 48).
holds(2, on((block,4)), nothing, 48).
holds(2, on((block,5)), nothing, 48).
holds(2, on((block,6)), puzzle_room_table, 48).
holds(2, on((block,7)), puzzle_room_table, 48).
holds(2, on((block,8)), nothing, 48).
holds(2, on((block,9)), (block,7), 48).
holds(2, tower_base((block,1),puzzle_room_table), false, 48).
holds(2, tower_base((block,2),puzzle_room_table), false, 48).
holds(2, tower_base((block,3),puzzle_room_table), true, 48).
holds(2, tower_base((block,4),puzzle_room_table), false, 48).
holds(2, tower_base((block,5),puzzle_room_table), false, 48).
holds(2, tower_base((block,6),puzzle_room_table), true, 48).
holds(2, tower_base((block,7),puzzle_room_table), true, 48).
holds(2, tower_base((block,8),puzzle_room_table), false, 48).
holds(2, tower_base((block,9),puzzle_room_table), false, 48).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 48).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 48).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 48).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 48).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 48).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 48).
holds(2, unordered_tower((block,7),puzzle_room_table), true, 48).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 48).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 48).

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[14-04-2022_17-53-31] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=53']

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,1))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 31})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,9))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,9)', 'I': 32})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,9),puzzle_room_table)', 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'I': 33})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,9))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 34})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,7))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,7)', 'I': 35})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,8),(block,9))', 'F': 'on((block,8))', 'V': '(block,9)', 'I': 36})

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 6 rules into program part base:

sub_goal(2, talos, release(manipulator_arm_1,(block,1)), grasping(manipulator_arm_1), nothing, 31).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,9)), grasping(manipulator_arm_1), (block,9), 32).
sub_goal(2, talos, put(manipulator_arm_1,(block,9),puzzle_room_table), on((block,9)), puzzle_room_table, 33).
sub_goal(2, talos, release(manipulator_arm_1,(block,9)), grasping(manipulator_arm_1), nothing, 34).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,7)), grasping(manipulator_arm_1), (block,7), 35).
sub_goal(2, talos, put(manipulator_arm_2,(block,8),(block,9)), on((block,8)), (block,9), 36).

[14-04-2022_17-53-31] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=53']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A2866FD8B0>]
	incrementor = SolveIncrementor(step_start=48, step_increase=1, step_increase_initial=6, step_end_min=54, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1732.7901219000041, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 48), range_=None), IncPart(name='plan_module', args=('#inc', 48, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 48, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 48, 31, 36, 'sequential', 'false'), range_=None)]

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1275 rules

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006774200000108976s

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.041164s.

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007143s with result Satisfiable.

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A280E4A220>

[14-04-2022_17-53-31] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 48)
	('last_sgoals', 36)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('first_sgoals', 31)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A280E4A220>)

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 48). %* None *%
#program plan_module(#inc, 48, false, false). %* None *%
#program optimisation_module(#inc, 48, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 48, 31, 36, sequential, false). %* None *%

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     47 : Current =     53
Incrementor step ends | Minimum  =     54 : Maximum =    300

[14-04-2022_17-53-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(53)]), ('state_module', [Number(48), Number(48)]), ('plan_module', [Number(48), Number(48), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(48), Number(48), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(48)]), ('action_preconditions', [Number(48)]), ('variable_relations', [Number(48)]), ('abstraction_mappings', [Number(48)]), ('conformance_module', [Number(48), Number(48), Number(31), Number(36), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(49), Number(48)]), ('plan_module', [Number(49), Number(48), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(49), Number(48), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(49)]), ('action_preconditions', [Number(49)]), ('variable_relations', [Number(49)]), ('abstraction_mappings', [Number(49)]), ('conformance_module', [Number(49), Number(48), Number(31), Number(36), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(50), Number(48)]), ('plan_module', [Number(50), Number(48), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(50), Number(48), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(50)]), ('action_preconditions', [Number(50)]), ('variable_relations', [Number(50)]), ('abstraction_mappings', [Number(50)]), ('conformance_module', [Number(50), Number(48), Number(31), Number(36), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(51), Number(48)]), ('plan_module', [Number(51), Number(48), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(51), Number(48), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(51)]), ('action_preconditions', [Number(51)]), ('variable_relations', [Number(51)]), ('abstraction_mappings', [Number(51)]), ('conformance_module', [Number(51), Number(48), Number(31), Number(36), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(52), Number(48)]), ('plan_module', [Number(52), Number(48), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(52), Number(48), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(52)]), ('action_preconditions', [Number(52)]), ('variable_relations', [Number(52)]), ('abstraction_mappings', [Number(52)]), ('conformance_module', [Number(52), Number(48), Number(31), Number(36), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(53), Number(48)]), ('plan_module', [Number(53), Number(48), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(53), Number(48), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(53)]), ('action_preconditions', [Number(53)]), ('variable_relations', [Number(53)]), ('abstraction_mappings', [Number(53)]), ('conformance_module', [Number(53), Number(48), Number(31), Number(36), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.765987s.

[14-04-2022_17-53-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.367051s with result Satisfiable.

[14-04-2022_17-53-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.1330388999995193, Incremental time limit = None
Running cumulative time = 1.1330388999995193, Cumulative time limit = 1732.7901219000041
Used memory = (RSS = 2086.222656Mb, VMS = 2090.312500Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.765987s, Solving = 0.367051s, Total = 1.133039s, Memory = (RSS = 2086.222656Mb, VMS = 2090.312500Mb), Step range = [48-53]), Calls = 1
Final Model :: Total atoms = 10291, Cost = (-5,), Optimality proven = False, Number = 6, Thread ID = 4, Model type = ModelType.StableModel

[14-04-2022_17-53-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     53 : Current =     54
Incrementor step ends | Minimum  =     54 : Maximum =    300

[14-04-2022_17-53-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(54)]), ('state_module', [Number(54), Number(48)]), ('plan_module', [Number(54), Number(48), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(54), Number(48), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(54)]), ('action_preconditions', [Number(54)]), ('variable_relations', [Number(54)]), ('abstraction_mappings', [Number(54)]), ('conformance_module', [Number(54), Number(48), Number(31), Number(36), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.197210s.

[14-04-2022_17-53-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.035654s with result Unsatisfiable.

[14-04-2022_17-53-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2328641999993124, Incremental time limit = None
Running cumulative time = 1.3659030999988317, Cumulative time limit = 1732.7901219000041
Used memory = (RSS = 2088.128906Mb, VMS = 2092.648438Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     54 : Current =     55
Incrementor step ends | Minimum  =     54 : Maximum =    300

[14-04-2022_17-53-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(55)]), ('state_module', [Number(55), Number(48)]), ('plan_module', [Number(55), Number(48), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(55), Number(48), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(55)]), ('action_preconditions', [Number(55)]), ('variable_relations', [Number(55)]), ('abstraction_mappings', [Number(55)]), ('conformance_module', [Number(55), Number(48), Number(31), Number(36), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.203124s.

[14-04-2022_17-53-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.038929s with result Unsatisfiable.

[14-04-2022_17-53-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.24205299999994168, Incremental time limit = None
Running cumulative time = 1.6079560999987734, Cumulative time limit = 1732.7901219000041
Used memory = (RSS = 2090.140625Mb, VMS = 2093.175781Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     55 : Current =     56
Incrementor step ends | Minimum  =     54 : Maximum =    300

[14-04-2022_17-53-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(56)]), ('state_module', [Number(56), Number(48)]), ('plan_module', [Number(56), Number(48), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(56), Number(48), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(56)]), ('action_preconditions', [Number(56)]), ('variable_relations', [Number(56)]), ('abstraction_mappings', [Number(56)]), ('conformance_module', [Number(56), Number(48), Number(31), Number(36), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.208753s.

[14-04-2022_17-53-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.056519s with result Satisfiable.

[14-04-2022_17-53-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.26527229999919655, Incremental time limit = None
Running cumulative time = 1.87322839999797, Cumulative time limit = 1732.7901219000041
Used memory = (RSS = 2092.917969Mb, VMS = 2099.425781Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 8
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.375075s, Solving = 0.498153s, Total = 1.873228s, Memory = (RSS = 2092.917969Mb, VMS = 2099.425781Mb), Step range = [48-56]), Calls = 4
Final Model :: Total atoms = 12490, Cost = (-2,), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[14-04-2022_17-53-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.765987s, Solving = 0.367051s, Total = 1.133039s, Memory = (RSS = 2086.222656Mb, VMS = 2090.312500Mb), Step range = [48-53]
2 : Statistics :: Grounding = 0.197210s, Solving = 0.035654s, Total = 0.232864s, Memory = (RSS = 2088.128906Mb, VMS = 2092.648438Mb), Step range = [54-54]
3 : Statistics :: Grounding = 0.203124s, Solving = 0.038929s, Total = 0.242053s, Memory = (RSS = 2090.140625Mb, VMS = 2093.175781Mb), Step range = [55-55]
4 : Statistics :: Grounding = 0.208753s, Solving = 0.056519s, Total = 0.265272s, Memory = (RSS = 2092.917969Mb, VMS = 2099.425781Mb), Step range = [56-56]

[14-04-2022_17-53-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 1.873228s due to: Stop condition reached.

[14-04-2022_17-53-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[14-04-2022_17-53-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[14-04-2022_17-53-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-53-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-53-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[14-04-2022_17-53-34] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 25, 43: 26, 44: 27, 45: 28, 46: 29, 47: 29, 48: 30}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 27, 15: 28, 16: 29, 17: 30, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 42, 26: 43, 27: 44, 28: 45, 29: 47, 30: 48}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 16, 33: 17, 34: 18, 35: 19, 36: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 27, 12: 28, 13: 29, 14: 30, 15: 31, 16: 32, 17: 33, 18: 34, 19: 35, 20: 36}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 8, 16: 8, 17: 8, 18: 9, 19: 9, 20: 9, 21: 9, 22: 10, 23: 11, 24: 12, 25: 13, 26: 13, 27: 14, 28: 15, 29: 16, 30: 17, 31: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 14, 8: 17, 9: 21, 10: 22, 11: 23, 12: 24, 13: 26, 14: 27, 15: 28, 16: 29, 17: 31}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-53-34] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 25, 43: 26, 44: 27, 45: 28, 46: 29, 47: 29, 48: 30, 49: 31, 50: 32, 51: 32, 52: 33, 53: 34, 54: 35, 55: 35, 56: 36}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 27, 15: 28, 16: 29, 17: 30, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 42, 26: 43, 27: 44, 28: 45, 29: 47, 30: 48, 31: 49, 32: 51, 33: 52, 34: 53, 35: 55, 36: 56}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 16, 33: 17, 34: 18, 35: 19, 36: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 27, 12: 28, 13: 29, 14: 30, 15: 31, 16: 32, 17: 33, 18: 34, 19: 35, 20: 36}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 8, 16: 8, 17: 8, 18: 9, 19: 9, 20: 9, 21: 9, 22: 10, 23: 11, 24: 12, 25: 13, 26: 13, 27: 14, 28: 15, 29: 16, 30: 17, 31: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 14, 8: 17, 9: 21, 10: 22, 11: 23, 12: 24, 13: 26, 14: 27, 15: 28, 16: 29, 17: 31}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-53-34] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 36, Last requested goal index = 36, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[14-04-2022_17-53-34] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.375075s, Solving = 0.498153s, Total = 1.873228s, Memory = (RSS = 2092.917969Mb, VMS = 2099.425781Mb), Step range = [48-56]), Calls = 4
Model :: Total atoms = 12490, Cost = (-2,), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[14-04-2022_17-53-34] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 8 :: Actions = 8                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 22:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 23:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 24:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,8)))
Step 25:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_2,(block,8))
Step 26:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 27:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 28:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Planned actions:
        talos : move((store_room,1))
Step 29:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : move((hallway,0))
Step 30:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 31:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 33:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 34:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 35:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 36:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 37:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 38:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 39:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 40:
    Current Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 41:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 42:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 43:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 44:
    Current Sub-goals:
        [Index = 27] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 27] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 45:
    Current Sub-goals:
        [Index = 28] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 28] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,2))
Step 46:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,1)))
Step 47:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,1))
Step 48:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_end_1,(block,1),(block,2))
Step 49:
    Current Sub-goals:
        [Index = 31] talos : release(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 31] talos : release(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,1))
Step 50:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,9)))
Step 51:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Achieved Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,9))
Step 52:
    Current Sub-goals:
        [Index = 33] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 33] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,9),puzzle_room_table_middle)
Step 53:
    Current Sub-goals:
        [Index = 34] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 34] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,9))
Step 54:
    Current Sub-goals:
        [Index = 35] talos : grasp(manipulator_arm_1,(block,7)) -> grasping(manipulator_arm_1) = (block,7)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,7)))
Step 55:
    Current Sub-goals:
        [Index = 35] talos : grasp(manipulator_arm_1,(block,7)) -> grasping(manipulator_arm_1) = (block,7)
    Achieved Sub-goals:
        [Index = 35] talos : grasp(manipulator_arm_1,(block,7)) -> grasping(manipulator_arm_1) = (block,7)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,7))
Step 56:
    Current Sub-goals:
        [Index = 36] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Achieved Sub-goals:
        [Index = 36] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Planned actions:
        talos : put(manipulator_end_2,(block,8),(block,9))

[14-04-2022_17-53-34] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[14-04-2022_17-53-34] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[14-04-2022_17-53-34] DEBUG :: ASH Planner Main #1 >> Monolevel problem 4 at level 1 solved.

[14-04-2022_17-53-34] DEBUG :: ASH Planner Main #1 >> Online planning increment 4 finished.

[14-04-2022_17-53-34] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 17 : Goals achieved = 17 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 31 : Goals achieved = 20 : Goals unachieved = 11 : Complete = False
Level = 1 : Solved problems = 4 : Total constraining sub-goal stages = 36 : Goals achieved = 36 : Goals unachieved = 0 : Complete = False

[14-04-2022_17-53-34] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 2, Highest = 2.

[14-04-2022_17-53-34] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 5 by method ground-first is [1-2].

[14-04-2022_17-53-34] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning problem 3 at level 2:
Total Templated Partial Problems = 3, Problem Range = [1-3], Size = 31, Sub-goal Stage Range = [1-31]
Division points [total=2] : [(Index = 10, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 20, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[14-04-2022_17-53-34] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [21-31]

[14-04-2022_17-53-34] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 36, chosen step range to extract = range(0, 37)

[14-04-2022_17-53-34] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 36, Total actions = 36, Produced sub-goal stages = 36, Produced sub-goal literals = 36
Level [1]: Length = 56, Total actions = 56, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-34] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 31, chosen step range to extract = range(0, 32)

[14-04-2022_17-53-34] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 36, Total actions = 36, Produced sub-goal stages = 36, Produced sub-goal literals = 36
Level [1]: Length = 56, Total actions = 56, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-34] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[14-04-2022_17-53-34] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 36, Total actions = 36, Produced sub-goal stages = 36, Produced sub-goal literals = 36
Level [1]: Length = 56, Total actions = 56, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-34] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [21-31], problem number = 3, increment number = 5

[14-04-2022_17-53-34] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 21)
	('last_sgoals', 31)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1745.5991816000014)
	('length_limit', 300)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[14-04-2022_17-53-34] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 2] partial conformance refinement (sequential) with sgoals range [21-31] : Concurrency disabled : Minimum search length bound enabled with value 46

[14-04-2022_17-53-34] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 21
last_sgoals = 31
start_step = 36
is_initial = False
is_final = True
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 46

[14-04-2022_17-53-34] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[14-04-2022_17-53-34] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[14-04-2022_17-53-34] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[14-04-2022_17-53-34] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[14-04-2022_17-53-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[14-04-2022_17-53-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[14-04-2022_17-53-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-53-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-53-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-53-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-53-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[14-04-2022_17-53-34] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-53-34] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 36 as problem start state.

[14-04-2022_17-53-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'S': 36})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 36})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 36})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 36})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 36})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 36})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,7)', 'S': 36})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,8)', 'S': 36})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 36})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 36})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 36})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'S': 36})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 36})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 36})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 36})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 36})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 36})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 36})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'S': 36})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 36})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 36})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 36})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 36})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 36})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'S': 36})
Fluent({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,7)', 'S': 36})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,8)', 'S': 36})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 36})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 36})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 3, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 3, 'F': 'in((block,8))', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 3, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 36})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'S': 36})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 36})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 36})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 36})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 36})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 36})
Fluent({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 36})
Fluent({'L': 3, 'F': 'on((block,8))', 'V': '(block,9)', 'S': 36})
Fluent({'L': 3, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 36})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 36})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 36})
Fluent({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 36})
Fluent({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 36})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 36})

[14-04-2022_17-53-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-53-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 257 rules into program part ash_initial_state:

holds(2, complete_tower(blue,puzzle_room_table), false, 36).
holds(2, complete_tower(red,puzzle_room_table), true, 36).
holds(2, complete_tower(yellow,puzzle_room_table), false, 36).
holds(2, configuration(manipulator_arm_1), extended, 36).
holds(2, configuration(manipulator_arm_2), extended, 36).
holds(2, configuration(puzzle_room_door), open, 36).
holds(2, configuration(starting_room_door), closed, 36).
holds(2, configuration(store_room_door), open, 36).
holds(2, grasping(manipulator_arm_1), (block,7), 36).
holds(2, grasping(manipulator_arm_2), (block,8), 36).
holds(2, in((block,1)), puzzle_room, 36).
holds(2, in((block,2)), puzzle_room, 36).
holds(2, in((block,3)), puzzle_room, 36).
holds(2, in((block,4)), store_room, 36).
holds(2, in((block,5)), store_room, 36).
holds(2, in((block,6)), puzzle_room, 36).
holds(2, in((block,7)), puzzle_room, 36).
holds(2, in((block,8)), puzzle_room, 36).
holds(2, in((block,9)), puzzle_room, 36).
holds(2, in(manipulator_arm_1), puzzle_room, 36).
holds(2, in(manipulator_arm_2), puzzle_room, 36).
holds(2, in(puzzle_room_table), puzzle_room, 36).
holds(2, in(talos), puzzle_room, 36).
holds(2, in_tower((block,1),(block,1)), false, 36).
holds(2, in_tower((block,1),(block,2)), false, 36).
holds(2, in_tower((block,1),(block,3)), false, 36).
holds(2, in_tower((block,1),(block,4)), false, 36).
holds(2, in_tower((block,1),(block,5)), false, 36).
holds(2, in_tower((block,1),(block,6)), false, 36).
holds(2, in_tower((block,1),(block,7)), false, 36).
holds(2, in_tower((block,1),(block,8)), false, 36).
holds(2, in_tower((block,1),(block,9)), false, 36).
holds(2, in_tower((block,2),(block,1)), false, 36).
holds(2, in_tower((block,2),(block,2)), false, 36).
holds(2, in_tower((block,2),(block,3)), false, 36).
holds(2, in_tower((block,2),(block,4)), false, 36).
holds(2, in_tower((block,2),(block,5)), false, 36).
holds(2, in_tower((block,2),(block,6)), false, 36).
holds(2, in_tower((block,2),(block,7)), false, 36).
holds(2, in_tower((block,2),(block,8)), false, 36).
holds(2, in_tower((block,2),(block,9)), false, 36).
holds(2, in_tower((block,3),(block,1)), true, 36).
holds(2, in_tower((block,3),(block,2)), true, 36).
holds(2, in_tower((block,3),(block,3)), true, 36).
holds(2, in_tower((block,3),(block,4)), false, 36).
holds(2, in_tower((block,3),(block,5)), false, 36).
holds(2, in_tower((block,3),(block,6)), false, 36).
holds(2, in_tower((block,3),(block,7)), false, 36).
holds(2, in_tower((block,3),(block,8)), false, 36).
holds(2, in_tower((block,3),(block,9)), false, 36).
holds(2, in_tower((block,4),(block,1)), false, 36).
holds(2, in_tower((block,4),(block,2)), false, 36).
holds(2, in_tower((block,4),(block,3)), false, 36).
holds(2, in_tower((block,4),(block,4)), false, 36).
holds(2, in_tower((block,4),(block,5)), false, 36).
holds(2, in_tower((block,4),(block,6)), false, 36).
holds(2, in_tower((block,4),(block,7)), false, 36).
holds(2, in_tower((block,4),(block,8)), false, 36).
holds(2, in_tower((block,4),(block,9)), false, 36).
holds(2, in_tower((block,5),(block,1)), false, 36).
holds(2, in_tower((block,5),(block,2)), false, 36).
holds(2, in_tower((block,5),(block,3)), false, 36).
holds(2, in_tower((block,5),(block,4)), false, 36).
holds(2, in_tower((block,5),(block,5)), false, 36).
holds(2, in_tower((block,5),(block,6)), false, 36).
holds(2, in_tower((block,5),(block,7)), false, 36).
holds(2, in_tower((block,5),(block,8)), false, 36).
holds(2, in_tower((block,5),(block,9)), false, 36).
holds(2, in_tower((block,6),(block,1)), false, 36).
holds(2, in_tower((block,6),(block,2)), false, 36).
holds(2, in_tower((block,6),(block,3)), false, 36).
holds(2, in_tower((block,6),(block,4)), false, 36).
holds(2, in_tower((block,6),(block,5)), false, 36).
holds(2, in_tower((block,6),(block,6)), true, 36).
holds(2, in_tower((block,6),(block,7)), false, 36).
holds(2, in_tower((block,6),(block,8)), false, 36).
holds(2, in_tower((block,6),(block,9)), false, 36).
holds(2, in_tower((block,7),(block,1)), false, 36).
holds(2, in_tower((block,7),(block,2)), false, 36).
holds(2, in_tower((block,7),(block,3)), false, 36).
holds(2, in_tower((block,7),(block,4)), false, 36).
holds(2, in_tower((block,7),(block,5)), false, 36).
holds(2, in_tower((block,7),(block,6)), false, 36).
holds(2, in_tower((block,7),(block,7)), true, 36).
holds(2, in_tower((block,7),(block,8)), false, 36).
holds(2, in_tower((block,7),(block,9)), false, 36).
holds(2, in_tower((block,8),(block,1)), false, 36).
holds(2, in_tower((block,8),(block,2)), false, 36).
holds(2, in_tower((block,8),(block,3)), false, 36).
holds(2, in_tower((block,8),(block,4)), false, 36).
holds(2, in_tower((block,8),(block,5)), false, 36).
holds(2, in_tower((block,8),(block,6)), false, 36).
holds(2, in_tower((block,8),(block,7)), false, 36).
holds(2, in_tower((block,8),(block,8)), false, 36).
holds(2, in_tower((block,8),(block,9)), false, 36).
holds(2, in_tower((block,9),(block,1)), false, 36).
holds(2, in_tower((block,9),(block,2)), false, 36).
holds(2, in_tower((block,9),(block,3)), false, 36).
holds(2, in_tower((block,9),(block,4)), false, 36).
holds(2, in_tower((block,9),(block,5)), false, 36).
holds(2, in_tower((block,9),(block,6)), false, 36).
holds(2, in_tower((block,9),(block,7)), false, 36).
holds(2, in_tower((block,9),(block,8)), true, 36).
holds(2, in_tower((block,9),(block,9)), true, 36).
holds(2, on((block,1)), (block,2), 36).
holds(2, on((block,2)), (block,3), 36).
holds(2, on((block,3)), puzzle_room_table, 36).
holds(2, on((block,4)), nothing, 36).
holds(2, on((block,5)), nothing, 36).
holds(2, on((block,6)), puzzle_room_table, 36).
holds(2, on((block,7)), puzzle_room_table, 36).
holds(2, on((block,8)), (block,9), 36).
holds(2, on((block,9)), puzzle_room_table, 36).
holds(2, tower_base((block,1),puzzle_room_table), false, 36).
holds(2, tower_base((block,2),puzzle_room_table), false, 36).
holds(2, tower_base((block,3),puzzle_room_table), true, 36).
holds(2, tower_base((block,4),puzzle_room_table), false, 36).
holds(2, tower_base((block,5),puzzle_room_table), false, 36).
holds(2, tower_base((block,6),puzzle_room_table), true, 36).
holds(2, tower_base((block,7),puzzle_room_table), true, 36).
holds(2, tower_base((block,8),puzzle_room_table), false, 36).
holds(2, tower_base((block,9),puzzle_room_table), true, 36).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 36).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 36).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 36).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 36).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 36).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 36).
holds(2, unordered_tower((block,7),puzzle_room_table), false, 36).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 36).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 36).
holds(3, complete_tower(blue,puzzle_room_table), false, 36).
holds(3, complete_tower(red,puzzle_room_table), true, 36).
holds(3, complete_tower(yellow,puzzle_room_table), false, 36).
holds(3, grasping(manipulator_arm_1), (block,7), 36).
holds(3, grasping(manipulator_arm_2), (block,8), 36).
holds(3, in((block,1)), puzzle_room, 36).
holds(3, in((block,2)), puzzle_room, 36).
holds(3, in((block,3)), puzzle_room, 36).
holds(3, in((block,4)), store_room, 36).
holds(3, in((block,5)), store_room, 36).
holds(3, in((block,6)), puzzle_room, 36).
holds(3, in((block,7)), puzzle_room, 36).
holds(3, in((block,8)), puzzle_room, 36).
holds(3, in((block,9)), puzzle_room, 36).
holds(3, in(manipulator_arm_1), puzzle_room, 36).
holds(3, in(manipulator_arm_2), puzzle_room, 36).
holds(3, in(puzzle_room_table), puzzle_room, 36).
holds(3, in(talos), puzzle_room, 36).
holds(3, in_tower((block,1),(block,1)), false, 36).
holds(3, in_tower((block,1),(block,2)), false, 36).
holds(3, in_tower((block,1),(block,3)), false, 36).
holds(3, in_tower((block,1),(block,4)), false, 36).
holds(3, in_tower((block,1),(block,5)), false, 36).
holds(3, in_tower((block,1),(block,6)), false, 36).
holds(3, in_tower((block,1),(block,7)), false, 36).
holds(3, in_tower((block,1),(block,8)), false, 36).
holds(3, in_tower((block,1),(block,9)), false, 36).
holds(3, in_tower((block,2),(block,1)), false, 36).
holds(3, in_tower((block,2),(block,2)), false, 36).
holds(3, in_tower((block,2),(block,3)), false, 36).
holds(3, in_tower((block,2),(block,4)), false, 36).
holds(3, in_tower((block,2),(block,5)), false, 36).
holds(3, in_tower((block,2),(block,6)), false, 36).
holds(3, in_tower((block,2),(block,7)), false, 36).
holds(3, in_tower((block,2),(block,8)), false, 36).
holds(3, in_tower((block,2),(block,9)), false, 36).
holds(3, in_tower((block,3),(block,1)), true, 36).
holds(3, in_tower((block,3),(block,2)), true, 36).
holds(3, in_tower((block,3),(block,3)), true, 36).
holds(3, in_tower((block,3),(block,4)), false, 36).
holds(3, in_tower((block,3),(block,5)), false, 36).
holds(3, in_tower((block,3),(block,6)), false, 36).
holds(3, in_tower((block,3),(block,7)), false, 36).
holds(3, in_tower((block,3),(block,8)), false, 36).
holds(3, in_tower((block,3),(block,9)), false, 36).
holds(3, in_tower((block,4),(block,1)), false, 36).
holds(3, in_tower((block,4),(block,2)), false, 36).
holds(3, in_tower((block,4),(block,3)), false, 36).
holds(3, in_tower((block,4),(block,4)), false, 36).
holds(3, in_tower((block,4),(block,5)), false, 36).
holds(3, in_tower((block,4),(block,6)), false, 36).
holds(3, in_tower((block,4),(block,7)), false, 36).
holds(3, in_tower((block,4),(block,8)), false, 36).
holds(3, in_tower((block,4),(block,9)), false, 36).
holds(3, in_tower((block,5),(block,1)), false, 36).
holds(3, in_tower((block,5),(block,2)), false, 36).
holds(3, in_tower((block,5),(block,3)), false, 36).
holds(3, in_tower((block,5),(block,4)), false, 36).
holds(3, in_tower((block,5),(block,5)), false, 36).
holds(3, in_tower((block,5),(block,6)), false, 36).
holds(3, in_tower((block,5),(block,7)), false, 36).
holds(3, in_tower((block,5),(block,8)), false, 36).
holds(3, in_tower((block,5),(block,9)), false, 36).
holds(3, in_tower((block,6),(block,1)), false, 36).
holds(3, in_tower((block,6),(block,2)), false, 36).
holds(3, in_tower((block,6),(block,3)), false, 36).
holds(3, in_tower((block,6),(block,4)), false, 36).
holds(3, in_tower((block,6),(block,5)), false, 36).
holds(3, in_tower((block,6),(block,6)), true, 36).
holds(3, in_tower((block,6),(block,7)), false, 36).
holds(3, in_tower((block,6),(block,8)), false, 36).
holds(3, in_tower((block,6),(block,9)), false, 36).
holds(3, in_tower((block,7),(block,1)), false, 36).
holds(3, in_tower((block,7),(block,2)), false, 36).
holds(3, in_tower((block,7),(block,3)), false, 36).
holds(3, in_tower((block,7),(block,4)), false, 36).
holds(3, in_tower((block,7),(block,5)), false, 36).
holds(3, in_tower((block,7),(block,6)), false, 36).
holds(3, in_tower((block,7),(block,7)), true, 36).
holds(3, in_tower((block,7),(block,8)), false, 36).
holds(3, in_tower((block,7),(block,9)), false, 36).
holds(3, in_tower((block,8),(block,1)), false, 36).
holds(3, in_tower((block,8),(block,2)), false, 36).
holds(3, in_tower((block,8),(block,3)), false, 36).
holds(3, in_tower((block,8),(block,4)), false, 36).
holds(3, in_tower((block,8),(block,5)), false, 36).
holds(3, in_tower((block,8),(block,6)), false, 36).
holds(3, in_tower((block,8),(block,7)), false, 36).
holds(3, in_tower((block,8),(block,8)), false, 36).
holds(3, in_tower((block,8),(block,9)), false, 36).
holds(3, in_tower((block,9),(block,1)), false, 36).
holds(3, in_tower((block,9),(block,2)), false, 36).
holds(3, in_tower((block,9),(block,3)), false, 36).
holds(3, in_tower((block,9),(block,4)), false, 36).
holds(3, in_tower((block,9),(block,5)), false, 36).
holds(3, in_tower((block,9),(block,6)), false, 36).
holds(3, in_tower((block,9),(block,7)), false, 36).
holds(3, in_tower((block,9),(block,8)), true, 36).
holds(3, in_tower((block,9),(block,9)), true, 36).
holds(3, on((block,1)), (block,2), 36).
holds(3, on((block,2)), (block,3), 36).
holds(3, on((block,3)), puzzle_room_table, 36).
holds(3, on((block,4)), nothing, 36).
holds(3, on((block,5)), nothing, 36).
holds(3, on((block,6)), puzzle_room_table, 36).
holds(3, on((block,7)), puzzle_room_table, 36).
holds(3, on((block,8)), (block,9), 36).
holds(3, on((block,9)), puzzle_room_table, 36).
holds(3, tower_base((block,1),puzzle_room_table), false, 36).
holds(3, tower_base((block,2),puzzle_room_table), false, 36).
holds(3, tower_base((block,3),puzzle_room_table), true, 36).
holds(3, tower_base((block,4),puzzle_room_table), false, 36).
holds(3, tower_base((block,5),puzzle_room_table), false, 36).
holds(3, tower_base((block,6),puzzle_room_table), true, 36).
holds(3, tower_base((block,7),puzzle_room_table), true, 36).
holds(3, tower_base((block,8),puzzle_room_table), false, 36).
holds(3, tower_base((block,9),puzzle_room_table), true, 36).
holds(3, unordered_tower((block,1),puzzle_room_table), false, 36).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 36).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 36).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 36).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 36).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 36).
holds(3, unordered_tower((block,7),puzzle_room_table), false, 36).
holds(3, unordered_tower((block,8),puzzle_room_table), false, 36).
holds(3, unordered_tower((block,9),puzzle_room_table), false, 36).

[14-04-2022_17-53-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[14-04-2022_17-53-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-53-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 588 rules into program part ash_goal_state:

final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(3, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,1),(block,7)), false, true).
final_goal(3, in_tower((block,1),(block,7)), true, false).
final_goal(3, in_tower((block,1),(block,8)), false, true).
final_goal(3, in_tower((block,1),(block,8)), true, false).
final_goal(3, in_tower((block,1),(block,9)), false, true).
final_goal(3, in_tower((block,1),(block,9)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,7)), false, true).
final_goal(3, in_tower((block,2),(block,7)), true, false).
final_goal(3, in_tower((block,2),(block,8)), false, true).
final_goal(3, in_tower((block,2),(block,8)), true, false).
final_goal(3, in_tower((block,2),(block,9)), false, true).
final_goal(3, in_tower((block,2),(block,9)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,7)), false, true).
final_goal(3, in_tower((block,3),(block,7)), true, false).
final_goal(3, in_tower((block,3),(block,8)), false, true).
final_goal(3, in_tower((block,3),(block,8)), true, false).
final_goal(3, in_tower((block,3),(block,9)), false, true).
final_goal(3, in_tower((block,3),(block,9)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,7)), false, true).
final_goal(3, in_tower((block,4),(block,7)), true, false).
final_goal(3, in_tower((block,4),(block,8)), false, true).
final_goal(3, in_tower((block,4),(block,8)), true, false).
final_goal(3, in_tower((block,4),(block,9)), false, true).
final_goal(3, in_tower((block,4),(block,9)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,7)), false, true).
final_goal(3, in_tower((block,5),(block,7)), true, false).
final_goal(3, in_tower((block,5),(block,8)), false, true).
final_goal(3, in_tower((block,5),(block,8)), true, false).
final_goal(3, in_tower((block,5),(block,9)), false, true).
final_goal(3, in_tower((block,5),(block,9)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, in_tower((block,6),(block,7)), false, true).
final_goal(3, in_tower((block,6),(block,7)), true, false).
final_goal(3, in_tower((block,6),(block,8)), false, true).
final_goal(3, in_tower((block,6),(block,8)), true, false).
final_goal(3, in_tower((block,6),(block,9)), false, true).
final_goal(3, in_tower((block,6),(block,9)), true, false).
final_goal(3, in_tower((block,7),(block,1)), false, true).
final_goal(3, in_tower((block,7),(block,1)), true, false).
final_goal(3, in_tower((block,7),(block,2)), false, true).
final_goal(3, in_tower((block,7),(block,2)), true, false).
final_goal(3, in_tower((block,7),(block,3)), false, true).
final_goal(3, in_tower((block,7),(block,3)), true, false).
final_goal(3, in_tower((block,7),(block,4)), false, true).
final_goal(3, in_tower((block,7),(block,4)), true, false).
final_goal(3, in_tower((block,7),(block,5)), false, true).
final_goal(3, in_tower((block,7),(block,5)), true, false).
final_goal(3, in_tower((block,7),(block,6)), false, true).
final_goal(3, in_tower((block,7),(block,6)), true, false).
final_goal(3, in_tower((block,7),(block,7)), false, true).
final_goal(3, in_tower((block,7),(block,7)), true, false).
final_goal(3, in_tower((block,7),(block,8)), false, true).
final_goal(3, in_tower((block,7),(block,8)), true, false).
final_goal(3, in_tower((block,7),(block,9)), false, true).
final_goal(3, in_tower((block,7),(block,9)), true, false).
final_goal(3, in_tower((block,8),(block,1)), false, true).
final_goal(3, in_tower((block,8),(block,1)), true, false).
final_goal(3, in_tower((block,8),(block,2)), false, true).
final_goal(3, in_tower((block,8),(block,2)), true, false).
final_goal(3, in_tower((block,8),(block,3)), false, true).
final_goal(3, in_tower((block,8),(block,3)), true, false).
final_goal(3, in_tower((block,8),(block,4)), false, true).
final_goal(3, in_tower((block,8),(block,4)), true, false).
final_goal(3, in_tower((block,8),(block,5)), false, true).
final_goal(3, in_tower((block,8),(block,5)), true, false).
final_goal(3, in_tower((block,8),(block,6)), false, true).
final_goal(3, in_tower((block,8),(block,6)), true, false).
final_goal(3, in_tower((block,8),(block,7)), false, true).
final_goal(3, in_tower((block,8),(block,7)), true, false).
final_goal(3, in_tower((block,8),(block,8)), false, true).
final_goal(3, in_tower((block,8),(block,8)), true, false).
final_goal(3, in_tower((block,8),(block,9)), false, true).
final_goal(3, in_tower((block,8),(block,9)), true, false).
final_goal(3, in_tower((block,9),(block,1)), false, true).
final_goal(3, in_tower((block,9),(block,1)), true, false).
final_goal(3, in_tower((block,9),(block,2)), false, true).
final_goal(3, in_tower((block,9),(block,2)), true, false).
final_goal(3, in_tower((block,9),(block,3)), false, true).
final_goal(3, in_tower((block,9),(block,3)), true, false).
final_goal(3, in_tower((block,9),(block,4)), false, true).
final_goal(3, in_tower((block,9),(block,4)), true, false).
final_goal(3, in_tower((block,9),(block,5)), false, true).
final_goal(3, in_tower((block,9),(block,5)), true, false).
final_goal(3, in_tower((block,9),(block,6)), false, true).
final_goal(3, in_tower((block,9),(block,6)), true, false).
final_goal(3, in_tower((block,9),(block,7)), false, false).
final_goal(3, in_tower((block,9),(block,7)), true, true).
final_goal(3, in_tower((block,9),(block,8)), false, false).
final_goal(3, in_tower((block,9),(block,8)), true, true).
final_goal(3, in_tower((block,9),(block,9)), false, false).
final_goal(3, in_tower((block,9),(block,9)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), (block,7), false).
final_goal(3, on((block,1)), (block,8), false).
final_goal(3, on((block,1)), (block,9), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), (block,7), false).
final_goal(3, on((block,2)), (block,8), false).
final_goal(3, on((block,2)), (block,9), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), (block,7), false).
final_goal(3, on((block,3)), (block,8), false).
final_goal(3, on((block,3)), (block,9), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), (block,7), false).
final_goal(3, on((block,4)), (block,8), false).
final_goal(3, on((block,4)), (block,9), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), (block,7), false).
final_goal(3, on((block,5)), (block,8), false).
final_goal(3, on((block,5)), (block,9), false).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), (block,7), false).
final_goal(3, on((block,6)), (block,8), false).
final_goal(3, on((block,6)), (block,9), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, on((block,7)), (block,1), false).
final_goal(3, on((block,7)), (block,2), false).
final_goal(3, on((block,7)), (block,3), false).
final_goal(3, on((block,7)), (block,4), false).
final_goal(3, on((block,7)), (block,5), false).
final_goal(3, on((block,7)), (block,6), false).
final_goal(3, on((block,7)), (block,8), true).
final_goal(3, on((block,7)), (block,9), false).
final_goal(3, on((block,7)), nothing, false).
final_goal(3, on((block,7)), puzzle_room_table, false).
final_goal(3, on((block,8)), (block,1), false).
final_goal(3, on((block,8)), (block,2), false).
final_goal(3, on((block,8)), (block,3), false).
final_goal(3, on((block,8)), (block,4), false).
final_goal(3, on((block,8)), (block,5), false).
final_goal(3, on((block,8)), (block,6), false).
final_goal(3, on((block,8)), (block,7), false).
final_goal(3, on((block,8)), (block,9), true).
final_goal(3, on((block,8)), nothing, false).
final_goal(3, on((block,8)), puzzle_room_table, false).
final_goal(3, on((block,9)), (block,1), false).
final_goal(3, on((block,9)), (block,2), false).
final_goal(3, on((block,9)), (block,3), false).
final_goal(3, on((block,9)), (block,4), false).
final_goal(3, on((block,9)), (block,5), false).
final_goal(3, on((block,9)), (block,6), false).
final_goal(3, on((block,9)), (block,7), false).
final_goal(3, on((block,9)), (block,8), false).
final_goal(3, on((block,9)), nothing, false).
final_goal(3, on((block,9)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, tower_base((block,7),puzzle_room_table), false, true).
final_goal(3, tower_base((block,7),puzzle_room_table), true, false).
final_goal(3, tower_base((block,8),puzzle_room_table), false, true).
final_goal(3, tower_base((block,8),puzzle_room_table), true, false).
final_goal(3, tower_base((block,9),puzzle_room_table), false, false).
final_goal(3, tower_base((block,9),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,9),puzzle_room_table), true, false).

[14-04-2022_17-53-34] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=46']

[14-04-2022_17-53-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,8))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 21})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,7),(block,8))', 'F': 'on((block,7))', 'V': '(block,8)', 'I': 22})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,7))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 23})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 24})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,5))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,5)', 'I': 25})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'I': 26})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 27})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 28})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,5))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 29})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 30})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 31})

[14-04-2022_17-53-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-53-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 11 rules into program part base:

sub_goal(3, talos, release(manipulator_arm_2,(block,8)), grasping(manipulator_arm_2), nothing, 21).
sub_goal(3, talos, put(manipulator_arm_1,(block,7),(block,8)), on((block,7)), (block,8), 22).
sub_goal(3, talos, release(manipulator_arm_1,(block,7)), grasping(manipulator_arm_1), nothing, 23).
sub_goal(3, talos, move(store_room), in(talos), store_room, 24).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), (block,5), 25).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), (block,4), 26).
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 27).
sub_goal(3, talos, put(manipulator_arm_1,(block,5),(block,6)), on((block,5)), (block,6), 28).
sub_goal(3, talos, release(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), nothing, 29).
sub_goal(3, talos, put(manipulator_arm_2,(block,4),(block,5)), on((block,4)), (block,5), 30).
sub_goal(3, talos, release(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), nothing, 31).

[14-04-2022_17-53-34] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-53-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[14-04-2022_17-53-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=46']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A2866FD280>]
	incrementor = SolveIncrementor(step_start=36, step_increase=1, step_increase_initial=11, step_end_min=47, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1745.5991816000014, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 36), range_=None), IncPart(name='plan_module', args=('#inc', 36, 'false', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 36, 'false', 'false', 'false', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 36, 21, 31, 'sequential', 'false'), range_=None)]

[14-04-2022_17-53-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-53-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-53-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-53-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1246 rules

[14-04-2022_17-53-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006637599999521626s

[14-04-2022_17-53-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[14-04-2022_17-53-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[14-04-2022_17-53-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.034491s.

[14-04-2022_17-53-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006780s with result Satisfiable.

[14-04-2022_17-53-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[14-04-2022_17-53-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A288D958B0>

[14-04-2022_17-53-34] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 2)
	('start_step', 36)
	('last_sgoals', 31)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('first_sgoals', 21)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A288D958B0>)

[14-04-2022_17-53-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 36). %* None *%
#program plan_module(#inc, 36, false, true). %* None *%
#program optimisation_module(#inc, 36, false, false, false, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 36, 21, 31, sequential, false). %* None *%

[14-04-2022_17-53-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     35 : Current =     46
Incrementor step ends | Minimum  =     47 : Maximum =    300

[14-04-2022_17-53-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(46)]), ('state_module', [Number(36), Number(36)]), ('plan_module', [Number(36), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(36), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('conformance_module', [Number(36), Number(36), Number(21), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(37), Number(36)]), ('plan_module', [Number(37), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(37), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(37)]), ('action_preconditions', [Number(37)]), ('variable_relations', [Number(37)]), ('abstraction_mappings', [Number(37)]), ('conformance_module', [Number(37), Number(36), Number(21), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(38), Number(36)]), ('plan_module', [Number(38), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(38), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('conformance_module', [Number(38), Number(36), Number(21), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(39), Number(36)]), ('plan_module', [Number(39), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(39), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(39)]), ('action_preconditions', [Number(39)]), ('variable_relations', [Number(39)]), ('abstraction_mappings', [Number(39)]), ('conformance_module', [Number(39), Number(36), Number(21), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(40), Number(36)]), ('plan_module', [Number(40), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(40), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(40)]), ('action_preconditions', [Number(40)]), ('variable_relations', [Number(40)]), ('abstraction_mappings', [Number(40)]), ('conformance_module', [Number(40), Number(36), Number(21), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(41), Number(36)]), ('plan_module', [Number(41), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(41), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(41)]), ('action_preconditions', [Number(41)]), ('variable_relations', [Number(41)]), ('abstraction_mappings', [Number(41)]), ('conformance_module', [Number(41), Number(36), Number(21), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(42), Number(36)]), ('plan_module', [Number(42), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(42), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('conformance_module', [Number(42), Number(36), Number(21), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(43), Number(36)]), ('plan_module', [Number(43), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(43), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(43)]), ('action_preconditions', [Number(43)]), ('variable_relations', [Number(43)]), ('abstraction_mappings', [Number(43)]), ('conformance_module', [Number(43), Number(36), Number(21), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(44), Number(36)]), ('plan_module', [Number(44), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(44), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(44)]), ('action_preconditions', [Number(44)]), ('variable_relations', [Number(44)]), ('abstraction_mappings', [Number(44)]), ('conformance_module', [Number(44), Number(36), Number(21), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(45), Number(36)]), ('plan_module', [Number(45), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(45), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(45)]), ('action_preconditions', [Number(45)]), ('variable_relations', [Number(45)]), ('abstraction_mappings', [Number(45)]), ('conformance_module', [Number(45), Number(36), Number(21), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(46), Number(36)]), ('plan_module', [Number(46), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(46), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(46)]), ('action_preconditions', [Number(46)]), ('variable_relations', [Number(46)]), ('abstraction_mappings', [Number(46)]), ('conformance_module', [Number(46), Number(36), Number(21), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.880737s.

[14-04-2022_17-53-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.456090s with result Satisfiable.

[14-04-2022_17-53-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.3368270000000848, Incremental time limit = None
Running cumulative time = 1.3368270000000848, Cumulative time limit = 1745.5991816000014
Used memory = (RSS = 2091.609375Mb, VMS = 2094.945312Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.880737s, Solving = 0.456090s, Total = 1.336827s, Memory = (RSS = 2091.609375Mb, VMS = 2094.945312Mb), Step range = [36-46]), Calls = 1
Final Model :: Total atoms = 15385, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[14-04-2022_17-53-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     46 : Current =     47
Incrementor step ends | Minimum  =     47 : Maximum =    300

[14-04-2022_17-53-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(47)]), ('state_module', [Number(47), Number(36)]), ('plan_module', [Number(47), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(47), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(47)]), ('action_preconditions', [Number(47)]), ('variable_relations', [Number(47)]), ('abstraction_mappings', [Number(47)]), ('conformance_module', [Number(47), Number(36), Number(21), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.147778s.

[14-04-2022_17-53-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.028658s with result Unsatisfiable.

[14-04-2022_17-53-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.17643629999929544, Incremental time limit = None
Running cumulative time = 1.5132632999993803, Cumulative time limit = 1745.5991816000014
Used memory = (RSS = 2093.046875Mb, VMS = 2099.113281Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     47 : Current =     48
Incrementor step ends | Minimum  =     47 : Maximum =    300

[14-04-2022_17-53-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(48)]), ('state_module', [Number(48), Number(36)]), ('plan_module', [Number(48), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(48), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(48)]), ('action_preconditions', [Number(48)]), ('variable_relations', [Number(48)]), ('abstraction_mappings', [Number(48)]), ('conformance_module', [Number(48), Number(36), Number(21), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.150499s.

[14-04-2022_17-53-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.031256s with result Unsatisfiable.

[14-04-2022_17-53-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1817548999997598, Incremental time limit = None
Running cumulative time = 1.69501819999914, Cumulative time limit = 1745.5991816000014
Used memory = (RSS = 2094.410156Mb, VMS = 2099.484375Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     48 : Current =     49
Incrementor step ends | Minimum  =     47 : Maximum =    300

[14-04-2022_17-53-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(49)]), ('state_module', [Number(49), Number(36)]), ('plan_module', [Number(49), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(49), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(49)]), ('action_preconditions', [Number(49)]), ('variable_relations', [Number(49)]), ('abstraction_mappings', [Number(49)]), ('conformance_module', [Number(49), Number(36), Number(21), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.152736s.

[14-04-2022_17-53-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.033197s with result Unsatisfiable.

[14-04-2022_17-53-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.18593260000034206, Incremental time limit = None
Running cumulative time = 1.8809507999994821, Cumulative time limit = 1745.5991816000014
Used memory = (RSS = 2095.667969Mb, VMS = 2099.863281Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     49 : Current =     50
Incrementor step ends | Minimum  =     47 : Maximum =    300

[14-04-2022_17-53-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(50)]), ('state_module', [Number(50), Number(36)]), ('plan_module', [Number(50), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(50), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(50)]), ('action_preconditions', [Number(50)]), ('variable_relations', [Number(50)]), ('abstraction_mappings', [Number(50)]), ('conformance_module', [Number(50), Number(36), Number(21), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.155567s.

[14-04-2022_17-53-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.034933s with result Unsatisfiable.

[14-04-2022_17-53-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.19050050000078045, Incremental time limit = None
Running cumulative time = 2.0714513000002626, Cumulative time limit = 1745.5991816000014
Used memory = (RSS = 2097.101562Mb, VMS = 2100.230469Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     50 : Current =     51
Incrementor step ends | Minimum  =     47 : Maximum =    300

[14-04-2022_17-53-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(51)]), ('state_module', [Number(51), Number(36)]), ('plan_module', [Number(51), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(51), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(51)]), ('action_preconditions', [Number(51)]), ('variable_relations', [Number(51)]), ('abstraction_mappings', [Number(51)]), ('conformance_module', [Number(51), Number(36), Number(21), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.158907s.

[14-04-2022_17-53-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.050085s with result Unsatisfiable.

[14-04-2022_17-53-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.208991700000297, Incremental time limit = None
Running cumulative time = 2.2804430000005596, Cumulative time limit = 1745.5991816000014
Used memory = (RSS = 2103.195312Mb, VMS = 2114.281250Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     51 : Current =     52
Incrementor step ends | Minimum  =     47 : Maximum =    300

[14-04-2022_17-53-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(52)]), ('state_module', [Number(52), Number(36)]), ('plan_module', [Number(52), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(52), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(52)]), ('action_preconditions', [Number(52)]), ('variable_relations', [Number(52)]), ('abstraction_mappings', [Number(52)]), ('conformance_module', [Number(52), Number(36), Number(21), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.162720s.

[14-04-2022_17-53-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.052288s with result Unsatisfiable.

[14-04-2022_17-53-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2150074000010136, Incremental time limit = None
Running cumulative time = 2.495450400001573, Cumulative time limit = 1745.5991816000014
Used memory = (RSS = 2104.929688Mb, VMS = 2114.660156Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     52 : Current =     53
Incrementor step ends | Minimum  =     47 : Maximum =    300

[14-04-2022_17-53-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(53)]), ('state_module', [Number(53), Number(36)]), ('plan_module', [Number(53), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(53), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(53)]), ('action_preconditions', [Number(53)]), ('variable_relations', [Number(53)]), ('abstraction_mappings', [Number(53)]), ('conformance_module', [Number(53), Number(36), Number(21), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.164290s.

[14-04-2022_17-53-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.062100s with result Unsatisfiable.

[14-04-2022_17-53-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.22638929999902757, Incremental time limit = None
Running cumulative time = 2.7218397000006007, Cumulative time limit = 1745.5991816000014
Used memory = (RSS = 2106.464844Mb, VMS = 2115.035156Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     53 : Current =     54
Incrementor step ends | Minimum  =     47 : Maximum =    300

[14-04-2022_17-53-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(54)]), ('state_module', [Number(54), Number(36)]), ('plan_module', [Number(54), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(54), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(54)]), ('action_preconditions', [Number(54)]), ('variable_relations', [Number(54)]), ('abstraction_mappings', [Number(54)]), ('conformance_module', [Number(54), Number(36), Number(21), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.168670s.

[14-04-2022_17-53-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.066439s with result Unsatisfiable.

[14-04-2022_17-53-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.235109399999601, Incremental time limit = None
Running cumulative time = 2.9569491000002017, Cumulative time limit = 1745.5991816000014
Used memory = (RSS = 2108.191406Mb, VMS = 2115.406250Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     54 : Current =     55
Incrementor step ends | Minimum  =     47 : Maximum =    300

[14-04-2022_17-53-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(55)]), ('state_module', [Number(55), Number(36)]), ('plan_module', [Number(55), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(55), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(55)]), ('action_preconditions', [Number(55)]), ('variable_relations', [Number(55)]), ('abstraction_mappings', [Number(55)]), ('conformance_module', [Number(55), Number(36), Number(21), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.170413s.

[14-04-2022_17-53-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.096046s with result Unsatisfiable.

[14-04-2022_17-53-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2664590999993379, Incremental time limit = None
Running cumulative time = 3.2234081999995396, Cumulative time limit = 1745.5991816000014
Used memory = (RSS = 2109.714844Mb, VMS = 2115.781250Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     55 : Current =     56
Incrementor step ends | Minimum  =     47 : Maximum =    300

[14-04-2022_17-53-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(56)]), ('state_module', [Number(56), Number(36)]), ('plan_module', [Number(56), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(56), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(56)]), ('action_preconditions', [Number(56)]), ('variable_relations', [Number(56)]), ('abstraction_mappings', [Number(56)]), ('conformance_module', [Number(56), Number(36), Number(21), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.173482s.

[14-04-2022_17-53-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.120018s with result Unsatisfiable.

[14-04-2022_17-53-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2934998999999152, Incremental time limit = None
Running cumulative time = 3.516908099999455, Cumulative time limit = 1745.5991816000014
Used memory = (RSS = 2112.199219Mb, VMS = 2117.210938Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     56 : Current =     57
Incrementor step ends | Minimum  =     47 : Maximum =    300

[14-04-2022_17-53-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(57)]), ('state_module', [Number(57), Number(36)]), ('plan_module', [Number(57), Number(36), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(57), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(57)]), ('action_preconditions', [Number(57)]), ('variable_relations', [Number(57)]), ('abstraction_mappings', [Number(57)]), ('conformance_module', [Number(57), Number(36), Number(21), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.176999s.

[14-04-2022_17-53-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.122640s with result Satisfiable.

[14-04-2022_17-53-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2996394000001601, Incremental time limit = None
Running cumulative time = 3.816547499999615, Cumulative time limit = 1745.5991816000014
Used memory = (RSS = 2116.921875Mb, VMS = 2121.000000Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.662797s, Solving = 1.153750s, Total = 3.816547s, Memory = (RSS = 2116.921875Mb, VMS = 2121.000000Mb), Step range = [36-57]), Calls = 12
Final Model :: Total atoms = 25880, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[14-04-2022_17-53-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.880737s, Solving = 0.456090s, Total = 1.336827s, Memory = (RSS = 2091.609375Mb, VMS = 2094.945312Mb), Step range = [36-46]
2 : Statistics :: Grounding = 0.147778s, Solving = 0.028658s, Total = 0.176436s, Memory = (RSS = 2093.046875Mb, VMS = 2099.113281Mb), Step range = [47-47]
3 : Statistics :: Grounding = 0.150499s, Solving = 0.031256s, Total = 0.181755s, Memory = (RSS = 2094.410156Mb, VMS = 2099.484375Mb), Step range = [48-48]
4 : Statistics :: Grounding = 0.152736s, Solving = 0.033197s, Total = 0.185933s, Memory = (RSS = 2095.667969Mb, VMS = 2099.863281Mb), Step range = [49-49]
5 : Statistics :: Grounding = 0.155567s, Solving = 0.034933s, Total = 0.190501s, Memory = (RSS = 2097.101562Mb, VMS = 2100.230469Mb), Step range = [50-50]
6 : Statistics :: Grounding = 0.158907s, Solving = 0.050085s, Total = 0.208992s, Memory = (RSS = 2103.195312Mb, VMS = 2114.281250Mb), Step range = [51-51]
7 : Statistics :: Grounding = 0.162720s, Solving = 0.052288s, Total = 0.215007s, Memory = (RSS = 2104.929688Mb, VMS = 2114.660156Mb), Step range = [52-52]
8 : Statistics :: Grounding = 0.164290s, Solving = 0.062100s, Total = 0.226389s, Memory = (RSS = 2106.464844Mb, VMS = 2115.035156Mb), Step range = [53-53]
9 : Statistics :: Grounding = 0.168670s, Solving = 0.066439s, Total = 0.235109s, Memory = (RSS = 2108.191406Mb, VMS = 2115.406250Mb), Step range = [54-54]
10 : Statistics :: Grounding = 0.170413s, Solving = 0.096046s, Total = 0.266459s, Memory = (RSS = 2109.714844Mb, VMS = 2115.781250Mb), Step range = [55-55]
11 : Statistics :: Grounding = 0.173482s, Solving = 0.120018s, Total = 0.293500s, Memory = (RSS = 2112.199219Mb, VMS = 2117.210938Mb), Step range = [56-56]
12 : Statistics :: Grounding = 0.176999s, Solving = 0.122640s, Total = 0.299639s, Memory = (RSS = 2116.921875Mb, VMS = 2121.000000Mb), Step range = [57-57]

[14-04-2022_17-53-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 3.816547s due to: Stop condition reached.

[14-04-2022_17-53-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[14-04-2022_17-53-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[14-04-2022_17-53-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-53-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-53-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[14-04-2022_17-53-39] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 25, 43: 26, 44: 27, 45: 28, 46: 29, 47: 29, 48: 30, 49: 31, 50: 32, 51: 32, 52: 33, 53: 34, 54: 35, 55: 35, 56: 36}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 27, 15: 28, 16: 29, 17: 30, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 42, 26: 43, 27: 44, 28: 45, 29: 47, 30: 48, 31: 49, 32: 51, 33: 52, 34: 53, 35: 55, 36: 56}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 16, 33: 17, 34: 18, 35: 19, 36: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 27, 12: 28, 13: 29, 14: 30, 15: 31, 16: 32, 17: 33, 18: 34, 19: 35, 20: 36}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 8, 16: 8, 17: 8, 18: 9, 19: 9, 20: 9, 21: 9, 22: 10, 23: 11, 24: 12, 25: 13, 26: 13, 27: 14, 28: 15, 29: 16, 30: 17, 31: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 14, 8: 17, 9: 21, 10: 22, 11: 23, 12: 24, 13: 26, 14: 27, 15: 28, 16: 29, 17: 31}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-53-39] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 25, 43: 26, 44: 27, 45: 28, 46: 29, 47: 29, 48: 30, 49: 31, 50: 32, 51: 32, 52: 33, 53: 34, 54: 35, 55: 35, 56: 36}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 27, 15: 28, 16: 29, 17: 30, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 42, 26: 43, 27: 44, 28: 45, 29: 47, 30: 48, 31: 49, 32: 51, 33: 52, 34: 53, 35: 55, 36: 56}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 16, 33: 17, 34: 18, 35: 19, 36: 20, 37: 21, 38: 22, 39: 23, 40: 24, 41: 24, 42: 24, 43: 24, 44: 25, 45: 25, 46: 25, 47: 25, 48: 26, 49: 27, 50: 27, 51: 27, 52: 28, 53: 28, 54: 29, 55: 30, 56: 30, 57: 31}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 27, 12: 28, 13: 29, 14: 30, 15: 31, 16: 32, 17: 33, 18: 34, 19: 35, 20: 36, 21: 37, 22: 38, 23: 39, 24: 43, 25: 47, 26: 48, 27: 51, 28: 53, 29: 54, 30: 56, 31: 57}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 8, 16: 8, 17: 8, 18: 9, 19: 9, 20: 9, 21: 9, 22: 10, 23: 11, 24: 12, 25: 13, 26: 13, 27: 14, 28: 15, 29: 16, 30: 17, 31: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 14, 8: 17, 9: 21, 10: 22, 11: 23, 12: 24, 13: 26, 14: 27, 15: 28, 16: 29, 17: 31}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-53-39] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 31, Last requested goal index = 31, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[14-04-2022_17-53-39] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.662797s, Solving = 1.153750s, Total = 3.816547s, Memory = (RSS = 2116.921875Mb, VMS = 2121.000000Mb), Step range = [36-57]), Calls = 12
Model :: Total atoms = 25880, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[14-04-2022_17-53-39] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 21 :: Actions = 21                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,puzzle_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,puzzle_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 11:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 12:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,8))
Step 16:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 17:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 18:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 19:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 20:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 21:
    Current Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 22:
    Current Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
Step 23:
    Current Sub-goals:
        [Index = 8] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 8] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
Step 24:
    Current Sub-goals:
        [Index = 9] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 9] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,3))
Step 25:
    Current Sub-goals:
        [Index = 10] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 10] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,2))
Step 26:
    Current Sub-goals:
        [Index = 11] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 27:
    Current Sub-goals:
        [Index = 11] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 11] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_arm_1,(block,2),(block,3))
Step 28:
    Current Sub-goals:
        [Index = 12] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 12] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,2))
Step 29:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,1))
Step 30:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_arm_1,(block,1),(block,2))
Step 31:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,1))
Step 32:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Achieved Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,9))
Step 33:
    Current Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,9),puzzle_room_table)
Step 34:
    Current Sub-goals:
        [Index = 18] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 18] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,9))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : grasp(manipulator_arm_1,(block,7)) -> grasping(manipulator_arm_1) = (block,7)
    Achieved Sub-goals:
        [Index = 19] talos : grasp(manipulator_arm_1,(block,7)) -> grasping(manipulator_arm_1) = (block,7)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,7))
Step 36:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Planned actions:
        talos : put(manipulator_arm_2,(block,8),(block,9))
Step 37:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,8))
Step 38:
    Current Sub-goals:
        [Index = 22] talos : put(manipulator_arm_1,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Achieved Sub-goals:
        [Index = 22] talos : put(manipulator_arm_1,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Planned actions:
        talos : put(manipulator_arm_1,(block,7),(block,8))
Step 39:
    Current Sub-goals:
        [Index = 23] talos : release(manipulator_arm_1,(block,7)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 23] talos : release(manipulator_arm_1,(block,7)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,7))
Step 40:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 41:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 42:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 43:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 44:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 45:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 46:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,4))
Step 47:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,5))
Step 48:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 49:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 50:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 51:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 52:
    Current Sub-goals:
        [Index = 28] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 53:
    Current Sub-goals:
        [Index = 28] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 28] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_arm_1,(block,5),(block,6))
Step 54:
    Current Sub-goals:
        [Index = 29] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 29] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,5))
Step 55:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 56:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_arm_2,(block,4),(block,5))
Step 57:
    Current Sub-goals:
        [Index = 31] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 31] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,4))

[14-04-2022_17-53-39] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=36, end_step=None

[14-04-2022_17-53-39] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for parts of the existing plan at the current level that have already been divided: start_step=36

[14-04-2022_17-53-39] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=36

[14-04-2022_17-53-39] DEBUG :: ASH Planner Main #1 >> Preparing to invoke division strategy...

[14-04-2022_17-53-39] DEBUG :: ASH Planner Main #1 >> Online method OnlineMethod.GroundFirst chose to invoke the division strategy before a downwards level change:Current increment = 5, Current planning level is complete = True

[14-04-2022_17-53-39] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 57, chosen step range to extract = range(36, 58)

[14-04-2022_17-53-39] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 56, Total actions = 56, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-39] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =  21, AC =  21, CF = 1.0, GT =   7.14s, ST =   6.14s, OT = 0.00s, TT =  13.28s, EF = (LE = 1.9, AC = 1.9), ED = (LE = 1.2, AC = 1.2), EB = (LE = 0.6, AC = 0.6)

[14-04-2022_17-53-39] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=21, start_step=36, blend=Blend(left=0, right=0)

[14-04-2022_17-53-39] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=1, small_group_size=10, large_group_size=11

[14-04-2022_17-53-39] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=46, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[14-04-2022_17-53-39] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 2, Problem Range = [5-6], Size = 21, Sub-goal Stage Range = [37-57]
Division points [total=1] : [(Index = 46, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[14-04-2022_17-53-39] DEBUG :: ASH Planner Main #1 >> Monolevel problem 3 at level 2 solved.

[14-04-2022_17-53-39] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 5 at level 1:
Total Templated Partial Problems = 2, Problem Range = [5-6], Size = 21, Sub-goal Stage Range = [37-57]
Division points [total=1] : [(Index = 46, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[14-04-2022_17-53-39] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [37-46]

[14-04-2022_17-53-39] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 56, chosen step range to extract = range(0, 57)

[14-04-2022_17-53-39] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 56, Total actions = 56, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-39] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 57, chosen step range to extract = range(0, 58)

[14-04-2022_17-53-39] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 56, Total actions = 56, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-39] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 31, chosen step range to extract = range(0, 32)

[14-04-2022_17-53-39] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 56, Total actions = 56, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-39] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[14-04-2022_17-53-39] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 56, Total actions = 56, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-39] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [37-46], problem number = 5, increment number = 5

[14-04-2022_17-53-39] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 37)
	('last_sgoals', 46)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1727.1003460000065)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[14-04-2022_17-53-39] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [37-46] : Concurrency disabled : Minimum search length bound enabled with value 65

[14-04-2022_17-53-39] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 37
last_sgoals = 46
start_step = 56
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 65

[14-04-2022_17-53-39] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[14-04-2022_17-53-39] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[14-04-2022_17-53-39] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[14-04-2022_17-53-39] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[14-04-2022_17-53-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[14-04-2022_17-53-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[14-04-2022_17-53-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-53-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-53-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-53-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-53-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[14-04-2022_17-53-39] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-53-39] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 56 as problem start state.

[14-04-2022_17-53-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'S': 56})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,7))', 'S': 56})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,8))', 'S': 56})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 56})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 56})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 56})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 56})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 56})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,7)', 'S': 56})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,8)', 'S': 56})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,7)', 'S': 56})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,8)', 'S': 56})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 56})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 56})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 56})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'S': 56})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 56})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 56})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 56})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 56})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 56})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 56})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'S': 56})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'S': 56})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 56})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 56})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 56})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 56})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'S': 56})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 56})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 56})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 56})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 56})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 56})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,7)', 'S': 56})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,8)', 'S': 56})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 56})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 56})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 56})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 56})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 56})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 56})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 56})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'puzzle_room', 'S': 56})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 56})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 56})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 56})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 56})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 56})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'S': 56})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 56})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 56})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 56})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 56})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 56})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 56})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'S': 56})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 56})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 56})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 56})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 56})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 56})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 56})

[14-04-2022_17-53-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-53-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 56).
holds(1, complete_tower(red,puzzle_room_table), true, 56).
holds(1, complete_tower(yellow,puzzle_room_table), false, 56).
holds(1, configuration(manipulator_end_1), aligned_with((block,7)), 56).
holds(1, configuration(manipulator_end_2), aligned_with((block,8)), 56).
holds(1, configuration(manipulator_limb_1), extended, 56).
holds(1, configuration(manipulator_limb_2), extended, 56).
holds(1, configuration(puzzle_room_door), open, 56).
holds(1, configuration(starting_room_door), closed, 56).
holds(1, configuration(store_room_door), open, 56).
holds(1, grasping(manipulator_arm_1), (block,7), 56).
holds(1, grasping(manipulator_arm_2), (block,8), 56).
holds(1, grasping(manipulator_end_1), (block,7), 56).
holds(1, grasping(manipulator_end_2), (block,8), 56).
holds(1, in((block,1)), (puzzle_room,1), 56).
holds(1, in((block,2)), (puzzle_room,1), 56).
holds(1, in((block,3)), (puzzle_room,1), 56).
holds(1, in((block,4)), (store_room,0), 56).
holds(1, in((block,5)), (store_room,0), 56).
holds(1, in((block,6)), (puzzle_room,1), 56).
holds(1, in((block,7)), (puzzle_room,1), 56).
holds(1, in((block,8)), (puzzle_room,1), 56).
holds(1, in((block,9)), (puzzle_room,1), 56).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 56).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 56).
holds(1, in(manipulator_end_1), (puzzle_room,1), 56).
holds(1, in(manipulator_end_2), (puzzle_room,1), 56).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 56).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 56).
holds(1, in(puzzle_room_table), (puzzle_room,1), 56).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 56).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 56).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 56).
holds(1, in(talos), (puzzle_room,1), 56).
holds(1, in_tower((block,1),(block,1)), false, 56).
holds(1, in_tower((block,1),(block,2)), false, 56).
holds(1, in_tower((block,1),(block,3)), false, 56).
holds(1, in_tower((block,1),(block,4)), false, 56).
holds(1, in_tower((block,1),(block,5)), false, 56).
holds(1, in_tower((block,1),(block,6)), false, 56).
holds(1, in_tower((block,1),(block,7)), false, 56).
holds(1, in_tower((block,1),(block,8)), false, 56).
holds(1, in_tower((block,1),(block,9)), false, 56).
holds(1, in_tower((block,2),(block,1)), false, 56).
holds(1, in_tower((block,2),(block,2)), false, 56).
holds(1, in_tower((block,2),(block,3)), false, 56).
holds(1, in_tower((block,2),(block,4)), false, 56).
holds(1, in_tower((block,2),(block,5)), false, 56).
holds(1, in_tower((block,2),(block,6)), false, 56).
holds(1, in_tower((block,2),(block,7)), false, 56).
holds(1, in_tower((block,2),(block,8)), false, 56).
holds(1, in_tower((block,2),(block,9)), false, 56).
holds(1, in_tower((block,3),(block,1)), true, 56).
holds(1, in_tower((block,3),(block,2)), true, 56).
holds(1, in_tower((block,3),(block,3)), true, 56).
holds(1, in_tower((block,3),(block,4)), false, 56).
holds(1, in_tower((block,3),(block,5)), false, 56).
holds(1, in_tower((block,3),(block,6)), false, 56).
holds(1, in_tower((block,3),(block,7)), false, 56).
holds(1, in_tower((block,3),(block,8)), false, 56).
holds(1, in_tower((block,3),(block,9)), false, 56).
holds(1, in_tower((block,4),(block,1)), false, 56).
holds(1, in_tower((block,4),(block,2)), false, 56).
holds(1, in_tower((block,4),(block,3)), false, 56).
holds(1, in_tower((block,4),(block,4)), false, 56).
holds(1, in_tower((block,4),(block,5)), false, 56).
holds(1, in_tower((block,4),(block,6)), false, 56).
holds(1, in_tower((block,4),(block,7)), false, 56).
holds(1, in_tower((block,4),(block,8)), false, 56).
holds(1, in_tower((block,4),(block,9)), false, 56).
holds(1, in_tower((block,5),(block,1)), false, 56).
holds(1, in_tower((block,5),(block,2)), false, 56).
holds(1, in_tower((block,5),(block,3)), false, 56).
holds(1, in_tower((block,5),(block,4)), false, 56).
holds(1, in_tower((block,5),(block,5)), false, 56).
holds(1, in_tower((block,5),(block,6)), false, 56).
holds(1, in_tower((block,5),(block,7)), false, 56).
holds(1, in_tower((block,5),(block,8)), false, 56).
holds(1, in_tower((block,5),(block,9)), false, 56).
holds(1, in_tower((block,6),(block,1)), false, 56).
holds(1, in_tower((block,6),(block,2)), false, 56).
holds(1, in_tower((block,6),(block,3)), false, 56).
holds(1, in_tower((block,6),(block,4)), false, 56).
holds(1, in_tower((block,6),(block,5)), false, 56).
holds(1, in_tower((block,6),(block,6)), true, 56).
holds(1, in_tower((block,6),(block,7)), false, 56).
holds(1, in_tower((block,6),(block,8)), false, 56).
holds(1, in_tower((block,6),(block,9)), false, 56).
holds(1, in_tower((block,7),(block,1)), false, 56).
holds(1, in_tower((block,7),(block,2)), false, 56).
holds(1, in_tower((block,7),(block,3)), false, 56).
holds(1, in_tower((block,7),(block,4)), false, 56).
holds(1, in_tower((block,7),(block,5)), false, 56).
holds(1, in_tower((block,7),(block,6)), false, 56).
holds(1, in_tower((block,7),(block,7)), true, 56).
holds(1, in_tower((block,7),(block,8)), false, 56).
holds(1, in_tower((block,7),(block,9)), false, 56).
holds(1, in_tower((block,8),(block,1)), false, 56).
holds(1, in_tower((block,8),(block,2)), false, 56).
holds(1, in_tower((block,8),(block,3)), false, 56).
holds(1, in_tower((block,8),(block,4)), false, 56).
holds(1, in_tower((block,8),(block,5)), false, 56).
holds(1, in_tower((block,8),(block,6)), false, 56).
holds(1, in_tower((block,8),(block,7)), false, 56).
holds(1, in_tower((block,8),(block,8)), false, 56).
holds(1, in_tower((block,8),(block,9)), false, 56).
holds(1, in_tower((block,9),(block,1)), false, 56).
holds(1, in_tower((block,9),(block,2)), false, 56).
holds(1, in_tower((block,9),(block,3)), false, 56).
holds(1, in_tower((block,9),(block,4)), false, 56).
holds(1, in_tower((block,9),(block,5)), false, 56).
holds(1, in_tower((block,9),(block,6)), false, 56).
holds(1, in_tower((block,9),(block,7)), false, 56).
holds(1, in_tower((block,9),(block,8)), true, 56).
holds(1, in_tower((block,9),(block,9)), true, 56).
holds(1, on((block,1)), (block,2), 56).
holds(1, on((block,2)), (block,3), 56).
holds(1, on((block,3)), puzzle_room_table_left, 56).
holds(1, on((block,4)), nothing, 56).
holds(1, on((block,5)), nothing, 56).
holds(1, on((block,6)), puzzle_room_table_right, 56).
holds(1, on((block,7)), puzzle_room_table_middle, 56).
holds(1, on((block,8)), (block,9), 56).
holds(1, on((block,9)), puzzle_room_table_middle, 56).
holds(1, tower_base((block,1),puzzle_room_table), false, 56).
holds(1, tower_base((block,2),puzzle_room_table), false, 56).
holds(1, tower_base((block,3),puzzle_room_table), true, 56).
holds(1, tower_base((block,4),puzzle_room_table), false, 56).
holds(1, tower_base((block,5),puzzle_room_table), false, 56).
holds(1, tower_base((block,6),puzzle_room_table), true, 56).
holds(1, tower_base((block,7),puzzle_room_table), true, 56).
holds(1, tower_base((block,8),puzzle_room_table), false, 56).
holds(1, tower_base((block,9),puzzle_room_table), true, 56).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 56).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 56).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 56).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 56).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 56).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 56).
holds(1, unordered_tower((block,7),puzzle_room_table), false, 56).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 56).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 56).
holds(2, complete_tower(blue,puzzle_room_table), false, 56).
holds(2, complete_tower(red,puzzle_room_table), true, 56).
holds(2, complete_tower(yellow,puzzle_room_table), false, 56).
holds(2, configuration(manipulator_arm_1), extended, 56).
holds(2, configuration(manipulator_arm_2), extended, 56).
holds(2, configuration(puzzle_room_door), open, 56).
holds(2, configuration(starting_room_door), closed, 56).
holds(2, configuration(store_room_door), open, 56).
holds(2, grasping(manipulator_arm_1), (block,7), 56).
holds(2, grasping(manipulator_arm_2), (block,8), 56).
holds(2, in((block,1)), puzzle_room, 56).
holds(2, in((block,2)), puzzle_room, 56).
holds(2, in((block,3)), puzzle_room, 56).
holds(2, in((block,4)), store_room, 56).
holds(2, in((block,5)), store_room, 56).
holds(2, in((block,6)), puzzle_room, 56).
holds(2, in((block,7)), puzzle_room, 56).
holds(2, in((block,8)), puzzle_room, 56).
holds(2, in((block,9)), puzzle_room, 56).
holds(2, in(manipulator_arm_1), puzzle_room, 56).
holds(2, in(manipulator_arm_2), puzzle_room, 56).
holds(2, in(puzzle_room_table), puzzle_room, 56).
holds(2, in(talos), puzzle_room, 56).
holds(2, in_tower((block,1),(block,1)), false, 56).
holds(2, in_tower((block,1),(block,2)), false, 56).
holds(2, in_tower((block,1),(block,3)), false, 56).
holds(2, in_tower((block,1),(block,4)), false, 56).
holds(2, in_tower((block,1),(block,5)), false, 56).
holds(2, in_tower((block,1),(block,6)), false, 56).
holds(2, in_tower((block,1),(block,7)), false, 56).
holds(2, in_tower((block,1),(block,8)), false, 56).
holds(2, in_tower((block,1),(block,9)), false, 56).
holds(2, in_tower((block,2),(block,1)), false, 56).
holds(2, in_tower((block,2),(block,2)), false, 56).
holds(2, in_tower((block,2),(block,3)), false, 56).
holds(2, in_tower((block,2),(block,4)), false, 56).
holds(2, in_tower((block,2),(block,5)), false, 56).
holds(2, in_tower((block,2),(block,6)), false, 56).
holds(2, in_tower((block,2),(block,7)), false, 56).
holds(2, in_tower((block,2),(block,8)), false, 56).
holds(2, in_tower((block,2),(block,9)), false, 56).
holds(2, in_tower((block,3),(block,1)), true, 56).
holds(2, in_tower((block,3),(block,2)), true, 56).
holds(2, in_tower((block,3),(block,3)), true, 56).
holds(2, in_tower((block,3),(block,4)), false, 56).
holds(2, in_tower((block,3),(block,5)), false, 56).
holds(2, in_tower((block,3),(block,6)), false, 56).
holds(2, in_tower((block,3),(block,7)), false, 56).
holds(2, in_tower((block,3),(block,8)), false, 56).
holds(2, in_tower((block,3),(block,9)), false, 56).
holds(2, in_tower((block,4),(block,1)), false, 56).
holds(2, in_tower((block,4),(block,2)), false, 56).
holds(2, in_tower((block,4),(block,3)), false, 56).
holds(2, in_tower((block,4),(block,4)), false, 56).
holds(2, in_tower((block,4),(block,5)), false, 56).
holds(2, in_tower((block,4),(block,6)), false, 56).
holds(2, in_tower((block,4),(block,7)), false, 56).
holds(2, in_tower((block,4),(block,8)), false, 56).
holds(2, in_tower((block,4),(block,9)), false, 56).
holds(2, in_tower((block,5),(block,1)), false, 56).
holds(2, in_tower((block,5),(block,2)), false, 56).
holds(2, in_tower((block,5),(block,3)), false, 56).
holds(2, in_tower((block,5),(block,4)), false, 56).
holds(2, in_tower((block,5),(block,5)), false, 56).
holds(2, in_tower((block,5),(block,6)), false, 56).
holds(2, in_tower((block,5),(block,7)), false, 56).
holds(2, in_tower((block,5),(block,8)), false, 56).
holds(2, in_tower((block,5),(block,9)), false, 56).
holds(2, in_tower((block,6),(block,1)), false, 56).
holds(2, in_tower((block,6),(block,2)), false, 56).
holds(2, in_tower((block,6),(block,3)), false, 56).
holds(2, in_tower((block,6),(block,4)), false, 56).
holds(2, in_tower((block,6),(block,5)), false, 56).
holds(2, in_tower((block,6),(block,6)), true, 56).
holds(2, in_tower((block,6),(block,7)), false, 56).
holds(2, in_tower((block,6),(block,8)), false, 56).
holds(2, in_tower((block,6),(block,9)), false, 56).
holds(2, in_tower((block,7),(block,1)), false, 56).
holds(2, in_tower((block,7),(block,2)), false, 56).
holds(2, in_tower((block,7),(block,3)), false, 56).
holds(2, in_tower((block,7),(block,4)), false, 56).
holds(2, in_tower((block,7),(block,5)), false, 56).
holds(2, in_tower((block,7),(block,6)), false, 56).
holds(2, in_tower((block,7),(block,7)), true, 56).
holds(2, in_tower((block,7),(block,8)), false, 56).
holds(2, in_tower((block,7),(block,9)), false, 56).
holds(2, in_tower((block,8),(block,1)), false, 56).
holds(2, in_tower((block,8),(block,2)), false, 56).
holds(2, in_tower((block,8),(block,3)), false, 56).
holds(2, in_tower((block,8),(block,4)), false, 56).
holds(2, in_tower((block,8),(block,5)), false, 56).
holds(2, in_tower((block,8),(block,6)), false, 56).
holds(2, in_tower((block,8),(block,7)), false, 56).
holds(2, in_tower((block,8),(block,8)), false, 56).
holds(2, in_tower((block,8),(block,9)), false, 56).
holds(2, in_tower((block,9),(block,1)), false, 56).
holds(2, in_tower((block,9),(block,2)), false, 56).
holds(2, in_tower((block,9),(block,3)), false, 56).
holds(2, in_tower((block,9),(block,4)), false, 56).
holds(2, in_tower((block,9),(block,5)), false, 56).
holds(2, in_tower((block,9),(block,6)), false, 56).
holds(2, in_tower((block,9),(block,7)), false, 56).
holds(2, in_tower((block,9),(block,8)), true, 56).
holds(2, in_tower((block,9),(block,9)), true, 56).
holds(2, on((block,1)), (block,2), 56).
holds(2, on((block,2)), (block,3), 56).
holds(2, on((block,3)), puzzle_room_table, 56).
holds(2, on((block,4)), nothing, 56).
holds(2, on((block,5)), nothing, 56).
holds(2, on((block,6)), puzzle_room_table, 56).
holds(2, on((block,7)), puzzle_room_table, 56).
holds(2, on((block,8)), (block,9), 56).
holds(2, on((block,9)), puzzle_room_table, 56).
holds(2, tower_base((block,1),puzzle_room_table), false, 56).
holds(2, tower_base((block,2),puzzle_room_table), false, 56).
holds(2, tower_base((block,3),puzzle_room_table), true, 56).
holds(2, tower_base((block,4),puzzle_room_table), false, 56).
holds(2, tower_base((block,5),puzzle_room_table), false, 56).
holds(2, tower_base((block,6),puzzle_room_table), true, 56).
holds(2, tower_base((block,7),puzzle_room_table), true, 56).
holds(2, tower_base((block,8),puzzle_room_table), false, 56).
holds(2, tower_base((block,9),puzzle_room_table), true, 56).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 56).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 56).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 56).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 56).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 56).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 56).
holds(2, unordered_tower((block,7),puzzle_room_table), false, 56).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 56).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 56).

[14-04-2022_17-53-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[14-04-2022_17-53-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-53-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[14-04-2022_17-53-39] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=65']

[14-04-2022_17-53-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,8))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 37})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,7),(block,8))', 'F': 'on((block,7))', 'V': '(block,8)', 'I': 38})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,7))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 39})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 40})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 41})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 42})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 43})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 44})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 45})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'I': 46})

[14-04-2022_17-53-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-53-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 10 rules into program part base:

sub_goal(2, talos, release(manipulator_arm_2,(block,8)), grasping(manipulator_arm_2), nothing, 37).
sub_goal(2, talos, put(manipulator_arm_1,(block,7),(block,8)), on((block,7)), (block,8), 38).
sub_goal(2, talos, release(manipulator_arm_1,(block,7)), grasping(manipulator_arm_1), nothing, 39).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 40).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 41).
sub_goal(2, talos, move(hallway), in(talos), hallway, 42).
sub_goal(2, talos, move(store_room), in(talos), store_room, 43).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 44).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 45).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), (block,4), 46).

[14-04-2022_17-53-39] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-53-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[14-04-2022_17-53-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=65']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A2866FD1F0>]
	incrementor = SolveIncrementor(step_start=56, step_increase=1, step_increase_initial=10, step_end_min=66, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1727.1003460000065, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 56), range_=None), IncPart(name='plan_module', args=('#inc', 56, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 56, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 56, 37, 46, 'sequential', 'false'), range_=None)]

[14-04-2022_17-53-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-53-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-53-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-53-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1279 rules

[14-04-2022_17-53-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0067853000000468455s

[14-04-2022_17-53-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[14-04-2022_17-53-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[14-04-2022_17-53-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.041311s.

[14-04-2022_17-53-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007790s with result Satisfiable.

[14-04-2022_17-53-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[14-04-2022_17-53-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A288DB1400>

[14-04-2022_17-53-39] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 56)
	('last_sgoals', 46)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('first_sgoals', 37)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A288DB1400>)

[14-04-2022_17-53-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 56). %* None *%
#program plan_module(#inc, 56, false, false). %* None *%
#program optimisation_module(#inc, 56, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 56, 37, 46, sequential, false). %* None *%

[14-04-2022_17-53-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     55 : Current =     65
Incrementor step ends | Minimum  =     66 : Maximum =    300

[14-04-2022_17-53-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(65)]), ('state_module', [Number(56), Number(56)]), ('plan_module', [Number(56), Number(56), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(56), Number(56), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(56)]), ('action_preconditions', [Number(56)]), ('variable_relations', [Number(56)]), ('abstraction_mappings', [Number(56)]), ('conformance_module', [Number(56), Number(56), Number(37), Number(46), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(57), Number(56)]), ('plan_module', [Number(57), Number(56), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(57), Number(56), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(57)]), ('action_preconditions', [Number(57)]), ('variable_relations', [Number(57)]), ('abstraction_mappings', [Number(57)]), ('conformance_module', [Number(57), Number(56), Number(37), Number(46), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(58), Number(56)]), ('plan_module', [Number(58), Number(56), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(58), Number(56), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(58)]), ('action_preconditions', [Number(58)]), ('variable_relations', [Number(58)]), ('abstraction_mappings', [Number(58)]), ('conformance_module', [Number(58), Number(56), Number(37), Number(46), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(59), Number(56)]), ('plan_module', [Number(59), Number(56), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(59), Number(56), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(59)]), ('action_preconditions', [Number(59)]), ('variable_relations', [Number(59)]), ('abstraction_mappings', [Number(59)]), ('conformance_module', [Number(59), Number(56), Number(37), Number(46), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(60), Number(56)]), ('plan_module', [Number(60), Number(56), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(60), Number(56), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(60)]), ('action_preconditions', [Number(60)]), ('variable_relations', [Number(60)]), ('abstraction_mappings', [Number(60)]), ('conformance_module', [Number(60), Number(56), Number(37), Number(46), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(61), Number(56)]), ('plan_module', [Number(61), Number(56), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(61), Number(56), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(61)]), ('action_preconditions', [Number(61)]), ('variable_relations', [Number(61)]), ('abstraction_mappings', [Number(61)]), ('conformance_module', [Number(61), Number(56), Number(37), Number(46), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(62), Number(56)]), ('plan_module', [Number(62), Number(56), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(62), Number(56), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(62)]), ('action_preconditions', [Number(62)]), ('variable_relations', [Number(62)]), ('abstraction_mappings', [Number(62)]), ('conformance_module', [Number(62), Number(56), Number(37), Number(46), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(63), Number(56)]), ('plan_module', [Number(63), Number(56), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(63), Number(56), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(63)]), ('action_preconditions', [Number(63)]), ('variable_relations', [Number(63)]), ('abstraction_mappings', [Number(63)]), ('conformance_module', [Number(63), Number(56), Number(37), Number(46), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(64), Number(56)]), ('plan_module', [Number(64), Number(56), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(64), Number(56), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(64)]), ('action_preconditions', [Number(64)]), ('variable_relations', [Number(64)]), ('abstraction_mappings', [Number(64)]), ('conformance_module', [Number(64), Number(56), Number(37), Number(46), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(65), Number(56)]), ('plan_module', [Number(65), Number(56), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(65), Number(56), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(65)]), ('action_preconditions', [Number(65)]), ('variable_relations', [Number(65)]), ('abstraction_mappings', [Number(65)]), ('conformance_module', [Number(65), Number(56), Number(37), Number(46), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.363567s.

[14-04-2022_17-53-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.833584s with result Satisfiable.

[14-04-2022_17-53-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.197151099999246, Incremental time limit = None
Running cumulative time = 2.197151099999246, Cumulative time limit = 1727.1003460000065
Used memory = (RSS = 2111.171875Mb, VMS = 2117.847656Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 9
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.363567s, Solving = 0.833584s, Total = 2.197151s, Memory = (RSS = 2111.171875Mb, VMS = 2117.847656Mb), Step range = [56-65]), Calls = 1
Final Model :: Total atoms = 13259, Cost = (-9,), Optimality proven = False, Number = 8, Thread ID = 3, Model type = ModelType.StableModel

[14-04-2022_17-53-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     65 : Current =     66
Incrementor step ends | Minimum  =     66 : Maximum =    300

[14-04-2022_17-53-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(66)]), ('state_module', [Number(66), Number(56)]), ('plan_module', [Number(66), Number(56), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(66), Number(56), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(66)]), ('action_preconditions', [Number(66)]), ('variable_relations', [Number(66)]), ('abstraction_mappings', [Number(66)]), ('conformance_module', [Number(66), Number(56), Number(37), Number(46), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.218792s.

[14-04-2022_17-53-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.045253s with result Unsatisfiable.

[14-04-2022_17-53-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2640453999993042, Incremental time limit = None
Running cumulative time = 2.4611964999985503, Cumulative time limit = 1727.1003460000065
Used memory = (RSS = 2115.417969Mb, VMS = 2124.542969Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     66 : Current =     67
Incrementor step ends | Minimum  =     66 : Maximum =    300

[14-04-2022_17-53-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(67)]), ('state_module', [Number(67), Number(56)]), ('plan_module', [Number(67), Number(56), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(67), Number(56), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(67)]), ('action_preconditions', [Number(67)]), ('variable_relations', [Number(67)]), ('abstraction_mappings', [Number(67)]), ('conformance_module', [Number(67), Number(56), Number(37), Number(46), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.216996s.

[14-04-2022_17-53-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.054795s with result Unsatisfiable.

[14-04-2022_17-53-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2717908999993597, Incremental time limit = None
Running cumulative time = 2.73298739999791, Cumulative time limit = 1727.1003460000065
Used memory = (RSS = 2117.632812Mb, VMS = 2125.074219Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     67 : Current =     68
Incrementor step ends | Minimum  =     66 : Maximum =    300

[14-04-2022_17-53-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(68)]), ('state_module', [Number(68), Number(56)]), ('plan_module', [Number(68), Number(56), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(68), Number(56), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(68)]), ('action_preconditions', [Number(68)]), ('variable_relations', [Number(68)]), ('abstraction_mappings', [Number(68)]), ('conformance_module', [Number(68), Number(56), Number(37), Number(46), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.221915s.

[14-04-2022_17-53-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.058858s with result Unsatisfiable.

[14-04-2022_17-53-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.28077310000026046, Incremental time limit = None
Running cumulative time = 3.0137604999981704, Cumulative time limit = 1727.1003460000065
Used memory = (RSS = 2121.597656Mb, VMS = 2128.074219Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     68 : Current =     69
Incrementor step ends | Minimum  =     66 : Maximum =    300

[14-04-2022_17-53-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(69)]), ('state_module', [Number(69), Number(56)]), ('plan_module', [Number(69), Number(56), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(69), Number(56), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(69)]), ('action_preconditions', [Number(69)]), ('variable_relations', [Number(69)]), ('abstraction_mappings', [Number(69)]), ('conformance_module', [Number(69), Number(56), Number(37), Number(46), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.227136s.

[14-04-2022_17-53-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.062045s with result Unsatisfiable.

[14-04-2022_17-53-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.28918090000024677, Incremental time limit = None
Running cumulative time = 3.302941399998417, Cumulative time limit = 1727.1003460000065
Used memory = (RSS = 2124.062500Mb, VMS = 2128.601562Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     69 : Current =     70
Incrementor step ends | Minimum  =     66 : Maximum =    300

[14-04-2022_17-53-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(70)]), ('state_module', [Number(70), Number(56)]), ('plan_module', [Number(70), Number(56), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(70), Number(56), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(70)]), ('action_preconditions', [Number(70)]), ('variable_relations', [Number(70)]), ('abstraction_mappings', [Number(70)]), ('conformance_module', [Number(70), Number(56), Number(37), Number(46), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.230449s.

[14-04-2022_17-53-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.076525s with result Unsatisfiable.

[14-04-2022_17-53-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3069745000002513, Incremental time limit = None
Running cumulative time = 3.6099158999986685, Cumulative time limit = 1727.1003460000065
Used memory = (RSS = 2128.562500Mb, VMS = 2141.925781Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     70 : Current =     71
Incrementor step ends | Minimum  =     66 : Maximum =    300

[14-04-2022_17-53-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(71)]), ('state_module', [Number(71), Number(56)]), ('plan_module', [Number(71), Number(56), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(71), Number(56), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(71)]), ('action_preconditions', [Number(71)]), ('variable_relations', [Number(71)]), ('abstraction_mappings', [Number(71)]), ('conformance_module', [Number(71), Number(56), Number(37), Number(46), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.234599s.

[14-04-2022_17-53-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.102132s with result Satisfiable.

[14-04-2022_17-53-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.33673149999867746, Incremental time limit = None
Running cumulative time = 3.946647399997346, Cumulative time limit = 1727.1003460000065
Used memory = (RSS = 2132.519531Mb, VMS = 2143.703125Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 10
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.713455s, Solving = 1.233192s, Total = 3.946647s, Memory = (RSS = 2132.519531Mb, VMS = 2143.703125Mb), Step range = [56-71]), Calls = 7
Final Model :: Total atoms = 17701, Cost = (-1,), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[14-04-2022_17-53-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 1.363567s, Solving = 0.833584s, Total = 2.197151s, Memory = (RSS = 2111.171875Mb, VMS = 2117.847656Mb), Step range = [56-65]
2 : Statistics :: Grounding = 0.218792s, Solving = 0.045253s, Total = 0.264045s, Memory = (RSS = 2115.417969Mb, VMS = 2124.542969Mb), Step range = [66-66]
3 : Statistics :: Grounding = 0.216996s, Solving = 0.054795s, Total = 0.271791s, Memory = (RSS = 2117.632812Mb, VMS = 2125.074219Mb), Step range = [67-67]
4 : Statistics :: Grounding = 0.221915s, Solving = 0.058858s, Total = 0.280773s, Memory = (RSS = 2121.597656Mb, VMS = 2128.074219Mb), Step range = [68-68]
5 : Statistics :: Grounding = 0.227136s, Solving = 0.062045s, Total = 0.289181s, Memory = (RSS = 2124.062500Mb, VMS = 2128.601562Mb), Step range = [69-69]
6 : Statistics :: Grounding = 0.230449s, Solving = 0.076525s, Total = 0.306975s, Memory = (RSS = 2128.562500Mb, VMS = 2141.925781Mb), Step range = [70-70]
7 : Statistics :: Grounding = 0.234599s, Solving = 0.102132s, Total = 0.336731s, Memory = (RSS = 2132.519531Mb, VMS = 2143.703125Mb), Step range = [71-71]

[14-04-2022_17-53-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 3.946647s due to: Stop condition reached.

[14-04-2022_17-53-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[14-04-2022_17-53-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[14-04-2022_17-53-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-53-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-53-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[14-04-2022_17-53-44] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 25, 43: 26, 44: 27, 45: 28, 46: 29, 47: 29, 48: 30, 49: 31, 50: 32, 51: 32, 52: 33, 53: 34, 54: 35, 55: 35, 56: 36}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 27, 15: 28, 16: 29, 17: 30, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 42, 26: 43, 27: 44, 28: 45, 29: 47, 30: 48, 31: 49, 32: 51, 33: 52, 34: 53, 35: 55, 36: 56}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 16, 33: 17, 34: 18, 35: 19, 36: 20, 37: 21, 38: 22, 39: 23, 40: 24, 41: 24, 42: 24, 43: 24, 44: 25, 45: 25, 46: 25, 47: 25, 48: 26, 49: 27, 50: 27, 51: 27, 52: 28, 53: 28, 54: 29, 55: 30, 56: 30, 57: 31}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 27, 12: 28, 13: 29, 14: 30, 15: 31, 16: 32, 17: 33, 18: 34, 19: 35, 20: 36, 21: 37, 22: 38, 23: 39, 24: 43, 25: 47, 26: 48, 27: 51, 28: 53, 29: 54, 30: 56, 31: 57}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 8, 16: 8, 17: 8, 18: 9, 19: 9, 20: 9, 21: 9, 22: 10, 23: 11, 24: 12, 25: 13, 26: 13, 27: 14, 28: 15, 29: 16, 30: 17, 31: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 14, 8: 17, 9: 21, 10: 22, 11: 23, 12: 24, 13: 26, 14: 27, 15: 28, 16: 29, 17: 31}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-53-44] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 25, 43: 26, 44: 27, 45: 28, 46: 29, 47: 29, 48: 30, 49: 31, 50: 32, 51: 32, 52: 33, 53: 34, 54: 35, 55: 35, 56: 36, 57: 37, 58: 38, 59: 38, 60: 39, 61: 40, 62: 41, 63: 42, 64: 43, 65: 43, 66: 43, 67: 44, 68: 44, 69: 44, 70: 45, 71: 46}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 27, 15: 28, 16: 29, 17: 30, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 42, 26: 43, 27: 44, 28: 45, 29: 47, 30: 48, 31: 49, 32: 51, 33: 52, 34: 53, 35: 55, 36: 56, 37: 57, 38: 59, 39: 60, 40: 61, 41: 62, 42: 63, 43: 66, 44: 69, 45: 70, 46: 71}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 16, 33: 17, 34: 18, 35: 19, 36: 20, 37: 21, 38: 22, 39: 23, 40: 24, 41: 24, 42: 24, 43: 24, 44: 25, 45: 25, 46: 25, 47: 25, 48: 26, 49: 27, 50: 27, 51: 27, 52: 28, 53: 28, 54: 29, 55: 30, 56: 30, 57: 31}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 27, 12: 28, 13: 29, 14: 30, 15: 31, 16: 32, 17: 33, 18: 34, 19: 35, 20: 36, 21: 37, 22: 38, 23: 39, 24: 43, 25: 47, 26: 48, 27: 51, 28: 53, 29: 54, 30: 56, 31: 57}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 8, 16: 8, 17: 8, 18: 9, 19: 9, 20: 9, 21: 9, 22: 10, 23: 11, 24: 12, 25: 13, 26: 13, 27: 14, 28: 15, 29: 16, 30: 17, 31: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 14, 8: 17, 9: 21, 10: 22, 11: 23, 12: 24, 13: 26, 14: 27, 15: 28, 16: 29, 17: 31}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-53-44] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 46, Last requested goal index = 46, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[14-04-2022_17-53-44] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.713455s, Solving = 1.233192s, Total = 3.946647s, Memory = (RSS = 2132.519531Mb, VMS = 2143.703125Mb), Step range = [56-71]), Calls = 7
Model :: Total atoms = 17701, Cost = (-1,), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[14-04-2022_17-53-44] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 15 :: Actions = 15                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 22:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 23:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 24:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,8)))
Step 25:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_2,(block,8))
Step 26:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 27:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 28:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Planned actions:
        talos : move((store_room,1))
Step 29:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : move((hallway,0))
Step 30:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 31:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 33:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 34:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 35:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 36:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 37:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 38:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 39:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 40:
    Current Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 41:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 42:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 43:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 44:
    Current Sub-goals:
        [Index = 27] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 27] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 45:
    Current Sub-goals:
        [Index = 28] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 28] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,2))
Step 46:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,1)))
Step 47:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,1))
Step 48:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_end_1,(block,1),(block,2))
Step 49:
    Current Sub-goals:
        [Index = 31] talos : release(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 31] talos : release(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,1))
Step 50:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,9)))
Step 51:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Achieved Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,9))
Step 52:
    Current Sub-goals:
        [Index = 33] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 33] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,9),puzzle_room_table_middle)
Step 53:
    Current Sub-goals:
        [Index = 34] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 34] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,9))
Step 54:
    Current Sub-goals:
        [Index = 35] talos : grasp(manipulator_arm_1,(block,7)) -> grasping(manipulator_arm_1) = (block,7)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,7)))
Step 55:
    Current Sub-goals:
        [Index = 35] talos : grasp(manipulator_arm_1,(block,7)) -> grasping(manipulator_arm_1) = (block,7)
    Achieved Sub-goals:
        [Index = 35] talos : grasp(manipulator_arm_1,(block,7)) -> grasping(manipulator_arm_1) = (block,7)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,7))
Step 56:
    Current Sub-goals:
        [Index = 36] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Achieved Sub-goals:
        [Index = 36] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Planned actions:
        talos : put(manipulator_end_2,(block,8),(block,9))
Step 57:
    Current Sub-goals:
        [Index = 37] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 37] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,8))
Step 58:
    Current Sub-goals:
        [Index = 38] talos : put(manipulator_arm_1,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 59:
    Current Sub-goals:
        [Index = 38] talos : put(manipulator_arm_1,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Achieved Sub-goals:
        [Index = 38] talos : put(manipulator_arm_1,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Planned actions:
        talos : put(manipulator_end_1,(block,7),(block,8))
Step 60:
    Current Sub-goals:
        [Index = 39] talos : release(manipulator_arm_1,(block,7)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 39] talos : release(manipulator_arm_1,(block,7)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,7))
Step 61:
    Current Sub-goals:
        [Index = 40] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 40] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 62:
    Current Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : move((puzzle_room,0))
Step 63:
    Current Sub-goals:
        [Index = 42] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 42] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 64:
    Current Sub-goals:
        [Index = 43] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 65:
    Current Sub-goals:
        [Index = 43] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 66:
    Current Sub-goals:
        [Index = 43] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 43] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 67:
    Current Sub-goals:
        [Index = 44] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 68:
    Current Sub-goals:
        [Index = 44] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 69:
    Current Sub-goals:
        [Index = 44] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 44] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 70:
    Current Sub-goals:
        [Index = 45] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 45] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 71:
    Current Sub-goals:
        [Index = 46] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 46] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))

[14-04-2022_17-53-44] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[14-04-2022_17-53-44] DEBUG :: ASH Planner Main #1 >> Value of end step of abstract plan to divide adjusted for right blend of current problem: end_step=71

[14-04-2022_17-53-44] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[14-04-2022_17-53-44] DEBUG :: ASH Planner Main #1 >> Monolevel problem 5 at level 1 solved.

[14-04-2022_17-53-44] DEBUG :: ASH Planner Main #1 >> Online planning increment 5 finished.

[14-04-2022_17-53-44] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 17 : Goals achieved = 17 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 3 : Total constraining sub-goal stages = 31 : Goals achieved = 31 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 5 : Total constraining sub-goal stages = 57 : Goals achieved = 46 : Goals unachieved = 11 : Complete = False

[14-04-2022_17-53-44] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[14-04-2022_17-53-44] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 6 by method ground-first is [1-1].

[14-04-2022_17-53-44] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 6 at level 1:
Total Templated Partial Problems = 2, Problem Range = [5-6], Size = 21, Sub-goal Stage Range = [37-57]
Division points [total=1] : [(Index = 46, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[14-04-2022_17-53-44] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [47-57]

[14-04-2022_17-53-44] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 71, chosen step range to extract = range(0, 72)

[14-04-2022_17-53-44] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 71, Total actions = 71, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-44] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 57, chosen step range to extract = range(0, 58)

[14-04-2022_17-53-44] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 71, Total actions = 71, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-44] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 31, chosen step range to extract = range(0, 32)

[14-04-2022_17-53-44] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 71, Total actions = 71, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-44] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[14-04-2022_17-53-44] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 71, Total actions = 71, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-44] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [47-57], problem number = 6, increment number = 6

[14-04-2022_17-53-44] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 47)
	('last_sgoals', 57)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1723.1536986000092)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[14-04-2022_17-53-44] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [47-57] : Concurrency disabled : Minimum search length bound enabled with value 81

[14-04-2022_17-53-44] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 47
last_sgoals = 57
start_step = 71
is_initial = False
is_final = True
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 81

[14-04-2022_17-53-44] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[14-04-2022_17-53-44] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[14-04-2022_17-53-44] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[14-04-2022_17-53-44] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[14-04-2022_17-53-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[14-04-2022_17-53-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[14-04-2022_17-53-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-53-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-53-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-53-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-53-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[14-04-2022_17-53-44] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-53-44] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 71 as problem start state.

[14-04-2022_17-53-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'S': 71})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'S': 71})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 71})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,4))', 'S': 71})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 71})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 71})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 71})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 71})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 71})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 71})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 71})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 71})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,4)', 'S': 71})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 71})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 71})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 71})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 71})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 71})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 71})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 71})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(puzzle_room,1)', 'S': 71})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 71})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(store_room,0)', 'S': 71})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(store_room,0)', 'S': 71})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(store_room,0)', 'S': 71})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(store_room,0)', 'S': 71})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(store_room,0)', 'S': 71})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(store_room,0)', 'S': 71})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 71})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 71})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 71})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 71})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(store_room,0)', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 71})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'S': 71})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 71})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 71})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 71})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 71})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 71})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'S': 71})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'S': 71})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'S': 71})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 71})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 71})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 71})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'S': 71})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'S': 71})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 71})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 71})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 71})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 71})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 71})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 71})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 71})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 71})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 71})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 71})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 71})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 71})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 71})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 71})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'puzzle_room', 'S': 71})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 71})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 71})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 71})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 71})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'store_room', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 71})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'S': 71})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 71})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 71})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 71})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 71})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 71})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'S': 71})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'S': 71})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 71})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 71})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 71})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 71})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 71})

[14-04-2022_17-53-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-53-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 71).
holds(1, complete_tower(red,puzzle_room_table), true, 71).
holds(1, complete_tower(yellow,puzzle_room_table), true, 71).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 71).
holds(1, configuration(manipulator_end_2), aligned_with((block,4)), 71).
holds(1, configuration(manipulator_limb_1), extended, 71).
holds(1, configuration(manipulator_limb_2), extended, 71).
holds(1, configuration(puzzle_room_door), open, 71).
holds(1, configuration(starting_room_door), closed, 71).
holds(1, configuration(store_room_door), open, 71).
holds(1, grasping(manipulator_arm_1), nothing, 71).
holds(1, grasping(manipulator_arm_2), (block,4), 71).
holds(1, grasping(manipulator_end_1), nothing, 71).
holds(1, grasping(manipulator_end_2), (block,4), 71).
holds(1, in((block,1)), (puzzle_room,1), 71).
holds(1, in((block,2)), (puzzle_room,1), 71).
holds(1, in((block,3)), (puzzle_room,1), 71).
holds(1, in((block,4)), (store_room,0), 71).
holds(1, in((block,5)), (store_room,0), 71).
holds(1, in((block,6)), (puzzle_room,1), 71).
holds(1, in((block,7)), (puzzle_room,1), 71).
holds(1, in((block,8)), (puzzle_room,1), 71).
holds(1, in((block,9)), (puzzle_room,1), 71).
holds(1, in(manipulator_arm_1), (store_room,0), 71).
holds(1, in(manipulator_arm_2), (store_room,0), 71).
holds(1, in(manipulator_end_1), (store_room,0), 71).
holds(1, in(manipulator_end_2), (store_room,0), 71).
holds(1, in(manipulator_limb_1), (store_room,0), 71).
holds(1, in(manipulator_limb_2), (store_room,0), 71).
holds(1, in(puzzle_room_table), (puzzle_room,1), 71).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 71).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 71).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 71).
holds(1, in(talos), (store_room,0), 71).
holds(1, in_tower((block,1),(block,1)), false, 71).
holds(1, in_tower((block,1),(block,2)), false, 71).
holds(1, in_tower((block,1),(block,3)), false, 71).
holds(1, in_tower((block,1),(block,4)), false, 71).
holds(1, in_tower((block,1),(block,5)), false, 71).
holds(1, in_tower((block,1),(block,6)), false, 71).
holds(1, in_tower((block,1),(block,7)), false, 71).
holds(1, in_tower((block,1),(block,8)), false, 71).
holds(1, in_tower((block,1),(block,9)), false, 71).
holds(1, in_tower((block,2),(block,1)), false, 71).
holds(1, in_tower((block,2),(block,2)), false, 71).
holds(1, in_tower((block,2),(block,3)), false, 71).
holds(1, in_tower((block,2),(block,4)), false, 71).
holds(1, in_tower((block,2),(block,5)), false, 71).
holds(1, in_tower((block,2),(block,6)), false, 71).
holds(1, in_tower((block,2),(block,7)), false, 71).
holds(1, in_tower((block,2),(block,8)), false, 71).
holds(1, in_tower((block,2),(block,9)), false, 71).
holds(1, in_tower((block,3),(block,1)), true, 71).
holds(1, in_tower((block,3),(block,2)), true, 71).
holds(1, in_tower((block,3),(block,3)), true, 71).
holds(1, in_tower((block,3),(block,4)), false, 71).
holds(1, in_tower((block,3),(block,5)), false, 71).
holds(1, in_tower((block,3),(block,6)), false, 71).
holds(1, in_tower((block,3),(block,7)), false, 71).
holds(1, in_tower((block,3),(block,8)), false, 71).
holds(1, in_tower((block,3),(block,9)), false, 71).
holds(1, in_tower((block,4),(block,1)), false, 71).
holds(1, in_tower((block,4),(block,2)), false, 71).
holds(1, in_tower((block,4),(block,3)), false, 71).
holds(1, in_tower((block,4),(block,4)), false, 71).
holds(1, in_tower((block,4),(block,5)), false, 71).
holds(1, in_tower((block,4),(block,6)), false, 71).
holds(1, in_tower((block,4),(block,7)), false, 71).
holds(1, in_tower((block,4),(block,8)), false, 71).
holds(1, in_tower((block,4),(block,9)), false, 71).
holds(1, in_tower((block,5),(block,1)), false, 71).
holds(1, in_tower((block,5),(block,2)), false, 71).
holds(1, in_tower((block,5),(block,3)), false, 71).
holds(1, in_tower((block,5),(block,4)), false, 71).
holds(1, in_tower((block,5),(block,5)), false, 71).
holds(1, in_tower((block,5),(block,6)), false, 71).
holds(1, in_tower((block,5),(block,7)), false, 71).
holds(1, in_tower((block,5),(block,8)), false, 71).
holds(1, in_tower((block,5),(block,9)), false, 71).
holds(1, in_tower((block,6),(block,1)), false, 71).
holds(1, in_tower((block,6),(block,2)), false, 71).
holds(1, in_tower((block,6),(block,3)), false, 71).
holds(1, in_tower((block,6),(block,4)), false, 71).
holds(1, in_tower((block,6),(block,5)), false, 71).
holds(1, in_tower((block,6),(block,6)), true, 71).
holds(1, in_tower((block,6),(block,7)), false, 71).
holds(1, in_tower((block,6),(block,8)), false, 71).
holds(1, in_tower((block,6),(block,9)), false, 71).
holds(1, in_tower((block,7),(block,1)), false, 71).
holds(1, in_tower((block,7),(block,2)), false, 71).
holds(1, in_tower((block,7),(block,3)), false, 71).
holds(1, in_tower((block,7),(block,4)), false, 71).
holds(1, in_tower((block,7),(block,5)), false, 71).
holds(1, in_tower((block,7),(block,6)), false, 71).
holds(1, in_tower((block,7),(block,7)), false, 71).
holds(1, in_tower((block,7),(block,8)), false, 71).
holds(1, in_tower((block,7),(block,9)), false, 71).
holds(1, in_tower((block,8),(block,1)), false, 71).
holds(1, in_tower((block,8),(block,2)), false, 71).
holds(1, in_tower((block,8),(block,3)), false, 71).
holds(1, in_tower((block,8),(block,4)), false, 71).
holds(1, in_tower((block,8),(block,5)), false, 71).
holds(1, in_tower((block,8),(block,6)), false, 71).
holds(1, in_tower((block,8),(block,7)), false, 71).
holds(1, in_tower((block,8),(block,8)), false, 71).
holds(1, in_tower((block,8),(block,9)), false, 71).
holds(1, in_tower((block,9),(block,1)), false, 71).
holds(1, in_tower((block,9),(block,2)), false, 71).
holds(1, in_tower((block,9),(block,3)), false, 71).
holds(1, in_tower((block,9),(block,4)), false, 71).
holds(1, in_tower((block,9),(block,5)), false, 71).
holds(1, in_tower((block,9),(block,6)), false, 71).
holds(1, in_tower((block,9),(block,7)), true, 71).
holds(1, in_tower((block,9),(block,8)), true, 71).
holds(1, in_tower((block,9),(block,9)), true, 71).
holds(1, on((block,1)), (block,2), 71).
holds(1, on((block,2)), (block,3), 71).
holds(1, on((block,3)), puzzle_room_table_left, 71).
holds(1, on((block,4)), nothing, 71).
holds(1, on((block,5)), nothing, 71).
holds(1, on((block,6)), puzzle_room_table_right, 71).
holds(1, on((block,7)), (block,8), 71).
holds(1, on((block,8)), (block,9), 71).
holds(1, on((block,9)), puzzle_room_table_middle, 71).
holds(1, tower_base((block,1),puzzle_room_table), false, 71).
holds(1, tower_base((block,2),puzzle_room_table), false, 71).
holds(1, tower_base((block,3),puzzle_room_table), true, 71).
holds(1, tower_base((block,4),puzzle_room_table), false, 71).
holds(1, tower_base((block,5),puzzle_room_table), false, 71).
holds(1, tower_base((block,6),puzzle_room_table), true, 71).
holds(1, tower_base((block,7),puzzle_room_table), false, 71).
holds(1, tower_base((block,8),puzzle_room_table), false, 71).
holds(1, tower_base((block,9),puzzle_room_table), true, 71).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 71).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 71).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 71).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 71).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 71).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 71).
holds(1, unordered_tower((block,7),puzzle_room_table), false, 71).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 71).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 71).
holds(2, complete_tower(blue,puzzle_room_table), false, 71).
holds(2, complete_tower(red,puzzle_room_table), true, 71).
holds(2, complete_tower(yellow,puzzle_room_table), true, 71).
holds(2, configuration(manipulator_arm_1), extended, 71).
holds(2, configuration(manipulator_arm_2), extended, 71).
holds(2, configuration(puzzle_room_door), open, 71).
holds(2, configuration(starting_room_door), closed, 71).
holds(2, configuration(store_room_door), open, 71).
holds(2, grasping(manipulator_arm_1), nothing, 71).
holds(2, grasping(manipulator_arm_2), (block,4), 71).
holds(2, in((block,1)), puzzle_room, 71).
holds(2, in((block,2)), puzzle_room, 71).
holds(2, in((block,3)), puzzle_room, 71).
holds(2, in((block,4)), store_room, 71).
holds(2, in((block,5)), store_room, 71).
holds(2, in((block,6)), puzzle_room, 71).
holds(2, in((block,7)), puzzle_room, 71).
holds(2, in((block,8)), puzzle_room, 71).
holds(2, in((block,9)), puzzle_room, 71).
holds(2, in(manipulator_arm_1), store_room, 71).
holds(2, in(manipulator_arm_2), store_room, 71).
holds(2, in(puzzle_room_table), puzzle_room, 71).
holds(2, in(talos), store_room, 71).
holds(2, in_tower((block,1),(block,1)), false, 71).
holds(2, in_tower((block,1),(block,2)), false, 71).
holds(2, in_tower((block,1),(block,3)), false, 71).
holds(2, in_tower((block,1),(block,4)), false, 71).
holds(2, in_tower((block,1),(block,5)), false, 71).
holds(2, in_tower((block,1),(block,6)), false, 71).
holds(2, in_tower((block,1),(block,7)), false, 71).
holds(2, in_tower((block,1),(block,8)), false, 71).
holds(2, in_tower((block,1),(block,9)), false, 71).
holds(2, in_tower((block,2),(block,1)), false, 71).
holds(2, in_tower((block,2),(block,2)), false, 71).
holds(2, in_tower((block,2),(block,3)), false, 71).
holds(2, in_tower((block,2),(block,4)), false, 71).
holds(2, in_tower((block,2),(block,5)), false, 71).
holds(2, in_tower((block,2),(block,6)), false, 71).
holds(2, in_tower((block,2),(block,7)), false, 71).
holds(2, in_tower((block,2),(block,8)), false, 71).
holds(2, in_tower((block,2),(block,9)), false, 71).
holds(2, in_tower((block,3),(block,1)), true, 71).
holds(2, in_tower((block,3),(block,2)), true, 71).
holds(2, in_tower((block,3),(block,3)), true, 71).
holds(2, in_tower((block,3),(block,4)), false, 71).
holds(2, in_tower((block,3),(block,5)), false, 71).
holds(2, in_tower((block,3),(block,6)), false, 71).
holds(2, in_tower((block,3),(block,7)), false, 71).
holds(2, in_tower((block,3),(block,8)), false, 71).
holds(2, in_tower((block,3),(block,9)), false, 71).
holds(2, in_tower((block,4),(block,1)), false, 71).
holds(2, in_tower((block,4),(block,2)), false, 71).
holds(2, in_tower((block,4),(block,3)), false, 71).
holds(2, in_tower((block,4),(block,4)), false, 71).
holds(2, in_tower((block,4),(block,5)), false, 71).
holds(2, in_tower((block,4),(block,6)), false, 71).
holds(2, in_tower((block,4),(block,7)), false, 71).
holds(2, in_tower((block,4),(block,8)), false, 71).
holds(2, in_tower((block,4),(block,9)), false, 71).
holds(2, in_tower((block,5),(block,1)), false, 71).
holds(2, in_tower((block,5),(block,2)), false, 71).
holds(2, in_tower((block,5),(block,3)), false, 71).
holds(2, in_tower((block,5),(block,4)), false, 71).
holds(2, in_tower((block,5),(block,5)), false, 71).
holds(2, in_tower((block,5),(block,6)), false, 71).
holds(2, in_tower((block,5),(block,7)), false, 71).
holds(2, in_tower((block,5),(block,8)), false, 71).
holds(2, in_tower((block,5),(block,9)), false, 71).
holds(2, in_tower((block,6),(block,1)), false, 71).
holds(2, in_tower((block,6),(block,2)), false, 71).
holds(2, in_tower((block,6),(block,3)), false, 71).
holds(2, in_tower((block,6),(block,4)), false, 71).
holds(2, in_tower((block,6),(block,5)), false, 71).
holds(2, in_tower((block,6),(block,6)), true, 71).
holds(2, in_tower((block,6),(block,7)), false, 71).
holds(2, in_tower((block,6),(block,8)), false, 71).
holds(2, in_tower((block,6),(block,9)), false, 71).
holds(2, in_tower((block,7),(block,1)), false, 71).
holds(2, in_tower((block,7),(block,2)), false, 71).
holds(2, in_tower((block,7),(block,3)), false, 71).
holds(2, in_tower((block,7),(block,4)), false, 71).
holds(2, in_tower((block,7),(block,5)), false, 71).
holds(2, in_tower((block,7),(block,6)), false, 71).
holds(2, in_tower((block,7),(block,7)), false, 71).
holds(2, in_tower((block,7),(block,8)), false, 71).
holds(2, in_tower((block,7),(block,9)), false, 71).
holds(2, in_tower((block,8),(block,1)), false, 71).
holds(2, in_tower((block,8),(block,2)), false, 71).
holds(2, in_tower((block,8),(block,3)), false, 71).
holds(2, in_tower((block,8),(block,4)), false, 71).
holds(2, in_tower((block,8),(block,5)), false, 71).
holds(2, in_tower((block,8),(block,6)), false, 71).
holds(2, in_tower((block,8),(block,7)), false, 71).
holds(2, in_tower((block,8),(block,8)), false, 71).
holds(2, in_tower((block,8),(block,9)), false, 71).
holds(2, in_tower((block,9),(block,1)), false, 71).
holds(2, in_tower((block,9),(block,2)), false, 71).
holds(2, in_tower((block,9),(block,3)), false, 71).
holds(2, in_tower((block,9),(block,4)), false, 71).
holds(2, in_tower((block,9),(block,5)), false, 71).
holds(2, in_tower((block,9),(block,6)), false, 71).
holds(2, in_tower((block,9),(block,7)), true, 71).
holds(2, in_tower((block,9),(block,8)), true, 71).
holds(2, in_tower((block,9),(block,9)), true, 71).
holds(2, on((block,1)), (block,2), 71).
holds(2, on((block,2)), (block,3), 71).
holds(2, on((block,3)), puzzle_room_table, 71).
holds(2, on((block,4)), nothing, 71).
holds(2, on((block,5)), nothing, 71).
holds(2, on((block,6)), puzzle_room_table, 71).
holds(2, on((block,7)), (block,8), 71).
holds(2, on((block,8)), (block,9), 71).
holds(2, on((block,9)), puzzle_room_table, 71).
holds(2, tower_base((block,1),puzzle_room_table), false, 71).
holds(2, tower_base((block,2),puzzle_room_table), false, 71).
holds(2, tower_base((block,3),puzzle_room_table), true, 71).
holds(2, tower_base((block,4),puzzle_room_table), false, 71).
holds(2, tower_base((block,5),puzzle_room_table), false, 71).
holds(2, tower_base((block,6),puzzle_room_table), true, 71).
holds(2, tower_base((block,7),puzzle_room_table), false, 71).
holds(2, tower_base((block,8),puzzle_room_table), false, 71).
holds(2, tower_base((block,9),puzzle_room_table), true, 71).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 71).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 71).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 71).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 71).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 71).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 71).
holds(2, unordered_tower((block,7),puzzle_room_table), false, 71).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 71).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 71).

[14-04-2022_17-53-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[14-04-2022_17-53-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-53-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[14-04-2022_17-53-44] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=81']

[14-04-2022_17-53-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,5))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,5)', 'I': 47})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 48})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 49})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 50})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 51})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 52})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 53})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,5))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 54})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 55})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 56})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 57})

[14-04-2022_17-53-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[14-04-2022_17-53-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 11 rules into program part base:

sub_goal(2, talos, grasp(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), (block,5), 47).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 48).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 49).
sub_goal(2, talos, move(hallway), in(talos), hallway, 50).
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 51).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 52).
sub_goal(2, talos, put(manipulator_arm_1,(block,5),(block,6)), on((block,5)), (block,6), 53).
sub_goal(2, talos, release(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), nothing, 54).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 55).
sub_goal(2, talos, put(manipulator_arm_2,(block,4),(block,5)), on((block,4)), (block,5), 56).
sub_goal(2, talos, release(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), nothing, 57).

[14-04-2022_17-53-44] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[14-04-2022_17-53-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[14-04-2022_17-53-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=81']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001A2584D9280>]
	incrementor = SolveIncrementor(step_start=71, step_increase=1, step_increase_initial=11, step_end_min=82, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1723.1536986000092, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 71), range_=None), IncPart(name='plan_module', args=('#inc', 71, 'false', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 71, 'false', 'false', 'false', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 71, 47, 57, 'sequential', 'false'), range_=None)]

[14-04-2022_17-53-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-53-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[14-04-2022_17-53-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[14-04-2022_17-53-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1280 rules

[14-04-2022_17-53-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006628699999964738s

[14-04-2022_17-53-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[14-04-2022_17-53-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[14-04-2022_17-53-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.040643s.

[14-04-2022_17-53-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007851s with result Satisfiable.

[14-04-2022_17-53-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[14-04-2022_17-53-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001A288D9B2C0>

[14-04-2022_17-53-44] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 71)
	('last_sgoals', 57)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001A258445D00>)
	('first_sgoals', 47)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001A288D9B2C0>)

[14-04-2022_17-53-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 71). %* None *%
#program plan_module(#inc, 71, false, true). %* None *%
#program optimisation_module(#inc, 71, false, false, false, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 71, 47, 57, sequential, false). %* None *%

[14-04-2022_17-53-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     70 : Current =     81
Incrementor step ends | Minimum  =     82 : Maximum =    300

[14-04-2022_17-53-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(81)]), ('state_module', [Number(71), Number(71)]), ('plan_module', [Number(71), Number(71), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(71), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(71)]), ('action_preconditions', [Number(71)]), ('variable_relations', [Number(71)]), ('abstraction_mappings', [Number(71)]), ('conformance_module', [Number(71), Number(71), Number(47), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(72), Number(71)]), ('plan_module', [Number(72), Number(71), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(72), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(72)]), ('action_preconditions', [Number(72)]), ('variable_relations', [Number(72)]), ('abstraction_mappings', [Number(72)]), ('conformance_module', [Number(72), Number(71), Number(47), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(73), Number(71)]), ('plan_module', [Number(73), Number(71), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(73), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(73)]), ('action_preconditions', [Number(73)]), ('variable_relations', [Number(73)]), ('abstraction_mappings', [Number(73)]), ('conformance_module', [Number(73), Number(71), Number(47), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(74), Number(71)]), ('plan_module', [Number(74), Number(71), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(74), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(74)]), ('action_preconditions', [Number(74)]), ('variable_relations', [Number(74)]), ('abstraction_mappings', [Number(74)]), ('conformance_module', [Number(74), Number(71), Number(47), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(75), Number(71)]), ('plan_module', [Number(75), Number(71), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(75), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(75)]), ('action_preconditions', [Number(75)]), ('variable_relations', [Number(75)]), ('abstraction_mappings', [Number(75)]), ('conformance_module', [Number(75), Number(71), Number(47), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(76), Number(71)]), ('plan_module', [Number(76), Number(71), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(76), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(76)]), ('action_preconditions', [Number(76)]), ('variable_relations', [Number(76)]), ('abstraction_mappings', [Number(76)]), ('conformance_module', [Number(76), Number(71), Number(47), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(77), Number(71)]), ('plan_module', [Number(77), Number(71), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(77), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(77)]), ('action_preconditions', [Number(77)]), ('variable_relations', [Number(77)]), ('abstraction_mappings', [Number(77)]), ('conformance_module', [Number(77), Number(71), Number(47), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(78), Number(71)]), ('plan_module', [Number(78), Number(71), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(78), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(78)]), ('action_preconditions', [Number(78)]), ('variable_relations', [Number(78)]), ('abstraction_mappings', [Number(78)]), ('conformance_module', [Number(78), Number(71), Number(47), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(79), Number(71)]), ('plan_module', [Number(79), Number(71), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(79), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(79)]), ('action_preconditions', [Number(79)]), ('variable_relations', [Number(79)]), ('abstraction_mappings', [Number(79)]), ('conformance_module', [Number(79), Number(71), Number(47), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(80), Number(71)]), ('plan_module', [Number(80), Number(71), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(80), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(80)]), ('action_preconditions', [Number(80)]), ('variable_relations', [Number(80)]), ('abstraction_mappings', [Number(80)]), ('conformance_module', [Number(80), Number(71), Number(47), Number(57), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(81), Number(71)]), ('plan_module', [Number(81), Number(71), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(81), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(81)]), ('action_preconditions', [Number(81)]), ('variable_relations', [Number(81)]), ('abstraction_mappings', [Number(81)]), ('conformance_module', [Number(81), Number(71), Number(47), Number(57), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.515499s.

[14-04-2022_17-53-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.685227s with result Satisfiable.

[14-04-2022_17-53-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.200726300000497, Incremental time limit = None
Running cumulative time = 2.200726300000497, Cumulative time limit = 1723.1536986000092
Used memory = (RSS = 2046.687500Mb, VMS = 2054.039062Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.515499s, Solving = 0.685227s, Total = 2.200726s, Memory = (RSS = 2046.687500Mb, VMS = 2054.039062Mb), Step range = [71-81]), Calls = 1
Final Model :: Total atoms = 17362, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[14-04-2022_17-53-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     81 : Current =     82
Incrementor step ends | Minimum  =     82 : Maximum =    300

[14-04-2022_17-53-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(82)]), ('state_module', [Number(82), Number(71)]), ('plan_module', [Number(82), Number(71), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(82), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(82)]), ('action_preconditions', [Number(82)]), ('variable_relations', [Number(82)]), ('abstraction_mappings', [Number(82)]), ('conformance_module', [Number(82), Number(71), Number(47), Number(57), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.217117s.

[14-04-2022_17-53-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.038441s with result Unsatisfiable.

[14-04-2022_17-53-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2555582000004506, Incremental time limit = None
Running cumulative time = 2.4562845000009474, Cumulative time limit = 1723.1536986000092
Used memory = (RSS = 2055.527344Mb, VMS = 2068.507812Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     82 : Current =     83
Incrementor step ends | Minimum  =     82 : Maximum =    300

[14-04-2022_17-53-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(83)]), ('state_module', [Number(83), Number(71)]), ('plan_module', [Number(83), Number(71), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(83), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(83)]), ('action_preconditions', [Number(83)]), ('variable_relations', [Number(83)]), ('abstraction_mappings', [Number(83)]), ('conformance_module', [Number(83), Number(71), Number(47), Number(57), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.210165s.

[14-04-2022_17-53-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.048129s with result Unsatisfiable.

[14-04-2022_17-53-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2582940000002054, Incremental time limit = None
Running cumulative time = 2.714578500001153, Cumulative time limit = 1723.1536986000092
Used memory = (RSS = 2059.476562Mb, VMS = 2071.695312Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     83 : Current =     84
Incrementor step ends | Minimum  =     82 : Maximum =    300

[14-04-2022_17-53-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(84)]), ('state_module', [Number(84), Number(71)]), ('plan_module', [Number(84), Number(71), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(84), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(84)]), ('action_preconditions', [Number(84)]), ('variable_relations', [Number(84)]), ('abstraction_mappings', [Number(84)]), ('conformance_module', [Number(84), Number(71), Number(47), Number(57), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.216868s.

[14-04-2022_17-53-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.043616s with result Unsatisfiable.

[14-04-2022_17-53-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2604846999993242, Incremental time limit = None
Running cumulative time = 2.975063200000477, Cumulative time limit = 1723.1536986000092
Used memory = (RSS = 2062.382812Mb, VMS = 2072.468750Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     84 : Current =     85
Incrementor step ends | Minimum  =     82 : Maximum =    300

[14-04-2022_17-53-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(85)]), ('state_module', [Number(85), Number(71)]), ('plan_module', [Number(85), Number(71), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(85), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(85)]), ('action_preconditions', [Number(85)]), ('variable_relations', [Number(85)]), ('abstraction_mappings', [Number(85)]), ('conformance_module', [Number(85), Number(71), Number(47), Number(57), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.221023s.

[14-04-2022_17-53-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.045340s with result Unsatisfiable.

[14-04-2022_17-53-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2663624999995591, Incremental time limit = None
Running cumulative time = 3.241425700000036, Cumulative time limit = 1723.1536986000092
Used memory = (RSS = 2065.320312Mb, VMS = 2073.484375Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     85 : Current =     86
Incrementor step ends | Minimum  =     82 : Maximum =    300

[14-04-2022_17-53-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(86)]), ('state_module', [Number(86), Number(71)]), ('plan_module', [Number(86), Number(71), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(86), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(86)]), ('action_preconditions', [Number(86)]), ('variable_relations', [Number(86)]), ('abstraction_mappings', [Number(86)]), ('conformance_module', [Number(86), Number(71), Number(47), Number(57), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.224265s.

[14-04-2022_17-53-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.047311s with result Unsatisfiable.

[14-04-2022_17-53-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.27157619999979943, Incremental time limit = None
Running cumulative time = 3.5130018999998356, Cumulative time limit = 1723.1536986000092
Used memory = (RSS = 2068.800781Mb, VMS = 2075.031250Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     86 : Current =     87
Incrementor step ends | Minimum  =     82 : Maximum =    300

[14-04-2022_17-53-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(87)]), ('state_module', [Number(87), Number(71)]), ('plan_module', [Number(87), Number(71), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(87), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(87)]), ('action_preconditions', [Number(87)]), ('variable_relations', [Number(87)]), ('abstraction_mappings', [Number(87)]), ('conformance_module', [Number(87), Number(71), Number(47), Number(57), Function('sequential', [], True), Function('false', [], True)])]

[14-04-2022_17-53-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.229401s.

[14-04-2022_17-53-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[14-04-2022_17-53-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.083544s with result Satisfiable.

[14-04-2022_17-53-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3129441000010047, Incremental time limit = None
Running cumulative time = 3.8259460000008403, Cumulative time limit = 1723.1536986000092
Used memory = (RSS = 2080.488281Mb, VMS = 2098.246094Mb), Total system virtual memory = 16324.0078125Mb

[14-04-2022_17-53-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.834338s, Solving = 0.991608s, Total = 3.825946s, Memory = (RSS = 2080.488281Mb, VMS = 2098.246094Mb), Step range = [71-87]), Calls = 7
Final Model :: Total atoms = 23620, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[14-04-2022_17-53-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 1.515499s, Solving = 0.685227s, Total = 2.200726s, Memory = (RSS = 2046.687500Mb, VMS = 2054.039062Mb), Step range = [71-81]
2 : Statistics :: Grounding = 0.217117s, Solving = 0.038441s, Total = 0.255558s, Memory = (RSS = 2055.527344Mb, VMS = 2068.507812Mb), Step range = [82-82]
3 : Statistics :: Grounding = 0.210165s, Solving = 0.048129s, Total = 0.258294s, Memory = (RSS = 2059.476562Mb, VMS = 2071.695312Mb), Step range = [83-83]
4 : Statistics :: Grounding = 0.216868s, Solving = 0.043616s, Total = 0.260485s, Memory = (RSS = 2062.382812Mb, VMS = 2072.468750Mb), Step range = [84-84]
5 : Statistics :: Grounding = 0.221023s, Solving = 0.045340s, Total = 0.266362s, Memory = (RSS = 2065.320312Mb, VMS = 2073.484375Mb), Step range = [85-85]
6 : Statistics :: Grounding = 0.224265s, Solving = 0.047311s, Total = 0.271576s, Memory = (RSS = 2068.800781Mb, VMS = 2075.031250Mb), Step range = [86-86]
7 : Statistics :: Grounding = 0.229401s, Solving = 0.083544s, Total = 0.312944s, Memory = (RSS = 2080.488281Mb, VMS = 2098.246094Mb), Step range = [87-87]

[14-04-2022_17-53-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 3.825946s due to: Stop condition reached.

[14-04-2022_17-53-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[14-04-2022_17-53-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[14-04-2022_17-53-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[14-04-2022_17-53-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[14-04-2022_17-53-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[14-04-2022_17-53-48] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 25, 43: 26, 44: 27, 45: 28, 46: 29, 47: 29, 48: 30, 49: 31, 50: 32, 51: 32, 52: 33, 53: 34, 54: 35, 55: 35, 56: 36, 57: 37, 58: 38, 59: 38, 60: 39, 61: 40, 62: 41, 63: 42, 64: 43, 65: 43, 66: 43, 67: 44, 68: 44, 69: 44, 70: 45, 71: 46}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 27, 15: 28, 16: 29, 17: 30, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 42, 26: 43, 27: 44, 28: 45, 29: 47, 30: 48, 31: 49, 32: 51, 33: 52, 34: 53, 35: 55, 36: 56, 37: 57, 38: 59, 39: 60, 40: 61, 41: 62, 42: 63, 43: 66, 44: 69, 45: 70, 46: 71}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 16, 33: 17, 34: 18, 35: 19, 36: 20, 37: 21, 38: 22, 39: 23, 40: 24, 41: 24, 42: 24, 43: 24, 44: 25, 45: 25, 46: 25, 47: 25, 48: 26, 49: 27, 50: 27, 51: 27, 52: 28, 53: 28, 54: 29, 55: 30, 56: 30, 57: 31}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 27, 12: 28, 13: 29, 14: 30, 15: 31, 16: 32, 17: 33, 18: 34, 19: 35, 20: 36, 21: 37, 22: 38, 23: 39, 24: 43, 25: 47, 26: 48, 27: 51, 28: 53, 29: 54, 30: 56, 31: 57}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 8, 16: 8, 17: 8, 18: 9, 19: 9, 20: 9, 21: 9, 22: 10, 23: 11, 24: 12, 25: 13, 26: 13, 27: 14, 28: 15, 29: 16, 30: 17, 31: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 14, 8: 17, 9: 21, 10: 22, 11: 23, 12: 24, 13: 26, 14: 27, 15: 28, 16: 29, 17: 31}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-53-49] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 25, 43: 26, 44: 27, 45: 28, 46: 29, 47: 29, 48: 30, 49: 31, 50: 32, 51: 32, 52: 33, 53: 34, 54: 35, 55: 35, 56: 36, 57: 37, 58: 38, 59: 38, 60: 39, 61: 40, 62: 41, 63: 42, 64: 43, 65: 43, 66: 43, 67: 44, 68: 44, 69: 44, 70: 45, 71: 46, 72: 47, 73: 47, 74: 47, 75: 48, 76: 49, 77: 50, 78: 51, 79: 51, 80: 51, 81: 52, 82: 52, 83: 53, 84: 54, 85: 55, 86: 56, 87: 57}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 27, 15: 28, 16: 29, 17: 30, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 42, 26: 43, 27: 44, 28: 45, 29: 47, 30: 48, 31: 49, 32: 51, 33: 52, 34: 53, 35: 55, 36: 56, 37: 57, 38: 59, 39: 60, 40: 61, 41: 62, 42: 63, 43: 66, 44: 69, 45: 70, 46: 71, 47: 74, 48: 75, 49: 76, 50: 77, 51: 80, 52: 82, 53: 83, 54: 84, 55: 85, 56: 86, 57: 87}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 11, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 16, 33: 17, 34: 18, 35: 19, 36: 20, 37: 21, 38: 22, 39: 23, 40: 24, 41: 24, 42: 24, 43: 24, 44: 25, 45: 25, 46: 25, 47: 25, 48: 26, 49: 27, 50: 27, 51: 27, 52: 28, 53: 28, 54: 29, 55: 30, 56: 30, 57: 31}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 25, 11: 27, 12: 28, 13: 29, 14: 30, 15: 31, 16: 32, 17: 33, 18: 34, 19: 35, 20: 36, 21: 37, 22: 38, 23: 39, 24: 43, 25: 47, 26: 48, 27: 51, 28: 53, 29: 54, 30: 56, 31: 57}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 3, 5: 4, 6: 5, 7: 5, 8: 5, 9: 6, 10: 6, 11: 6, 12: 7, 13: 7, 14: 7, 15: 8, 16: 8, 17: 8, 18: 9, 19: 9, 20: 9, 21: 9, 22: 10, 23: 11, 24: 12, 25: 13, 26: 13, 27: 14, 28: 15, 29: 16, 30: 17, 31: 17}
Sub-goal achievement steps: {1: 1, 2: 3, 3: 4, 4: 5, 5: 8, 6: 11, 7: 14, 8: 17, 9: 21, 10: 22, 11: 23, 12: 24, 13: 26, 14: 27, 15: 28, 16: 29, 17: 31}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[14-04-2022_17-53-49] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 57, Last requested goal index = 57, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[14-04-2022_17-53-49] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.834338s, Solving = 0.991608s, Total = 3.825946s, Memory = (RSS = 2080.488281Mb, VMS = 2098.246094Mb), Step range = [71-87]), Calls = 7
Model :: Total atoms = 23620, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[14-04-2022_17-53-49] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 16 :: Actions = 16                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 22:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 23:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 24:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,8)))
Step 25:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_2,(block,8))
Step 26:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 27:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 28:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Planned actions:
        talos : move((store_room,1))
Step 29:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : move((hallway,0))
Step 30:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 31:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 33:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 34:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 35:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 36:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 37:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 38:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 39:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 40:
    Current Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 41:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 42:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 43:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 44:
    Current Sub-goals:
        [Index = 27] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 27] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 45:
    Current Sub-goals:
        [Index = 28] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 28] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,2))
Step 46:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,1)))
Step 47:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,1))
Step 48:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_end_1,(block,1),(block,2))
Step 49:
    Current Sub-goals:
        [Index = 31] talos : release(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 31] talos : release(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,1))
Step 50:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,9)))
Step 51:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Achieved Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,9))
Step 52:
    Current Sub-goals:
        [Index = 33] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 33] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,9),puzzle_room_table_middle)
Step 53:
    Current Sub-goals:
        [Index = 34] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 34] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,9))
Step 54:
    Current Sub-goals:
        [Index = 35] talos : grasp(manipulator_arm_1,(block,7)) -> grasping(manipulator_arm_1) = (block,7)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,7)))
Step 55:
    Current Sub-goals:
        [Index = 35] talos : grasp(manipulator_arm_1,(block,7)) -> grasping(manipulator_arm_1) = (block,7)
    Achieved Sub-goals:
        [Index = 35] talos : grasp(manipulator_arm_1,(block,7)) -> grasping(manipulator_arm_1) = (block,7)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,7))
Step 56:
    Current Sub-goals:
        [Index = 36] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Achieved Sub-goals:
        [Index = 36] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Planned actions:
        talos : put(manipulator_end_2,(block,8),(block,9))
Step 57:
    Current Sub-goals:
        [Index = 37] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 37] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,8))
Step 58:
    Current Sub-goals:
        [Index = 38] talos : put(manipulator_arm_1,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 59:
    Current Sub-goals:
        [Index = 38] talos : put(manipulator_arm_1,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Achieved Sub-goals:
        [Index = 38] talos : put(manipulator_arm_1,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Planned actions:
        talos : put(manipulator_end_1,(block,7),(block,8))
Step 60:
    Current Sub-goals:
        [Index = 39] talos : release(manipulator_arm_1,(block,7)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 39] talos : release(manipulator_arm_1,(block,7)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,7))
Step 61:
    Current Sub-goals:
        [Index = 40] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 40] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 62:
    Current Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : move((puzzle_room,0))
Step 63:
    Current Sub-goals:
        [Index = 42] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 42] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 64:
    Current Sub-goals:
        [Index = 43] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 65:
    Current Sub-goals:
        [Index = 43] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 66:
    Current Sub-goals:
        [Index = 43] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 43] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 67:
    Current Sub-goals:
        [Index = 44] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 68:
    Current Sub-goals:
        [Index = 44] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 69:
    Current Sub-goals:
        [Index = 44] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 44] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 70:
    Current Sub-goals:
        [Index = 45] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 45] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 71:
    Current Sub-goals:
        [Index = 46] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 46] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 72:
    Current Sub-goals:
        [Index = 47] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 73:
    Current Sub-goals:
        [Index = 47] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 74:
    Current Sub-goals:
        [Index = 47] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 47] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 75:
    Current Sub-goals:
        [Index = 48] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 48] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 76:
    Current Sub-goals:
        [Index = 49] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 49] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : move((store_room,1))
Step 77:
    Current Sub-goals:
        [Index = 50] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 50] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 78:
    Current Sub-goals:
        [Index = 51] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 79:
    Current Sub-goals:
        [Index = 51] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 80:
    Current Sub-goals:
        [Index = 51] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 51] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 81:
    Current Sub-goals:
        [Index = 52] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 82:
    Current Sub-goals:
        [Index = 52] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 52] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 83:
    Current Sub-goals:
        [Index = 53] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 53] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 84:
    Current Sub-goals:
        [Index = 54] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 54] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,5))
Step 85:
    Current Sub-goals:
        [Index = 55] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 55] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 86:
    Current Sub-goals:
        [Index = 56] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 56] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_2,(block,4),(block,5))
Step 87:
    Current Sub-goals:
        [Index = 57] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 57] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,4))

[14-04-2022_17-53-49] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[14-04-2022_17-53-49] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[14-04-2022_17-53-49] DEBUG :: ASH Planner Main #1 >> Monolevel problem 6 at level 1 solved.

[14-04-2022_17-53-49] DEBUG :: ASH Planner Main #1 >> Online planning increment 6 finished.

[14-04-2022_17-53-49] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 87, chosen step range to extract = range(0, 88)

[14-04-2022_17-53-49] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 87, Total actions = 87, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-49] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 57, chosen step range to extract = range(0, 58)

[14-04-2022_17-53-49] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 87, Total actions = 87, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-49] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 31, chosen step range to extract = range(0, 32)

[14-04-2022_17-53-49] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 87, Total actions = 87, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-49] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[14-04-2022_17-53-49] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 87, Total actions = 87, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-49] DEBUG :: ASH Planner Main #1 >> Hierarchical plan generated successfully :: Ground Plan Quality >> Length = 87, Actions = 87

[14-04-2022_17-53-49] DEBUG :: ASH Planner Main #1 >> Hierarchical planning summary: (Execution latency = 56.06944829999611, Average ground wait time = 13.499506599999071, Absolution time = 80.67224739999165)

     ========================================================================================================================================================================================================     
     |        Lvl = 4 (classic), LE =  17, AC =  17, CF = 1.0, GT =   1.38s, ST =   0.90s, OT = 0.00s, TT =   2.28s, EF = (LE = 1.0, AC = 1.0), ED = (LE = 0.0, AC = 0.0), EB = (LE = 0.0, AC = 0.0)        |     
     |        Lvl = 3 (com-ref), LE =  31, AC =  31, CF = 1.0, GT =   3.69s, ST =  38.97s, OT = 0.00s, TT =  42.66s, EF = (LE = 1.8, AC = 1.8), ED = (LE = 1.0, AC = 0.4), EB = (LE = 0.6, AC = 0.4)        |     
     |        Lvl = 2 (com-ref), LE =  57, AC =  57, CF = 1.0, GT =   7.14s, ST =   6.14s, OT = 0.00s, TT =  13.28s, EF = (LE = 1.8, AC = 1.8), ED = (LE = 1.8, AC = 1.8), EB = (LE = 1.0, AC = 1.0)        |     
     |        Lvl = 1 (com-ref), LE =  87, AC =  87, CF = 1.0, GT =  15.99s, ST =   6.46s, OT = 0.00s, TT =  22.45s, EF = (LE = 1.5, AC = 1.5), ED = (LE = 0.9, AC = 0.9), EB = (LE = 0.6, AC = 0.6)        |     
     ========================================================================================================================================================================================================     

[14-04-2022_17-53-49] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 87, chosen step range to extract = range(0, 88)

[14-04-2022_17-53-49] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 87, Total actions = 87, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-49] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 57, chosen step range to extract = range(0, 58)

[14-04-2022_17-53-49] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 87, Total actions = 87, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-49] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 31, chosen step range to extract = range(0, 32)

[14-04-2022_17-53-49] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 87, Total actions = 87, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-49] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[14-04-2022_17-53-49] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 17, Total actions = 17, Produced sub-goal stages = 17, Produced sub-goal literals = 30
Level [3]: Length = 31, Total actions = 31, Produced sub-goal stages = 31, Produced sub-goal literals = 31
Level [2]: Length = 57, Total actions = 57, Produced sub-goal stages = 57, Produced sub-goal literals = 57
Level [1]: Length = 87, Total actions = 87, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[14-04-2022_17-53-49] DEBUG :: Experiment >> 

   ======================================================   
     Experimental run 50 : SUCCESSFUL : Time 91.433765s     
   ======================================================   

[14-04-2022_17-53-49] INFO :: Experiment >> 

  ################################################################################################  
        Completed 50 experimental runs : Real time 6695.781051s, Proccess time 27843.703125s        
  ################################################################################################  

[14-04-2022_17-53-49] DEBUG :: Experiment >> Refinement spread at run=0, level=3:
Root Mean Squared Errors: rmse_mchild=1.8887758068238027, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=1.6643598615916957, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-49] DEBUG :: Experiment >> Refinement spread at run=0, level=2:
Root Mean Squared Errors: rmse_mchild=8.357343189386516, rmse_div_indices=0.0, rmse_div_steps=5.304610154279848
Mean Absolute Errors: mae_mchild=7.699999999999998, mae_div_indices=0.0, mae_div_steps=3.749999999999999

[14-04-2022_17-53-49] DEBUG :: Experiment >> Refinement spread at run=0, level=1:
Root Mean Squared Errors: rmse_mchild=3.070909424564251, rmse_div_indices=5.156287578025645, rmse_div_steps=9.835149146309817
Mean Absolute Errors: mae_mchild=2.7857142857142847, mae_div_indices=4.1428571428571415, mae_div_steps=7.999999999999999

[14-04-2022_17-53-49] DEBUG :: Experiment >> Refinement spread at run=1, level=3:
Root Mean Squared Errors: rmse_mchild=2.78341603866376, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=2.2871972318339107, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-49] DEBUG :: Experiment >> Refinement spread at run=1, level=2:
Root Mean Squared Errors: rmse_mchild=6.394326188693177, rmse_div_indices=0.0, rmse_div_steps=3.659083066683357
Mean Absolute Errors: mae_mchild=5.666666666666665, mae_div_indices=0.0, mae_div_steps=2.499999999999999

[14-04-2022_17-53-49] DEBUG :: Experiment >> Refinement spread at run=1, level=1:
Root Mean Squared Errors: rmse_mchild=2.804310639580661, rmse_div_indices=3.534411336002572, rmse_div_steps=7.349549170926949
Mean Absolute Errors: mae_mchild=2.4732142857142847, mae_div_indices=2.714285714285713, mae_div_steps=5.857142857142856

[14-04-2022_17-53-49] DEBUG :: Experiment >> Refinement spread at run=2, level=3:
Root Mean Squared Errors: rmse_mchild=1.8805138074289156, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=1.501730103806228, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-49] DEBUG :: Experiment >> Refinement spread at run=2, level=2:
Root Mean Squared Errors: rmse_mchild=6.147256437351194, rmse_div_indices=0.3726779962499656, rmse_div_steps=3.640054944640259
Mean Absolute Errors: mae_mchild=5.049947970863685, mae_div_indices=0.25000000000000044, mae_div_steps=2.25

[14-04-2022_17-53-49] DEBUG :: Experiment >> Refinement spread at run=2, level=1:
Root Mean Squared Errors: rmse_mchild=2.687476513243157, rmse_div_indices=3.245876505000504, rmse_div_steps=6.355537518011922
Mean Absolute Errors: mae_mchild=2.264081255771004, mae_div_indices=2.357142857142857, mae_div_steps=4.5

[14-04-2022_17-53-49] DEBUG :: Experiment >> Refinement spread at run=3, level=3:
Root Mean Squared Errors: rmse_mchild=2.8552143763556703, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=2.207612456747405, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-49] DEBUG :: Experiment >> Refinement spread at run=3, level=2:
Root Mean Squared Errors: rmse_mchild=6.311049392365934, rmse_div_indices=0.3726779962499656, rmse_div_steps=3.640054944640259
Mean Absolute Errors: mae_mchild=5.082206035379814, mae_div_indices=0.25000000000000044, mae_div_steps=2.25

[14-04-2022_17-53-49] DEBUG :: Experiment >> Refinement spread at run=3, level=1:
Root Mean Squared Errors: rmse_mchild=3.465966972502522, rmse_div_indices=3.245876505000504, rmse_div_steps=7.020378500174637
Mean Absolute Errors: mae_mchild=2.8624192059095104, mae_div_indices=2.357142857142857, mae_div_steps=5.0

[14-04-2022_17-53-49] DEBUG :: Experiment >> Refinement spread at run=4, level=3:
Root Mean Squared Errors: rmse_mchild=1.833936149190576, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=1.5086505190311417, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-49] DEBUG :: Experiment >> Refinement spread at run=4, level=2:
Root Mean Squared Errors: rmse_mchild=5.851748709827087, rmse_div_indices=0.0, rmse_div_steps=3.726779962499649
Mean Absolute Errors: mae_mchild=4.653333333333332, mae_div_indices=0.0, mae_div_steps=2.166666666666667

[14-04-2022_17-53-49] DEBUG :: Experiment >> Refinement spread at run=4, level=1:
Root Mean Squared Errors: rmse_mchild=3.4222411799692845, rmse_div_indices=3.3475885658708426, rmse_div_steps=7.30731314484506
Mean Absolute Errors: mae_mchild=2.849489795918369, mae_div_indices=2.285714285714287, mae_div_steps=4.857142857142856

[14-04-2022_17-53-50] DEBUG :: Experiment >> Refinement spread at run=5, level=3:
Root Mean Squared Errors: rmse_mchild=1.56740148170285, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=1.2456747404844288, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-50] DEBUG :: Experiment >> Refinement spread at run=5, level=2:
Root Mean Squared Errors: rmse_mchild=6.887885231546978, rmse_div_indices=0.0, rmse_div_steps=4.099457958749613
Mean Absolute Errors: mae_mchild=6.133333333333331, mae_div_indices=0.0, mae_div_steps=2.749999999999999

[14-04-2022_17-53-50] DEBUG :: Experiment >> Refinement spread at run=5, level=1:
Root Mean Squared Errors: rmse_mchild=2.695541481326342, rmse_div_indices=3.917806318490788, rmse_div_steps=7.5066108430640215
Mean Absolute Errors: mae_mchild=2.3316326530612232, mae_div_indices=2.999999999999999, mae_div_steps=5.999999999999999

[14-04-2022_17-53-50] DEBUG :: Experiment >> Refinement spread at run=6, level=3:
Root Mean Squared Errors: rmse_mchild=1.6354633852303346, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=1.3806228373702425, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-50] DEBUG :: Experiment >> Refinement spread at run=6, level=2:
Root Mean Squared Errors: rmse_mchild=7.260445859179316, rmse_div_indices=0.0, rmse_div_steps=5.304610154279848
Mean Absolute Errors: mae_mchild=6.733333333333332, mae_div_indices=0.0, mae_div_steps=3.749999999999999

[14-04-2022_17-53-50] DEBUG :: Experiment >> Refinement spread at run=6, level=1:
Root Mean Squared Errors: rmse_mchild=2.8270739181661866, rmse_div_indices=5.156287578025645, rmse_div_steps=9.490178716098663
Mean Absolute Errors: mae_mchild=2.482142857142858, mae_div_indices=4.1428571428571415, mae_div_steps=7.714285714285715

[14-04-2022_17-53-50] DEBUG :: Experiment >> Refinement spread at run=7, level=3:
Root Mean Squared Errors: rmse_mchild=1.691623981711577, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=1.352941176470588, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-50] DEBUG :: Experiment >> Refinement spread at run=7, level=2:
Root Mean Squared Errors: rmse_mchild=6.05842178341218, rmse_div_indices=0.3726779962499656, rmse_div_steps=3.640054944640259
Mean Absolute Errors: mae_mchild=4.920915712799169, mae_div_indices=0.25000000000000044, mae_div_steps=2.25

[14-04-2022_17-53-50] DEBUG :: Experiment >> Refinement spread at run=7, level=1:
Root Mean Squared Errors: rmse_mchild=3.452918021684141, rmse_div_indices=3.245876505000504, rmse_div_steps=7.150036074945067
Mean Absolute Errors: mae_mchild=2.9473684210526314, mae_div_indices=2.357142857142857, mae_div_steps=4.92857142857143

[14-04-2022_17-53-50] DEBUG :: Experiment >> Refinement spread at run=8, level=3:
Root Mean Squared Errors: rmse_mchild=1.6523025770809572, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=1.4013840830449824, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-50] DEBUG :: Experiment >> Refinement spread at run=8, level=2:
Root Mean Squared Errors: rmse_mchild=8.381902904251294, rmse_div_indices=0.0, rmse_div_steps=5.676462121975466
Mean Absolute Errors: mae_mchild=7.733333333333332, mae_div_indices=0.0, mae_div_steps=3.999999999999999

[14-04-2022_17-53-50] DEBUG :: Experiment >> Refinement spread at run=8, level=1:
Root Mean Squared Errors: rmse_mchild=3.292791291563422, rmse_div_indices=5.6708667907763575, rmse_div_steps=10.642084770098771
Mean Absolute Errors: mae_mchild=2.9821428571428563, mae_div_indices=4.57142857142857, mae_div_steps=8.714285714285714

[14-04-2022_17-53-50] DEBUG :: Experiment >> Refinement spread at run=9, level=3:
Root Mean Squared Errors: rmse_mchild=2.521876601203061, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=2.166089965397924, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-50] DEBUG :: Experiment >> Refinement spread at run=9, level=2:
Root Mean Squared Errors: rmse_mchild=5.8463681727765415, rmse_div_indices=0.3726779962499656, rmse_div_steps=3.1622776601683795
Mean Absolute Errors: mae_mchild=4.436004162330906, mae_div_indices=0.25000000000000044, mae_div_steps=2.0

[14-04-2022_17-53-50] DEBUG :: Experiment >> Refinement spread at run=9, level=1:
Root Mean Squared Errors: rmse_mchild=3.901119578970436, rmse_div_indices=2.692582403567252, rmse_div_steps=6.678263722645757
Mean Absolute Errors: mae_mchild=3.212373037857798, mae_div_indices=1.9285714285714286, mae_div_steps=4.07142857142857

[14-04-2022_17-53-51] DEBUG :: Experiment >> Refinement spread at run=10, level=3:
Root Mean Squared Errors: rmse_mchild=1.6460080681921438, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=1.359861591695502, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-51] DEBUG :: Experiment >> Refinement spread at run=10, level=2:
Root Mean Squared Errors: rmse_mchild=6.616533723825377, rmse_div_indices=0.0, rmse_div_steps=4.099457958749613
Mean Absolute Errors: mae_mchild=5.966666666666665, mae_div_indices=0.0, mae_div_steps=2.749999999999999

[14-04-2022_17-53-51] DEBUG :: Experiment >> Refinement spread at run=10, level=1:
Root Mean Squared Errors: rmse_mchild=2.8045380499236194, rmse_div_indices=3.917806318490788, rmse_div_steps=7.5066108430640215
Mean Absolute Errors: mae_mchild=2.437499999999999, mae_div_indices=2.999999999999999, mae_div_steps=5.999999999999999

[14-04-2022_17-53-51] DEBUG :: Experiment >> Refinement spread at run=11, level=3:
Root Mean Squared Errors: rmse_mchild=2.1086409798746963, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=1.7958477508650517, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-51] DEBUG :: Experiment >> Refinement spread at run=11, level=2:
Root Mean Squared Errors: rmse_mchild=8.275577634533143, rmse_div_indices=0.0, rmse_div_steps=5.304610154279848
Mean Absolute Errors: mae_mchild=7.633333333333331, mae_div_indices=0.0, mae_div_steps=3.749999999999999

[14-04-2022_17-53-51] DEBUG :: Experiment >> Refinement spread at run=11, level=1:
Root Mean Squared Errors: rmse_mchild=4.028596757772452, rmse_div_indices=5.156287578025645, rmse_div_steps=10.768855740897173
Mean Absolute Errors: mae_mchild=3.642857142857145, mae_div_indices=4.1428571428571415, mae_div_steps=8.857142857142858

[14-04-2022_17-53-51] DEBUG :: Experiment >> Refinement spread at run=12, level=3:
Root Mean Squared Errors: rmse_mchild=1.7340474085863147, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=1.3598615916955015, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-51] DEBUG :: Experiment >> Refinement spread at run=12, level=2:
Root Mean Squared Errors: rmse_mchild=6.369080403416587, rmse_div_indices=0.0, rmse_div_steps=3.659083066683357
Mean Absolute Errors: mae_mchild=5.566666666666665, mae_div_indices=0.0, mae_div_steps=2.499999999999999

[14-04-2022_17-53-51] DEBUG :: Experiment >> Refinement spread at run=12, level=1:
Root Mean Squared Errors: rmse_mchild=4.144011538672769, rmse_div_indices=3.534411336002572, rmse_div_steps=8.340948901139999
Mean Absolute Errors: mae_mchild=3.554846938775509, mae_div_indices=2.714285714285713, mae_div_steps=6.428571428571429

[14-04-2022_17-53-51] DEBUG :: Experiment >> Refinement spread at run=13, level=3:
Root Mean Squared Errors: rmse_mchild=3.4360192627082906, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=2.968858131487889, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-51] DEBUG :: Experiment >> Refinement spread at run=13, level=2:
Root Mean Squared Errors: rmse_mchild=5.98880328849628, rmse_div_indices=0.3726779962499656, rmse_div_steps=3.1622776601683795
Mean Absolute Errors: mae_mchild=4.856399583766911, mae_div_indices=0.25000000000000044, mae_div_steps=2.0

[14-04-2022_17-53-51] DEBUG :: Experiment >> Refinement spread at run=13, level=1:
Root Mean Squared Errors: rmse_mchild=3.6385925437165265, rmse_div_indices=2.692582403567252, rmse_div_steps=6.829848123994076
Mean Absolute Errors: mae_mchild=3.1228070175438596, mae_div_indices=1.9285714285714286, mae_div_steps=4.642857142857144

[14-04-2022_17-53-51] DEBUG :: Experiment >> Refinement spread at run=14, level=3:
Root Mean Squared Errors: rmse_mchild=1.193987242952026, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=1.003460207612457, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-51] DEBUG :: Experiment >> Refinement spread at run=14, level=2:
Root Mean Squared Errors: rmse_mchild=6.335321325418017, rmse_div_indices=0.0, rmse_div_steps=3.659083066683357
Mean Absolute Errors: mae_mchild=5.533333333333331, mae_div_indices=0.0, mae_div_steps=2.499999999999999

[14-04-2022_17-53-51] DEBUG :: Experiment >> Refinement spread at run=14, level=1:
Root Mean Squared Errors: rmse_mchild=2.632096820686765, rmse_div_indices=3.534411336002572, rmse_div_steps=7.349549170926949
Mean Absolute Errors: mae_mchild=2.2946428571428554, mae_div_indices=2.714285714285713, mae_div_steps=5.857142857142856

[14-04-2022_17-53-52] DEBUG :: Experiment >> Refinement spread at run=15, level=3:
Root Mean Squared Errors: rmse_mchild=2.7927241106986402, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=2.1038062283737027, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-52] DEBUG :: Experiment >> Refinement spread at run=15, level=2:
Root Mean Squared Errors: rmse_mchild=6.321510771890366, rmse_div_indices=0.3726779962499656, rmse_div_steps=3.640054944640259
Mean Absolute Errors: mae_mchild=5.114464099895943, mae_div_indices=0.25000000000000044, mae_div_steps=2.25

[14-04-2022_17-53-52] DEBUG :: Experiment >> Refinement spread at run=15, level=1:
Root Mean Squared Errors: rmse_mchild=2.7748707472414944, rmse_div_indices=3.245876505000504, rmse_div_steps=6.355537518011922
Mean Absolute Errors: mae_mchild=2.3518005540166182, mae_div_indices=2.357142857142857, mae_div_steps=4.5

[14-04-2022_17-53-52] DEBUG :: Experiment >> Refinement spread at run=16, level=3:
Root Mean Squared Errors: rmse_mchild=2.4459556336813875, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=2.017301038062284, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-52] DEBUG :: Experiment >> Refinement spread at run=16, level=2:
Root Mean Squared Errors: rmse_mchild=5.84661978949914, rmse_div_indices=0.0, rmse_div_steps=3.236081306491266
Mean Absolute Errors: mae_mchild=4.686666666666666, mae_div_indices=0.0, mae_div_steps=1.916666666666667

[14-04-2022_17-53-52] DEBUG :: Experiment >> Refinement spread at run=16, level=1:
Root Mean Squared Errors: rmse_mchild=3.9310868570347073, rmse_div_indices=2.7631360145531443, rmse_div_steps=6.876460883747852
Mean Absolute Errors: mae_mchild=3.2002551020408156, mae_div_indices=1.8571428571428579, mae_div_steps=4.142857142857143

[14-04-2022_17-53-52] DEBUG :: Experiment >> Refinement spread at run=17, level=3:
Root Mean Squared Errors: rmse_mchild=1.9642126890663532, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=1.6366782006920413, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-52] DEBUG :: Experiment >> Refinement spread at run=17, level=2:
Root Mean Squared Errors: rmse_mchild=6.032948037131639, rmse_div_indices=0.3726779962499656, rmse_div_steps=3.1622776601683795
Mean Absolute Errors: mae_mchild=4.920915712799169, mae_div_indices=0.25000000000000044, mae_div_steps=2.0

[14-04-2022_17-53-52] DEBUG :: Experiment >> Refinement spread at run=17, level=1:
Root Mean Squared Errors: rmse_mchild=4.040601369030644, rmse_div_indices=2.692582403567252, rmse_div_steps=6.703173851433341
Mean Absolute Errors: mae_mchild=3.4385964912280658, mae_div_indices=1.9285714285714286, mae_div_steps=4.2142857142857135

[14-04-2022_17-53-52] DEBUG :: Experiment >> Refinement spread at run=18, level=3:
Root Mean Squared Errors: rmse_mchild=2.700762419587999, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=2.179930795847751, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-52] DEBUG :: Experiment >> Refinement spread at run=18, level=2:
Root Mean Squared Errors: rmse_mchild=5.671827715087054, rmse_div_indices=0.0, rmse_div_steps=3.236081306491266
Mean Absolute Errors: mae_mchild=4.553333333333332, mae_div_indices=0.0, mae_div_steps=1.916666666666667

[14-04-2022_17-53-52] DEBUG :: Experiment >> Refinement spread at run=18, level=1:
Root Mean Squared Errors: rmse_mchild=4.728603797903885, rmse_div_indices=2.7631360145531443, rmse_div_steps=7.644896627453143
Mean Absolute Errors: mae_mchild=3.9540816326530623, mae_div_indices=1.8571428571428579, mae_div_steps=4.666666666666666

[14-04-2022_17-53-52] DEBUG :: Experiment >> Refinement spread at run=19, level=3:
Root Mean Squared Errors: rmse_mchild=2.616159524463187, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=2.1453287197231834, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-52] DEBUG :: Experiment >> Refinement spread at run=19, level=2:
Root Mean Squared Errors: rmse_mchild=5.8740686599893, rmse_div_indices=0.3726779962499656, rmse_div_steps=3.1622776601683795
Mean Absolute Errors: mae_mchild=4.662851196670137, mae_div_indices=0.25000000000000044, mae_div_steps=2.0

[14-04-2022_17-53-52] DEBUG :: Experiment >> Refinement spread at run=19, level=1:
Root Mean Squared Errors: rmse_mchild=3.6184042175755815, rmse_div_indices=2.692582403567252, rmse_div_steps=6.829848123994076
Mean Absolute Errors: mae_mchild=3.1228070175438596, mae_div_indices=1.9285714285714286, mae_div_steps=4.642857142857144

[14-04-2022_17-53-53] DEBUG :: Experiment >> Refinement spread at run=20, level=3:
Root Mean Squared Errors: rmse_mchild=2.566755791678992, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=2.0484429065743948, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-53] DEBUG :: Experiment >> Refinement spread at run=20, level=2:
Root Mean Squared Errors: rmse_mchild=5.963817366909226, rmse_div_indices=0.3726779962499656, rmse_div_steps=3.1622776601683795
Mean Absolute Errors: mae_mchild=4.824141519250782, mae_div_indices=0.25000000000000044, mae_div_steps=2.0

[14-04-2022_17-53-53] DEBUG :: Experiment >> Refinement spread at run=20, level=1:
Root Mean Squared Errors: rmse_mchild=4.264806073235972, rmse_div_indices=2.692582403567252, rmse_div_steps=6.574059169816923
Mean Absolute Errors: mae_mchild=3.5438596491228025, mae_div_indices=1.9285714285714286, mae_div_steps=4.07142857142857

[14-04-2022_17-53-53] DEBUG :: Experiment >> Refinement spread at run=21, level=3:
Root Mean Squared Errors: rmse_mchild=2.085540929557157, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=1.6989619377162632, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-53] DEBUG :: Experiment >> Refinement spread at run=21, level=2:
Root Mean Squared Errors: rmse_mchild=6.1961158681751485, rmse_div_indices=0.0, rmse_div_steps=3.726779962499649
Mean Absolute Errors: mae_mchild=4.886666666666666, mae_div_indices=0.0, mae_div_steps=2.166666666666667

[14-04-2022_17-53-53] DEBUG :: Experiment >> Refinement spread at run=21, level=1:
Root Mean Squared Errors: rmse_mchild=3.441567630470459, rmse_div_indices=3.3475885658708426, rmse_div_steps=7.30731314484506
Mean Absolute Errors: mae_mchild=2.8852040816326547, mae_div_indices=2.285714285714287, mae_div_steps=4.857142857142856

[14-04-2022_17-53-53] DEBUG :: Experiment >> Refinement spread at run=22, level=3:
Root Mean Squared Errors: rmse_mchild=2.122543359137496, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=1.757785467128028, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-53] DEBUG :: Experiment >> Refinement spread at run=22, level=2:
Root Mean Squared Errors: rmse_mchild=5.940916167692529, rmse_div_indices=0.3726779962499656, rmse_div_steps=3.1622776601683795
Mean Absolute Errors: mae_mchild=4.824141519250782, mae_div_indices=0.25000000000000044, mae_div_steps=2.0

[14-04-2022_17-53-53] DEBUG :: Experiment >> Refinement spread at run=22, level=1:
Root Mean Squared Errors: rmse_mchild=3.658711535994828, rmse_div_indices=2.692582403567252, rmse_div_steps=6.829848123994076
Mean Absolute Errors: mae_mchild=3.1403508771929824, mae_div_indices=1.9285714285714286, mae_div_steps=4.642857142857144

[14-04-2022_17-53-53] DEBUG :: Experiment >> Refinement spread at run=23, level=3:
Root Mean Squared Errors: rmse_mchild=3.428458146093601, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=2.7508650519031144, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-53] DEBUG :: Experiment >> Refinement spread at run=23, level=2:
Root Mean Squared Errors: rmse_mchild=5.89670007717945, rmse_div_indices=0.3726779962499656, rmse_div_steps=3.1622776601683795
Mean Absolute Errors: mae_mchild=4.727367325702395, mae_div_indices=0.25000000000000044, mae_div_steps=2.0

[14-04-2022_17-53-53] DEBUG :: Experiment >> Refinement spread at run=23, level=1:
Root Mean Squared Errors: rmse_mchild=3.7079297732072605, rmse_div_indices=2.692582403567252, rmse_div_steps=6.558648718743291
Mean Absolute Errors: mae_mchild=3.072637734687599, mae_div_indices=1.9285714285714286, mae_div_steps=4.2857142857142865

[14-04-2022_17-53-53] DEBUG :: Experiment >> Refinement spread at run=24, level=3:
Root Mean Squared Errors: rmse_mchild=2.7364007881442367, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=2.2698961937716255, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-53] DEBUG :: Experiment >> Refinement spread at run=24, level=2:
Root Mean Squared Errors: rmse_mchild=9.154274451901731, rmse_div_indices=0.0, rmse_div_steps=6.841458583924596
Mean Absolute Errors: mae_mchild=8.366666666666665, mae_div_indices=0.0, mae_div_steps=4.749999999999999

[14-04-2022_17-53-54] DEBUG :: Experiment >> Refinement spread at run=24, level=1:
Root Mean Squared Errors: rmse_mchild=3.6283851189514817, rmse_div_indices=6.67023713911758, rmse_div_steps=13.611969522655944
Mean Absolute Errors: mae_mchild=3.304846938775509, mae_div_indices=5.285714285714285, mae_div_steps=11.0

[14-04-2022_17-53-54] DEBUG :: Experiment >> Refinement spread at run=25, level=3:
Root Mean Squared Errors: rmse_mchild=4.1024931233323985, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=3.3217993079584773, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-54] DEBUG :: Experiment >> Refinement spread at run=25, level=2:
Root Mean Squared Errors: rmse_mchild=5.855793932563301, rmse_div_indices=0.3726779962499656, rmse_div_steps=3.1622776601683795
Mean Absolute Errors: mae_mchild=4.500520291363164, mae_div_indices=0.25000000000000044, mae_div_steps=2.0

[14-04-2022_17-53-54] DEBUG :: Experiment >> Refinement spread at run=25, level=1:
Root Mean Squared Errors: rmse_mchild=2.651677634095362, rmse_div_indices=2.692582403567252, rmse_div_steps=5.9970230710149615
Mean Absolute Errors: mae_mchild=2.2539242843951963, mae_div_indices=1.9285714285714286, mae_div_steps=4.071428571428571

[14-04-2022_17-53-54] DEBUG :: Experiment >> Refinement spread at run=26, level=3:
Root Mean Squared Errors: rmse_mchild=2.055459436430135, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=1.5051903114186853, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-54] DEBUG :: Experiment >> Refinement spread at run=26, level=2:
Root Mean Squared Errors: rmse_mchild=5.532396172311542, rmse_div_indices=0.0, rmse_div_steps=3.236081306491266
Mean Absolute Errors: mae_mchild=4.453333333333332, mae_div_indices=0.0, mae_div_steps=1.916666666666667

[14-04-2022_17-53-54] DEBUG :: Experiment >> Refinement spread at run=26, level=1:
Root Mean Squared Errors: rmse_mchild=2.5977079771779334, rmse_div_indices=2.7631360145531443, rmse_div_steps=6.181128473535331
Mean Absolute Errors: mae_mchild=2.227040816326529, mae_div_indices=1.8571428571428579, mae_div_steps=4.142857142857144

[14-04-2022_17-53-54] DEBUG :: Experiment >> Refinement spread at run=27, level=3:
Root Mean Squared Errors: rmse_mchild=1.3349183197541432, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=1.0346020761245673, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-54] DEBUG :: Experiment >> Refinement spread at run=27, level=2:
Root Mean Squared Errors: rmse_mchild=6.477539542026626, rmse_div_indices=0.0, rmse_div_steps=4.099457958749613
Mean Absolute Errors: mae_mchild=5.799999999999998, mae_div_indices=0.0, mae_div_steps=2.749999999999999

[14-04-2022_17-53-54] DEBUG :: Experiment >> Refinement spread at run=27, level=1:
Root Mean Squared Errors: rmse_mchild=3.4798985441462276, rmse_div_indices=3.917806318490788, rmse_div_steps=8.401624937314304
Mean Absolute Errors: mae_mchild=3.017857142857145, mae_div_indices=2.999999999999999, mae_div_steps=6.714285714285715

[14-04-2022_17-53-54] DEBUG :: Experiment >> Refinement spread at run=28, level=3:
Root Mean Squared Errors: rmse_mchild=1.4974025954538652, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=1.2664359861591696, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-54] DEBUG :: Experiment >> Refinement spread at run=28, level=2:
Root Mean Squared Errors: rmse_mchild=6.249681473364745, rmse_div_indices=0.0, rmse_div_steps=3.726779962499649
Mean Absolute Errors: mae_mchild=5.019999999999999, mae_div_indices=0.0, mae_div_steps=2.166666666666667

[14-04-2022_17-53-54] DEBUG :: Experiment >> Refinement spread at run=28, level=1:
Root Mean Squared Errors: rmse_mchild=3.232093527642506, rmse_div_indices=3.3475885658708426, rmse_div_steps=7.30731314484506
Mean Absolute Errors: mae_mchild=2.7066326530612264, mae_div_indices=2.285714285714287, mae_div_steps=4.857142857142856

[14-04-2022_17-53-54] DEBUG :: Experiment >> Refinement spread at run=29, level=3:
Root Mean Squared Errors: rmse_mchild=2.046179662461893, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=1.6539792387543253, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-54] DEBUG :: Experiment >> Refinement spread at run=29, level=2:
Root Mean Squared Errors: rmse_mchild=6.2521588363111915, rmse_div_indices=0.3726779962499656, rmse_div_steps=3.640054944640259
Mean Absolute Errors: mae_mchild=5.049947970863685, mae_div_indices=0.25000000000000044, mae_div_steps=2.25

[14-04-2022_17-53-55] DEBUG :: Experiment >> Refinement spread at run=29, level=1:
Root Mean Squared Errors: rmse_mchild=2.907150416766624, rmse_div_indices=3.245876505000504, rmse_div_steps=6.355537518011922
Mean Absolute Errors: mae_mchild=2.4219759926131084, mae_div_indices=2.357142857142857, mae_div_steps=4.5

[14-04-2022_17-53-55] DEBUG :: Experiment >> Refinement spread at run=30, level=3:
Root Mean Squared Errors: rmse_mchild=1.6772444034568532, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=1.3252595155709341, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-55] DEBUG :: Experiment >> Refinement spread at run=30, level=2:
Root Mean Squared Errors: rmse_mchild=6.136110482370071, rmse_div_indices=0.0, rmse_div_steps=3.659083066683357
Mean Absolute Errors: mae_mchild=5.466666666666665, mae_div_indices=0.0, mae_div_steps=2.499999999999999

[14-04-2022_17-53-55] DEBUG :: Experiment >> Refinement spread at run=30, level=1:
Root Mean Squared Errors: rmse_mchild=3.4173924896873404, rmse_div_indices=3.534411336002572, rmse_div_steps=8.232726023485647
Mean Absolute Errors: mae_mchild=3.000000000000002, mae_div_indices=2.714285714285713, mae_div_steps=6.571428571428572

[14-04-2022_17-53-55] DEBUG :: Experiment >> Refinement spread at run=31, level=3:
Root Mean Squared Errors: rmse_mchild=2.351470128389022, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=1.8269896193771629, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-55] DEBUG :: Experiment >> Refinement spread at run=31, level=2:
Root Mean Squared Errors: rmse_mchild=5.712137250338209, rmse_div_indices=0.3726779962499656, rmse_div_steps=3.1622776601683795
Mean Absolute Errors: mae_mchild=4.26222684703434, mae_div_indices=0.25000000000000044, mae_div_steps=2.0

[14-04-2022_17-53-55] DEBUG :: Experiment >> Refinement spread at run=31, level=1:
Root Mean Squared Errors: rmse_mchild=2.737010791022832, rmse_div_indices=2.692582403567252, rmse_div_steps=5.9970230710149615
Mean Absolute Errors: mae_mchild=2.301939058171742, mae_div_indices=1.9285714285714286, mae_div_steps=4.071428571428571

[14-04-2022_17-53-55] DEBUG :: Experiment >> Refinement spread at run=32, level=3:
Root Mean Squared Errors: rmse_mchild=1.8970018231290706, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=1.6401384083044985, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-55] DEBUG :: Experiment >> Refinement spread at run=32, level=2:
Root Mean Squared Errors: rmse_mchild=6.19701242236636, rmse_div_indices=0.0, rmse_div_steps=3.726779962499649
Mean Absolute Errors: mae_mchild=4.919999999999999, mae_div_indices=0.0, mae_div_steps=2.166666666666667

[14-04-2022_17-53-55] DEBUG :: Experiment >> Refinement spread at run=32, level=1:
Root Mean Squared Errors: rmse_mchild=3.504734407242028, rmse_div_indices=3.3475885658708426, rmse_div_steps=7.30731314484506
Mean Absolute Errors: mae_mchild=2.9209183673469403, mae_div_indices=2.285714285714287, mae_div_steps=4.857142857142856

[14-04-2022_17-53-55] DEBUG :: Experiment >> Refinement spread at run=33, level=3:
Root Mean Squared Errors: rmse_mchild=1.8034952607948103, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=1.529411764705882, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-55] DEBUG :: Experiment >> Refinement spread at run=33, level=2:
Root Mean Squared Errors: rmse_mchild=7.09872184635036, rmse_div_indices=0.0, rmse_div_steps=4.972144630058764
Mean Absolute Errors: mae_mchild=6.499999999999998, mae_div_indices=0.0, mae_div_steps=3.499999999999999

[14-04-2022_17-53-55] DEBUG :: Experiment >> Refinement spread at run=33, level=1:
Root Mean Squared Errors: rmse_mchild=4.774440345448343, rmse_div_indices=4.871361075732194, rmse_div_steps=11.168265699299903
Mean Absolute Errors: mae_mchild=4.0676020408163245, mae_div_indices=3.8571428571428563, mae_div_steps=8.857142857142858

[14-04-2022_17-53-55] DEBUG :: Experiment >> Refinement spread at run=34, level=3:
Root Mean Squared Errors: rmse_mchild=1.7538884136324202, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=1.4567474048442908, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-55] DEBUG :: Experiment >> Refinement spread at run=34, level=2:
Root Mean Squared Errors: rmse_mchild=5.4979457443128155, rmse_div_indices=0.0, rmse_div_steps=3.236081306491266
Mean Absolute Errors: mae_mchild=4.353333333333333, mae_div_indices=0.0, mae_div_steps=1.916666666666667

[14-04-2022_17-53-56] DEBUG :: Experiment >> Refinement spread at run=34, level=1:
Root Mean Squared Errors: rmse_mchild=2.6934112730354194, rmse_div_indices=2.7631360145531443, rmse_div_steps=6.181128473535331
Mean Absolute Errors: mae_mchild=2.286989795918366, mae_div_indices=1.8571428571428579, mae_div_steps=4.142857142857144

[14-04-2022_17-53-56] DEBUG :: Experiment >> Refinement spread at run=35, level=3:
Root Mean Squared Errors: rmse_mchild=1.5305425683832572, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=1.235294117647059, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-56] DEBUG :: Experiment >> Refinement spread at run=35, level=2:
Root Mean Squared Errors: rmse_mchild=7.800474819356025, rmse_div_indices=0.0, rmse_div_steps=5.304610154279848
Mean Absolute Errors: mae_mchild=7.199999999999998, mae_div_indices=0.0, mae_div_steps=3.749999999999999

[14-04-2022_17-53-56] DEBUG :: Experiment >> Refinement spread at run=35, level=1:
Root Mean Squared Errors: rmse_mchild=3.6582308649433948, rmse_div_indices=5.156287578025645, rmse_div_steps=10.768855740897173
Mean Absolute Errors: mae_mchild=3.3214285714285734, mae_div_indices=4.1428571428571415, mae_div_steps=8.857142857142858

[14-04-2022_17-53-56] DEBUG :: Experiment >> Refinement spread at run=36, level=3:
Root Mean Squared Errors: rmse_mchild=1.779350995559315, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=1.5328719723183393, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-56] DEBUG :: Experiment >> Refinement spread at run=36, level=2:
Root Mean Squared Errors: rmse_mchild=5.818267547377107, rmse_div_indices=0.3726779962499656, rmse_div_steps=3.1622776601683795
Mean Absolute Errors: mae_mchild=4.389177939646203, mae_div_indices=0.25000000000000044, mae_div_steps=2.0

[14-04-2022_17-53-56] DEBUG :: Experiment >> Refinement spread at run=36, level=1:
Root Mean Squared Errors: rmse_mchild=3.2665831234095757, rmse_div_indices=2.692582403567252, rmse_div_steps=6.829848123994076
Mean Absolute Errors: mae_mchild=2.703601108033242, mae_div_indices=1.9285714285714286, mae_div_steps=4.642857142857144

[14-04-2022_17-53-56] DEBUG :: Experiment >> Refinement spread at run=37, level=3:
Root Mean Squared Errors: rmse_mchild=3.217598666159376, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=2.6505190311418687, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-56] DEBUG :: Experiment >> Refinement spread at run=37, level=2:
Root Mean Squared Errors: rmse_mchild=5.539283604510304, rmse_div_indices=0.3726779962499656, rmse_div_steps=3.1622776601683795
Mean Absolute Errors: mae_mchild=4.371488033298648, mae_div_indices=0.25000000000000044, mae_div_steps=2.0

[14-04-2022_17-53-56] DEBUG :: Experiment >> Refinement spread at run=37, level=1:
Root Mean Squared Errors: rmse_mchild=3.3357639645280996, rmse_div_indices=2.692582403567252, rmse_div_steps=6.7244519455680525
Mean Absolute Errors: mae_mchild=2.722683902739305, mae_div_indices=1.9285714285714286, mae_div_steps=4.500000000000001

[14-04-2022_17-53-56] DEBUG :: Experiment >> Refinement spread at run=38, level=3:
Root Mean Squared Errors: rmse_mchild=2.506738323842649, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=2.1107266435986163, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-56] DEBUG :: Experiment >> Refinement spread at run=38, level=2:
Root Mean Squared Errors: rmse_mchild=5.681809831643696, rmse_div_indices=0.0, rmse_div_steps=3.236081306491266
Mean Absolute Errors: mae_mchild=4.586666666666665, mae_div_indices=0.0, mae_div_steps=1.916666666666667

[14-04-2022_17-53-56] DEBUG :: Experiment >> Refinement spread at run=38, level=1:
Root Mean Squared Errors: rmse_mchild=3.3292917675489777, rmse_div_indices=2.7631360145531443, rmse_div_steps=6.980699014436787
Mean Absolute Errors: mae_mchild=2.849489795918369, mae_div_indices=1.8571428571428579, mae_div_steps=4.57142857142857

[14-04-2022_17-53-56] DEBUG :: Experiment >> Refinement spread at run=39, level=3:
Root Mean Squared Errors: rmse_mchild=2.700121745300824, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=2.1418685121107273, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-56] DEBUG :: Experiment >> Refinement spread at run=39, level=2:
Root Mean Squared Errors: rmse_mchild=9.161432849279192, rmse_div_indices=0.0, rmse_div_steps=6.841458583924596
Mean Absolute Errors: mae_mchild=8.333333333333332, mae_div_indices=0.0, mae_div_steps=4.749999999999999

[14-04-2022_17-53-57] DEBUG :: Experiment >> Refinement spread at run=39, level=1:
Root Mean Squared Errors: rmse_mchild=3.4548841499818663, rmse_div_indices=6.67023713911758, rmse_div_steps=12.7528397086657
Mean Absolute Errors: mae_mchild=3.0535714285714306, mae_div_indices=5.285714285714285, mae_div_steps=10.285714285714288

[14-04-2022_17-53-57] DEBUG :: Experiment >> Refinement spread at run=40, level=3:
Root Mean Squared Errors: rmse_mchild=3.5122129973007485, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=2.806228373702422, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-57] DEBUG :: Experiment >> Refinement spread at run=40, level=2:
Root Mean Squared Errors: rmse_mchild=6.000780386294516, rmse_div_indices=0.3726779962499656, rmse_div_steps=3.1622776601683795
Mean Absolute Errors: mae_mchild=4.920915712799169, mae_div_indices=0.25000000000000044, mae_div_steps=2.0

[14-04-2022_17-53-57] DEBUG :: Experiment >> Refinement spread at run=40, level=1:
Root Mean Squared Errors: rmse_mchild=3.99031864197223, rmse_div_indices=2.692582403567252, rmse_div_steps=6.703173851433341
Mean Absolute Errors: mae_mchild=3.3684210526315743, mae_div_indices=1.9285714285714286, mae_div_steps=4.2142857142857135

[14-04-2022_17-53-57] DEBUG :: Experiment >> Refinement spread at run=41, level=3:
Root Mean Squared Errors: rmse_mchild=1.875908084600232, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=1.4705882352941178, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-57] DEBUG :: Experiment >> Refinement spread at run=41, level=2:
Root Mean Squared Errors: rmse_mchild=8.427512264183479, rmse_div_indices=0.0, rmse_div_steps=5.676462121975466
Mean Absolute Errors: mae_mchild=7.766666666666665, mae_div_indices=0.0, mae_div_steps=3.999999999999999

[14-04-2022_17-53-57] DEBUG :: Experiment >> Refinement spread at run=41, level=1:
Root Mean Squared Errors: rmse_mchild=3.192685358114444, rmse_div_indices=5.6708667907763575, rmse_div_steps=10.642084770098771
Mean Absolute Errors: mae_mchild=2.8571428571428563, mae_div_indices=4.57142857142857, mae_div_steps=8.714285714285714

[14-04-2022_17-53-57] DEBUG :: Experiment >> Refinement spread at run=42, level=3:
Root Mean Squared Errors: rmse_mchild=2.530095666777243, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=2.0138408304498268, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-57] DEBUG :: Experiment >> Refinement spread at run=42, level=2:
Root Mean Squared Errors: rmse_mchild=5.756220467813414, rmse_div_indices=0.0, rmse_div_steps=3.726779962499649
Mean Absolute Errors: mae_mchild=4.619999999999999, mae_div_indices=0.0, mae_div_steps=2.166666666666667

[14-04-2022_17-53-57] DEBUG :: Experiment >> Refinement spread at run=42, level=1:
Root Mean Squared Errors: rmse_mchild=2.6798806324315314, rmse_div_indices=3.3475885658708426, rmse_div_steps=6.787009066112411
Mean Absolute Errors: mae_mchild=2.2155612244897944, mae_div_indices=2.285714285714287, mae_div_steps=4.571428571428572

[14-04-2022_17-53-57] DEBUG :: Experiment >> Refinement spread at run=43, level=3:
Root Mean Squared Errors: rmse_mchild=3.1076421039699516, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=2.4740484429065748, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-57] DEBUG :: Experiment >> Refinement spread at run=43, level=2:
Root Mean Squared Errors: rmse_mchild=5.814600017291147, rmse_div_indices=0.3726779962499656, rmse_div_steps=3.1622776601683795
Mean Absolute Errors: mae_mchild=4.436004162330906, mae_div_indices=0.25000000000000044, mae_div_steps=2.0

[14-04-2022_17-53-57] DEBUG :: Experiment >> Refinement spread at run=43, level=1:
Root Mean Squared Errors: rmse_mchild=2.6551575275009323, rmse_div_indices=2.692582403567252, rmse_div_steps=6.05628363178042
Mean Absolute Errors: mae_mchild=2.237303785780238, mae_div_indices=1.9285714285714286, mae_div_steps=4.214285714285714

[14-04-2022_17-53-57] DEBUG :: Experiment >> Refinement spread at run=44, level=3:
Root Mean Squared Errors: rmse_mchild=1.7578297408804628, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=1.4290657439446366, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-57] DEBUG :: Experiment >> Refinement spread at run=44, level=2:
Root Mean Squared Errors: rmse_mchild=7.062472549930266, rmse_div_indices=0.0, rmse_div_steps=5.676462121975466
Mean Absolute Errors: mae_mchild=6.533333333333331, mae_div_indices=0.0, mae_div_steps=3.999999999999999

[14-04-2022_17-53-58] DEBUG :: Experiment >> Refinement spread at run=44, level=1:
Root Mean Squared Errors: rmse_mchild=3.2047477534535096, rmse_div_indices=5.6708667907763575, rmse_div_steps=10.786528929605035
Mean Absolute Errors: mae_mchild=2.7704081632653077, mae_div_indices=4.57142857142857, mae_div_steps=8.857142857142856

[14-04-2022_17-53-58] DEBUG :: Experiment >> Refinement spread at run=45, level=3:
Root Mean Squared Errors: rmse_mchild=3.130937266393239, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=2.570934256055363, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-58] DEBUG :: Experiment >> Refinement spread at run=45, level=2:
Root Mean Squared Errors: rmse_mchild=5.800355222535622, rmse_div_indices=0.3726779962499656, rmse_div_steps=3.1622776601683795
Mean Absolute Errors: mae_mchild=4.824141519250782, mae_div_indices=0.25000000000000044, mae_div_steps=2.0

[14-04-2022_17-53-58] DEBUG :: Experiment >> Refinement spread at run=45, level=1:
Root Mean Squared Errors: rmse_mchild=2.867012369371835, rmse_div_indices=2.692582403567252, rmse_div_steps=6.05628363178042
Mean Absolute Errors: mae_mchild=2.4746075715604765, mae_div_indices=1.9285714285714286, mae_div_steps=4.214285714285714

[14-04-2022_17-53-58] DEBUG :: Experiment >> Refinement spread at run=46, level=3:
Root Mean Squared Errors: rmse_mchild=2.3084019847468924, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=1.9169550173010383, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-58] DEBUG :: Experiment >> Refinement spread at run=46, level=2:
Root Mean Squared Errors: rmse_mchild=5.824702499626667, rmse_div_indices=0.3726779962499656, rmse_div_steps=3.640054944640259
Mean Absolute Errors: mae_mchild=4.824141519250782, mae_div_indices=0.25000000000000044, mae_div_steps=2.25

[14-04-2022_17-53-58] DEBUG :: Experiment >> Refinement spread at run=46, level=1:
Root Mean Squared Errors: rmse_mchild=2.6396367863409234, rmse_div_indices=3.245876505000504, rmse_div_steps=6.355537518011922
Mean Absolute Errors: mae_mchild=2.280701754385963, mae_div_indices=2.357142857142857, mae_div_steps=4.5

[14-04-2022_17-53-58] DEBUG :: Experiment >> Refinement spread at run=47, level=3:
Root Mean Squared Errors: rmse_mchild=1.8044543117856433, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=1.5467128027681665, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-58] DEBUG :: Experiment >> Refinement spread at run=47, level=2:
Root Mean Squared Errors: rmse_mchild=6.81604860007017, rmse_div_indices=0.0, rmse_div_steps=3.659083066683357
Mean Absolute Errors: mae_mchild=6.166666666666665, mae_div_indices=0.0, mae_div_steps=2.499999999999999

[14-04-2022_17-53-58] DEBUG :: Experiment >> Refinement spread at run=47, level=1:
Root Mean Squared Errors: rmse_mchild=3.421495674856427, rmse_div_indices=3.534411336002572, rmse_div_steps=8.232726023485647
Mean Absolute Errors: mae_mchild=2.982142857142859, mae_div_indices=2.714285714285713, mae_div_steps=6.571428571428572

[14-04-2022_17-53-58] DEBUG :: Experiment >> Refinement spread at run=48, level=3:
Root Mean Squared Errors: rmse_mchild=1.3870383673590112, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=1.134948096885813, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-58] DEBUG :: Experiment >> Refinement spread at run=48, level=2:
Root Mean Squared Errors: rmse_mchild=5.852698016647884, rmse_div_indices=0.0, rmse_div_steps=3.726779962499649
Mean Absolute Errors: mae_mchild=4.686666666666666, mae_div_indices=0.0, mae_div_steps=2.166666666666667

[14-04-2022_17-53-58] DEBUG :: Experiment >> Refinement spread at run=48, level=1:
Root Mean Squared Errors: rmse_mchild=3.399429724083085, rmse_div_indices=3.3475885658708426, rmse_div_steps=7.30731314484506
Mean Absolute Errors: mae_mchild=2.8622448979591857, mae_div_indices=2.285714285714287, mae_div_steps=4.857142857142856

[14-04-2022_17-53-58] DEBUG :: Experiment >> Refinement spread at run=49, level=3:
Root Mean Squared Errors: rmse_mchild=2.077228656824656, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=1.6505190311418687, mae_div_indices=0.0, mae_div_steps=0.0

[14-04-2022_17-53-59] DEBUG :: Experiment >> Refinement spread at run=49, level=2:
Root Mean Squared Errors: rmse_mchild=5.627530070379731, rmse_div_indices=0.3726779962499656, rmse_div_steps=3.1622776601683795
Mean Absolute Errors: mae_mchild=4.339229968782519, mae_div_indices=0.25000000000000044, mae_div_steps=2.0

[14-04-2022_17-53-59] DEBUG :: Experiment >> Refinement spread at run=49, level=1:
Root Mean Squared Errors: rmse_mchild=2.777531537254474, rmse_div_indices=2.692582403567252, rmse_div_steps=5.9970230710149615
Mean Absolute Errors: mae_mchild=2.3240997229916873, mae_div_indices=1.9285714285714286, mae_div_steps=4.071428571428571

[14-04-2022_17-53-59] INFO :: Experiment >> 

   ======================================================   
                    Experimental Results                    
   ======================================================   

     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~     
             Concatenated Plan Level-Wise Means             

      LE     AC  QL_SCORE         GT         ST   OT         TT         LT          CT         WT    MET_PA  TI_SCORE          RSS          VMS     GRADE
0  17.00  17.00  1.000000   1.374097   0.860113  0.0   2.234209   2.234209    2.234209   2.234209  0.000000  1.000000  1257.170391  1259.278047  1.000000
1  30.42  30.42  0.953570   3.579759  82.082850  0.0  85.662609  87.896818   87.896818  87.896818  0.000000  0.812950  1342.882891  1352.338828  0.418364
2  56.42  56.42  0.974906   7.071312   4.374111  0.0  11.445423  93.322364   99.342241  33.141230  0.192371  0.808875  1329.464375  1336.770937  0.788555
3  88.30  88.30  0.963080  16.454542   7.154110  0.0  23.608652  99.840161  122.950893  20.545789  0.332475  0.802673  1362.526406  1374.442578  0.773108

     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~     
      Concatenated Plan Level-Wise Standard Deviation       

         LE        AC  QL_SCORE        GT         ST   OT         TT         LT         CT         WT    MET_PA  TI_SCORE         RSS         VMS     GRADE
0  0.000000  0.000000  0.000000  0.002589   0.278073  0.0   0.278088   0.278088   0.278088   0.278088  0.000000  0.000000  481.530585  483.486803  0.000000
1  0.498569  0.498569  0.015547  0.094723  59.743345  0.0  59.722148  59.734760  59.734760  59.734760  0.000000  0.030020  478.210497  480.257373  0.086266
2  0.498569  0.498569  0.008591  0.073433   0.812084  0.0   0.830478  60.015526  59.887819  19.962601  0.046568  0.027710  480.192805  482.765305  0.027361
3  1.950929  1.950929  0.020924  0.543992   0.923093  0.0   1.345215  60.098129  59.902302   9.983711  0.040915  0.025013  479.117526  481.723260  0.031139

[14-04-2022_17-53-59] INFO :: __main__ >> Saving results to excel file: ./experiments/results/ASH_Excel_2022-04-14_15-59-09_PL1_TS_hcr_online_1_3_2_min_bound_preach_opt.xlsx

[14-04-2022_17-54-04] INFO :: __main__ >> Saving results to data file: ./experiments/results/ASH_Data_2022-04-14_15-59-09_PL1_TS_hcr_online_1_3_2_min_bound_preach_opt.dat

[14-04-2022_17-54-05] INFO :: __main__ >> Saving results to figure file: ./experiments/results/ASH_Figure_2022-04-14_15-59-09_PL1_TS_hcr_online_1_3_2_min_bound_preach_opt.png

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=5.789999999999999.

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[14-04-2022_17-54-05] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=5.789999999999999 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[14-04-2022_17-54-08] INFO :: __main__ >> Overall time: Real = 6898.7769762, Process = 28463.90625

[14-04-2022_17-54-08] INFO :: __main__ >> Exiting with code 0

